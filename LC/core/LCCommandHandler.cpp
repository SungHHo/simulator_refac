#include "LCCommandHandler.h"
#include "LCManager.h"
#include "Serializer.h"
#include <iostream>
#include <vector>
#include <cstring>
#include <cmath>
#include <climits>

namespace LCCommandHandler
{
    using namespace Common;

    // ECC Î™ÖÎ†π Ï≤òÎ¶¨
    void handleECCCommand(const CommonMessage &msg, LCManager &manager)
    {
        switch (msg.commandType)
        {
        case CommandType::STATUS_REQUEST_ECC_TO_LC: {
            static int eccRequestCounter = 0;
            eccRequestCounter++;

            // if (eccRequestCounter % 10 == 0) {
            //     std::cout << "[ECC] STATUS_REQUEST ÏàòÏã† ‚Üí ÏÉÅÌÉú Ï†ÑÏÜ°\n";
            // }
            manager.sendStatus();
            break;
        }
        //0x02
        case CommandType::SET_RADAR_MODE_ECC_TO_LC:
        {
            const auto& payload = std::get<RadarModeCommand>(msg.payload);

            std::cout << "[ECC] Î†àÏù¥Îçî Î™®Îìú Î≥ÄÍ≤Ω ÏàòÏã† ‚Üí "
                    << "radarId=" << payload.radarId
                    << ", mode=" << static_cast<int>(payload.radarMode)
                    << ", priority_select=" << static_cast<int>(payload.priority_select)
                    << ", targetId=" << payload.targetId << "\n";

            // ÏßÅÎ†¨Ìôî Î∞è Ï†ÑÏÜ°
            auto packet = Serializer::serializeRadarModeChange(payload);
            if (manager.hasMFRSender()) {
                manager.sendToMFR(packet);
                std::cout << "Î†àÏù¥ÎçîÏóêÍ≤å Î™®ÎìúÎ≥ÄÍ≤Ω ÏöîÏ≤≠, Ï†ÑÏÜ° Byte : " << packet.size() << "\n";  
            } else {
                std::cerr << "[LCCommandHandler] MFR ÏÜ°Ïã†Ïûê ÏóÜÏùå. Ï†ÑÏÜ° Ïã§Ìå®\n";
            }
            break;
        }
        //0x03
        case CommandType::SET_LAUNCHER_MODE_ECC_TO_LC:
        {
            const auto &payload = std::get<LauncherCommand>(msg.payload);
            std::cout << "[ECC] Î∞úÏÇ¨ÎåÄ Î™®Îìú Î≥ÄÍ≤Ω ÏàòÏã† ‚Üí lsId=" << payload.lsId
                      << ", mode=" << static_cast<int>(payload.lsMode) << "\n";

            LauncherModeCommand cmd;
            cmd.launcherId = payload.lsId;
            cmd.newMode = static_cast<OperationMode>(payload.lsMode);

            auto packet = Serializer::serializeModeChangeCommand(cmd);
            if (manager.hasLSSender())
            {
                manager.sendToLS(packet);
            }
            break;
        }

        case CommandType::FIRE_COMMAND_ECC_TO_LC:
        {
            const auto& payload = std::get<FireCommand>(msg.payload);
            std::cout << "[ECC] Î∞úÏÇ¨ Î™ÖÎ†π ÏàòÏã† ‚Üí lsId=" << payload.lsId
                    << ", targetId=" << payload.targetId << "\n";

            SystemStatus snapshot = manager.getStatusCopy();
            const auto& ls = snapshot.ls;
            const auto& targets = snapshot.targets;

            TargetStatus selectedTarget{};
            bool found = false;

            // ÌÉÄÍ≤ü ÏÑ†ÌÉù
            if (payload.targetId == 0) {
                long long minDistSq = LLONG_MAX;
                for (const auto& t : targets) {
                    long long dx = t.posX - ls.position.x;
                    long long dy = t.posY - ls.position.y;
                    long long distSq = dx * dx + dy * dy;
                    if (distSq < minDistSq) {
                        minDistSq = distSq;
                        selectedTarget = t;
                        found = true;
                    }
                }
            } else {
                for (const auto& t : targets) {
                    if (t.id == payload.targetId) {
                        selectedTarget = t;
                        found = true;
                        break;
                    }
                }
            }

            if (!found) {
                std::cerr << "[LC] ÎåÄÏÉÅ ÌÉÄÍ≤ü ÏóÜÏùå ‚Üí targetId=" << payload.targetId << "\n";
                break;
            }

                // üéØ ÌÉÄÍ≤ü Î∞©ÏúÑÍ∞Å Í≥ÑÏÇ∞ (ÏßÑÎ∂Å Í∏∞Ï§Ä)
            
            double dx_target = static_cast<double>(selectedTarget.posX - ls.position.x);
            double dy_target = static_cast<double>(selectedTarget.posY - ls.position.y);
            
            double theta_math = std::atan2(dy_target, dx_target) * 180.0 / M_PI;
            double targetBearing = 90.0 - theta_math;
            if (targetBearing < 0.0) targetBearing += 360.0;

            std::cout << "[LC] ÌÉÄÍ≤ü ÌòÑÏû¨ Î∞©ÏúÑÍ∞Å (ÏßÑÎ∂Å Í∏∞Ï§Ä): " << targetBearing << "ÎèÑ\n";
            

            LaunchCommand cmd;
            cmd.launcherId = ls.launchSystemId;

            double missileSpeed = 40000.0;
            double targetSpeed = static_cast<double>(selectedTarget.speed);

            // Í±∞Î¶¨ Î∞è Í∞ÅÎèÑ Í≥ÑÏÇ∞
            double dx = static_cast<double>(selectedTarget.posX - ls.position.x);
            double dy = static_cast<double>(selectedTarget.posY - ls.position.y);
            double dist = std::sqrt(dx * dx + dy * dy);

            double bestAngle = -1;
            double bestTime = -1;
            bool interceptFound = false;

            for (int deg = 0; deg <= 180; ++deg) {
                double beta = deg * M_PI / 180.0;

                // A t^2 + B t + C = 0
                double A = targetSpeed * targetSpeed - missileSpeed * missileSpeed;
                double B = 2.0 * dist * missileSpeed * std::cos(beta);
                double C = dist * dist;

                double discriminant = B * B - 4 * A * C;
                if (discriminant < 0)
                    continue;

                double sqrtD = std::sqrt(discriminant);
                double t1 = (-B + sqrtD) / (2 * A);
                double t2 = (-B - sqrtD) / (2 * A);

                double t = (t1 > 0) ? t1 : ((t2 > 0) ? t2 : -1.0);
                if (t <= 0.0)
                    continue;

                // degÎ•º ÏßÑÎ∂Å Í∏∞Ï§Ä Î∞©ÏúÑÍ∞ÅÏúºÎ°ú Î≥ÄÌôò (0¬∞=Î∂Å, ÏãúÍ≥ÑÎ∞©Ìñ•)
                std::cout << "deg: " << deg << ", t: " << t << "\n";
                double bearing = targetBearing + deg;
                if (bearing >= 360.0) bearing -= 360.0;
                if (bearing < 0.0) bearing += 360.0;
                bestAngle = bearing;
                bestTime = t;
                interceptFound = true;
                break;
            }

            if (interceptFound) {
                cmd.launchAngleXY = bestAngle;
                cmd.launchAngleXZ = 0.0;

                std::cout << "[LC] ÏΩîÏÇ¨Ïù∏ Î≤ïÏπô Í∏∞Î∞ò ÏöîÍ≤© Í≥ÑÏÇ∞ Í≤∞Í≥º\n";
                std::cout << "  Ï°∞Ï§Ä Í∞ÅÎèÑ (XY): " << cmd.launchAngleXY << "ÎèÑ (ÏßÑÎ∂Å Í∏∞Ï§Ä)\n";
                std::cout << "  Ï∂îÏ†ï ÏöîÍ≤© ÏãúÍ∞Ñ: " << bestTime << "Ï¥à\n";
            } else {
                // fallback: Ï¥àÍ∏∞ ÏúÑÏπò Í∏∞Ï§Ä ÏßÑÎ∂Å Í∞ÅÎèÑ
                double dx_f = static_cast<double>(selectedTarget.posX - ls.position.x);
                double dy_f = static_cast<double>(selectedTarget.posY - ls.position.y);
                double theta_math = std::atan2(dy_f, dx_f) * 180.0 / M_PI;
                double fallbackAngle = 90.0 - theta_math;
                if (fallbackAngle < 0.0) fallbackAngle += 360.0;

                cmd.launchAngleXY = fallbackAngle;
                cmd.launchAngleXZ = 0.0;
                bestTime = 0.0;

                std::cerr << "[LC] ÏöîÍ≤© Î∂àÍ∞Ä: Ïú†Ìö®Ìïú Í∞ÅÎèÑ/ÏãúÍ∞Ñ ÏóÜÏùå ‚Üí fallback Ï†ÅÏö©\n";
            }

            // ÏßÅÎ†¨Ìôî Î∞è Ï†ÑÏÜ°
            auto packet = Serializer::serializeLaunchCommand(cmd);

            if (manager.hasLSSender()) {
                manager.sendToLS(packet);
            } else {
                std::cerr << "[LC] LS ÏÜ°Ïã†Ïûê ÏóÜÏùå. Ï†ÑÏÜ° Ïã§Ìå®\n";
            }

            std::cout << std::dec;
            std::cout << "------------------------------------------------------" << std::endl;
            std::cout << "Î∞úÏÇ¨Î™ÖÎ†π Ï†ïÎ≥¥\n"
                    << "  lsId: " << cmd.launcherId
                    << ", launchAngleXY: " << cmd.launchAngleXY
                    << ", launchAngleXZ: " << cmd.launchAngleXZ << " (ÎçîÎØ∏Í∞í)\n";
            std::cout << "------------------------------------------------------" << std::endl;
            break;
        }



        //0x05
        case CommandType::MOVE_COMMAND_ECC_TO_LC:
        {
            const auto &payload = std::get<MoveCommand>(msg.payload);
            std::cout << "[ECC] Ïù¥Îèô Î™ÖÎ†π ÏàòÏã† ‚Üí lsId=" << payload.lsId
                      << ", x=" << payload.posX << ", y=" << payload.posY << "\n";

            MoveCommandLS cmd;
            cmd.launcherId = payload.lsId;
            cmd.newX = payload.posX;
            cmd.newY = payload.posY;

            auto packet = Serializer::serializeMoveCommandLS(cmd);
            if (manager.hasLSSender())
            {
                manager.sendToLS(packet);
            }
            break;
        }

        default:
            std::cerr << "[ECC] Ïïå Ïàò ÏóÜÎäî Î™ÖÎ†π\n";
            break;
        }
    }

    // MFR Î™ÖÎ†π Ï≤òÎ¶¨
    void handleMFRCommand(const CommonMessage &msg, LCManager &manager)
    {
        switch (msg.commandType)
        {
        case CommandType::STATUS_RESPONSE_MFR_TO_LC:
            manager.onRadarStatusReceived(std::get<RadarStatus>(msg.payload));
            break;
        case CommandType::DETECTION_MFR_TO_LC:  {
            manager.onRadarDetectionReceived(std::get<RadarDetection>(msg.payload));
            break;
        }
        case CommandType::POSITION_REQUEST_MFR_TO_LC:
        {
            manager.onLCPositionRequest();
            break;
        }
        default:
            std::cerr << "[MFR] Ïïå Ïàò ÏóÜÎäî Î™ÖÎ†π\n";
            break;
        }
    }

    // LS Î™ÖÎ†π Ï≤òÎ¶¨
    void handleLSCommand(const CommonMessage &msg, LCManager &manager)
    {
        switch (msg.commandType)
        {
        case CommandType::LS_STATUS_UPDATE_LS_TO_LC:
        {
            // std::cout <<"data received from LS\n" ;
            const auto &status = std::get<Common::LSReport>(msg.payload);
            manager.onLSStatusReceived(status); // ‚úÖ MFRÏ≤òÎüº ÏúÑÏûÑ Î∞©ÏãùÏúºÎ°ú ÌÜµÏùº
            break;
        }
        default:
            std::cerr << "[LS] Ï≤òÎ¶¨ÎêòÏßÄ ÏïäÏùÄ Î™ÖÎ†π ÏàòÏã†: " << static_cast<int>(msg.commandType) << "\n";
            break;
        }
    }
    // LC ÏúÑÏπò ÏöîÏ≤≠ Ï≤òÎ¶¨
        // void handleLCPositionRequest(LCManager &manager)
        // {
        //     manager.onLCPositionRequest();  // ÎÇ¥Î∂ÄÏóêÏÑú ÏßÅÎ†¨Ìôî, sendToMFR()ÍπåÏßÄ Ï≤òÎ¶¨
        // }
        // ÌÜµÌï© Î™ÖÎ†π Ï≤òÎ¶¨ ÏßÑÏûÖÏ†ê
        void handleCommand(SenderType sender, const CommonMessage &msg, LCManager &manager)
        {
            switch (sender)
            {
            case SenderType::ECC:
                handleECCCommand(msg, manager);
                break;
            case SenderType::MFR:
                handleMFRCommand(msg, manager);
                break;
            case SenderType::LS:
                handleLSCommand(msg, manager);
                break;
            default:
                std::cerr << "[LCCommandHandler] Ïïå Ïàò ÏóÜÎäî ÏÜ°Ïã†Ïûê\n";
                break;
            }
        }


    // void handleLSCommand(const CommonMessage& msg, LCManager& manager) {
    //     switch (msg.commandType) {
    //     case CommandType::SET_LAUNCHER_MODE: {  // 0x03
    //         const auto& payload = std::get<LauncherCommand>(msg.payload);
    //         std::cout << "[ECC] Î∞úÏÇ¨ÎåÄ Î™®Îìú Î≥ÄÍ≤Ω ÏàòÏã† ‚Üí lsId=" << payload.lsId
    //                 << ", mode=" << static_cast<int>(payload.lsMode) << "\n";

    //         LSStatus status = manager.getStatusCopy().ls;
    //         status.lsId = payload.lsId;
    //         status.mode = payload.lsMode;
    //         // manager.updateStatus(status);
    //         break;
    //     }
    //     case CommandType::FIRE_COMMAND: {
    //         const auto& payload = std::get<FireCommand>(msg.payload);
    //         std::cout << "[LS] Î∞úÏÇ¨ Î™ÖÎ†π: lsId=" << payload.lsId
    //                   << ", targetId=" << payload.targetId << "\n";
    //         // Ïã§Ï†ú Î∞úÏÇ¨ Î°úÏßÅ ÌïÑÏöîÏãú Ï∂îÍ∞Ä
    //         break;
    //     }
    //     case CommandType::MOVE_COMMAND: {
    //         const auto& payload = std::get<MoveCommand>(msg.payload);
    //         std::cout << "[LS] Ïù¥Îèô Î™ÖÎ†π: lsId=" << payload.lsId
    //                   << ", x=" << payload.posX << ", y=" << payload.posY << "\n";
    //         // Ïã§Ï†ú Ïù¥Îèô Î°úÏßÅ ÌïÑÏöîÏãú Ï∂îÍ∞Ä
    //         break;
    //     }
    //     case CommandType::STATUS_REQUEST:
    //         std::cout << "[LS] ÏÉÅÌÉú ÏöîÏ≤≠ ÏàòÏã† ‚Üí ÏùëÎãµ Ï†ÑÏÜ°\n";
    //         manager.sendStatus();
    //         break;
    //     default:
    //         std::cerr << "[LS] Ïïå Ïàò ÏóÜÎäî Î™ÖÎ†π ÏàòÏã†\n";
    //         break;
    //     }
    // }

  

} // namespace LCCommandHandler