
controlStepMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3fc  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800c6d0  0800c6d0  0000d6d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800caf4  0800caf4  0000daf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cafc  0800cafc  0000dafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800cb00  0800cb00  0000db00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f0  24000000  0800cb04  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a8  240001f0  0800ccf4  0000e1f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000598  0800ccf4  0000e598  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e1f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017b75  00000000  00000000  0000e21e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b0c  00000000  00000000  00025d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001218  00000000  00000000  000288a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e20  00000000  00000000  00029ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000343a0  00000000  00000000  0002a8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000197a5  00000000  00000000  0005ec78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001507a3  00000000  00000000  0007841d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c8bc0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d1c  00000000  00000000  001c8c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004b  00000000  00000000  001ce920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001f0 	.word	0x240001f0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c6b4 	.word	0x0800c6b4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001f4 	.word	0x240001f4
 800030c:	0800c6b4 	.word	0x0800c6b4

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <__aeabi_drsub>:
 80003d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003d4:	e002      	b.n	80003dc <__adddf3>
 80003d6:	bf00      	nop

080003d8 <__aeabi_dsub>:
 80003d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003dc <__adddf3>:
 80003dc:	b530      	push	{r4, r5, lr}
 80003de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	bf1f      	itttt	ne
 80003f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000402:	f000 80e2 	beq.w	80005ca <__adddf3+0x1ee>
 8000406:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800040a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800040e:	bfb8      	it	lt
 8000410:	426d      	neglt	r5, r5
 8000412:	dd0c      	ble.n	800042e <__adddf3+0x52>
 8000414:	442c      	add	r4, r5
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	ea82 0000 	eor.w	r0, r2, r0
 8000422:	ea83 0101 	eor.w	r1, r3, r1
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	2d36      	cmp	r5, #54	@ 0x36
 8000430:	bf88      	it	hi
 8000432:	bd30      	pophi	{r4, r5, pc}
 8000434:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000438:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800043c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000440:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000444:	d002      	beq.n	800044c <__adddf3+0x70>
 8000446:	4240      	negs	r0, r0
 8000448:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800044c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000450:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000454:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000458:	d002      	beq.n	8000460 <__adddf3+0x84>
 800045a:	4252      	negs	r2, r2
 800045c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000460:	ea94 0f05 	teq	r4, r5
 8000464:	f000 80a7 	beq.w	80005b6 <__adddf3+0x1da>
 8000468:	f1a4 0401 	sub.w	r4, r4, #1
 800046c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000470:	db0d      	blt.n	800048e <__adddf3+0xb2>
 8000472:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000476:	fa22 f205 	lsr.w	r2, r2, r5
 800047a:	1880      	adds	r0, r0, r2
 800047c:	f141 0100 	adc.w	r1, r1, #0
 8000480:	fa03 f20e 	lsl.w	r2, r3, lr
 8000484:	1880      	adds	r0, r0, r2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	4159      	adcs	r1, r3
 800048c:	e00e      	b.n	80004ac <__adddf3+0xd0>
 800048e:	f1a5 0520 	sub.w	r5, r5, #32
 8000492:	f10e 0e20 	add.w	lr, lr, #32
 8000496:	2a01      	cmp	r2, #1
 8000498:	fa03 fc0e 	lsl.w	ip, r3, lr
 800049c:	bf28      	it	cs
 800049e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004a2:	fa43 f305 	asr.w	r3, r3, r5
 80004a6:	18c0      	adds	r0, r0, r3
 80004a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004b0:	d507      	bpl.n	80004c2 <__adddf3+0xe6>
 80004b2:	f04f 0e00 	mov.w	lr, #0
 80004b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004be:	eb6e 0101 	sbc.w	r1, lr, r1
 80004c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004c6:	d31b      	bcc.n	8000500 <__adddf3+0x124>
 80004c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004cc:	d30c      	bcc.n	80004e8 <__adddf3+0x10c>
 80004ce:	0849      	lsrs	r1, r1, #1
 80004d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004d8:	f104 0401 	add.w	r4, r4, #1
 80004dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004e4:	f080 809a 	bcs.w	800061c <__adddf3+0x240>
 80004e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ec:	bf08      	it	eq
 80004ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004f2:	f150 0000 	adcs.w	r0, r0, #0
 80004f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004fa:	ea41 0105 	orr.w	r1, r1, r5
 80004fe:	bd30      	pop	{r4, r5, pc}
 8000500:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000504:	4140      	adcs	r0, r0
 8000506:	eb41 0101 	adc.w	r1, r1, r1
 800050a:	3c01      	subs	r4, #1
 800050c:	bf28      	it	cs
 800050e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000512:	d2e9      	bcs.n	80004e8 <__adddf3+0x10c>
 8000514:	f091 0f00 	teq	r1, #0
 8000518:	bf04      	itt	eq
 800051a:	4601      	moveq	r1, r0
 800051c:	2000      	moveq	r0, #0
 800051e:	fab1 f381 	clz	r3, r1
 8000522:	bf08      	it	eq
 8000524:	3320      	addeq	r3, #32
 8000526:	f1a3 030b 	sub.w	r3, r3, #11
 800052a:	f1b3 0220 	subs.w	r2, r3, #32
 800052e:	da0c      	bge.n	800054a <__adddf3+0x16e>
 8000530:	320c      	adds	r2, #12
 8000532:	dd08      	ble.n	8000546 <__adddf3+0x16a>
 8000534:	f102 0c14 	add.w	ip, r2, #20
 8000538:	f1c2 020c 	rsb	r2, r2, #12
 800053c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000540:	fa21 f102 	lsr.w	r1, r1, r2
 8000544:	e00c      	b.n	8000560 <__adddf3+0x184>
 8000546:	f102 0214 	add.w	r2, r2, #20
 800054a:	bfd8      	it	le
 800054c:	f1c2 0c20 	rsble	ip, r2, #32
 8000550:	fa01 f102 	lsl.w	r1, r1, r2
 8000554:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000558:	bfdc      	itt	le
 800055a:	ea41 010c 	orrle.w	r1, r1, ip
 800055e:	4090      	lslle	r0, r2
 8000560:	1ae4      	subs	r4, r4, r3
 8000562:	bfa2      	ittt	ge
 8000564:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000568:	4329      	orrge	r1, r5
 800056a:	bd30      	popge	{r4, r5, pc}
 800056c:	ea6f 0404 	mvn.w	r4, r4
 8000570:	3c1f      	subs	r4, #31
 8000572:	da1c      	bge.n	80005ae <__adddf3+0x1d2>
 8000574:	340c      	adds	r4, #12
 8000576:	dc0e      	bgt.n	8000596 <__adddf3+0x1ba>
 8000578:	f104 0414 	add.w	r4, r4, #20
 800057c:	f1c4 0220 	rsb	r2, r4, #32
 8000580:	fa20 f004 	lsr.w	r0, r0, r4
 8000584:	fa01 f302 	lsl.w	r3, r1, r2
 8000588:	ea40 0003 	orr.w	r0, r0, r3
 800058c:	fa21 f304 	lsr.w	r3, r1, r4
 8000590:	ea45 0103 	orr.w	r1, r5, r3
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f1c4 040c 	rsb	r4, r4, #12
 800059a:	f1c4 0220 	rsb	r2, r4, #32
 800059e:	fa20 f002 	lsr.w	r0, r0, r2
 80005a2:	fa01 f304 	lsl.w	r3, r1, r4
 80005a6:	ea40 0003 	orr.w	r0, r0, r3
 80005aa:	4629      	mov	r1, r5
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	fa21 f004 	lsr.w	r0, r1, r4
 80005b2:	4629      	mov	r1, r5
 80005b4:	bd30      	pop	{r4, r5, pc}
 80005b6:	f094 0f00 	teq	r4, #0
 80005ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005be:	bf06      	itte	eq
 80005c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005c4:	3401      	addeq	r4, #1
 80005c6:	3d01      	subne	r5, #1
 80005c8:	e74e      	b.n	8000468 <__adddf3+0x8c>
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf18      	it	ne
 80005d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005d4:	d029      	beq.n	800062a <__adddf3+0x24e>
 80005d6:	ea94 0f05 	teq	r4, r5
 80005da:	bf08      	it	eq
 80005dc:	ea90 0f02 	teqeq	r0, r2
 80005e0:	d005      	beq.n	80005ee <__adddf3+0x212>
 80005e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005e6:	bf04      	itt	eq
 80005e8:	4619      	moveq	r1, r3
 80005ea:	4610      	moveq	r0, r2
 80005ec:	bd30      	pop	{r4, r5, pc}
 80005ee:	ea91 0f03 	teq	r1, r3
 80005f2:	bf1e      	ittt	ne
 80005f4:	2100      	movne	r1, #0
 80005f6:	2000      	movne	r0, #0
 80005f8:	bd30      	popne	{r4, r5, pc}
 80005fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005fe:	d105      	bne.n	800060c <__adddf3+0x230>
 8000600:	0040      	lsls	r0, r0, #1
 8000602:	4149      	adcs	r1, r1
 8000604:	bf28      	it	cs
 8000606:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800060a:	bd30      	pop	{r4, r5, pc}
 800060c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000610:	bf3c      	itt	cc
 8000612:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000616:	bd30      	popcc	{r4, r5, pc}
 8000618:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800061c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000620:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062e:	bf1a      	itte	ne
 8000630:	4619      	movne	r1, r3
 8000632:	4610      	movne	r0, r2
 8000634:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000638:	bf1c      	itt	ne
 800063a:	460b      	movne	r3, r1
 800063c:	4602      	movne	r2, r0
 800063e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000642:	bf06      	itte	eq
 8000644:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000648:	ea91 0f03 	teqeq	r1, r3
 800064c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	bf00      	nop

08000654 <__aeabi_ui2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f04f 0500 	mov.w	r5, #0
 800066c:	f04f 0100 	mov.w	r1, #0
 8000670:	e750      	b.n	8000514 <__adddf3+0x138>
 8000672:	bf00      	nop

08000674 <__aeabi_i2d>:
 8000674:	f090 0f00 	teq	r0, #0
 8000678:	bf04      	itt	eq
 800067a:	2100      	moveq	r1, #0
 800067c:	4770      	bxeq	lr
 800067e:	b530      	push	{r4, r5, lr}
 8000680:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000684:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000688:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800068c:	bf48      	it	mi
 800068e:	4240      	negmi	r0, r0
 8000690:	f04f 0100 	mov.w	r1, #0
 8000694:	e73e      	b.n	8000514 <__adddf3+0x138>
 8000696:	bf00      	nop

08000698 <__aeabi_f2d>:
 8000698:	0042      	lsls	r2, r0, #1
 800069a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800069e:	ea4f 0131 	mov.w	r1, r1, rrx
 80006a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006a6:	bf1f      	itttt	ne
 80006a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006b4:	4770      	bxne	lr
 80006b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ba:	bf08      	it	eq
 80006bc:	4770      	bxeq	lr
 80006be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006c2:	bf04      	itt	eq
 80006c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	e71c      	b.n	8000514 <__adddf3+0x138>
 80006da:	bf00      	nop

080006dc <__aeabi_ul2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f04f 0500 	mov.w	r5, #0
 80006ea:	e00a      	b.n	8000702 <__aeabi_l2d+0x16>

080006ec <__aeabi_l2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006fa:	d502      	bpl.n	8000702 <__aeabi_l2d+0x16>
 80006fc:	4240      	negs	r0, r0
 80006fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000702:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000706:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800070a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800070e:	f43f aed8 	beq.w	80004c2 <__adddf3+0xe6>
 8000712:	f04f 0203 	mov.w	r2, #3
 8000716:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071a:	bf18      	it	ne
 800071c:	3203      	addne	r2, #3
 800071e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000722:	bf18      	it	ne
 8000724:	3203      	addne	r2, #3
 8000726:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800072a:	f1c2 0320 	rsb	r3, r2, #32
 800072e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000732:	fa20 f002 	lsr.w	r0, r0, r2
 8000736:	fa01 fe03 	lsl.w	lr, r1, r3
 800073a:	ea40 000e 	orr.w	r0, r0, lr
 800073e:	fa21 f102 	lsr.w	r1, r1, r2
 8000742:	4414      	add	r4, r2
 8000744:	e6bd      	b.n	80004c2 <__adddf3+0xe6>
 8000746:	bf00      	nop

08000748 <__aeabi_uldivmod>:
 8000748:	b953      	cbnz	r3, 8000760 <__aeabi_uldivmod+0x18>
 800074a:	b94a      	cbnz	r2, 8000760 <__aeabi_uldivmod+0x18>
 800074c:	2900      	cmp	r1, #0
 800074e:	bf08      	it	eq
 8000750:	2800      	cmpeq	r0, #0
 8000752:	bf1c      	itt	ne
 8000754:	f04f 31ff 	movne.w	r1, #4294967295
 8000758:	f04f 30ff 	movne.w	r0, #4294967295
 800075c:	f000 b9c0 	b.w	8000ae0 <__aeabi_idiv0>
 8000760:	f1ad 0c08 	sub.w	ip, sp, #8
 8000764:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000768:	f000 f83e 	bl	80007e8 <__udivmoddi4>
 800076c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000774:	b004      	add	sp, #16
 8000776:	4770      	bx	lr

08000778 <__aeabi_d2lz>:
 8000778:	b508      	push	{r3, lr}
 800077a:	4602      	mov	r2, r0
 800077c:	460b      	mov	r3, r1
 800077e:	ec43 2b17 	vmov	d7, r2, r3
 8000782:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078a:	d403      	bmi.n	8000794 <__aeabi_d2lz+0x1c>
 800078c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000790:	f000 b80a 	b.w	80007a8 <__aeabi_d2ulz>
 8000794:	eeb1 7b47 	vneg.f64	d7, d7
 8000798:	ec51 0b17 	vmov	r0, r1, d7
 800079c:	f000 f804 	bl	80007a8 <__aeabi_d2ulz>
 80007a0:	4240      	negs	r0, r0
 80007a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a6:	bd08      	pop	{r3, pc}

080007a8 <__aeabi_d2ulz>:
 80007a8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007d8 <__aeabi_d2ulz+0x30>
 80007ac:	ec41 0b17 	vmov	d7, r0, r1
 80007b0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007e0 <__aeabi_d2ulz+0x38>
 80007b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007b8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007bc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007c0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007c4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007c8:	ee16 1a10 	vmov	r1, s12
 80007cc:	ee17 0a90 	vmov	r0, s15
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	f3af 8000 	nop.w
 80007d8:	00000000 	.word	0x00000000
 80007dc:	3df00000 	.word	0x3df00000
 80007e0:	00000000 	.word	0x00000000
 80007e4:	41f00000 	.word	0x41f00000

080007e8 <__udivmoddi4>:
 80007e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ec:	9d08      	ldr	r5, [sp, #32]
 80007ee:	468e      	mov	lr, r1
 80007f0:	4604      	mov	r4, r0
 80007f2:	4688      	mov	r8, r1
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d14a      	bne.n	800088e <__udivmoddi4+0xa6>
 80007f8:	428a      	cmp	r2, r1
 80007fa:	4617      	mov	r7, r2
 80007fc:	d962      	bls.n	80008c4 <__udivmoddi4+0xdc>
 80007fe:	fab2 f682 	clz	r6, r2
 8000802:	b14e      	cbz	r6, 8000818 <__udivmoddi4+0x30>
 8000804:	f1c6 0320 	rsb	r3, r6, #32
 8000808:	fa01 f806 	lsl.w	r8, r1, r6
 800080c:	fa20 f303 	lsr.w	r3, r0, r3
 8000810:	40b7      	lsls	r7, r6
 8000812:	ea43 0808 	orr.w	r8, r3, r8
 8000816:	40b4      	lsls	r4, r6
 8000818:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800081c:	fa1f fc87 	uxth.w	ip, r7
 8000820:	fbb8 f1fe 	udiv	r1, r8, lr
 8000824:	0c23      	lsrs	r3, r4, #16
 8000826:	fb0e 8811 	mls	r8, lr, r1, r8
 800082a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800082e:	fb01 f20c 	mul.w	r2, r1, ip
 8000832:	429a      	cmp	r2, r3
 8000834:	d909      	bls.n	800084a <__udivmoddi4+0x62>
 8000836:	18fb      	adds	r3, r7, r3
 8000838:	f101 30ff 	add.w	r0, r1, #4294967295
 800083c:	f080 80ea 	bcs.w	8000a14 <__udivmoddi4+0x22c>
 8000840:	429a      	cmp	r2, r3
 8000842:	f240 80e7 	bls.w	8000a14 <__udivmoddi4+0x22c>
 8000846:	3902      	subs	r1, #2
 8000848:	443b      	add	r3, r7
 800084a:	1a9a      	subs	r2, r3, r2
 800084c:	b2a3      	uxth	r3, r4
 800084e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000852:	fb0e 2210 	mls	r2, lr, r0, r2
 8000856:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800085a:	fb00 fc0c 	mul.w	ip, r0, ip
 800085e:	459c      	cmp	ip, r3
 8000860:	d909      	bls.n	8000876 <__udivmoddi4+0x8e>
 8000862:	18fb      	adds	r3, r7, r3
 8000864:	f100 32ff 	add.w	r2, r0, #4294967295
 8000868:	f080 80d6 	bcs.w	8000a18 <__udivmoddi4+0x230>
 800086c:	459c      	cmp	ip, r3
 800086e:	f240 80d3 	bls.w	8000a18 <__udivmoddi4+0x230>
 8000872:	443b      	add	r3, r7
 8000874:	3802      	subs	r0, #2
 8000876:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800087a:	eba3 030c 	sub.w	r3, r3, ip
 800087e:	2100      	movs	r1, #0
 8000880:	b11d      	cbz	r5, 800088a <__udivmoddi4+0xa2>
 8000882:	40f3      	lsrs	r3, r6
 8000884:	2200      	movs	r2, #0
 8000886:	e9c5 3200 	strd	r3, r2, [r5]
 800088a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088e:	428b      	cmp	r3, r1
 8000890:	d905      	bls.n	800089e <__udivmoddi4+0xb6>
 8000892:	b10d      	cbz	r5, 8000898 <__udivmoddi4+0xb0>
 8000894:	e9c5 0100 	strd	r0, r1, [r5]
 8000898:	2100      	movs	r1, #0
 800089a:	4608      	mov	r0, r1
 800089c:	e7f5      	b.n	800088a <__udivmoddi4+0xa2>
 800089e:	fab3 f183 	clz	r1, r3
 80008a2:	2900      	cmp	r1, #0
 80008a4:	d146      	bne.n	8000934 <__udivmoddi4+0x14c>
 80008a6:	4573      	cmp	r3, lr
 80008a8:	d302      	bcc.n	80008b0 <__udivmoddi4+0xc8>
 80008aa:	4282      	cmp	r2, r0
 80008ac:	f200 8105 	bhi.w	8000aba <__udivmoddi4+0x2d2>
 80008b0:	1a84      	subs	r4, r0, r2
 80008b2:	eb6e 0203 	sbc.w	r2, lr, r3
 80008b6:	2001      	movs	r0, #1
 80008b8:	4690      	mov	r8, r2
 80008ba:	2d00      	cmp	r5, #0
 80008bc:	d0e5      	beq.n	800088a <__udivmoddi4+0xa2>
 80008be:	e9c5 4800 	strd	r4, r8, [r5]
 80008c2:	e7e2      	b.n	800088a <__udivmoddi4+0xa2>
 80008c4:	2a00      	cmp	r2, #0
 80008c6:	f000 8090 	beq.w	80009ea <__udivmoddi4+0x202>
 80008ca:	fab2 f682 	clz	r6, r2
 80008ce:	2e00      	cmp	r6, #0
 80008d0:	f040 80a4 	bne.w	8000a1c <__udivmoddi4+0x234>
 80008d4:	1a8a      	subs	r2, r1, r2
 80008d6:	0c03      	lsrs	r3, r0, #16
 80008d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008dc:	b280      	uxth	r0, r0
 80008de:	b2bc      	uxth	r4, r7
 80008e0:	2101      	movs	r1, #1
 80008e2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008e6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ee:	fb04 f20c 	mul.w	r2, r4, ip
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d907      	bls.n	8000906 <__udivmoddi4+0x11e>
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008fc:	d202      	bcs.n	8000904 <__udivmoddi4+0x11c>
 80008fe:	429a      	cmp	r2, r3
 8000900:	f200 80e0 	bhi.w	8000ac4 <__udivmoddi4+0x2dc>
 8000904:	46c4      	mov	ip, r8
 8000906:	1a9b      	subs	r3, r3, r2
 8000908:	fbb3 f2fe 	udiv	r2, r3, lr
 800090c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000910:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000914:	fb02 f404 	mul.w	r4, r2, r4
 8000918:	429c      	cmp	r4, r3
 800091a:	d907      	bls.n	800092c <__udivmoddi4+0x144>
 800091c:	18fb      	adds	r3, r7, r3
 800091e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000922:	d202      	bcs.n	800092a <__udivmoddi4+0x142>
 8000924:	429c      	cmp	r4, r3
 8000926:	f200 80ca 	bhi.w	8000abe <__udivmoddi4+0x2d6>
 800092a:	4602      	mov	r2, r0
 800092c:	1b1b      	subs	r3, r3, r4
 800092e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000932:	e7a5      	b.n	8000880 <__udivmoddi4+0x98>
 8000934:	f1c1 0620 	rsb	r6, r1, #32
 8000938:	408b      	lsls	r3, r1
 800093a:	fa22 f706 	lsr.w	r7, r2, r6
 800093e:	431f      	orrs	r7, r3
 8000940:	fa0e f401 	lsl.w	r4, lr, r1
 8000944:	fa20 f306 	lsr.w	r3, r0, r6
 8000948:	fa2e fe06 	lsr.w	lr, lr, r6
 800094c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000950:	4323      	orrs	r3, r4
 8000952:	fa00 f801 	lsl.w	r8, r0, r1
 8000956:	fa1f fc87 	uxth.w	ip, r7
 800095a:	fbbe f0f9 	udiv	r0, lr, r9
 800095e:	0c1c      	lsrs	r4, r3, #16
 8000960:	fb09 ee10 	mls	lr, r9, r0, lr
 8000964:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000968:	fb00 fe0c 	mul.w	lr, r0, ip
 800096c:	45a6      	cmp	lr, r4
 800096e:	fa02 f201 	lsl.w	r2, r2, r1
 8000972:	d909      	bls.n	8000988 <__udivmoddi4+0x1a0>
 8000974:	193c      	adds	r4, r7, r4
 8000976:	f100 3aff 	add.w	sl, r0, #4294967295
 800097a:	f080 809c 	bcs.w	8000ab6 <__udivmoddi4+0x2ce>
 800097e:	45a6      	cmp	lr, r4
 8000980:	f240 8099 	bls.w	8000ab6 <__udivmoddi4+0x2ce>
 8000984:	3802      	subs	r0, #2
 8000986:	443c      	add	r4, r7
 8000988:	eba4 040e 	sub.w	r4, r4, lr
 800098c:	fa1f fe83 	uxth.w	lr, r3
 8000990:	fbb4 f3f9 	udiv	r3, r4, r9
 8000994:	fb09 4413 	mls	r4, r9, r3, r4
 8000998:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800099c:	fb03 fc0c 	mul.w	ip, r3, ip
 80009a0:	45a4      	cmp	ip, r4
 80009a2:	d908      	bls.n	80009b6 <__udivmoddi4+0x1ce>
 80009a4:	193c      	adds	r4, r7, r4
 80009a6:	f103 3eff 	add.w	lr, r3, #4294967295
 80009aa:	f080 8082 	bcs.w	8000ab2 <__udivmoddi4+0x2ca>
 80009ae:	45a4      	cmp	ip, r4
 80009b0:	d97f      	bls.n	8000ab2 <__udivmoddi4+0x2ca>
 80009b2:	3b02      	subs	r3, #2
 80009b4:	443c      	add	r4, r7
 80009b6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009ba:	eba4 040c 	sub.w	r4, r4, ip
 80009be:	fba0 ec02 	umull	lr, ip, r0, r2
 80009c2:	4564      	cmp	r4, ip
 80009c4:	4673      	mov	r3, lr
 80009c6:	46e1      	mov	r9, ip
 80009c8:	d362      	bcc.n	8000a90 <__udivmoddi4+0x2a8>
 80009ca:	d05f      	beq.n	8000a8c <__udivmoddi4+0x2a4>
 80009cc:	b15d      	cbz	r5, 80009e6 <__udivmoddi4+0x1fe>
 80009ce:	ebb8 0203 	subs.w	r2, r8, r3
 80009d2:	eb64 0409 	sbc.w	r4, r4, r9
 80009d6:	fa04 f606 	lsl.w	r6, r4, r6
 80009da:	fa22 f301 	lsr.w	r3, r2, r1
 80009de:	431e      	orrs	r6, r3
 80009e0:	40cc      	lsrs	r4, r1
 80009e2:	e9c5 6400 	strd	r6, r4, [r5]
 80009e6:	2100      	movs	r1, #0
 80009e8:	e74f      	b.n	800088a <__udivmoddi4+0xa2>
 80009ea:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ee:	0c01      	lsrs	r1, r0, #16
 80009f0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009f4:	b280      	uxth	r0, r0
 80009f6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009fa:	463b      	mov	r3, r7
 80009fc:	4638      	mov	r0, r7
 80009fe:	463c      	mov	r4, r7
 8000a00:	46b8      	mov	r8, r7
 8000a02:	46be      	mov	lr, r7
 8000a04:	2620      	movs	r6, #32
 8000a06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a0a:	eba2 0208 	sub.w	r2, r2, r8
 8000a0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a12:	e766      	b.n	80008e2 <__udivmoddi4+0xfa>
 8000a14:	4601      	mov	r1, r0
 8000a16:	e718      	b.n	800084a <__udivmoddi4+0x62>
 8000a18:	4610      	mov	r0, r2
 8000a1a:	e72c      	b.n	8000876 <__udivmoddi4+0x8e>
 8000a1c:	f1c6 0220 	rsb	r2, r6, #32
 8000a20:	fa2e f302 	lsr.w	r3, lr, r2
 8000a24:	40b7      	lsls	r7, r6
 8000a26:	40b1      	lsls	r1, r6
 8000a28:	fa20 f202 	lsr.w	r2, r0, r2
 8000a2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a30:	430a      	orrs	r2, r1
 8000a32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a36:	b2bc      	uxth	r4, r7
 8000a38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a3c:	0c11      	lsrs	r1, r2, #16
 8000a3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a42:	fb08 f904 	mul.w	r9, r8, r4
 8000a46:	40b0      	lsls	r0, r6
 8000a48:	4589      	cmp	r9, r1
 8000a4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a4e:	b280      	uxth	r0, r0
 8000a50:	d93e      	bls.n	8000ad0 <__udivmoddi4+0x2e8>
 8000a52:	1879      	adds	r1, r7, r1
 8000a54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a58:	d201      	bcs.n	8000a5e <__udivmoddi4+0x276>
 8000a5a:	4589      	cmp	r9, r1
 8000a5c:	d81f      	bhi.n	8000a9e <__udivmoddi4+0x2b6>
 8000a5e:	eba1 0109 	sub.w	r1, r1, r9
 8000a62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a66:	fb09 f804 	mul.w	r8, r9, r4
 8000a6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a6e:	b292      	uxth	r2, r2
 8000a70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a74:	4542      	cmp	r2, r8
 8000a76:	d229      	bcs.n	8000acc <__udivmoddi4+0x2e4>
 8000a78:	18ba      	adds	r2, r7, r2
 8000a7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a7e:	d2c4      	bcs.n	8000a0a <__udivmoddi4+0x222>
 8000a80:	4542      	cmp	r2, r8
 8000a82:	d2c2      	bcs.n	8000a0a <__udivmoddi4+0x222>
 8000a84:	f1a9 0102 	sub.w	r1, r9, #2
 8000a88:	443a      	add	r2, r7
 8000a8a:	e7be      	b.n	8000a0a <__udivmoddi4+0x222>
 8000a8c:	45f0      	cmp	r8, lr
 8000a8e:	d29d      	bcs.n	80009cc <__udivmoddi4+0x1e4>
 8000a90:	ebbe 0302 	subs.w	r3, lr, r2
 8000a94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a98:	3801      	subs	r0, #1
 8000a9a:	46e1      	mov	r9, ip
 8000a9c:	e796      	b.n	80009cc <__udivmoddi4+0x1e4>
 8000a9e:	eba7 0909 	sub.w	r9, r7, r9
 8000aa2:	4449      	add	r1, r9
 8000aa4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000aa8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aac:	fb09 f804 	mul.w	r8, r9, r4
 8000ab0:	e7db      	b.n	8000a6a <__udivmoddi4+0x282>
 8000ab2:	4673      	mov	r3, lr
 8000ab4:	e77f      	b.n	80009b6 <__udivmoddi4+0x1ce>
 8000ab6:	4650      	mov	r0, sl
 8000ab8:	e766      	b.n	8000988 <__udivmoddi4+0x1a0>
 8000aba:	4608      	mov	r0, r1
 8000abc:	e6fd      	b.n	80008ba <__udivmoddi4+0xd2>
 8000abe:	443b      	add	r3, r7
 8000ac0:	3a02      	subs	r2, #2
 8000ac2:	e733      	b.n	800092c <__udivmoddi4+0x144>
 8000ac4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ac8:	443b      	add	r3, r7
 8000aca:	e71c      	b.n	8000906 <__udivmoddi4+0x11e>
 8000acc:	4649      	mov	r1, r9
 8000ace:	e79c      	b.n	8000a0a <__udivmoddi4+0x222>
 8000ad0:	eba1 0109 	sub.w	r1, r1, r9
 8000ad4:	46c4      	mov	ip, r8
 8000ad6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ada:	fb09 f804 	mul.w	r8, r9, r4
 8000ade:	e7c4      	b.n	8000a6a <__udivmoddi4+0x282>

08000ae0 <__aeabi_idiv0>:
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ae8:	f000 fc16 	bl	8001318 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aec:	f001 f870 	bl	8001bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af0:	f000 f86c 	bl	8000bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af4:	f000 f9d4 	bl	8000ea0 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000af8:	f000 f950 	bl	8000d9c <MX_TIM6_Init>
  MX_UART9_Init();
 8000afc:	f000 f984 	bl	8000e08 <MX_UART9_Init>
  MX_TIM2_Init();
 8000b00:	f000 f8d4 	bl	8000cac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart9, &rx_byte, 1);
 8000b04:	2201      	movs	r2, #1
 8000b06:	4927      	ldr	r1, [pc, #156]	@ (8000ba4 <main+0xc0>)
 8000b08:	4827      	ldr	r0, [pc, #156]	@ (8000ba8 <main+0xc4>)
 8000b0a:	f006 fb21 	bl	8007150 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);  // PWM + Interrupt
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4826      	ldr	r0, [pc, #152]	@ (8000bac <main+0xc8>)
 8000b12:	f004 ffb7 	bl	8005a84 <HAL_TIM_PWM_Start_IT>

  pwm_freq = (STEP_PER_REV * target_rpm) / 60;  // 예: 200 * 60 / 60 = 200Hz
 8000b16:	4b26      	ldr	r3, [pc, #152]	@ (8000bb0 <main+0xcc>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8000b1e:	fb02 f303 	mul.w	r3, r2, r3
 8000b22:	4a24      	ldr	r2, [pc, #144]	@ (8000bb4 <main+0xd0>)
 8000b24:	fba2 2303 	umull	r2, r3, r2, r3
 8000b28:	095b      	lsrs	r3, r3, #5
 8000b2a:	4a23      	ldr	r2, [pc, #140]	@ (8000bb8 <main+0xd4>)
 8000b2c:	6013      	str	r3, [r2, #0]
  // 주기 및 듀티 계산 (prescaler = 63일 경우, clk = 170MHz / 64 = 2.65625MHz)
  pwm_period = (2656250 / pwm_freq) - 1;  // 예: 2.65625MHz / 200Hz = 13281
 8000b2e:	4b22      	ldr	r3, [pc, #136]	@ (8000bb8 <main+0xd4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a22      	ldr	r2, [pc, #136]	@ (8000bbc <main+0xd8>)
 8000b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	4a21      	ldr	r2, [pc, #132]	@ (8000bc0 <main+0xdc>)
 8000b3c:	6013      	str	r3, [r2, #0]
  pwm_duty   = pwm_period / 2;           // 50% 듀티
 8000b3e:	4b20      	ldr	r3, [pc, #128]	@ (8000bc0 <main+0xdc>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	085b      	lsrs	r3, r3, #1
 8000b44:	4a1f      	ldr	r2, [pc, #124]	@ (8000bc4 <main+0xe0>)
 8000b46:	6013      	str	r3, [r2, #0]

  __HAL_TIM_SET_AUTORELOAD(&htim2, pwm_period);
 8000b48:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <main+0xc8>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc0 <main+0xdc>)
 8000b4e:	6812      	ldr	r2, [r2, #0]
 8000b50:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b52:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc0 <main+0xdc>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a15      	ldr	r2, [pc, #84]	@ (8000bac <main+0xc8>)
 8000b58:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_duty);
 8000b5a:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <main+0xc8>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a19      	ldr	r2, [pc, #100]	@ (8000bc4 <main+0xe0>)
 8000b60:	6812      	ldr	r2, [r2, #0]
 8000b62:	635a      	str	r2, [r3, #52]	@ 0x34
  // PWM 시작
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000b64:	2000      	movs	r0, #0
 8000b66:	f000 fee7 	bl	8001938 <BSP_LED_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000b6a:	4b17      	ldr	r3, [pc, #92]	@ (8000bc8 <main+0xe4>)
 8000b6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b70:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <main+0xe4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000b78:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <main+0xe4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000b7e:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <main+0xe4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000b84:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <main+0xe4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000b8a:	490f      	ldr	r1, [pc, #60]	@ (8000bc8 <main+0xe4>)
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f000 ff49 	bl	8001a24 <BSP_COM_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d002      	beq.n	8000b9e <main+0xba>
  {
    Error_Handler();
 8000b98:	f000 fbea 	bl	8001370 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	e7fd      	b.n	8000b9e <main+0xba>
 8000ba2:	bf00      	nop
 8000ba4:	24000348 	.word	0x24000348
 8000ba8:	240002b4 	.word	0x240002b4
 8000bac:	2400021c 	.word	0x2400021c
 8000bb0:	24000004 	.word	0x24000004
 8000bb4:	88888889 	.word	0x88888889
 8000bb8:	240003a0 	.word	0x240003a0
 8000bbc:	002887fa 	.word	0x002887fa
 8000bc0:	240003a4 	.word	0x240003a4
 8000bc4:	240003a8 	.word	0x240003a8
 8000bc8:	2400020c 	.word	0x2400020c

08000bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b09c      	sub	sp, #112	@ 0x70
 8000bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd6:	224c      	movs	r2, #76	@ 0x4c
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f009 fdf3 	bl	800a7c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2220      	movs	r2, #32
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f009 fded 	bl	800a7c6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bec:	2002      	movs	r0, #2
 8000bee:	f002 f92f 	bl	8002e50 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca8 <SystemClock_Config+0xdc>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8000ca8 <SystemClock_Config+0xdc>)
 8000c00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c04:	6193      	str	r3, [r2, #24]
 8000c06:	4b28      	ldr	r3, [pc, #160]	@ (8000ca8 <SystemClock_Config+0xdc>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c12:	bf00      	nop
 8000c14:	4b24      	ldr	r3, [pc, #144]	@ (8000ca8 <SystemClock_Config+0xdc>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c20:	d1f8      	bne.n	8000c14 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c22:	2302      	movs	r3, #2
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000c2a:	2340      	movs	r3, #64	@ 0x40
 8000c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c32:	2300      	movs	r3, #0
 8000c34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c36:	2304      	movs	r3, #4
 8000c38:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000c3a:	230c      	movs	r3, #12
 8000c3c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c42:	2304      	movs	r3, #4
 8000c44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c46:	2302      	movs	r3, #2
 8000c48:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c4a:	230c      	movs	r3, #12
 8000c4c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 f932 	bl	8002ec4 <HAL_RCC_OscConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c66:	f000 fb83 	bl	8001370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6a:	233f      	movs	r3, #63	@ 0x3f
 8000c6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c76:	2308      	movs	r3, #8
 8000c78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c7a:	2340      	movs	r3, #64	@ 0x40
 8000c7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c7e:	2340      	movs	r3, #64	@ 0x40
 8000c80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c86:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c88:	2340      	movs	r3, #64	@ 0x40
 8000c8a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2101      	movs	r1, #1
 8000c90:	4618      	mov	r0, r3
 8000c92:	f002 fcf1 	bl	8003678 <HAL_RCC_ClockConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c9c:	f000 fb68 	bl	8001370 <Error_Handler>
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	3770      	adds	r7, #112	@ 0x70
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	58024800 	.word	0x58024800

08000cac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08e      	sub	sp, #56	@ 0x38
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ccc:	463b      	mov	r3, r7
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
 8000cd8:	611a      	str	r2, [r3, #16]
 8000cda:	615a      	str	r2, [r3, #20]
 8000cdc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cde:	4b2e      	ldr	r3, [pc, #184]	@ (8000d98 <MX_TIM2_Init+0xec>)
 8000ce0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ce4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d98 <MX_TIM2_Init+0xec>)
 8000ce8:	223f      	movs	r2, #63	@ 0x3f
 8000cea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cec:	4b2a      	ldr	r3, [pc, #168]	@ (8000d98 <MX_TIM2_Init+0xec>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 13281;
 8000cf2:	4b29      	ldr	r3, [pc, #164]	@ (8000d98 <MX_TIM2_Init+0xec>)
 8000cf4:	f243 32e1 	movw	r2, #13281	@ 0x33e1
 8000cf8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfa:	4b27      	ldr	r3, [pc, #156]	@ (8000d98 <MX_TIM2_Init+0xec>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d00:	4b25      	ldr	r3, [pc, #148]	@ (8000d98 <MX_TIM2_Init+0xec>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d06:	4824      	ldr	r0, [pc, #144]	@ (8000d98 <MX_TIM2_Init+0xec>)
 8000d08:	f004 fe04 	bl	8005914 <HAL_TIM_Base_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d12:	f000 fb2d 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d20:	4619      	mov	r1, r3
 8000d22:	481d      	ldr	r0, [pc, #116]	@ (8000d98 <MX_TIM2_Init+0xec>)
 8000d24:	f005 fb16 	bl	8006354 <HAL_TIM_ConfigClockSource>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d2e:	f000 fb1f 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d32:	4819      	ldr	r0, [pc, #100]	@ (8000d98 <MX_TIM2_Init+0xec>)
 8000d34:	f004 fe45 	bl	80059c2 <HAL_TIM_PWM_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d3e:	f000 fb17 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4811      	ldr	r0, [pc, #68]	@ (8000d98 <MX_TIM2_Init+0xec>)
 8000d52:	f006 f865 	bl	8006e20 <HAL_TIMEx_MasterConfigSynchronization>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d5c:	f000 fb08 	bl	8001370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d60:	2360      	movs	r3, #96	@ 0x60
 8000d62:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 6640;
 8000d64:	f641 13f0 	movw	r3, #6640	@ 0x19f0
 8000d68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d72:	463b      	mov	r3, r7
 8000d74:	2200      	movs	r2, #0
 8000d76:	4619      	mov	r1, r3
 8000d78:	4807      	ldr	r0, [pc, #28]	@ (8000d98 <MX_TIM2_Init+0xec>)
 8000d7a:	f005 f9d7 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000d84:	f000 faf4 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d88:	4803      	ldr	r0, [pc, #12]	@ (8000d98 <MX_TIM2_Init+0xec>)
 8000d8a:	f000 fb4f 	bl	800142c <HAL_TIM_MspPostInit>

}
 8000d8e:	bf00      	nop
 8000d90:	3738      	adds	r7, #56	@ 0x38
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2400021c 	.word	0x2400021c

08000d9c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000dac:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <MX_TIM6_Init+0x64>)
 8000dae:	4a15      	ldr	r2, [pc, #84]	@ (8000e04 <MX_TIM6_Init+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 95;
 8000db2:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <MX_TIM6_Init+0x64>)
 8000db4:	225f      	movs	r2, #95	@ 0x5f
 8000db6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <MX_TIM6_Init+0x64>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <MX_TIM6_Init+0x64>)
 8000dc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dc4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <MX_TIM6_Init+0x64>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000dcc:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <MX_TIM6_Init+0x64>)
 8000dce:	f004 fda1 	bl	8005914 <HAL_TIM_Base_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000dd8:	f000 faca 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <MX_TIM6_Init+0x64>)
 8000dea:	f006 f819 	bl	8006e20 <HAL_TIMEx_MasterConfigSynchronization>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000df4:	f000 fabc 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	24000268 	.word	0x24000268
 8000e04:	40001000 	.word	0x40001000

08000e08 <MX_UART9_Init>:
  * @brief UART9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART9_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART9_Init 0 */

  /* USER CODE BEGIN UART9_Init 1 */

  /* USER CODE END UART9_Init 1 */
  huart9.Instance = UART9;
 8000e0c:	4b22      	ldr	r3, [pc, #136]	@ (8000e98 <MX_UART9_Init+0x90>)
 8000e0e:	4a23      	ldr	r2, [pc, #140]	@ (8000e9c <MX_UART9_Init+0x94>)
 8000e10:	601a      	str	r2, [r3, #0]
  huart9.Init.BaudRate = 9600;
 8000e12:	4b21      	ldr	r3, [pc, #132]	@ (8000e98 <MX_UART9_Init+0x90>)
 8000e14:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000e18:	605a      	str	r2, [r3, #4]
  huart9.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e98 <MX_UART9_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  huart9.Init.StopBits = UART_STOPBITS_1;
 8000e20:	4b1d      	ldr	r3, [pc, #116]	@ (8000e98 <MX_UART9_Init+0x90>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  huart9.Init.Parity = UART_PARITY_NONE;
 8000e26:	4b1c      	ldr	r3, [pc, #112]	@ (8000e98 <MX_UART9_Init+0x90>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  huart9.Init.Mode = UART_MODE_TX_RX;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e98 <MX_UART9_Init+0x90>)
 8000e2e:	220c      	movs	r2, #12
 8000e30:	615a      	str	r2, [r3, #20]
  huart9.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e32:	4b19      	ldr	r3, [pc, #100]	@ (8000e98 <MX_UART9_Init+0x90>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  huart9.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e38:	4b17      	ldr	r3, [pc, #92]	@ (8000e98 <MX_UART9_Init+0x90>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  huart9.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e3e:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <MX_UART9_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
  huart9.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <MX_UART9_Init+0x90>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart9.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <MX_UART9_Init+0x90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart9) != HAL_OK)
 8000e50:	4811      	ldr	r0, [pc, #68]	@ (8000e98 <MX_UART9_Init+0x90>)
 8000e52:	f006 f89f 	bl	8006f94 <HAL_UART_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_UART9_Init+0x58>
  {
    Error_Handler();
 8000e5c:	f000 fa88 	bl	8001370 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart9, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e60:	2100      	movs	r1, #0
 8000e62:	480d      	ldr	r0, [pc, #52]	@ (8000e98 <MX_UART9_Init+0x90>)
 8000e64:	f008 fd1b 	bl	800989e <HAL_UARTEx_SetTxFifoThreshold>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_UART9_Init+0x6a>
  {
    Error_Handler();
 8000e6e:	f000 fa7f 	bl	8001370 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart9, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e72:	2100      	movs	r1, #0
 8000e74:	4808      	ldr	r0, [pc, #32]	@ (8000e98 <MX_UART9_Init+0x90>)
 8000e76:	f008 fd50 	bl	800991a <HAL_UARTEx_SetRxFifoThreshold>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_UART9_Init+0x7c>
  {
    Error_Handler();
 8000e80:	f000 fa76 	bl	8001370 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart9) != HAL_OK)
 8000e84:	4804      	ldr	r0, [pc, #16]	@ (8000e98 <MX_UART9_Init+0x90>)
 8000e86:	f008 fccf 	bl	8009828 <HAL_UARTEx_EnableFifoMode>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_UART9_Init+0x8c>
  {
    Error_Handler();
 8000e90:	f000 fa6e 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN UART9_Init 2 */

  /* USER CODE END UART9_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	240002b4 	.word	0x240002b4
 8000e9c:	40011800 	.word	0x40011800

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	@ 0x30
 8000ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	4b65      	ldr	r3, [pc, #404]	@ (800104c <MX_GPIO_Init+0x1ac>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebc:	4a63      	ldr	r2, [pc, #396]	@ (800104c <MX_GPIO_Init+0x1ac>)
 8000ebe:	f043 0304 	orr.w	r3, r3, #4
 8000ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec6:	4b61      	ldr	r3, [pc, #388]	@ (800104c <MX_GPIO_Init+0x1ac>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
 8000ed2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b5d      	ldr	r3, [pc, #372]	@ (800104c <MX_GPIO_Init+0x1ac>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eda:	4a5c      	ldr	r2, [pc, #368]	@ (800104c <MX_GPIO_Init+0x1ac>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee4:	4b59      	ldr	r3, [pc, #356]	@ (800104c <MX_GPIO_Init+0x1ac>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ef2:	4b56      	ldr	r3, [pc, #344]	@ (800104c <MX_GPIO_Init+0x1ac>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef8:	4a54      	ldr	r2, [pc, #336]	@ (800104c <MX_GPIO_Init+0x1ac>)
 8000efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000efe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f02:	4b52      	ldr	r3, [pc, #328]	@ (800104c <MX_GPIO_Init+0x1ac>)
 8000f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f10:	4b4e      	ldr	r3, [pc, #312]	@ (800104c <MX_GPIO_Init+0x1ac>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f16:	4a4d      	ldr	r2, [pc, #308]	@ (800104c <MX_GPIO_Init+0x1ac>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f20:	4b4a      	ldr	r3, [pc, #296]	@ (800104c <MX_GPIO_Init+0x1ac>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2e:	4b47      	ldr	r3, [pc, #284]	@ (800104c <MX_GPIO_Init+0x1ac>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f34:	4a45      	ldr	r2, [pc, #276]	@ (800104c <MX_GPIO_Init+0x1ac>)
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f3e:	4b43      	ldr	r3, [pc, #268]	@ (800104c <MX_GPIO_Init+0x1ac>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f44:	f003 0308 	and.w	r3, r3, #8
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4c:	4b3f      	ldr	r3, [pc, #252]	@ (800104c <MX_GPIO_Init+0x1ac>)
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f52:	4a3e      	ldr	r2, [pc, #248]	@ (800104c <MX_GPIO_Init+0x1ac>)
 8000f54:	f043 0310 	orr.w	r3, r3, #16
 8000f58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800104c <MX_GPIO_Init+0x1ac>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f62:	f003 0310 	and.w	r3, r3, #16
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Step_Pin|Dir_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2160      	movs	r1, #96	@ 0x60
 8000f6e:	4838      	ldr	r0, [pc, #224]	@ (8001050 <MX_GPIO_Init+0x1b0>)
 8000f70:	f001 ff54 	bl	8002e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f7a:	4836      	ldr	r0, [pc, #216]	@ (8001054 <MX_GPIO_Init+0x1b4>)
 8000f7c:	f001 ff4e 	bl	8002e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2102      	movs	r1, #2
 8000f84:	4834      	ldr	r0, [pc, #208]	@ (8001058 <MX_GPIO_Init+0x1b8>)
 8000f86:	f001 ff49 	bl	8002e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	4833      	ldr	r0, [pc, #204]	@ (800105c <MX_GPIO_Init+0x1bc>)
 8000f90:	f001 ff44 	bl	8002e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	482d      	ldr	r0, [pc, #180]	@ (8001060 <MX_GPIO_Init+0x1c0>)
 8000faa:	f001 fd8f 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pins : Step_Pin Dir_Pin */
  GPIO_InitStruct.Pin = Step_Pin|Dir_Pin;
 8000fae:	2360      	movs	r3, #96	@ 0x60
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4822      	ldr	r0, [pc, #136]	@ (8001050 <MX_GPIO_Init+0x1b0>)
 8000fc6:	f001 fd81 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000fca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	481c      	ldr	r0, [pc, #112]	@ (8001054 <MX_GPIO_Init+0x1b4>)
 8000fe4:	f001 fd72 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fe8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4812      	ldr	r0, [pc, #72]	@ (8001050 <MX_GPIO_Init+0x1b0>)
 8001006:	f001 fd61 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800100a:	2302      	movs	r3, #2
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	2301      	movs	r3, #1
 8001010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	480d      	ldr	r0, [pc, #52]	@ (8001058 <MX_GPIO_Init+0x1b8>)
 8001022:	f001 fd53 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001026:	2302      	movs	r3, #2
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2301      	movs	r3, #1
 800102c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4619      	mov	r1, r3
 800103c:	4807      	ldr	r0, [pc, #28]	@ (800105c <MX_GPIO_Init+0x1bc>)
 800103e:	f001 fd45 	bl	8002acc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001042:	bf00      	nop
 8001044:	3730      	adds	r7, #48	@ 0x30
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	58024400 	.word	0x58024400
 8001050:	58020000 	.word	0x58020000
 8001054:	58020400 	.word	0x58020400
 8001058:	58020c00 	.word	0x58020c00
 800105c:	58021000 	.word	0x58021000
 8001060:	58020800 	.word	0x58020800

08001064 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001074:	d142      	bne.n	80010fc <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7f1b      	ldrb	r3, [r3, #28]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d13e      	bne.n	80010fc <HAL_TIM_PWM_PulseFinishedCallback+0x98>
    {
        if (rotation_mode == 1)
 800107e:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d10d      	bne.n	80010a2 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
        {
            current_pulse_count++;
 8001086:	4b20      	ldr	r3, [pc, #128]	@ (8001108 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	4a1e      	ldr	r2, [pc, #120]	@ (8001108 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 800108e:	6013      	str	r3, [r2, #0]
            if (current_pulse_count >= STEP_PER_REV)
 8001090:	4b1d      	ldr	r3, [pc, #116]	@ (8001108 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 8001098:	db30      	blt.n	80010fc <HAL_TIM_PWM_PulseFinishedCallback+0x98>
                current_pulse_count = 0;
 800109a:	4b1b      	ldr	r3, [pc, #108]	@ (8001108 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
            {
                HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);  // 목표 도달 시 PWM 정지
            }
        }
    }
}
 80010a0:	e02c      	b.n	80010fc <HAL_TIM_PWM_PulseFinishedCallback+0x98>
        else if (rotation_mode == 0)
 80010a2:	4b18      	ldr	r3, [pc, #96]	@ (8001104 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d128      	bne.n	80010fc <HAL_TIM_PWM_PulseFinishedCallback+0x98>
            if ((direction == 1 && current_pulse_count < target_pulse_count) ||
 80010aa:	4b18      	ldr	r3, [pc, #96]	@ (800110c <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d105      	bne.n	80010be <HAL_TIM_PWM_PulseFinishedCallback+0x5a>
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	db09      	blt.n	80010d2 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
                (direction == 0 && current_pulse_count > target_pulse_count))
 80010be:	4b13      	ldr	r3, [pc, #76]	@ (800110c <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
            if ((direction == 1 && current_pulse_count < target_pulse_count) ||
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d115      	bne.n	80010f2 <HAL_TIM_PWM_PulseFinishedCallback+0x8e>
                (direction == 0 && current_pulse_count > target_pulse_count))
 80010c6:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	dd0f      	ble.n	80010f2 <HAL_TIM_PWM_PulseFinishedCallback+0x8e>
                if (direction == 1) current_pulse_count++;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d105      	bne.n	80010e6 <HAL_TIM_PWM_PulseFinishedCallback+0x82>
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	4a09      	ldr	r2, [pc, #36]	@ (8001108 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	e00a      	b.n	80010fc <HAL_TIM_PWM_PulseFinishedCallback+0x98>
                else current_pulse_count--;
 80010e6:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	4a06      	ldr	r2, [pc, #24]	@ (8001108 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 80010ee:	6013      	str	r3, [r2, #0]
                if (direction == 1) current_pulse_count++;
 80010f0:	e004      	b.n	80010fc <HAL_TIM_PWM_PulseFinishedCallback+0x98>
                HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);  // 목표 도달 시 PWM 정지
 80010f2:	2100      	movs	r1, #0
 80010f4:	4807      	ldr	r0, [pc, #28]	@ (8001114 <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 80010f6:	f004 fe2d 	bl	8005d54 <HAL_TIM_PWM_Stop_IT>
}
 80010fa:	e7ff      	b.n	80010fc <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	24000394 	.word	0x24000394
 8001108:	2400039c 	.word	0x2400039c
 800110c:	24000000 	.word	0x24000000
 8001110:	24000398 	.word	0x24000398
 8001114:	2400021c 	.word	0x2400021c

08001118 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART9)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a6b      	ldr	r2, [pc, #428]	@ (80012d4 <HAL_UART_RxCpltCallback+0x1bc>)
 8001126:	4293      	cmp	r3, r2
 8001128:	f040 80cf 	bne.w	80012ca <HAL_UART_RxCpltCallback+0x1b2>
    {
        if (rx_byte == '\n' || rx_byte == '\r')
 800112c:	4b6a      	ldr	r3, [pc, #424]	@ (80012d8 <HAL_UART_RxCpltCallback+0x1c0>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b0a      	cmp	r3, #10
 8001132:	d004      	beq.n	800113e <HAL_UART_RxCpltCallback+0x26>
 8001134:	4b68      	ldr	r3, [pc, #416]	@ (80012d8 <HAL_UART_RxCpltCallback+0x1c0>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b0d      	cmp	r3, #13
 800113a:	f040 80b2 	bne.w	80012a2 <HAL_UART_RxCpltCallback+0x18a>
        {
            rx_buffer[rx_index] = '\0';  // 문자열 종료
 800113e:	4b67      	ldr	r3, [pc, #412]	@ (80012dc <HAL_UART_RxCpltCallback+0x1c4>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	4b66      	ldr	r3, [pc, #408]	@ (80012e0 <HAL_UART_RxCpltCallback+0x1c8>)
 8001146:	2100      	movs	r1, #0
 8001148:	5499      	strb	r1, [r3, r2]

            if (strcmp((char*)rx_buffer, "ROTATION_MODE") == 0)
 800114a:	4966      	ldr	r1, [pc, #408]	@ (80012e4 <HAL_UART_RxCpltCallback+0x1cc>)
 800114c:	4864      	ldr	r0, [pc, #400]	@ (80012e0 <HAL_UART_RxCpltCallback+0x1c8>)
 800114e:	f7ff f8df 	bl	8000310 <strcmp>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10f      	bne.n	8001178 <HAL_UART_RxCpltCallback+0x60>
            {
                rotation_mode = 1;
 8001158:	4b63      	ldr	r3, [pc, #396]	@ (80012e8 <HAL_UART_RxCpltCallback+0x1d0>)
 800115a:	2201      	movs	r2, #1
 800115c:	601a      	str	r2, [r3, #0]
                current_pulse_count = 0;  // 필요 시 초기화
 800115e:	4b63      	ldr	r3, [pc, #396]	@ (80012ec <HAL_UART_RxCpltCallback+0x1d4>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
                HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);  // 기본 방향
 8001164:	2201      	movs	r2, #1
 8001166:	2140      	movs	r1, #64	@ 0x40
 8001168:	4861      	ldr	r0, [pc, #388]	@ (80012f0 <HAL_UART_RxCpltCallback+0x1d8>)
 800116a:	f001 fe57 	bl	8002e1c <HAL_GPIO_WritePin>
                HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);  // PWM 시작
 800116e:	2100      	movs	r1, #0
 8001170:	4860      	ldr	r0, [pc, #384]	@ (80012f4 <HAL_UART_RxCpltCallback+0x1dc>)
 8001172:	f004 fc87 	bl	8005a84 <HAL_TIM_PWM_Start_IT>
 8001176:	e08b      	b.n	8001290 <HAL_UART_RxCpltCallback+0x178>
            }

            else if (strncmp((char*)rx_buffer, "STOP_MODE:", 10) == 0)
 8001178:	220a      	movs	r2, #10
 800117a:	495f      	ldr	r1, [pc, #380]	@ (80012f8 <HAL_UART_RxCpltCallback+0x1e0>)
 800117c:	4858      	ldr	r0, [pc, #352]	@ (80012e0 <HAL_UART_RxCpltCallback+0x1c8>)
 800117e:	f009 fb2a 	bl	800a7d6 <strncmp>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	f040 8083 	bne.w	8001290 <HAL_UART_RxCpltCallback+0x178>
            {
                rotation_mode = 0;
 800118a:	4b57      	ldr	r3, [pc, #348]	@ (80012e8 <HAL_UART_RxCpltCallback+0x1d0>)
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
                target_angle = atof(&rx_buffer[10]);
 8001190:	485a      	ldr	r0, [pc, #360]	@ (80012fc <HAL_UART_RxCpltCallback+0x1e4>)
 8001192:	f008 fc4f 	bl	8009a34 <atof>
 8001196:	eeb0 7b40 	vmov.f64	d7, d0
 800119a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800119e:	4b58      	ldr	r3, [pc, #352]	@ (8001300 <HAL_UART_RxCpltCallback+0x1e8>)
 80011a0:	edc3 7a00 	vstr	s15, [r3]

                float current_angle = fmodf(current_pulse_count * DEG_PER_STEP, 360.0f);
 80011a4:	4b51      	ldr	r3, [pc, #324]	@ (80012ec <HAL_UART_RxCpltCallback+0x1d4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b0:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001304 <HAL_UART_RxCpltCallback+0x1ec>
 80011b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b8:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8001308 <HAL_UART_RxCpltCallback+0x1f0>
 80011bc:	eeb0 0a67 	vmov.f32	s0, s15
 80011c0:	f00b f9d6 	bl	800c570 <fmodf>
 80011c4:	ed87 0a05 	vstr	s0, [r7, #20]
                float cw_diff  = fmodf((target_angle - current_angle + 360.0f), 360.0f);
 80011c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001300 <HAL_UART_RxCpltCallback+0x1e8>)
 80011ca:	ed93 7a00 	vldr	s14, [r3]
 80011ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80011d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d6:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001308 <HAL_UART_RxCpltCallback+0x1f0>
 80011da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011de:	eddf 0a4a 	vldr	s1, [pc, #296]	@ 8001308 <HAL_UART_RxCpltCallback+0x1f0>
 80011e2:	eeb0 0a67 	vmov.f32	s0, s15
 80011e6:	f00b f9c3 	bl	800c570 <fmodf>
 80011ea:	ed87 0a04 	vstr	s0, [r7, #16]
                float ccw_diff = fmodf((current_angle - target_angle + 360.0f), 360.0f);
 80011ee:	4b44      	ldr	r3, [pc, #272]	@ (8001300 <HAL_UART_RxCpltCallback+0x1e8>)
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80011f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011fc:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001308 <HAL_UART_RxCpltCallback+0x1f0>
 8001200:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001204:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8001308 <HAL_UART_RxCpltCallback+0x1f0>
 8001208:	eeb0 0a67 	vmov.f32	s0, s15
 800120c:	f00b f9b0 	bl	800c570 <fmodf>
 8001210:	ed87 0a03 	vstr	s0, [r7, #12]

                if (cw_diff <= ccw_diff)
 8001214:	ed97 7a04 	vldr	s14, [r7, #16]
 8001218:	edd7 7a03 	vldr	s15, [r7, #12]
 800121c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001224:	d818      	bhi.n	8001258 <HAL_UART_RxCpltCallback+0x140>
                {
                    direction = 1;
 8001226:	4b39      	ldr	r3, [pc, #228]	@ (800130c <HAL_UART_RxCpltCallback+0x1f4>)
 8001228:	2201      	movs	r2, #1
 800122a:	601a      	str	r2, [r3, #0]
                    HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	2140      	movs	r1, #64	@ 0x40
 8001230:	482f      	ldr	r0, [pc, #188]	@ (80012f0 <HAL_UART_RxCpltCallback+0x1d8>)
 8001232:	f001 fdf3 	bl	8002e1c <HAL_GPIO_WritePin>
                    target_pulse_count = current_pulse_count + (uint32_t)(cw_diff / DEG_PER_STEP);
 8001236:	ed97 7a04 	vldr	s14, [r7, #16]
 800123a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8001304 <HAL_UART_RxCpltCallback+0x1ec>
 800123e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001246:	ee17 2a90 	vmov	r2, s15
 800124a:	4b28      	ldr	r3, [pc, #160]	@ (80012ec <HAL_UART_RxCpltCallback+0x1d4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	461a      	mov	r2, r3
 8001252:	4b2f      	ldr	r3, [pc, #188]	@ (8001310 <HAL_UART_RxCpltCallback+0x1f8>)
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	e017      	b.n	8001288 <HAL_UART_RxCpltCallback+0x170>
                }
                else
                {
                    direction = 0;
 8001258:	4b2c      	ldr	r3, [pc, #176]	@ (800130c <HAL_UART_RxCpltCallback+0x1f4>)
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
                    HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2140      	movs	r1, #64	@ 0x40
 8001262:	4823      	ldr	r0, [pc, #140]	@ (80012f0 <HAL_UART_RxCpltCallback+0x1d8>)
 8001264:	f001 fdda 	bl	8002e1c <HAL_GPIO_WritePin>
                    target_pulse_count = current_pulse_count - (uint32_t)(ccw_diff / DEG_PER_STEP);
 8001268:	4b20      	ldr	r3, [pc, #128]	@ (80012ec <HAL_UART_RxCpltCallback+0x1d4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001270:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001304 <HAL_UART_RxCpltCallback+0x1ec>
 8001274:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800127c:	ee17 2a90 	vmov	r2, s15
 8001280:	1a9b      	subs	r3, r3, r2
 8001282:	461a      	mov	r2, r3
 8001284:	4b22      	ldr	r3, [pc, #136]	@ (8001310 <HAL_UART_RxCpltCallback+0x1f8>)
 8001286:	601a      	str	r2, [r3, #0]
                }

                HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);  // PWM 시작
 8001288:	2100      	movs	r1, #0
 800128a:	481a      	ldr	r0, [pc, #104]	@ (80012f4 <HAL_UART_RxCpltCallback+0x1dc>)
 800128c:	f004 fbfa 	bl	8005a84 <HAL_TIM_PWM_Start_IT>
            }

            rx_index = 0;
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <HAL_UART_RxCpltCallback+0x1c4>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
            memset(rx_buffer, 0, RX_BUFFER_SIZE);
 8001296:	2240      	movs	r2, #64	@ 0x40
 8001298:	2100      	movs	r1, #0
 800129a:	4811      	ldr	r0, [pc, #68]	@ (80012e0 <HAL_UART_RxCpltCallback+0x1c8>)
 800129c:	f009 fa93 	bl	800a7c6 <memset>
        {
 80012a0:	e00e      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x1a8>
        }
        else
        {
            if (rx_index < RX_BUFFER_SIZE - 1)
 80012a2:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <HAL_UART_RxCpltCallback+0x1c4>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80012a8:	d80a      	bhi.n	80012c0 <HAL_UART_RxCpltCallback+0x1a8>
                rx_buffer[rx_index++] = rx_byte;
 80012aa:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <HAL_UART_RxCpltCallback+0x1c4>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	b2d1      	uxtb	r1, r2
 80012b2:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <HAL_UART_RxCpltCallback+0x1c4>)
 80012b4:	7011      	strb	r1, [r2, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <HAL_UART_RxCpltCallback+0x1c0>)
 80012ba:	7819      	ldrb	r1, [r3, #0]
 80012bc:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <HAL_UART_RxCpltCallback+0x1c8>)
 80012be:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(&huart9, &rx_byte, 1);  // 다음 수신 대기
 80012c0:	2201      	movs	r2, #1
 80012c2:	4905      	ldr	r1, [pc, #20]	@ (80012d8 <HAL_UART_RxCpltCallback+0x1c0>)
 80012c4:	4813      	ldr	r0, [pc, #76]	@ (8001314 <HAL_UART_RxCpltCallback+0x1fc>)
 80012c6:	f005 ff43 	bl	8007150 <HAL_UART_Receive_IT>
    }
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40011800 	.word	0x40011800
 80012d8:	24000348 	.word	0x24000348
 80012dc:	2400038c 	.word	0x2400038c
 80012e0:	2400034c 	.word	0x2400034c
 80012e4:	0800c6d0 	.word	0x0800c6d0
 80012e8:	24000394 	.word	0x24000394
 80012ec:	2400039c 	.word	0x2400039c
 80012f0:	58020000 	.word	0x58020000
 80012f4:	2400021c 	.word	0x2400021c
 80012f8:	0800c6e0 	.word	0x0800c6e0
 80012fc:	24000356 	.word	0x24000356
 8001300:	24000390 	.word	0x24000390
 8001304:	3d666666 	.word	0x3d666666
 8001308:	43b40000 	.word	0x43b40000
 800130c:	24000000 	.word	0x24000000
 8001310:	24000398 	.word	0x24000398
 8001314:	240002b4 	.word	0x240002b4

08001318 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800131e:	463b      	mov	r3, r7
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800132a:	f000 fdf3 	bl	8001f14 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800132e:	2301      	movs	r3, #1
 8001330:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001332:	2300      	movs	r3, #0
 8001334:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800133a:	231f      	movs	r3, #31
 800133c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800133e:	2387      	movs	r3, #135	@ 0x87
 8001340:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001342:	2300      	movs	r3, #0
 8001344:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001346:	2300      	movs	r3, #0
 8001348:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800134a:	2301      	movs	r3, #1
 800134c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800134e:	2301      	movs	r3, #1
 8001350:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800135a:	463b      	mov	r3, r7
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fe11 	bl	8001f84 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001362:	2004      	movs	r0, #4
 8001364:	f000 fdee 	bl	8001f44 <HAL_MPU_Enable>

}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <Error_Handler+0x8>

0800137c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <HAL_MspInit+0x30>)
 8001384:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001388:	4a08      	ldr	r2, [pc, #32]	@ (80013ac <HAL_MspInit+0x30>)
 800138a:	f043 0302 	orr.w	r3, r3, #2
 800138e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_MspInit+0x30>)
 8001394:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	58024400 	.word	0x58024400

080013b0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013c0:	d117      	bne.n	80013f2 <HAL_TIM_Base_MspInit+0x42>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013c2:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <HAL_TIM_Base_MspInit+0x74>)
 80013c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013c8:	4a16      	ldr	r2, [pc, #88]	@ (8001424 <HAL_TIM_Base_MspInit+0x74>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013d2:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <HAL_TIM_Base_MspInit+0x74>)
 80013d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	201c      	movs	r0, #28
 80013e6:	f000 fd60 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013ea:	201c      	movs	r0, #28
 80013ec:	f000 fd77 	bl	8001ede <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 80013f0:	e013      	b.n	800141a <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM6)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001428 <HAL_TIM_Base_MspInit+0x78>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d10e      	bne.n	800141a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013fc:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <HAL_TIM_Base_MspInit+0x74>)
 80013fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001402:	4a08      	ldr	r2, [pc, #32]	@ (8001424 <HAL_TIM_Base_MspInit+0x74>)
 8001404:	f043 0310 	orr.w	r3, r3, #16
 8001408:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800140c:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <HAL_TIM_Base_MspInit+0x74>)
 800140e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	58024400 	.word	0x58024400
 8001428:	40001000 	.word	0x40001000

0800142c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800144c:	d11e      	bne.n	800148c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <HAL_TIM_MspPostInit+0x68>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001454:	4a0f      	ldr	r2, [pc, #60]	@ (8001494 <HAL_TIM_MspPostInit+0x68>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800145e:	4b0d      	ldr	r3, [pc, #52]	@ (8001494 <HAL_TIM_MspPostInit+0x68>)
 8001460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800146c:	2301      	movs	r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800147c:	2301      	movs	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	4619      	mov	r1, r3
 8001486:	4804      	ldr	r0, [pc, #16]	@ (8001498 <HAL_TIM_MspPostInit+0x6c>)
 8001488:	f001 fb20 	bl	8002acc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800148c:	bf00      	nop
 800148e:	3720      	adds	r7, #32
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	58024400 	.word	0x58024400
 8001498:	58020000 	.word	0x58020000

0800149c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b0b8      	sub	sp, #224	@ 0xe0
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	22b8      	movs	r2, #184	@ 0xb8
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f009 f982 	bl	800a7c6 <memset>
  if(huart->Instance==UART9)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a2a      	ldr	r2, [pc, #168]	@ (8001570 <HAL_UART_MspInit+0xd4>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d14d      	bne.n	8001568 <HAL_UART_MspInit+0xcc>

    /* USER CODE END UART9_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART9;
 80014cc:	f04f 0201 	mov.w	r2, #1
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014de:	f107 0310 	add.w	r3, r7, #16
 80014e2:	4618      	mov	r0, r3
 80014e4:	f002 fc54 	bl	8003d90 <HAL_RCCEx_PeriphCLKConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80014ee:	f7ff ff3f 	bl	8001370 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART9_CLK_ENABLE();
 80014f2:	4b20      	ldr	r3, [pc, #128]	@ (8001574 <HAL_UART_MspInit+0xd8>)
 80014f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014f8:	4a1e      	ldr	r2, [pc, #120]	@ (8001574 <HAL_UART_MspInit+0xd8>)
 80014fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001502:	4b1c      	ldr	r3, [pc, #112]	@ (8001574 <HAL_UART_MspInit+0xd8>)
 8001504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001510:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <HAL_UART_MspInit+0xd8>)
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001516:	4a17      	ldr	r2, [pc, #92]	@ (8001574 <HAL_UART_MspInit+0xd8>)
 8001518:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800151c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001520:	4b14      	ldr	r3, [pc, #80]	@ (8001574 <HAL_UART_MspInit+0xd8>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
    /**UART9 GPIO Configuration
    PG0     ------> UART9_RX
    PG1     ------> UART9_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800152e:	2303      	movs	r3, #3
 8001530:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF11_UART9;
 8001546:	230b      	movs	r3, #11
 8001548:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800154c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001550:	4619      	mov	r1, r3
 8001552:	4809      	ldr	r0, [pc, #36]	@ (8001578 <HAL_UART_MspInit+0xdc>)
 8001554:	f001 faba 	bl	8002acc <HAL_GPIO_Init>

    /* UART9 interrupt Init */
    HAL_NVIC_SetPriority(UART9_IRQn, 0, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	209b      	movs	r0, #155	@ 0x9b
 800155e:	f000 fca4 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART9_IRQn);
 8001562:	209b      	movs	r0, #155	@ 0x9b
 8001564:	f000 fcbb 	bl	8001ede <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART9_MspInit 1 */

  }

}
 8001568:	bf00      	nop
 800156a:	37e0      	adds	r7, #224	@ 0xe0
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40011800 	.word	0x40011800
 8001574:	58024400 	.word	0x58024400
 8001578:	58021800 	.word	0x58021800

0800157c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <NMI_Handler+0x4>

08001584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <HardFault_Handler+0x4>

0800158c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <MemManage_Handler+0x4>

08001594 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <BusFault_Handler+0x4>

0800159c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <UsageFault_Handler+0x4>

080015a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d2:	f000 fb6f 	bl	8001cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015e0:	4802      	ldr	r0, [pc, #8]	@ (80015ec <TIM2_IRQHandler+0x10>)
 80015e2:	f004 fc9b 	bl	8005f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2400021c 	.word	0x2400021c

080015f0 <UART9_IRQHandler>:

/**
  * @brief This function handles UART9 global interrupt.
  */
void UART9_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART9_IRQn 0 */

  /* USER CODE END UART9_IRQn 0 */
  HAL_UART_IRQHandler(&huart9);
 80015f4:	4802      	ldr	r0, [pc, #8]	@ (8001600 <UART9_IRQHandler+0x10>)
 80015f6:	f005 fdf7 	bl	80071e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART9_IRQn 1 */

  /* USER CODE END UART9_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	240002b4 	.word	0x240002b4

08001604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return 1;
 8001608:	2301      	movs	r3, #1
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_kill>:

int _kill(int pid, int sig)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800161e:	f009 f933 	bl	800a888 <__errno>
 8001622:	4603      	mov	r3, r0
 8001624:	2216      	movs	r2, #22
 8001626:	601a      	str	r2, [r3, #0]
  return -1;
 8001628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <_exit>:

void _exit (int status)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ffe7 	bl	8001614 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001646:	bf00      	nop
 8001648:	e7fd      	b.n	8001646 <_exit+0x12>

0800164a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e00a      	b.n	8001672 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800165c:	f3af 8000 	nop.w
 8001660:	4601      	mov	r1, r0
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	60ba      	str	r2, [r7, #8]
 8001668:	b2ca      	uxtb	r2, r1
 800166a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	3301      	adds	r3, #1
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	429a      	cmp	r2, r3
 8001678:	dbf0      	blt.n	800165c <_read+0x12>
  }

  return len;
 800167a:	687b      	ldr	r3, [r7, #4]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	e009      	b.n	80016aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	60ba      	str	r2, [r7, #8]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 fa22 	bl	8001ae8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3301      	adds	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	dbf1      	blt.n	8001696 <_write+0x12>
  }
  return len;
 80016b2:	687b      	ldr	r3, [r7, #4]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <_close>:

int _close(int file)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016e4:	605a      	str	r2, [r3, #4]
  return 0;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <_isatty>:

int _isatty(int file)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016fc:	2301      	movs	r3, #1
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800170a:	b480      	push	{r7}
 800170c:	b085      	sub	sp, #20
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800172c:	4a14      	ldr	r2, [pc, #80]	@ (8001780 <_sbrk+0x5c>)
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <_sbrk+0x60>)
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001738:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <_sbrk+0x64>)
 8001742:	4a12      	ldr	r2, [pc, #72]	@ (800178c <_sbrk+0x68>)
 8001744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001746:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	429a      	cmp	r2, r3
 8001752:	d207      	bcs.n	8001764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001754:	f009 f898 	bl	800a888 <__errno>
 8001758:	4603      	mov	r3, r0
 800175a:	220c      	movs	r2, #12
 800175c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	e009      	b.n	8001778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001764:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176a:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	4a05      	ldr	r2, [pc, #20]	@ (8001788 <_sbrk+0x64>)
 8001774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	24050000 	.word	0x24050000
 8001784:	00000400 	.word	0x00000400
 8001788:	240003ac 	.word	0x240003ac
 800178c:	24000598 	.word	0x24000598

08001790 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001794:	4b3e      	ldr	r3, [pc, #248]	@ (8001890 <SystemInit+0x100>)
 8001796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800179a:	4a3d      	ldr	r2, [pc, #244]	@ (8001890 <SystemInit+0x100>)
 800179c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001894 <SystemInit+0x104>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 030f 	and.w	r3, r3, #15
 80017ac:	2b06      	cmp	r3, #6
 80017ae:	d807      	bhi.n	80017c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017b0:	4b38      	ldr	r3, [pc, #224]	@ (8001894 <SystemInit+0x104>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f023 030f 	bic.w	r3, r3, #15
 80017b8:	4a36      	ldr	r2, [pc, #216]	@ (8001894 <SystemInit+0x104>)
 80017ba:	f043 0307 	orr.w	r3, r3, #7
 80017be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017c0:	4b35      	ldr	r3, [pc, #212]	@ (8001898 <SystemInit+0x108>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a34      	ldr	r2, [pc, #208]	@ (8001898 <SystemInit+0x108>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017cc:	4b32      	ldr	r3, [pc, #200]	@ (8001898 <SystemInit+0x108>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017d2:	4b31      	ldr	r3, [pc, #196]	@ (8001898 <SystemInit+0x108>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4930      	ldr	r1, [pc, #192]	@ (8001898 <SystemInit+0x108>)
 80017d8:	4b30      	ldr	r3, [pc, #192]	@ (800189c <SystemInit+0x10c>)
 80017da:	4013      	ands	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017de:	4b2d      	ldr	r3, [pc, #180]	@ (8001894 <SystemInit+0x104>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001894 <SystemInit+0x104>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 030f 	bic.w	r3, r3, #15
 80017f2:	4a28      	ldr	r2, [pc, #160]	@ (8001894 <SystemInit+0x104>)
 80017f4:	f043 0307 	orr.w	r3, r3, #7
 80017f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80017fa:	4b27      	ldr	r3, [pc, #156]	@ (8001898 <SystemInit+0x108>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001800:	4b25      	ldr	r3, [pc, #148]	@ (8001898 <SystemInit+0x108>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001806:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <SystemInit+0x108>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800180c:	4b22      	ldr	r3, [pc, #136]	@ (8001898 <SystemInit+0x108>)
 800180e:	4a24      	ldr	r2, [pc, #144]	@ (80018a0 <SystemInit+0x110>)
 8001810:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001812:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <SystemInit+0x108>)
 8001814:	4a23      	ldr	r2, [pc, #140]	@ (80018a4 <SystemInit+0x114>)
 8001816:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001818:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <SystemInit+0x108>)
 800181a:	4a23      	ldr	r2, [pc, #140]	@ (80018a8 <SystemInit+0x118>)
 800181c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800181e:	4b1e      	ldr	r3, [pc, #120]	@ (8001898 <SystemInit+0x108>)
 8001820:	2200      	movs	r2, #0
 8001822:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001824:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <SystemInit+0x108>)
 8001826:	4a20      	ldr	r2, [pc, #128]	@ (80018a8 <SystemInit+0x118>)
 8001828:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800182a:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <SystemInit+0x108>)
 800182c:	2200      	movs	r2, #0
 800182e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001830:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <SystemInit+0x108>)
 8001832:	4a1d      	ldr	r2, [pc, #116]	@ (80018a8 <SystemInit+0x118>)
 8001834:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001836:	4b18      	ldr	r3, [pc, #96]	@ (8001898 <SystemInit+0x108>)
 8001838:	2200      	movs	r2, #0
 800183a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800183c:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <SystemInit+0x108>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a15      	ldr	r2, [pc, #84]	@ (8001898 <SystemInit+0x108>)
 8001842:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001846:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001848:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <SystemInit+0x108>)
 800184a:	2200      	movs	r2, #0
 800184c:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800184e:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <SystemInit+0x108>)
 8001850:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001854:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d113      	bne.n	8001884 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800185c:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <SystemInit+0x108>)
 800185e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001862:	4a0d      	ldr	r2, [pc, #52]	@ (8001898 <SystemInit+0x108>)
 8001864:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001868:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800186c:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <SystemInit+0x11c>)
 800186e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001872:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001874:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <SystemInit+0x108>)
 8001876:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800187a:	4a07      	ldr	r2, [pc, #28]	@ (8001898 <SystemInit+0x108>)
 800187c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001880:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed00 	.word	0xe000ed00
 8001894:	52002000 	.word	0x52002000
 8001898:	58024400 	.word	0x58024400
 800189c:	eaf6ed7f 	.word	0xeaf6ed7f
 80018a0:	02020200 	.word	0x02020200
 80018a4:	01ff0000 	.word	0x01ff0000
 80018a8:	01010280 	.word	0x01010280
 80018ac:	52004000 	.word	0x52004000

080018b0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80018b4:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <ExitRun0Mode+0x2c>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4a08      	ldr	r2, [pc, #32]	@ (80018dc <ExitRun0Mode+0x2c>)
 80018ba:	f043 0302 	orr.w	r3, r3, #2
 80018be:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80018c0:	bf00      	nop
 80018c2:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <ExitRun0Mode+0x2c>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f9      	beq.n	80018c2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80018ce:	bf00      	nop
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	58024800 	.word	0x58024800

080018e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018e0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800191c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80018e4:	f7ff ffe4 	bl	80018b0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018e8:	f7ff ff52 	bl	8001790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ec:	480c      	ldr	r0, [pc, #48]	@ (8001920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ee:	490d      	ldr	r1, [pc, #52]	@ (8001924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001904:	4c0a      	ldr	r4, [pc, #40]	@ (8001930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001912:	f008 ffbf 	bl	800a894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001916:	f7ff f8e5 	bl	8000ae4 <main>
  bx  lr
 800191a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800191c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001920:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001924:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 8001928:	0800cb04 	.word	0x0800cb04
  ldr r2, =_sbss
 800192c:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 8001930:	24000598 	.word	0x24000598

08001934 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001934:	e7fe      	b.n	8001934 <ADC3_IRQHandler>
	...

08001938 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08c      	sub	sp, #48	@ 0x30
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001942:	2300      	movs	r3, #0
 8001944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d009      	beq.n	8001960 <BSP_LED_Init+0x28>
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d006      	beq.n	8001960 <BSP_LED_Init+0x28>
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d003      	beq.n	8001960 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001958:	f06f 0301 	mvn.w	r3, #1
 800195c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800195e:	e055      	b.n	8001a0c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10f      	bne.n	8001986 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001966:	4b2c      	ldr	r3, [pc, #176]	@ (8001a18 <BSP_LED_Init+0xe0>)
 8001968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800196c:	4a2a      	ldr	r2, [pc, #168]	@ (8001a18 <BSP_LED_Init+0xe0>)
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001976:	4b28      	ldr	r3, [pc, #160]	@ (8001a18 <BSP_LED_Init+0xe0>)
 8001978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	e021      	b.n	80019ca <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d10f      	bne.n	80019ac <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 800198c:	4b22      	ldr	r3, [pc, #136]	@ (8001a18 <BSP_LED_Init+0xe0>)
 800198e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001992:	4a21      	ldr	r2, [pc, #132]	@ (8001a18 <BSP_LED_Init+0xe0>)
 8001994:	f043 0310 	orr.w	r3, r3, #16
 8001998:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800199c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a18 <BSP_LED_Init+0xe0>)
 800199e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a2:	f003 0310 	and.w	r3, r3, #16
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	e00e      	b.n	80019ca <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80019ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001a18 <BSP_LED_Init+0xe0>)
 80019ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019b2:	4a19      	ldr	r2, [pc, #100]	@ (8001a18 <BSP_LED_Init+0xe0>)
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019bc:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <BSP_LED_Init+0xe0>)
 80019be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	4a13      	ldr	r2, [pc, #76]	@ (8001a1c <BSP_LED_Init+0xe4>)
 80019ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019d2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80019d4:	2301      	movs	r3, #1
 80019d6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	2303      	movs	r3, #3
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001a20 <BSP_LED_Init+0xe8>)
 80019e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e8:	f107 0218 	add.w	r2, r7, #24
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 f86c 	bl	8002acc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a20 <BSP_LED_Init+0xe8>)
 80019f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	4a07      	ldr	r2, [pc, #28]	@ (8001a1c <BSP_LED_Init+0xe4>)
 8001a00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a04:	2200      	movs	r2, #0
 8001a06:	4619      	mov	r1, r3
 8001a08:	f001 fa08 	bl	8002e1c <HAL_GPIO_WritePin>
  }

  return ret;
 8001a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3730      	adds	r7, #48	@ 0x30
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	58024400 	.word	0x58024400
 8001a1c:	0800c6fc 	.word	0x0800c6fc
 8001a20:	24000014 	.word	0x24000014

08001a24 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a3a:	f06f 0301 	mvn.w	r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	e018      	b.n	8001a74 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	2294      	movs	r2, #148	@ 0x94
 8001a46:	fb02 f303 	mul.w	r3, r2, r3
 8001a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8001a80 <BSP_COM_Init+0x5c>)
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 f866 	bl	8001b20 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	2294      	movs	r2, #148	@ 0x94
 8001a58:	fb02 f303 	mul.w	r3, r2, r3
 8001a5c:	4a08      	ldr	r2, [pc, #32]	@ (8001a80 <BSP_COM_Init+0x5c>)
 8001a5e:	4413      	add	r3, r2
 8001a60:	6839      	ldr	r1, [r7, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f80e 	bl	8001a84 <MX_USART3_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001a6e:	f06f 0303 	mvn.w	r3, #3
 8001a72:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001a74:	68fb      	ldr	r3, [r7, #12]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	240003b0 	.word	0x240003b0

08001a84 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <MX_USART3_Init+0x60>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	220c      	movs	r2, #12
 8001aa2:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	895b      	ldrh	r3, [r3, #10]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	891b      	ldrh	r3, [r3, #8]
 8001aba:	461a      	mov	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	899b      	ldrh	r3, [r3, #12]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ad0:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f005 fa5e 	bl	8006f94 <HAL_UART_Init>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	24000010 	.word	0x24000010

08001ae8 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001af0:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <__io_putchar+0x30>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	2394      	movs	r3, #148	@ 0x94
 8001af8:	fb02 f303 	mul.w	r3, r2, r3
 8001afc:	4a07      	ldr	r2, [pc, #28]	@ (8001b1c <__io_putchar+0x34>)
 8001afe:	1898      	adds	r0, r3, r2
 8001b00:	1d39      	adds	r1, r7, #4
 8001b02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b06:	2201      	movs	r2, #1
 8001b08:	f005 fa94 	bl	8007034 <HAL_UART_Transmit>
  return ch;
 8001b0c:	687b      	ldr	r3, [r7, #4]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	24000444 	.word	0x24000444
 8001b1c:	240003b0 	.word	0x240003b0

08001b20 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	@ 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001b28:	4b27      	ldr	r3, [pc, #156]	@ (8001bc8 <COM1_MspInit+0xa8>)
 8001b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b2e:	4a26      	ldr	r2, [pc, #152]	@ (8001bc8 <COM1_MspInit+0xa8>)
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b38:	4b23      	ldr	r3, [pc, #140]	@ (8001bc8 <COM1_MspInit+0xa8>)
 8001b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001b46:	4b20      	ldr	r3, [pc, #128]	@ (8001bc8 <COM1_MspInit+0xa8>)
 8001b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001bc8 <COM1_MspInit+0xa8>)
 8001b4e:	f043 0308 	orr.w	r3, r3, #8
 8001b52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b56:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc8 <COM1_MspInit+0xa8>)
 8001b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001b64:	4b18      	ldr	r3, [pc, #96]	@ (8001bc8 <COM1_MspInit+0xa8>)
 8001b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b6a:	4a17      	ldr	r2, [pc, #92]	@ (8001bc8 <COM1_MspInit+0xa8>)
 8001b6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b70:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b74:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <COM1_MspInit+0xa8>)
 8001b76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001b82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b86:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001b94:	2307      	movs	r3, #7
 8001b96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	480b      	ldr	r0, [pc, #44]	@ (8001bcc <COM1_MspInit+0xac>)
 8001ba0:	f000 ff94 	bl	8002acc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001ba4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ba8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001bae:	2307      	movs	r3, #7
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4804      	ldr	r0, [pc, #16]	@ (8001bcc <COM1_MspInit+0xac>)
 8001bba:	f000 ff87 	bl	8002acc <HAL_GPIO_Init>
}
 8001bbe:	bf00      	nop
 8001bc0:	3728      	adds	r7, #40	@ 0x28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	58024400 	.word	0x58024400
 8001bcc:	58020c00 	.word	0x58020c00

08001bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd6:	2003      	movs	r0, #3
 8001bd8:	f000 f95c 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bdc:	f001 ff02 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8001be0:	4602      	mov	r2, r0
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <HAL_Init+0x68>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	0a1b      	lsrs	r3, r3, #8
 8001be8:	f003 030f 	and.w	r3, r3, #15
 8001bec:	4913      	ldr	r1, [pc, #76]	@ (8001c3c <HAL_Init+0x6c>)
 8001bee:	5ccb      	ldrb	r3, [r1, r3]
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <HAL_Init+0x68>)
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	4a0e      	ldr	r2, [pc, #56]	@ (8001c3c <HAL_Init+0x6c>)
 8001c04:	5cd3      	ldrb	r3, [r2, r3]
 8001c06:	f003 031f 	and.w	r3, r3, #31
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c10:	4a0b      	ldr	r2, [pc, #44]	@ (8001c40 <HAL_Init+0x70>)
 8001c12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c14:	4a0b      	ldr	r2, [pc, #44]	@ (8001c44 <HAL_Init+0x74>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f000 f814 	bl	8001c48 <HAL_InitTick>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e002      	b.n	8001c30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c2a:	f7ff fba7 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	58024400 	.word	0x58024400
 8001c3c:	0800c6ec 	.word	0x0800c6ec
 8001c40:	2400000c 	.word	0x2400000c
 8001c44:	24000008 	.word	0x24000008

08001c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c50:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <HAL_InitTick+0x60>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e021      	b.n	8001ca0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c5c:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <HAL_InitTick+0x64>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_InitTick+0x60>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f941 	bl	8001efa <HAL_SYSTICK_Config>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00e      	b.n	8001ca0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b0f      	cmp	r3, #15
 8001c86:	d80a      	bhi.n	8001c9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f000 f90b 	bl	8001eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c94:	4a06      	ldr	r2, [pc, #24]	@ (8001cb0 <HAL_InitTick+0x68>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	24000024 	.word	0x24000024
 8001cac:	24000008 	.word	0x24000008
 8001cb0:	24000020 	.word	0x24000020

08001cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_IncTick+0x20>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_IncTick+0x24>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a04      	ldr	r2, [pc, #16]	@ (8001cd8 <HAL_IncTick+0x24>)
 8001cc6:	6013      	str	r3, [r2, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	24000024 	.word	0x24000024
 8001cd8:	24000448 	.word	0x24000448

08001cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	@ (8001cf0 <HAL_GetTick+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	24000448 	.word	0x24000448

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <__NVIC_SetPriorityGrouping+0x40>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d1c:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d22:	4a04      	ldr	r2, [pc, #16]	@ (8001d34 <__NVIC_SetPriorityGrouping+0x40>)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	60d3      	str	r3, [r2, #12]
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00
 8001d38:	05fa0000 	.word	0x05fa0000

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	@ (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db0b      	blt.n	8001d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4907      	ldr	r1, [pc, #28]	@ (8001d90 <__NVIC_EnableIRQ+0x38>)
 8001d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2001      	movs	r0, #1
 8001d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000e100 	.word	0xe000e100

08001d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001da0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	db0a      	blt.n	8001dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	490c      	ldr	r1, [pc, #48]	@ (8001de0 <__NVIC_SetPriority+0x4c>)
 8001dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db2:	0112      	lsls	r2, r2, #4
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	440b      	add	r3, r1
 8001db8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dbc:	e00a      	b.n	8001dd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4908      	ldr	r1, [pc, #32]	@ (8001de4 <__NVIC_SetPriority+0x50>)
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	3b04      	subs	r3, #4
 8001dcc:	0112      	lsls	r2, r2, #4
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	761a      	strb	r2, [r3, #24]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000e100 	.word	0xe000e100
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	@ 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f1c3 0307 	rsb	r3, r3, #7
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	bf28      	it	cs
 8001e06:	2304      	movcs	r3, #4
 8001e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d902      	bls.n	8001e18 <NVIC_EncodePriority+0x30>
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3b03      	subs	r3, #3
 8001e16:	e000      	b.n	8001e1a <NVIC_EncodePriority+0x32>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e30:	f04f 31ff 	mov.w	r1, #4294967295
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	4313      	orrs	r3, r2
         );
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3724      	adds	r7, #36	@ 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e60:	d301      	bcc.n	8001e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00f      	b.n	8001e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e66:	4a0a      	ldr	r2, [pc, #40]	@ (8001e90 <SysTick_Config+0x40>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6e:	210f      	movs	r1, #15
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f7ff ff8e 	bl	8001d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e78:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <SysTick_Config+0x40>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7e:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <SysTick_Config+0x40>)
 8001e80:	2207      	movs	r2, #7
 8001e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	e000e010 	.word	0xe000e010

08001e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff29 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb8:	f7ff ff40 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001ebc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	6978      	ldr	r0, [r7, #20]
 8001ec4:	f7ff ff90 	bl	8001de8 <NVIC_EncodePriority>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff5f 	bl	8001d94 <__NVIC_SetPriority>
}
 8001ed6:	bf00      	nop
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff33 	bl	8001d58 <__NVIC_EnableIRQ>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ffa4 	bl	8001e50 <SysTick_Config>
 8001f08:	4603      	mov	r3, r0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f18:	f3bf 8f5f 	dmb	sy
}
 8001f1c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f1e:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <HAL_MPU_Disable+0x28>)
 8001f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f22:	4a06      	ldr	r2, [pc, #24]	@ (8001f3c <HAL_MPU_Disable+0x28>)
 8001f24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f28:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f2a:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <HAL_MPU_Disable+0x2c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	605a      	str	r2, [r3, #4]
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed00 	.word	0xe000ed00
 8001f40:	e000ed90 	.word	0xe000ed90

08001f44 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f7c <HAL_MPU_Enable+0x38>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f56:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <HAL_MPU_Enable+0x3c>)
 8001f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5a:	4a09      	ldr	r2, [pc, #36]	@ (8001f80 <HAL_MPU_Enable+0x3c>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f60:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f62:	f3bf 8f4f 	dsb	sy
}
 8001f66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f68:	f3bf 8f6f 	isb	sy
}
 8001f6c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000ed90 	.word	0xe000ed90
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	785a      	ldrb	r2, [r3, #1]
 8001f90:	4b1b      	ldr	r3, [pc, #108]	@ (8002000 <HAL_MPU_ConfigRegion+0x7c>)
 8001f92:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001f94:	4b1a      	ldr	r3, [pc, #104]	@ (8002000 <HAL_MPU_ConfigRegion+0x7c>)
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	4a19      	ldr	r2, [pc, #100]	@ (8002000 <HAL_MPU_ConfigRegion+0x7c>)
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001fa0:	4a17      	ldr	r2, [pc, #92]	@ (8002000 <HAL_MPU_ConfigRegion+0x7c>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7b1b      	ldrb	r3, [r3, #12]
 8001fac:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	7adb      	ldrb	r3, [r3, #11]
 8001fb2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7a9b      	ldrb	r3, [r3, #10]
 8001fba:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	7b5b      	ldrb	r3, [r3, #13]
 8001fc2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001fc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	7b9b      	ldrb	r3, [r3, #14]
 8001fca:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001fcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7bdb      	ldrb	r3, [r3, #15]
 8001fd2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001fd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7a5b      	ldrb	r3, [r3, #9]
 8001fda:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001fdc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	7a1b      	ldrb	r3, [r3, #8]
 8001fe2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fe4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	7812      	ldrb	r2, [r2, #0]
 8001fea:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fec:	4a04      	ldr	r2, [pc, #16]	@ (8002000 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fee:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ff0:	6113      	str	r3, [r2, #16]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000ed90 	.word	0xe000ed90

08002004 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800200c:	f7ff fe66 	bl	8001cdc <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e2dc      	b.n	80025d6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d008      	beq.n	800203a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2280      	movs	r2, #128	@ 0x80
 800202c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e2cd      	b.n	80025d6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a76      	ldr	r2, [pc, #472]	@ (8002218 <HAL_DMA_Abort+0x214>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d04a      	beq.n	80020da <HAL_DMA_Abort+0xd6>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a74      	ldr	r2, [pc, #464]	@ (800221c <HAL_DMA_Abort+0x218>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d045      	beq.n	80020da <HAL_DMA_Abort+0xd6>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a73      	ldr	r2, [pc, #460]	@ (8002220 <HAL_DMA_Abort+0x21c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d040      	beq.n	80020da <HAL_DMA_Abort+0xd6>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a71      	ldr	r2, [pc, #452]	@ (8002224 <HAL_DMA_Abort+0x220>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d03b      	beq.n	80020da <HAL_DMA_Abort+0xd6>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a70      	ldr	r2, [pc, #448]	@ (8002228 <HAL_DMA_Abort+0x224>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d036      	beq.n	80020da <HAL_DMA_Abort+0xd6>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a6e      	ldr	r2, [pc, #440]	@ (800222c <HAL_DMA_Abort+0x228>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d031      	beq.n	80020da <HAL_DMA_Abort+0xd6>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a6d      	ldr	r2, [pc, #436]	@ (8002230 <HAL_DMA_Abort+0x22c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d02c      	beq.n	80020da <HAL_DMA_Abort+0xd6>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a6b      	ldr	r2, [pc, #428]	@ (8002234 <HAL_DMA_Abort+0x230>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d027      	beq.n	80020da <HAL_DMA_Abort+0xd6>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a6a      	ldr	r2, [pc, #424]	@ (8002238 <HAL_DMA_Abort+0x234>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d022      	beq.n	80020da <HAL_DMA_Abort+0xd6>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a68      	ldr	r2, [pc, #416]	@ (800223c <HAL_DMA_Abort+0x238>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d01d      	beq.n	80020da <HAL_DMA_Abort+0xd6>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a67      	ldr	r2, [pc, #412]	@ (8002240 <HAL_DMA_Abort+0x23c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d018      	beq.n	80020da <HAL_DMA_Abort+0xd6>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a65      	ldr	r2, [pc, #404]	@ (8002244 <HAL_DMA_Abort+0x240>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d013      	beq.n	80020da <HAL_DMA_Abort+0xd6>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a64      	ldr	r2, [pc, #400]	@ (8002248 <HAL_DMA_Abort+0x244>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d00e      	beq.n	80020da <HAL_DMA_Abort+0xd6>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a62      	ldr	r2, [pc, #392]	@ (800224c <HAL_DMA_Abort+0x248>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d009      	beq.n	80020da <HAL_DMA_Abort+0xd6>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a61      	ldr	r2, [pc, #388]	@ (8002250 <HAL_DMA_Abort+0x24c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d004      	beq.n	80020da <HAL_DMA_Abort+0xd6>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a5f      	ldr	r2, [pc, #380]	@ (8002254 <HAL_DMA_Abort+0x250>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d101      	bne.n	80020de <HAL_DMA_Abort+0xda>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_DMA_Abort+0xdc>
 80020de:	2300      	movs	r3, #0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 021e 	bic.w	r2, r2, #30
 80020f2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002102:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	e00a      	b.n	8002122 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 020e 	bic.w	r2, r2, #14
 800211a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a3c      	ldr	r2, [pc, #240]	@ (8002218 <HAL_DMA_Abort+0x214>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d072      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a3a      	ldr	r2, [pc, #232]	@ (800221c <HAL_DMA_Abort+0x218>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d06d      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a39      	ldr	r2, [pc, #228]	@ (8002220 <HAL_DMA_Abort+0x21c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d068      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a37      	ldr	r2, [pc, #220]	@ (8002224 <HAL_DMA_Abort+0x220>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d063      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a36      	ldr	r2, [pc, #216]	@ (8002228 <HAL_DMA_Abort+0x224>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d05e      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a34      	ldr	r2, [pc, #208]	@ (800222c <HAL_DMA_Abort+0x228>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d059      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a33      	ldr	r2, [pc, #204]	@ (8002230 <HAL_DMA_Abort+0x22c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d054      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a31      	ldr	r2, [pc, #196]	@ (8002234 <HAL_DMA_Abort+0x230>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d04f      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a30      	ldr	r2, [pc, #192]	@ (8002238 <HAL_DMA_Abort+0x234>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d04a      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a2e      	ldr	r2, [pc, #184]	@ (800223c <HAL_DMA_Abort+0x238>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d045      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a2d      	ldr	r2, [pc, #180]	@ (8002240 <HAL_DMA_Abort+0x23c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d040      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a2b      	ldr	r2, [pc, #172]	@ (8002244 <HAL_DMA_Abort+0x240>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d03b      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a2a      	ldr	r2, [pc, #168]	@ (8002248 <HAL_DMA_Abort+0x244>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d036      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a28      	ldr	r2, [pc, #160]	@ (800224c <HAL_DMA_Abort+0x248>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d031      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a27      	ldr	r2, [pc, #156]	@ (8002250 <HAL_DMA_Abort+0x24c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d02c      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a25      	ldr	r2, [pc, #148]	@ (8002254 <HAL_DMA_Abort+0x250>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d027      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a24      	ldr	r2, [pc, #144]	@ (8002258 <HAL_DMA_Abort+0x254>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d022      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a22      	ldr	r2, [pc, #136]	@ (800225c <HAL_DMA_Abort+0x258>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01d      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a21      	ldr	r2, [pc, #132]	@ (8002260 <HAL_DMA_Abort+0x25c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d018      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002264 <HAL_DMA_Abort+0x260>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002268 <HAL_DMA_Abort+0x264>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00e      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1c      	ldr	r2, [pc, #112]	@ (800226c <HAL_DMA_Abort+0x268>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d009      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1b      	ldr	r2, [pc, #108]	@ (8002270 <HAL_DMA_Abort+0x26c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d004      	beq.n	8002212 <HAL_DMA_Abort+0x20e>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a19      	ldr	r2, [pc, #100]	@ (8002274 <HAL_DMA_Abort+0x270>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d132      	bne.n	8002278 <HAL_DMA_Abort+0x274>
 8002212:	2301      	movs	r3, #1
 8002214:	e031      	b.n	800227a <HAL_DMA_Abort+0x276>
 8002216:	bf00      	nop
 8002218:	40020010 	.word	0x40020010
 800221c:	40020028 	.word	0x40020028
 8002220:	40020040 	.word	0x40020040
 8002224:	40020058 	.word	0x40020058
 8002228:	40020070 	.word	0x40020070
 800222c:	40020088 	.word	0x40020088
 8002230:	400200a0 	.word	0x400200a0
 8002234:	400200b8 	.word	0x400200b8
 8002238:	40020410 	.word	0x40020410
 800223c:	40020428 	.word	0x40020428
 8002240:	40020440 	.word	0x40020440
 8002244:	40020458 	.word	0x40020458
 8002248:	40020470 	.word	0x40020470
 800224c:	40020488 	.word	0x40020488
 8002250:	400204a0 	.word	0x400204a0
 8002254:	400204b8 	.word	0x400204b8
 8002258:	58025408 	.word	0x58025408
 800225c:	5802541c 	.word	0x5802541c
 8002260:	58025430 	.word	0x58025430
 8002264:	58025444 	.word	0x58025444
 8002268:	58025458 	.word	0x58025458
 800226c:	5802546c 	.word	0x5802546c
 8002270:	58025480 	.word	0x58025480
 8002274:	58025494 	.word	0x58025494
 8002278:	2300      	movs	r3, #0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d007      	beq.n	800228e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002288:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800228c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a6d      	ldr	r2, [pc, #436]	@ (8002448 <HAL_DMA_Abort+0x444>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d04a      	beq.n	800232e <HAL_DMA_Abort+0x32a>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a6b      	ldr	r2, [pc, #428]	@ (800244c <HAL_DMA_Abort+0x448>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d045      	beq.n	800232e <HAL_DMA_Abort+0x32a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a6a      	ldr	r2, [pc, #424]	@ (8002450 <HAL_DMA_Abort+0x44c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d040      	beq.n	800232e <HAL_DMA_Abort+0x32a>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a68      	ldr	r2, [pc, #416]	@ (8002454 <HAL_DMA_Abort+0x450>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d03b      	beq.n	800232e <HAL_DMA_Abort+0x32a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a67      	ldr	r2, [pc, #412]	@ (8002458 <HAL_DMA_Abort+0x454>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d036      	beq.n	800232e <HAL_DMA_Abort+0x32a>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a65      	ldr	r2, [pc, #404]	@ (800245c <HAL_DMA_Abort+0x458>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d031      	beq.n	800232e <HAL_DMA_Abort+0x32a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a64      	ldr	r2, [pc, #400]	@ (8002460 <HAL_DMA_Abort+0x45c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d02c      	beq.n	800232e <HAL_DMA_Abort+0x32a>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a62      	ldr	r2, [pc, #392]	@ (8002464 <HAL_DMA_Abort+0x460>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d027      	beq.n	800232e <HAL_DMA_Abort+0x32a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a61      	ldr	r2, [pc, #388]	@ (8002468 <HAL_DMA_Abort+0x464>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d022      	beq.n	800232e <HAL_DMA_Abort+0x32a>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a5f      	ldr	r2, [pc, #380]	@ (800246c <HAL_DMA_Abort+0x468>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d01d      	beq.n	800232e <HAL_DMA_Abort+0x32a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002470 <HAL_DMA_Abort+0x46c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d018      	beq.n	800232e <HAL_DMA_Abort+0x32a>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a5c      	ldr	r2, [pc, #368]	@ (8002474 <HAL_DMA_Abort+0x470>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d013      	beq.n	800232e <HAL_DMA_Abort+0x32a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a5b      	ldr	r2, [pc, #364]	@ (8002478 <HAL_DMA_Abort+0x474>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d00e      	beq.n	800232e <HAL_DMA_Abort+0x32a>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a59      	ldr	r2, [pc, #356]	@ (800247c <HAL_DMA_Abort+0x478>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d009      	beq.n	800232e <HAL_DMA_Abort+0x32a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a58      	ldr	r2, [pc, #352]	@ (8002480 <HAL_DMA_Abort+0x47c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d004      	beq.n	800232e <HAL_DMA_Abort+0x32a>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a56      	ldr	r2, [pc, #344]	@ (8002484 <HAL_DMA_Abort+0x480>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d108      	bne.n	8002340 <HAL_DMA_Abort+0x33c>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0201 	bic.w	r2, r2, #1
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	e007      	b.n	8002350 <HAL_DMA_Abort+0x34c>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002350:	e013      	b.n	800237a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002352:	f7ff fcc3 	bl	8001cdc <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b05      	cmp	r3, #5
 800235e:	d90c      	bls.n	800237a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2203      	movs	r2, #3
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e12d      	b.n	80025d6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1e5      	bne.n	8002352 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a2f      	ldr	r2, [pc, #188]	@ (8002448 <HAL_DMA_Abort+0x444>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d04a      	beq.n	8002426 <HAL_DMA_Abort+0x422>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a2d      	ldr	r2, [pc, #180]	@ (800244c <HAL_DMA_Abort+0x448>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d045      	beq.n	8002426 <HAL_DMA_Abort+0x422>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a2c      	ldr	r2, [pc, #176]	@ (8002450 <HAL_DMA_Abort+0x44c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d040      	beq.n	8002426 <HAL_DMA_Abort+0x422>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002454 <HAL_DMA_Abort+0x450>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d03b      	beq.n	8002426 <HAL_DMA_Abort+0x422>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a29      	ldr	r2, [pc, #164]	@ (8002458 <HAL_DMA_Abort+0x454>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d036      	beq.n	8002426 <HAL_DMA_Abort+0x422>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a27      	ldr	r2, [pc, #156]	@ (800245c <HAL_DMA_Abort+0x458>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d031      	beq.n	8002426 <HAL_DMA_Abort+0x422>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a26      	ldr	r2, [pc, #152]	@ (8002460 <HAL_DMA_Abort+0x45c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d02c      	beq.n	8002426 <HAL_DMA_Abort+0x422>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a24      	ldr	r2, [pc, #144]	@ (8002464 <HAL_DMA_Abort+0x460>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d027      	beq.n	8002426 <HAL_DMA_Abort+0x422>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a23      	ldr	r2, [pc, #140]	@ (8002468 <HAL_DMA_Abort+0x464>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d022      	beq.n	8002426 <HAL_DMA_Abort+0x422>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a21      	ldr	r2, [pc, #132]	@ (800246c <HAL_DMA_Abort+0x468>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d01d      	beq.n	8002426 <HAL_DMA_Abort+0x422>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a20      	ldr	r2, [pc, #128]	@ (8002470 <HAL_DMA_Abort+0x46c>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d018      	beq.n	8002426 <HAL_DMA_Abort+0x422>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002474 <HAL_DMA_Abort+0x470>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_DMA_Abort+0x422>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1d      	ldr	r2, [pc, #116]	@ (8002478 <HAL_DMA_Abort+0x474>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00e      	beq.n	8002426 <HAL_DMA_Abort+0x422>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a1b      	ldr	r2, [pc, #108]	@ (800247c <HAL_DMA_Abort+0x478>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d009      	beq.n	8002426 <HAL_DMA_Abort+0x422>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1a      	ldr	r2, [pc, #104]	@ (8002480 <HAL_DMA_Abort+0x47c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d004      	beq.n	8002426 <HAL_DMA_Abort+0x422>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a18      	ldr	r2, [pc, #96]	@ (8002484 <HAL_DMA_Abort+0x480>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_DMA_Abort+0x426>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_DMA_Abort+0x428>
 800242a:	2300      	movs	r3, #0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d02b      	beq.n	8002488 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002434:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	223f      	movs	r2, #63	@ 0x3f
 8002440:	409a      	lsls	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	e02a      	b.n	800249e <HAL_DMA_Abort+0x49a>
 8002448:	40020010 	.word	0x40020010
 800244c:	40020028 	.word	0x40020028
 8002450:	40020040 	.word	0x40020040
 8002454:	40020058 	.word	0x40020058
 8002458:	40020070 	.word	0x40020070
 800245c:	40020088 	.word	0x40020088
 8002460:	400200a0 	.word	0x400200a0
 8002464:	400200b8 	.word	0x400200b8
 8002468:	40020410 	.word	0x40020410
 800246c:	40020428 	.word	0x40020428
 8002470:	40020440 	.word	0x40020440
 8002474:	40020458 	.word	0x40020458
 8002478:	40020470 	.word	0x40020470
 800247c:	40020488 	.word	0x40020488
 8002480:	400204a0 	.word	0x400204a0
 8002484:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	2201      	movs	r2, #1
 8002498:	409a      	lsls	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a4f      	ldr	r2, [pc, #316]	@ (80025e0 <HAL_DMA_Abort+0x5dc>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d072      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a4d      	ldr	r2, [pc, #308]	@ (80025e4 <HAL_DMA_Abort+0x5e0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d06d      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a4c      	ldr	r2, [pc, #304]	@ (80025e8 <HAL_DMA_Abort+0x5e4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d068      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a4a      	ldr	r2, [pc, #296]	@ (80025ec <HAL_DMA_Abort+0x5e8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d063      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a49      	ldr	r2, [pc, #292]	@ (80025f0 <HAL_DMA_Abort+0x5ec>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d05e      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a47      	ldr	r2, [pc, #284]	@ (80025f4 <HAL_DMA_Abort+0x5f0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d059      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a46      	ldr	r2, [pc, #280]	@ (80025f8 <HAL_DMA_Abort+0x5f4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d054      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a44      	ldr	r2, [pc, #272]	@ (80025fc <HAL_DMA_Abort+0x5f8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d04f      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a43      	ldr	r2, [pc, #268]	@ (8002600 <HAL_DMA_Abort+0x5fc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d04a      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a41      	ldr	r2, [pc, #260]	@ (8002604 <HAL_DMA_Abort+0x600>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d045      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a40      	ldr	r2, [pc, #256]	@ (8002608 <HAL_DMA_Abort+0x604>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d040      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a3e      	ldr	r2, [pc, #248]	@ (800260c <HAL_DMA_Abort+0x608>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d03b      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a3d      	ldr	r2, [pc, #244]	@ (8002610 <HAL_DMA_Abort+0x60c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d036      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a3b      	ldr	r2, [pc, #236]	@ (8002614 <HAL_DMA_Abort+0x610>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d031      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a3a      	ldr	r2, [pc, #232]	@ (8002618 <HAL_DMA_Abort+0x614>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d02c      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a38      	ldr	r2, [pc, #224]	@ (800261c <HAL_DMA_Abort+0x618>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d027      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a37      	ldr	r2, [pc, #220]	@ (8002620 <HAL_DMA_Abort+0x61c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d022      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a35      	ldr	r2, [pc, #212]	@ (8002624 <HAL_DMA_Abort+0x620>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d01d      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a34      	ldr	r2, [pc, #208]	@ (8002628 <HAL_DMA_Abort+0x624>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d018      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a32      	ldr	r2, [pc, #200]	@ (800262c <HAL_DMA_Abort+0x628>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d013      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a31      	ldr	r2, [pc, #196]	@ (8002630 <HAL_DMA_Abort+0x62c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d00e      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a2f      	ldr	r2, [pc, #188]	@ (8002634 <HAL_DMA_Abort+0x630>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d009      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a2e      	ldr	r2, [pc, #184]	@ (8002638 <HAL_DMA_Abort+0x634>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d004      	beq.n	800258e <HAL_DMA_Abort+0x58a>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2c      	ldr	r2, [pc, #176]	@ (800263c <HAL_DMA_Abort+0x638>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d101      	bne.n	8002592 <HAL_DMA_Abort+0x58e>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_DMA_Abort+0x590>
 8002592:	2300      	movs	r3, #0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d015      	beq.n	80025c4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80025a0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00c      	beq.n	80025c4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025b8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80025c2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40020010 	.word	0x40020010
 80025e4:	40020028 	.word	0x40020028
 80025e8:	40020040 	.word	0x40020040
 80025ec:	40020058 	.word	0x40020058
 80025f0:	40020070 	.word	0x40020070
 80025f4:	40020088 	.word	0x40020088
 80025f8:	400200a0 	.word	0x400200a0
 80025fc:	400200b8 	.word	0x400200b8
 8002600:	40020410 	.word	0x40020410
 8002604:	40020428 	.word	0x40020428
 8002608:	40020440 	.word	0x40020440
 800260c:	40020458 	.word	0x40020458
 8002610:	40020470 	.word	0x40020470
 8002614:	40020488 	.word	0x40020488
 8002618:	400204a0 	.word	0x400204a0
 800261c:	400204b8 	.word	0x400204b8
 8002620:	58025408 	.word	0x58025408
 8002624:	5802541c 	.word	0x5802541c
 8002628:	58025430 	.word	0x58025430
 800262c:	58025444 	.word	0x58025444
 8002630:	58025458 	.word	0x58025458
 8002634:	5802546c 	.word	0x5802546c
 8002638:	58025480 	.word	0x58025480
 800263c:	58025494 	.word	0x58025494

08002640 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e237      	b.n	8002ac2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d004      	beq.n	8002668 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2280      	movs	r2, #128	@ 0x80
 8002662:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e22c      	b.n	8002ac2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a5c      	ldr	r2, [pc, #368]	@ (80027e0 <HAL_DMA_Abort_IT+0x1a0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d04a      	beq.n	8002708 <HAL_DMA_Abort_IT+0xc8>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a5b      	ldr	r2, [pc, #364]	@ (80027e4 <HAL_DMA_Abort_IT+0x1a4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d045      	beq.n	8002708 <HAL_DMA_Abort_IT+0xc8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a59      	ldr	r2, [pc, #356]	@ (80027e8 <HAL_DMA_Abort_IT+0x1a8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d040      	beq.n	8002708 <HAL_DMA_Abort_IT+0xc8>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a58      	ldr	r2, [pc, #352]	@ (80027ec <HAL_DMA_Abort_IT+0x1ac>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d03b      	beq.n	8002708 <HAL_DMA_Abort_IT+0xc8>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a56      	ldr	r2, [pc, #344]	@ (80027f0 <HAL_DMA_Abort_IT+0x1b0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d036      	beq.n	8002708 <HAL_DMA_Abort_IT+0xc8>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a55      	ldr	r2, [pc, #340]	@ (80027f4 <HAL_DMA_Abort_IT+0x1b4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d031      	beq.n	8002708 <HAL_DMA_Abort_IT+0xc8>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a53      	ldr	r2, [pc, #332]	@ (80027f8 <HAL_DMA_Abort_IT+0x1b8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d02c      	beq.n	8002708 <HAL_DMA_Abort_IT+0xc8>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a52      	ldr	r2, [pc, #328]	@ (80027fc <HAL_DMA_Abort_IT+0x1bc>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d027      	beq.n	8002708 <HAL_DMA_Abort_IT+0xc8>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a50      	ldr	r2, [pc, #320]	@ (8002800 <HAL_DMA_Abort_IT+0x1c0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d022      	beq.n	8002708 <HAL_DMA_Abort_IT+0xc8>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a4f      	ldr	r2, [pc, #316]	@ (8002804 <HAL_DMA_Abort_IT+0x1c4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d01d      	beq.n	8002708 <HAL_DMA_Abort_IT+0xc8>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a4d      	ldr	r2, [pc, #308]	@ (8002808 <HAL_DMA_Abort_IT+0x1c8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d018      	beq.n	8002708 <HAL_DMA_Abort_IT+0xc8>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a4c      	ldr	r2, [pc, #304]	@ (800280c <HAL_DMA_Abort_IT+0x1cc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d013      	beq.n	8002708 <HAL_DMA_Abort_IT+0xc8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a4a      	ldr	r2, [pc, #296]	@ (8002810 <HAL_DMA_Abort_IT+0x1d0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00e      	beq.n	8002708 <HAL_DMA_Abort_IT+0xc8>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a49      	ldr	r2, [pc, #292]	@ (8002814 <HAL_DMA_Abort_IT+0x1d4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d009      	beq.n	8002708 <HAL_DMA_Abort_IT+0xc8>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a47      	ldr	r2, [pc, #284]	@ (8002818 <HAL_DMA_Abort_IT+0x1d8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d004      	beq.n	8002708 <HAL_DMA_Abort_IT+0xc8>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a46      	ldr	r2, [pc, #280]	@ (800281c <HAL_DMA_Abort_IT+0x1dc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d101      	bne.n	800270c <HAL_DMA_Abort_IT+0xcc>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <HAL_DMA_Abort_IT+0xce>
 800270c:	2300      	movs	r3, #0
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 8086 	beq.w	8002820 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2204      	movs	r2, #4
 8002718:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a2f      	ldr	r2, [pc, #188]	@ (80027e0 <HAL_DMA_Abort_IT+0x1a0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d04a      	beq.n	80027bc <HAL_DMA_Abort_IT+0x17c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a2e      	ldr	r2, [pc, #184]	@ (80027e4 <HAL_DMA_Abort_IT+0x1a4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d045      	beq.n	80027bc <HAL_DMA_Abort_IT+0x17c>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a2c      	ldr	r2, [pc, #176]	@ (80027e8 <HAL_DMA_Abort_IT+0x1a8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d040      	beq.n	80027bc <HAL_DMA_Abort_IT+0x17c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a2b      	ldr	r2, [pc, #172]	@ (80027ec <HAL_DMA_Abort_IT+0x1ac>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d03b      	beq.n	80027bc <HAL_DMA_Abort_IT+0x17c>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a29      	ldr	r2, [pc, #164]	@ (80027f0 <HAL_DMA_Abort_IT+0x1b0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d036      	beq.n	80027bc <HAL_DMA_Abort_IT+0x17c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a28      	ldr	r2, [pc, #160]	@ (80027f4 <HAL_DMA_Abort_IT+0x1b4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d031      	beq.n	80027bc <HAL_DMA_Abort_IT+0x17c>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a26      	ldr	r2, [pc, #152]	@ (80027f8 <HAL_DMA_Abort_IT+0x1b8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d02c      	beq.n	80027bc <HAL_DMA_Abort_IT+0x17c>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a25      	ldr	r2, [pc, #148]	@ (80027fc <HAL_DMA_Abort_IT+0x1bc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d027      	beq.n	80027bc <HAL_DMA_Abort_IT+0x17c>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a23      	ldr	r2, [pc, #140]	@ (8002800 <HAL_DMA_Abort_IT+0x1c0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d022      	beq.n	80027bc <HAL_DMA_Abort_IT+0x17c>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a22      	ldr	r2, [pc, #136]	@ (8002804 <HAL_DMA_Abort_IT+0x1c4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d01d      	beq.n	80027bc <HAL_DMA_Abort_IT+0x17c>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a20      	ldr	r2, [pc, #128]	@ (8002808 <HAL_DMA_Abort_IT+0x1c8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d018      	beq.n	80027bc <HAL_DMA_Abort_IT+0x17c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a1f      	ldr	r2, [pc, #124]	@ (800280c <HAL_DMA_Abort_IT+0x1cc>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d013      	beq.n	80027bc <HAL_DMA_Abort_IT+0x17c>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a1d      	ldr	r2, [pc, #116]	@ (8002810 <HAL_DMA_Abort_IT+0x1d0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00e      	beq.n	80027bc <HAL_DMA_Abort_IT+0x17c>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002814 <HAL_DMA_Abort_IT+0x1d4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d009      	beq.n	80027bc <HAL_DMA_Abort_IT+0x17c>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a1a      	ldr	r2, [pc, #104]	@ (8002818 <HAL_DMA_Abort_IT+0x1d8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d004      	beq.n	80027bc <HAL_DMA_Abort_IT+0x17c>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a19      	ldr	r2, [pc, #100]	@ (800281c <HAL_DMA_Abort_IT+0x1dc>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d108      	bne.n	80027ce <HAL_DMA_Abort_IT+0x18e>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0201 	bic.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e178      	b.n	8002ac0 <HAL_DMA_Abort_IT+0x480>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0201 	bic.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	e16f      	b.n	8002ac0 <HAL_DMA_Abort_IT+0x480>
 80027e0:	40020010 	.word	0x40020010
 80027e4:	40020028 	.word	0x40020028
 80027e8:	40020040 	.word	0x40020040
 80027ec:	40020058 	.word	0x40020058
 80027f0:	40020070 	.word	0x40020070
 80027f4:	40020088 	.word	0x40020088
 80027f8:	400200a0 	.word	0x400200a0
 80027fc:	400200b8 	.word	0x400200b8
 8002800:	40020410 	.word	0x40020410
 8002804:	40020428 	.word	0x40020428
 8002808:	40020440 	.word	0x40020440
 800280c:	40020458 	.word	0x40020458
 8002810:	40020470 	.word	0x40020470
 8002814:	40020488 	.word	0x40020488
 8002818:	400204a0 	.word	0x400204a0
 800281c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 020e 	bic.w	r2, r2, #14
 800282e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a6c      	ldr	r2, [pc, #432]	@ (80029e8 <HAL_DMA_Abort_IT+0x3a8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d04a      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x290>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a6b      	ldr	r2, [pc, #428]	@ (80029ec <HAL_DMA_Abort_IT+0x3ac>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d045      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x290>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a69      	ldr	r2, [pc, #420]	@ (80029f0 <HAL_DMA_Abort_IT+0x3b0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d040      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x290>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a68      	ldr	r2, [pc, #416]	@ (80029f4 <HAL_DMA_Abort_IT+0x3b4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d03b      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x290>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a66      	ldr	r2, [pc, #408]	@ (80029f8 <HAL_DMA_Abort_IT+0x3b8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d036      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x290>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a65      	ldr	r2, [pc, #404]	@ (80029fc <HAL_DMA_Abort_IT+0x3bc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d031      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x290>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a63      	ldr	r2, [pc, #396]	@ (8002a00 <HAL_DMA_Abort_IT+0x3c0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d02c      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x290>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a62      	ldr	r2, [pc, #392]	@ (8002a04 <HAL_DMA_Abort_IT+0x3c4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d027      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x290>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a60      	ldr	r2, [pc, #384]	@ (8002a08 <HAL_DMA_Abort_IT+0x3c8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d022      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x290>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a5f      	ldr	r2, [pc, #380]	@ (8002a0c <HAL_DMA_Abort_IT+0x3cc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d01d      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x290>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a5d      	ldr	r2, [pc, #372]	@ (8002a10 <HAL_DMA_Abort_IT+0x3d0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d018      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x290>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a5c      	ldr	r2, [pc, #368]	@ (8002a14 <HAL_DMA_Abort_IT+0x3d4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d013      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x290>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a5a      	ldr	r2, [pc, #360]	@ (8002a18 <HAL_DMA_Abort_IT+0x3d8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00e      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x290>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a59      	ldr	r2, [pc, #356]	@ (8002a1c <HAL_DMA_Abort_IT+0x3dc>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d009      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x290>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a57      	ldr	r2, [pc, #348]	@ (8002a20 <HAL_DMA_Abort_IT+0x3e0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d004      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x290>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a56      	ldr	r2, [pc, #344]	@ (8002a24 <HAL_DMA_Abort_IT+0x3e4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d108      	bne.n	80028e2 <HAL_DMA_Abort_IT+0x2a2>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e007      	b.n	80028f2 <HAL_DMA_Abort_IT+0x2b2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0201 	bic.w	r2, r2, #1
 80028f0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a3c      	ldr	r2, [pc, #240]	@ (80029e8 <HAL_DMA_Abort_IT+0x3a8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d072      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a3a      	ldr	r2, [pc, #232]	@ (80029ec <HAL_DMA_Abort_IT+0x3ac>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d06d      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a39      	ldr	r2, [pc, #228]	@ (80029f0 <HAL_DMA_Abort_IT+0x3b0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d068      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a37      	ldr	r2, [pc, #220]	@ (80029f4 <HAL_DMA_Abort_IT+0x3b4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d063      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a36      	ldr	r2, [pc, #216]	@ (80029f8 <HAL_DMA_Abort_IT+0x3b8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d05e      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a34      	ldr	r2, [pc, #208]	@ (80029fc <HAL_DMA_Abort_IT+0x3bc>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d059      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a33      	ldr	r2, [pc, #204]	@ (8002a00 <HAL_DMA_Abort_IT+0x3c0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d054      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a31      	ldr	r2, [pc, #196]	@ (8002a04 <HAL_DMA_Abort_IT+0x3c4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d04f      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a30      	ldr	r2, [pc, #192]	@ (8002a08 <HAL_DMA_Abort_IT+0x3c8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d04a      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a2e      	ldr	r2, [pc, #184]	@ (8002a0c <HAL_DMA_Abort_IT+0x3cc>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d045      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a2d      	ldr	r2, [pc, #180]	@ (8002a10 <HAL_DMA_Abort_IT+0x3d0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d040      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a2b      	ldr	r2, [pc, #172]	@ (8002a14 <HAL_DMA_Abort_IT+0x3d4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d03b      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a2a      	ldr	r2, [pc, #168]	@ (8002a18 <HAL_DMA_Abort_IT+0x3d8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d036      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a28      	ldr	r2, [pc, #160]	@ (8002a1c <HAL_DMA_Abort_IT+0x3dc>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d031      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a27      	ldr	r2, [pc, #156]	@ (8002a20 <HAL_DMA_Abort_IT+0x3e0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d02c      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a25      	ldr	r2, [pc, #148]	@ (8002a24 <HAL_DMA_Abort_IT+0x3e4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d027      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a24      	ldr	r2, [pc, #144]	@ (8002a28 <HAL_DMA_Abort_IT+0x3e8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d022      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a22      	ldr	r2, [pc, #136]	@ (8002a2c <HAL_DMA_Abort_IT+0x3ec>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d01d      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a21      	ldr	r2, [pc, #132]	@ (8002a30 <HAL_DMA_Abort_IT+0x3f0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d018      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002a34 <HAL_DMA_Abort_IT+0x3f4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d013      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a1e      	ldr	r2, [pc, #120]	@ (8002a38 <HAL_DMA_Abort_IT+0x3f8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00e      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a1c      	ldr	r2, [pc, #112]	@ (8002a3c <HAL_DMA_Abort_IT+0x3fc>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d009      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002a40 <HAL_DMA_Abort_IT+0x400>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d004      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x3a2>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a19      	ldr	r2, [pc, #100]	@ (8002a44 <HAL_DMA_Abort_IT+0x404>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d132      	bne.n	8002a48 <HAL_DMA_Abort_IT+0x408>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e031      	b.n	8002a4a <HAL_DMA_Abort_IT+0x40a>
 80029e6:	bf00      	nop
 80029e8:	40020010 	.word	0x40020010
 80029ec:	40020028 	.word	0x40020028
 80029f0:	40020040 	.word	0x40020040
 80029f4:	40020058 	.word	0x40020058
 80029f8:	40020070 	.word	0x40020070
 80029fc:	40020088 	.word	0x40020088
 8002a00:	400200a0 	.word	0x400200a0
 8002a04:	400200b8 	.word	0x400200b8
 8002a08:	40020410 	.word	0x40020410
 8002a0c:	40020428 	.word	0x40020428
 8002a10:	40020440 	.word	0x40020440
 8002a14:	40020458 	.word	0x40020458
 8002a18:	40020470 	.word	0x40020470
 8002a1c:	40020488 	.word	0x40020488
 8002a20:	400204a0 	.word	0x400204a0
 8002a24:	400204b8 	.word	0x400204b8
 8002a28:	58025408 	.word	0x58025408
 8002a2c:	5802541c 	.word	0x5802541c
 8002a30:	58025430 	.word	0x58025430
 8002a34:	58025444 	.word	0x58025444
 8002a38:	58025458 	.word	0x58025458
 8002a3c:	5802546c 	.word	0x5802546c
 8002a40:	58025480 	.word	0x58025480
 8002a44:	58025494 	.word	0x58025494
 8002a48:	2300      	movs	r3, #0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d028      	beq.n	8002aa0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a62:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a7c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00c      	beq.n	8002aa0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a94:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a9e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop

08002acc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	@ 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002ada:	4b86      	ldr	r3, [pc, #536]	@ (8002cf4 <HAL_GPIO_Init+0x228>)
 8002adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ade:	e18c      	b.n	8002dfa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 817e 	beq.w	8002df4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d005      	beq.n	8002b10 <HAL_GPIO_Init+0x44>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d130      	bne.n	8002b72 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b46:	2201      	movs	r2, #1
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	f003 0201 	and.w	r2, r3, #1
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d017      	beq.n	8002bae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	2203      	movs	r2, #3
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d123      	bne.n	8002c02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	08da      	lsrs	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3208      	adds	r2, #8
 8002bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	220f      	movs	r2, #15
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	691a      	ldr	r2, [r3, #16]
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	08da      	lsrs	r2, r3, #3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3208      	adds	r2, #8
 8002bfc:	69b9      	ldr	r1, [r7, #24]
 8002bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 0203 	and.w	r2, r3, #3
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 80d8 	beq.w	8002df4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c44:	4b2c      	ldr	r3, [pc, #176]	@ (8002cf8 <HAL_GPIO_Init+0x22c>)
 8002c46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8002cf8 <HAL_GPIO_Init+0x22c>)
 8002c4c:	f043 0302 	orr.w	r3, r3, #2
 8002c50:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002c54:	4b28      	ldr	r3, [pc, #160]	@ (8002cf8 <HAL_GPIO_Init+0x22c>)
 8002c56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c62:	4a26      	ldr	r2, [pc, #152]	@ (8002cfc <HAL_GPIO_Init+0x230>)
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	089b      	lsrs	r3, r3, #2
 8002c68:	3302      	adds	r3, #2
 8002c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	220f      	movs	r2, #15
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a1d      	ldr	r2, [pc, #116]	@ (8002d00 <HAL_GPIO_Init+0x234>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d04a      	beq.n	8002d24 <HAL_GPIO_Init+0x258>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a1c      	ldr	r2, [pc, #112]	@ (8002d04 <HAL_GPIO_Init+0x238>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d02b      	beq.n	8002cee <HAL_GPIO_Init+0x222>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a1b      	ldr	r2, [pc, #108]	@ (8002d08 <HAL_GPIO_Init+0x23c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d025      	beq.n	8002cea <HAL_GPIO_Init+0x21e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a1a      	ldr	r2, [pc, #104]	@ (8002d0c <HAL_GPIO_Init+0x240>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d01f      	beq.n	8002ce6 <HAL_GPIO_Init+0x21a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a19      	ldr	r2, [pc, #100]	@ (8002d10 <HAL_GPIO_Init+0x244>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d019      	beq.n	8002ce2 <HAL_GPIO_Init+0x216>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a18      	ldr	r2, [pc, #96]	@ (8002d14 <HAL_GPIO_Init+0x248>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d013      	beq.n	8002cde <HAL_GPIO_Init+0x212>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a17      	ldr	r2, [pc, #92]	@ (8002d18 <HAL_GPIO_Init+0x24c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00d      	beq.n	8002cda <HAL_GPIO_Init+0x20e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a16      	ldr	r2, [pc, #88]	@ (8002d1c <HAL_GPIO_Init+0x250>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d007      	beq.n	8002cd6 <HAL_GPIO_Init+0x20a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a15      	ldr	r2, [pc, #84]	@ (8002d20 <HAL_GPIO_Init+0x254>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d101      	bne.n	8002cd2 <HAL_GPIO_Init+0x206>
 8002cce:	2309      	movs	r3, #9
 8002cd0:	e029      	b.n	8002d26 <HAL_GPIO_Init+0x25a>
 8002cd2:	230a      	movs	r3, #10
 8002cd4:	e027      	b.n	8002d26 <HAL_GPIO_Init+0x25a>
 8002cd6:	2307      	movs	r3, #7
 8002cd8:	e025      	b.n	8002d26 <HAL_GPIO_Init+0x25a>
 8002cda:	2306      	movs	r3, #6
 8002cdc:	e023      	b.n	8002d26 <HAL_GPIO_Init+0x25a>
 8002cde:	2305      	movs	r3, #5
 8002ce0:	e021      	b.n	8002d26 <HAL_GPIO_Init+0x25a>
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	e01f      	b.n	8002d26 <HAL_GPIO_Init+0x25a>
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e01d      	b.n	8002d26 <HAL_GPIO_Init+0x25a>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e01b      	b.n	8002d26 <HAL_GPIO_Init+0x25a>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e019      	b.n	8002d26 <HAL_GPIO_Init+0x25a>
 8002cf2:	bf00      	nop
 8002cf4:	58000080 	.word	0x58000080
 8002cf8:	58024400 	.word	0x58024400
 8002cfc:	58000400 	.word	0x58000400
 8002d00:	58020000 	.word	0x58020000
 8002d04:	58020400 	.word	0x58020400
 8002d08:	58020800 	.word	0x58020800
 8002d0c:	58020c00 	.word	0x58020c00
 8002d10:	58021000 	.word	0x58021000
 8002d14:	58021400 	.word	0x58021400
 8002d18:	58021800 	.word	0x58021800
 8002d1c:	58021c00 	.word	0x58021c00
 8002d20:	58022400 	.word	0x58022400
 8002d24:	2300      	movs	r3, #0
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	f002 0203 	and.w	r2, r2, #3
 8002d2c:	0092      	lsls	r2, r2, #2
 8002d2e:	4093      	lsls	r3, r2
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d36:	4938      	ldr	r1, [pc, #224]	@ (8002e18 <HAL_GPIO_Init+0x34c>)
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	089b      	lsrs	r3, r3, #2
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	3301      	adds	r3, #1
 8002df8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f47f ae6b 	bne.w	8002ae0 <HAL_GPIO_Init+0x14>
  }
}
 8002e0a:	bf00      	nop
 8002e0c:	bf00      	nop
 8002e0e:	3724      	adds	r7, #36	@ 0x24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	58000400 	.word	0x58000400

08002e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	807b      	strh	r3, [r7, #2]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e2c:	787b      	ldrb	r3, [r7, #1]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e32:	887a      	ldrh	r2, [r7, #2]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e38:	e003      	b.n	8002e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e3a:	887b      	ldrh	r3, [r7, #2]
 8002e3c:	041a      	lsls	r2, r3, #16
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	619a      	str	r2, [r3, #24]
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002e58:	4b19      	ldr	r3, [pc, #100]	@ (8002ec0 <HAL_PWREx_ConfigSupply+0x70>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d00a      	beq.n	8002e7a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e64:	4b16      	ldr	r3, [pc, #88]	@ (8002ec0 <HAL_PWREx_ConfigSupply+0x70>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d001      	beq.n	8002e76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e01f      	b.n	8002eb6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	e01d      	b.n	8002eb6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e7a:	4b11      	ldr	r3, [pc, #68]	@ (8002ec0 <HAL_PWREx_ConfigSupply+0x70>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f023 0207 	bic.w	r2, r3, #7
 8002e82:	490f      	ldr	r1, [pc, #60]	@ (8002ec0 <HAL_PWREx_ConfigSupply+0x70>)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002e8a:	f7fe ff27 	bl	8001cdc <HAL_GetTick>
 8002e8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e90:	e009      	b.n	8002ea6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e92:	f7fe ff23 	bl	8001cdc <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ea0:	d901      	bls.n	8002ea6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e007      	b.n	8002eb6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ea6:	4b06      	ldr	r3, [pc, #24]	@ (8002ec0 <HAL_PWREx_ConfigSupply+0x70>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eb2:	d1ee      	bne.n	8002e92 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	58024800 	.word	0x58024800

08002ec4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08c      	sub	sp, #48	@ 0x30
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e3c8      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 8087 	beq.w	8002ff2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee4:	4b88      	ldr	r3, [pc, #544]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002eee:	4b86      	ldr	r3, [pc, #536]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef6:	2b10      	cmp	r3, #16
 8002ef8:	d007      	beq.n	8002f0a <HAL_RCC_OscConfig+0x46>
 8002efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002efc:	2b18      	cmp	r3, #24
 8002efe:	d110      	bne.n	8002f22 <HAL_RCC_OscConfig+0x5e>
 8002f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d10b      	bne.n	8002f22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d06c      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x12c>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d168      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e3a2      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f2a:	d106      	bne.n	8002f3a <HAL_RCC_OscConfig+0x76>
 8002f2c:	4b76      	ldr	r3, [pc, #472]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a75      	ldr	r2, [pc, #468]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8002f32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	e02e      	b.n	8002f98 <HAL_RCC_OscConfig+0xd4>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x98>
 8002f42:	4b71      	ldr	r3, [pc, #452]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a70      	ldr	r2, [pc, #448]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8002f48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	4b6e      	ldr	r3, [pc, #440]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a6d      	ldr	r2, [pc, #436]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8002f54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	e01d      	b.n	8002f98 <HAL_RCC_OscConfig+0xd4>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f64:	d10c      	bne.n	8002f80 <HAL_RCC_OscConfig+0xbc>
 8002f66:	4b68      	ldr	r3, [pc, #416]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a67      	ldr	r2, [pc, #412]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8002f6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	4b65      	ldr	r3, [pc, #404]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a64      	ldr	r2, [pc, #400]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8002f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	e00b      	b.n	8002f98 <HAL_RCC_OscConfig+0xd4>
 8002f80:	4b61      	ldr	r3, [pc, #388]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a60      	ldr	r2, [pc, #384]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8002f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	4b5e      	ldr	r3, [pc, #376]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a5d      	ldr	r2, [pc, #372]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8002f92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d013      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fe9c 	bl	8001cdc <HAL_GetTick>
 8002fa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7fe fe98 	bl	8001cdc <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	@ 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e356      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fba:	4b53      	ldr	r3, [pc, #332]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0xe4>
 8002fc6:	e014      	b.n	8002ff2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fe88 	bl	8001cdc <HAL_GetTick>
 8002fcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd0:	f7fe fe84 	bl	8001cdc <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	@ 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e342      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fe2:	4b49      	ldr	r3, [pc, #292]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x10c>
 8002fee:	e000      	b.n	8002ff2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 808c 	beq.w	8003118 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003000:	4b41      	ldr	r3, [pc, #260]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003008:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800300a:	4b3f      	ldr	r3, [pc, #252]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 800300c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d007      	beq.n	8003026 <HAL_RCC_OscConfig+0x162>
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	2b18      	cmp	r3, #24
 800301a:	d137      	bne.n	800308c <HAL_RCC_OscConfig+0x1c8>
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d132      	bne.n	800308c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003026:	4b38      	ldr	r3, [pc, #224]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	d005      	beq.n	800303e <HAL_RCC_OscConfig+0x17a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e314      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800303e:	4b32      	ldr	r3, [pc, #200]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 0219 	bic.w	r2, r3, #25
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	492f      	ldr	r1, [pc, #188]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe fe44 	bl	8001cdc <HAL_GetTick>
 8003054:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003058:	f7fe fe40 	bl	8001cdc <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e2fe      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800306a:	4b27      	ldr	r3, [pc, #156]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003076:	4b24      	ldr	r3, [pc, #144]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	061b      	lsls	r3, r3, #24
 8003084:	4920      	ldr	r1, [pc, #128]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8003086:	4313      	orrs	r3, r2
 8003088:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800308a:	e045      	b.n	8003118 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d026      	beq.n	80030e2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003094:	4b1c      	ldr	r3, [pc, #112]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f023 0219 	bic.w	r2, r3, #25
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4919      	ldr	r1, [pc, #100]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a6:	f7fe fe19 	bl	8001cdc <HAL_GetTick>
 80030aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ae:	f7fe fe15 	bl	8001cdc <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e2d3      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030c0:	4b11      	ldr	r3, [pc, #68]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	061b      	lsls	r3, r3, #24
 80030da:	490b      	ldr	r1, [pc, #44]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
 80030e0:	e01a      	b.n	8003118 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e2:	4b09      	ldr	r3, [pc, #36]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a08      	ldr	r2, [pc, #32]	@ (8003108 <HAL_RCC_OscConfig+0x244>)
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ee:	f7fe fdf5 	bl	8001cdc <HAL_GetTick>
 80030f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030f4:	e00a      	b.n	800310c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f6:	f7fe fdf1 	bl	8001cdc <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d903      	bls.n	800310c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e2af      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
 8003108:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800310c:	4b96      	ldr	r3, [pc, #600]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1ee      	bne.n	80030f6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b00      	cmp	r3, #0
 8003122:	d06a      	beq.n	80031fa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003124:	4b90      	ldr	r3, [pc, #576]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800312c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800312e:	4b8e      	ldr	r3, [pc, #568]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 8003130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003132:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2b08      	cmp	r3, #8
 8003138:	d007      	beq.n	800314a <HAL_RCC_OscConfig+0x286>
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	2b18      	cmp	r3, #24
 800313e:	d11b      	bne.n	8003178 <HAL_RCC_OscConfig+0x2b4>
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	2b01      	cmp	r3, #1
 8003148:	d116      	bne.n	8003178 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800314a:	4b87      	ldr	r3, [pc, #540]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_RCC_OscConfig+0x29e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	2b80      	cmp	r3, #128	@ 0x80
 800315c:	d001      	beq.n	8003162 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e282      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003162:	4b81      	ldr	r3, [pc, #516]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	061b      	lsls	r3, r3, #24
 8003170:	497d      	ldr	r1, [pc, #500]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 8003172:	4313      	orrs	r3, r2
 8003174:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003176:	e040      	b.n	80031fa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d023      	beq.n	80031c8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003180:	4b79      	ldr	r3, [pc, #484]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a78      	ldr	r2, [pc, #480]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 8003186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800318a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7fe fda6 	bl	8001cdc <HAL_GetTick>
 8003190:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003194:	f7fe fda2 	bl	8001cdc <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e260      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031a6:	4b70      	ldr	r3, [pc, #448]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	061b      	lsls	r3, r3, #24
 80031c0:	4969      	ldr	r1, [pc, #420]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60cb      	str	r3, [r1, #12]
 80031c6:	e018      	b.n	80031fa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80031c8:	4b67      	ldr	r3, [pc, #412]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a66      	ldr	r2, [pc, #408]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 80031ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7fe fd82 	bl	8001cdc <HAL_GetTick>
 80031d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80031dc:	f7fe fd7e 	bl	8001cdc <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e23c      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031ee:	4b5e      	ldr	r3, [pc, #376]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d036      	beq.n	8003274 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d019      	beq.n	8003242 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320e:	4b56      	ldr	r3, [pc, #344]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 8003210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003212:	4a55      	ldr	r2, [pc, #340]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321a:	f7fe fd5f 	bl	8001cdc <HAL_GetTick>
 800321e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003222:	f7fe fd5b 	bl	8001cdc <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e219      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003234:	4b4c      	ldr	r3, [pc, #304]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 8003236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x35e>
 8003240:	e018      	b.n	8003274 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003242:	4b49      	ldr	r3, [pc, #292]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 8003244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003246:	4a48      	ldr	r2, [pc, #288]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324e:	f7fe fd45 	bl	8001cdc <HAL_GetTick>
 8003252:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003256:	f7fe fd41 	bl	8001cdc <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e1ff      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003268:	4b3f      	ldr	r3, [pc, #252]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 800326a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f0      	bne.n	8003256 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b00      	cmp	r3, #0
 800327e:	d036      	beq.n	80032ee <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d019      	beq.n	80032bc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003288:	4b37      	ldr	r3, [pc, #220]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a36      	ldr	r2, [pc, #216]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 800328e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003292:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003294:	f7fe fd22 	bl	8001cdc <HAL_GetTick>
 8003298:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800329c:	f7fe fd1e 	bl	8001cdc <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e1dc      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x3d8>
 80032ba:	e018      	b.n	80032ee <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a29      	ldr	r2, [pc, #164]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 80032c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032c8:	f7fe fd08 	bl	8001cdc <HAL_GetTick>
 80032cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032d0:	f7fe fd04 	bl	8001cdc <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e1c2      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032e2:	4b21      	ldr	r3, [pc, #132]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8086 	beq.w	8003408 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032fc:	4b1b      	ldr	r3, [pc, #108]	@ (800336c <HAL_RCC_OscConfig+0x4a8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a1a      	ldr	r2, [pc, #104]	@ (800336c <HAL_RCC_OscConfig+0x4a8>)
 8003302:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003306:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003308:	f7fe fce8 	bl	8001cdc <HAL_GetTick>
 800330c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003310:	f7fe fce4 	bl	8001cdc <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b64      	cmp	r3, #100	@ 0x64
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e1a2      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003322:	4b12      	ldr	r3, [pc, #72]	@ (800336c <HAL_RCC_OscConfig+0x4a8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d106      	bne.n	8003344 <HAL_RCC_OscConfig+0x480>
 8003336:	4b0c      	ldr	r3, [pc, #48]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333a:	4a0b      	ldr	r2, [pc, #44]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	6713      	str	r3, [r2, #112]	@ 0x70
 8003342:	e032      	b.n	80033aa <HAL_RCC_OscConfig+0x4e6>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d111      	bne.n	8003370 <HAL_RCC_OscConfig+0x4ac>
 800334c:	4b06      	ldr	r3, [pc, #24]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003350:	4a05      	ldr	r2, [pc, #20]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 8003352:	f023 0301 	bic.w	r3, r3, #1
 8003356:	6713      	str	r3, [r2, #112]	@ 0x70
 8003358:	4b03      	ldr	r3, [pc, #12]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335c:	4a02      	ldr	r2, [pc, #8]	@ (8003368 <HAL_RCC_OscConfig+0x4a4>)
 800335e:	f023 0304 	bic.w	r3, r3, #4
 8003362:	6713      	str	r3, [r2, #112]	@ 0x70
 8003364:	e021      	b.n	80033aa <HAL_RCC_OscConfig+0x4e6>
 8003366:	bf00      	nop
 8003368:	58024400 	.word	0x58024400
 800336c:	58024800 	.word	0x58024800
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b05      	cmp	r3, #5
 8003376:	d10c      	bne.n	8003392 <HAL_RCC_OscConfig+0x4ce>
 8003378:	4b83      	ldr	r3, [pc, #524]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337c:	4a82      	ldr	r2, [pc, #520]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 800337e:	f043 0304 	orr.w	r3, r3, #4
 8003382:	6713      	str	r3, [r2, #112]	@ 0x70
 8003384:	4b80      	ldr	r3, [pc, #512]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003388:	4a7f      	ldr	r2, [pc, #508]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003390:	e00b      	b.n	80033aa <HAL_RCC_OscConfig+0x4e6>
 8003392:	4b7d      	ldr	r3, [pc, #500]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003396:	4a7c      	ldr	r2, [pc, #496]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 8003398:	f023 0301 	bic.w	r3, r3, #1
 800339c:	6713      	str	r3, [r2, #112]	@ 0x70
 800339e:	4b7a      	ldr	r3, [pc, #488]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a2:	4a79      	ldr	r2, [pc, #484]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 80033a4:	f023 0304 	bic.w	r3, r3, #4
 80033a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d015      	beq.n	80033de <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b2:	f7fe fc93 	bl	8001cdc <HAL_GetTick>
 80033b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033b8:	e00a      	b.n	80033d0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ba:	f7fe fc8f 	bl	8001cdc <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e14b      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033d0:	4b6d      	ldr	r3, [pc, #436]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 80033d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0ee      	beq.n	80033ba <HAL_RCC_OscConfig+0x4f6>
 80033dc:	e014      	b.n	8003408 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033de:	f7fe fc7d 	bl	8001cdc <HAL_GetTick>
 80033e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033e4:	e00a      	b.n	80033fc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e6:	f7fe fc79 	bl	8001cdc <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e135      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033fc:	4b62      	ldr	r3, [pc, #392]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 80033fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1ee      	bne.n	80033e6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 812a 	beq.w	8003666 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003412:	4b5d      	ldr	r3, [pc, #372]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800341a:	2b18      	cmp	r3, #24
 800341c:	f000 80ba 	beq.w	8003594 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	2b02      	cmp	r3, #2
 8003426:	f040 8095 	bne.w	8003554 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342a:	4b57      	ldr	r3, [pc, #348]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a56      	ldr	r2, [pc, #344]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 8003430:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003436:	f7fe fc51 	bl	8001cdc <HAL_GetTick>
 800343a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343e:	f7fe fc4d 	bl	8001cdc <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e10b      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003450:	4b4d      	ldr	r3, [pc, #308]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f0      	bne.n	800343e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800345c:	4b4a      	ldr	r3, [pc, #296]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 800345e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003460:	4b4a      	ldr	r3, [pc, #296]	@ (800358c <HAL_RCC_OscConfig+0x6c8>)
 8003462:	4013      	ands	r3, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800346c:	0112      	lsls	r2, r2, #4
 800346e:	430a      	orrs	r2, r1
 8003470:	4945      	ldr	r1, [pc, #276]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 8003472:	4313      	orrs	r3, r2
 8003474:	628b      	str	r3, [r1, #40]	@ 0x28
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347a:	3b01      	subs	r3, #1
 800347c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003484:	3b01      	subs	r3, #1
 8003486:	025b      	lsls	r3, r3, #9
 8003488:	b29b      	uxth	r3, r3
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003490:	3b01      	subs	r3, #1
 8003492:	041b      	lsls	r3, r3, #16
 8003494:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349e:	3b01      	subs	r3, #1
 80034a0:	061b      	lsls	r3, r3, #24
 80034a2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80034a6:	4938      	ldr	r1, [pc, #224]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80034ac:	4b36      	ldr	r3, [pc, #216]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 80034ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b0:	4a35      	ldr	r2, [pc, #212]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034b8:	4b33      	ldr	r3, [pc, #204]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 80034ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034bc:	4b34      	ldr	r3, [pc, #208]	@ (8003590 <HAL_RCC_OscConfig+0x6cc>)
 80034be:	4013      	ands	r3, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034c4:	00d2      	lsls	r2, r2, #3
 80034c6:	4930      	ldr	r1, [pc, #192]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80034cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 80034ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d0:	f023 020c 	bic.w	r2, r3, #12
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	492b      	ldr	r1, [pc, #172]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80034de:	4b2a      	ldr	r3, [pc, #168]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 80034e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e2:	f023 0202 	bic.w	r2, r3, #2
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ea:	4927      	ldr	r1, [pc, #156]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034f0:	4b25      	ldr	r3, [pc, #148]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 80034f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f4:	4a24      	ldr	r2, [pc, #144]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 80034f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034fc:	4b22      	ldr	r3, [pc, #136]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 80034fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003500:	4a21      	ldr	r2, [pc, #132]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 8003502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003508:	4b1f      	ldr	r3, [pc, #124]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 800350a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350c:	4a1e      	ldr	r2, [pc, #120]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 800350e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003512:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003514:	4b1c      	ldr	r3, [pc, #112]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 8003516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003518:	4a1b      	ldr	r2, [pc, #108]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003520:	4b19      	ldr	r3, [pc, #100]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a18      	ldr	r2, [pc, #96]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 8003526:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800352a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe fbd6 	bl	8001cdc <HAL_GetTick>
 8003530:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003534:	f7fe fbd2 	bl	8001cdc <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e090      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003546:	4b10      	ldr	r3, [pc, #64]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0x670>
 8003552:	e088      	b.n	8003666 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003554:	4b0c      	ldr	r3, [pc, #48]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a0b      	ldr	r2, [pc, #44]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 800355a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800355e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fe fbbc 	bl	8001cdc <HAL_GetTick>
 8003564:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003568:	f7fe fbb8 	bl	8001cdc <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e076      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800357a:	4b03      	ldr	r3, [pc, #12]	@ (8003588 <HAL_RCC_OscConfig+0x6c4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x6a4>
 8003586:	e06e      	b.n	8003666 <HAL_RCC_OscConfig+0x7a2>
 8003588:	58024400 	.word	0x58024400
 800358c:	fffffc0c 	.word	0xfffffc0c
 8003590:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003594:	4b36      	ldr	r3, [pc, #216]	@ (8003670 <HAL_RCC_OscConfig+0x7ac>)
 8003596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003598:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800359a:	4b35      	ldr	r3, [pc, #212]	@ (8003670 <HAL_RCC_OscConfig+0x7ac>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d031      	beq.n	800360c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f003 0203 	and.w	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d12a      	bne.n	800360c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d122      	bne.n	800360c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d11a      	bne.n	800360c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	0a5b      	lsrs	r3, r3, #9
 80035da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d111      	bne.n	800360c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	0c1b      	lsrs	r3, r3, #16
 80035ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d108      	bne.n	800360c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	0e1b      	lsrs	r3, r3, #24
 80035fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003606:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003608:	429a      	cmp	r2, r3
 800360a:	d001      	beq.n	8003610 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e02b      	b.n	8003668 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003610:	4b17      	ldr	r3, [pc, #92]	@ (8003670 <HAL_RCC_OscConfig+0x7ac>)
 8003612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003614:	08db      	lsrs	r3, r3, #3
 8003616:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800361a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	429a      	cmp	r2, r3
 8003624:	d01f      	beq.n	8003666 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003626:	4b12      	ldr	r3, [pc, #72]	@ (8003670 <HAL_RCC_OscConfig+0x7ac>)
 8003628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362a:	4a11      	ldr	r2, [pc, #68]	@ (8003670 <HAL_RCC_OscConfig+0x7ac>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003632:	f7fe fb53 	bl	8001cdc <HAL_GetTick>
 8003636:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003638:	bf00      	nop
 800363a:	f7fe fb4f 	bl	8001cdc <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003642:	4293      	cmp	r3, r2
 8003644:	d0f9      	beq.n	800363a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003646:	4b0a      	ldr	r3, [pc, #40]	@ (8003670 <HAL_RCC_OscConfig+0x7ac>)
 8003648:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800364a:	4b0a      	ldr	r3, [pc, #40]	@ (8003674 <HAL_RCC_OscConfig+0x7b0>)
 800364c:	4013      	ands	r3, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003652:	00d2      	lsls	r2, r2, #3
 8003654:	4906      	ldr	r1, [pc, #24]	@ (8003670 <HAL_RCC_OscConfig+0x7ac>)
 8003656:	4313      	orrs	r3, r2
 8003658:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800365a:	4b05      	ldr	r3, [pc, #20]	@ (8003670 <HAL_RCC_OscConfig+0x7ac>)
 800365c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365e:	4a04      	ldr	r2, [pc, #16]	@ (8003670 <HAL_RCC_OscConfig+0x7ac>)
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3730      	adds	r7, #48	@ 0x30
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	58024400 	.word	0x58024400
 8003674:	ffff0007 	.word	0xffff0007

08003678 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e19c      	b.n	80039c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800368c:	4b8a      	ldr	r3, [pc, #552]	@ (80038b8 <HAL_RCC_ClockConfig+0x240>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d910      	bls.n	80036bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369a:	4b87      	ldr	r3, [pc, #540]	@ (80038b8 <HAL_RCC_ClockConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f023 020f 	bic.w	r2, r3, #15
 80036a2:	4985      	ldr	r1, [pc, #532]	@ (80038b8 <HAL_RCC_ClockConfig+0x240>)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036aa:	4b83      	ldr	r3, [pc, #524]	@ (80038b8 <HAL_RCC_ClockConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e184      	b.n	80039c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d010      	beq.n	80036ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	4b7b      	ldr	r3, [pc, #492]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d908      	bls.n	80036ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036d8:	4b78      	ldr	r3, [pc, #480]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	4975      	ldr	r1, [pc, #468]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d010      	beq.n	8003718 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	4b70      	ldr	r3, [pc, #448]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003702:	429a      	cmp	r2, r3
 8003704:	d908      	bls.n	8003718 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003706:	4b6d      	ldr	r3, [pc, #436]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	496a      	ldr	r1, [pc, #424]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 8003714:	4313      	orrs	r3, r2
 8003716:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	2b00      	cmp	r3, #0
 8003722:	d010      	beq.n	8003746 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699a      	ldr	r2, [r3, #24]
 8003728:	4b64      	ldr	r3, [pc, #400]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003730:	429a      	cmp	r2, r3
 8003732:	d908      	bls.n	8003746 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003734:	4b61      	ldr	r3, [pc, #388]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	495e      	ldr	r1, [pc, #376]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 8003742:	4313      	orrs	r3, r2
 8003744:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d010      	beq.n	8003774 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	4b59      	ldr	r3, [pc, #356]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800375e:	429a      	cmp	r2, r3
 8003760:	d908      	bls.n	8003774 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003762:	4b56      	ldr	r3, [pc, #344]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	4953      	ldr	r1, [pc, #332]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 8003770:	4313      	orrs	r3, r2
 8003772:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d010      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	4b4d      	ldr	r3, [pc, #308]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	f003 030f 	and.w	r3, r3, #15
 800378c:	429a      	cmp	r2, r3
 800378e:	d908      	bls.n	80037a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003790:	4b4a      	ldr	r3, [pc, #296]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	f023 020f 	bic.w	r2, r3, #15
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4947      	ldr	r1, [pc, #284]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d055      	beq.n	800385a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80037ae:	4b43      	ldr	r3, [pc, #268]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	4940      	ldr	r1, [pc, #256]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d107      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037c8:	4b3c      	ldr	r3, [pc, #240]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d121      	bne.n	8003818 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0f6      	b.n	80039c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d107      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037e0:	4b36      	ldr	r3, [pc, #216]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d115      	bne.n	8003818 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0ea      	b.n	80039c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d107      	bne.n	8003808 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037f8:	4b30      	ldr	r3, [pc, #192]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d109      	bne.n	8003818 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0de      	b.n	80039c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003808:	4b2c      	ldr	r3, [pc, #176]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0d6      	b.n	80039c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003818:	4b28      	ldr	r3, [pc, #160]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f023 0207 	bic.w	r2, r3, #7
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	4925      	ldr	r1, [pc, #148]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 8003826:	4313      	orrs	r3, r2
 8003828:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800382a:	f7fe fa57 	bl	8001cdc <HAL_GetTick>
 800382e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003830:	e00a      	b.n	8003848 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003832:	f7fe fa53 	bl	8001cdc <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003840:	4293      	cmp	r3, r2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e0be      	b.n	80039c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003848:	4b1c      	ldr	r3, [pc, #112]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	429a      	cmp	r2, r3
 8003858:	d1eb      	bne.n	8003832 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d010      	beq.n	8003888 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	4b14      	ldr	r3, [pc, #80]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	429a      	cmp	r2, r3
 8003874:	d208      	bcs.n	8003888 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003876:	4b11      	ldr	r3, [pc, #68]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	f023 020f 	bic.w	r2, r3, #15
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	490e      	ldr	r1, [pc, #56]	@ (80038bc <HAL_RCC_ClockConfig+0x244>)
 8003884:	4313      	orrs	r3, r2
 8003886:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003888:	4b0b      	ldr	r3, [pc, #44]	@ (80038b8 <HAL_RCC_ClockConfig+0x240>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d214      	bcs.n	80038c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b08      	ldr	r3, [pc, #32]	@ (80038b8 <HAL_RCC_ClockConfig+0x240>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 020f 	bic.w	r2, r3, #15
 800389e:	4906      	ldr	r1, [pc, #24]	@ (80038b8 <HAL_RCC_ClockConfig+0x240>)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b04      	ldr	r3, [pc, #16]	@ (80038b8 <HAL_RCC_ClockConfig+0x240>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e086      	b.n	80039c6 <HAL_RCC_ClockConfig+0x34e>
 80038b8:	52002000 	.word	0x52002000
 80038bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d010      	beq.n	80038ee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	4b3f      	ldr	r3, [pc, #252]	@ (80039d0 <HAL_RCC_ClockConfig+0x358>)
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038d8:	429a      	cmp	r2, r3
 80038da:	d208      	bcs.n	80038ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038dc:	4b3c      	ldr	r3, [pc, #240]	@ (80039d0 <HAL_RCC_ClockConfig+0x358>)
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	4939      	ldr	r1, [pc, #228]	@ (80039d0 <HAL_RCC_ClockConfig+0x358>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d010      	beq.n	800391c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	4b34      	ldr	r3, [pc, #208]	@ (80039d0 <HAL_RCC_ClockConfig+0x358>)
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003906:	429a      	cmp	r2, r3
 8003908:	d208      	bcs.n	800391c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800390a:	4b31      	ldr	r3, [pc, #196]	@ (80039d0 <HAL_RCC_ClockConfig+0x358>)
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	492e      	ldr	r1, [pc, #184]	@ (80039d0 <HAL_RCC_ClockConfig+0x358>)
 8003918:	4313      	orrs	r3, r2
 800391a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699a      	ldr	r2, [r3, #24]
 800392c:	4b28      	ldr	r3, [pc, #160]	@ (80039d0 <HAL_RCC_ClockConfig+0x358>)
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003934:	429a      	cmp	r2, r3
 8003936:	d208      	bcs.n	800394a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003938:	4b25      	ldr	r3, [pc, #148]	@ (80039d0 <HAL_RCC_ClockConfig+0x358>)
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	4922      	ldr	r1, [pc, #136]	@ (80039d0 <HAL_RCC_ClockConfig+0x358>)
 8003946:	4313      	orrs	r3, r2
 8003948:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d010      	beq.n	8003978 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69da      	ldr	r2, [r3, #28]
 800395a:	4b1d      	ldr	r3, [pc, #116]	@ (80039d0 <HAL_RCC_ClockConfig+0x358>)
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003962:	429a      	cmp	r2, r3
 8003964:	d208      	bcs.n	8003978 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003966:	4b1a      	ldr	r3, [pc, #104]	@ (80039d0 <HAL_RCC_ClockConfig+0x358>)
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	4917      	ldr	r1, [pc, #92]	@ (80039d0 <HAL_RCC_ClockConfig+0x358>)
 8003974:	4313      	orrs	r3, r2
 8003976:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003978:	f000 f834 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 800397c:	4602      	mov	r2, r0
 800397e:	4b14      	ldr	r3, [pc, #80]	@ (80039d0 <HAL_RCC_ClockConfig+0x358>)
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	0a1b      	lsrs	r3, r3, #8
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	4912      	ldr	r1, [pc, #72]	@ (80039d4 <HAL_RCC_ClockConfig+0x35c>)
 800398a:	5ccb      	ldrb	r3, [r1, r3]
 800398c:	f003 031f 	and.w	r3, r3, #31
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
 8003994:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003996:	4b0e      	ldr	r3, [pc, #56]	@ (80039d0 <HAL_RCC_ClockConfig+0x358>)
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	4a0d      	ldr	r2, [pc, #52]	@ (80039d4 <HAL_RCC_ClockConfig+0x35c>)
 80039a0:	5cd3      	ldrb	r3, [r2, r3]
 80039a2:	f003 031f 	and.w	r3, r3, #31
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
 80039ac:	4a0a      	ldr	r2, [pc, #40]	@ (80039d8 <HAL_RCC_ClockConfig+0x360>)
 80039ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039b0:	4a0a      	ldr	r2, [pc, #40]	@ (80039dc <HAL_RCC_ClockConfig+0x364>)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80039b6:	4b0a      	ldr	r3, [pc, #40]	@ (80039e0 <HAL_RCC_ClockConfig+0x368>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe f944 	bl	8001c48 <HAL_InitTick>
 80039c0:	4603      	mov	r3, r0
 80039c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	58024400 	.word	0x58024400
 80039d4:	0800c6ec 	.word	0x0800c6ec
 80039d8:	2400000c 	.word	0x2400000c
 80039dc:	24000008 	.word	0x24000008
 80039e0:	24000020 	.word	0x24000020

080039e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b089      	sub	sp, #36	@ 0x24
 80039e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ea:	4bb3      	ldr	r3, [pc, #716]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039f2:	2b18      	cmp	r3, #24
 80039f4:	f200 8155 	bhi.w	8003ca2 <HAL_RCC_GetSysClockFreq+0x2be>
 80039f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003a00 <HAL_RCC_GetSysClockFreq+0x1c>)
 80039fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fe:	bf00      	nop
 8003a00:	08003a65 	.word	0x08003a65
 8003a04:	08003ca3 	.word	0x08003ca3
 8003a08:	08003ca3 	.word	0x08003ca3
 8003a0c:	08003ca3 	.word	0x08003ca3
 8003a10:	08003ca3 	.word	0x08003ca3
 8003a14:	08003ca3 	.word	0x08003ca3
 8003a18:	08003ca3 	.word	0x08003ca3
 8003a1c:	08003ca3 	.word	0x08003ca3
 8003a20:	08003a8b 	.word	0x08003a8b
 8003a24:	08003ca3 	.word	0x08003ca3
 8003a28:	08003ca3 	.word	0x08003ca3
 8003a2c:	08003ca3 	.word	0x08003ca3
 8003a30:	08003ca3 	.word	0x08003ca3
 8003a34:	08003ca3 	.word	0x08003ca3
 8003a38:	08003ca3 	.word	0x08003ca3
 8003a3c:	08003ca3 	.word	0x08003ca3
 8003a40:	08003a91 	.word	0x08003a91
 8003a44:	08003ca3 	.word	0x08003ca3
 8003a48:	08003ca3 	.word	0x08003ca3
 8003a4c:	08003ca3 	.word	0x08003ca3
 8003a50:	08003ca3 	.word	0x08003ca3
 8003a54:	08003ca3 	.word	0x08003ca3
 8003a58:	08003ca3 	.word	0x08003ca3
 8003a5c:	08003ca3 	.word	0x08003ca3
 8003a60:	08003a97 	.word	0x08003a97
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a64:	4b94      	ldr	r3, [pc, #592]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0320 	and.w	r3, r3, #32
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d009      	beq.n	8003a84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a70:	4b91      	ldr	r3, [pc, #580]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	08db      	lsrs	r3, r3, #3
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	4a90      	ldr	r2, [pc, #576]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003a82:	e111      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a84:	4b8d      	ldr	r3, [pc, #564]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a86:	61bb      	str	r3, [r7, #24]
      break;
 8003a88:	e10e      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003a8a:	4b8d      	ldr	r3, [pc, #564]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a8c:	61bb      	str	r3, [r7, #24]
      break;
 8003a8e:	e10b      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003a90:	4b8c      	ldr	r3, [pc, #560]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a92:	61bb      	str	r3, [r7, #24]
      break;
 8003a94:	e108      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a96:	4b88      	ldr	r3, [pc, #544]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003aa0:	4b85      	ldr	r3, [pc, #532]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003aaa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003aac:	4b82      	ldr	r3, [pc, #520]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003ab6:	4b80      	ldr	r3, [pc, #512]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aba:	08db      	lsrs	r3, r3, #3
 8003abc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	ee07 3a90 	vmov	s15, r3
 8003aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ace:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80e1 	beq.w	8003c9c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	f000 8083 	beq.w	8003be8 <HAL_RCC_GetSysClockFreq+0x204>
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	f200 80a1 	bhi.w	8003c2c <HAL_RCC_GetSysClockFreq+0x248>
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0x114>
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d056      	beq.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003af6:	e099      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003af8:	4b6f      	ldr	r3, [pc, #444]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d02d      	beq.n	8003b60 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b04:	4b6c      	ldr	r3, [pc, #432]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	08db      	lsrs	r3, r3, #3
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	4a6b      	ldr	r2, [pc, #428]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b10:	fa22 f303 	lsr.w	r3, r2, r3
 8003b14:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	ee07 3a90 	vmov	s15, r3
 8003b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b2e:	4b62      	ldr	r3, [pc, #392]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b36:	ee07 3a90 	vmov	s15, r3
 8003b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b42:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003cc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b5a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003b5e:	e087      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	ee07 3a90 	vmov	s15, r3
 8003b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003ccc <HAL_RCC_GetSysClockFreq+0x2e8>
 8003b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b72:	4b51      	ldr	r3, [pc, #324]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b86:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003cc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ba2:	e065      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	ee07 3a90 	vmov	s15, r3
 8003baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003cd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bb6:	4b40      	ldr	r3, [pc, #256]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003cc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003be6:	e043      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	ee07 3a90 	vmov	s15, r3
 8003bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003cd4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c0e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003cc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c2a:	e021      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	ee07 3a90 	vmov	s15, r3
 8003c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c36:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003cd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c46:	ee07 3a90 	vmov	s15, r3
 8003c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c52:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003cc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c6e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003c70:	4b11      	ldr	r3, [pc, #68]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c74:	0a5b      	lsrs	r3, r3, #9
 8003c76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	ee07 3a90 	vmov	s15, r3
 8003c84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c88:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c94:	ee17 3a90 	vmov	r3, s15
 8003c98:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003c9a:	e005      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	61bb      	str	r3, [r7, #24]
      break;
 8003ca0:	e002      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003ca2:	4b07      	ldr	r3, [pc, #28]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ca4:	61bb      	str	r3, [r7, #24]
      break;
 8003ca6:	bf00      	nop
  }

  return sysclockfreq;
 8003ca8:	69bb      	ldr	r3, [r7, #24]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3724      	adds	r7, #36	@ 0x24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	58024400 	.word	0x58024400
 8003cbc:	03d09000 	.word	0x03d09000
 8003cc0:	003d0900 	.word	0x003d0900
 8003cc4:	007a1200 	.word	0x007a1200
 8003cc8:	46000000 	.word	0x46000000
 8003ccc:	4c742400 	.word	0x4c742400
 8003cd0:	4a742400 	.word	0x4a742400
 8003cd4:	4af42400 	.word	0x4af42400

08003cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003cde:	f7ff fe81 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	4b10      	ldr	r3, [pc, #64]	@ (8003d28 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	0a1b      	lsrs	r3, r3, #8
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	490f      	ldr	r1, [pc, #60]	@ (8003d2c <HAL_RCC_GetHCLKFreq+0x54>)
 8003cf0:	5ccb      	ldrb	r3, [r1, r3]
 8003cf2:	f003 031f 	and.w	r3, r3, #31
 8003cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8003d28 <HAL_RCC_GetHCLKFreq+0x50>)
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	4a09      	ldr	r2, [pc, #36]	@ (8003d2c <HAL_RCC_GetHCLKFreq+0x54>)
 8003d06:	5cd3      	ldrb	r3, [r2, r3]
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d12:	4a07      	ldr	r2, [pc, #28]	@ (8003d30 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d16:	4a07      	ldr	r2, [pc, #28]	@ (8003d34 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d1c:	4b04      	ldr	r3, [pc, #16]	@ (8003d30 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	58024400 	.word	0x58024400
 8003d2c:	0800c6ec 	.word	0x0800c6ec
 8003d30:	2400000c 	.word	0x2400000c
 8003d34:	24000008 	.word	0x24000008

08003d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003d3c:	f7ff ffcc 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b06      	ldr	r3, [pc, #24]	@ (8003d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4904      	ldr	r1, [pc, #16]	@ (8003d60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	58024400 	.word	0x58024400
 8003d60:	0800c6ec 	.word	0x0800c6ec

08003d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003d68:	f7ff ffb6 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	4b06      	ldr	r3, [pc, #24]	@ (8003d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	0a1b      	lsrs	r3, r3, #8
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	4904      	ldr	r1, [pc, #16]	@ (8003d8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d7a:	5ccb      	ldrb	r3, [r1, r3]
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	58024400 	.word	0x58024400
 8003d8c:	0800c6ec 	.word	0x0800c6ec

08003d90 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d94:	b0c6      	sub	sp, #280	@ 0x118
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003da2:	2300      	movs	r3, #0
 8003da4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003db4:	2500      	movs	r5, #0
 8003db6:	ea54 0305 	orrs.w	r3, r4, r5
 8003dba:	d049      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dc2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003dc6:	d02f      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003dc8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003dcc:	d828      	bhi.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003dce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dd2:	d01a      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003dd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dd8:	d822      	bhi.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003dde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003de2:	d007      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003de4:	e01c      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de6:	4bab      	ldr	r3, [pc, #684]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dea:	4aaa      	ldr	r2, [pc, #680]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003df0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003df2:	e01a      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df8:	3308      	adds	r3, #8
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f001 fc25 	bl	800564c <RCCEx_PLL2_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e08:	e00f      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e0e:	3328      	adds	r3, #40	@ 0x28
 8003e10:	2102      	movs	r1, #2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f001 fccc 	bl	80057b0 <RCCEx_PLL3_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e1e:	e004      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e26:	e000      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003e32:	4b98      	ldr	r3, [pc, #608]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e36:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e40:	4a94      	ldr	r2, [pc, #592]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e42:	430b      	orrs	r3, r1
 8003e44:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e46:	e003      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e58:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003e5c:	f04f 0900 	mov.w	r9, #0
 8003e60:	ea58 0309 	orrs.w	r3, r8, r9
 8003e64:	d047      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d82a      	bhi.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003e70:	a201      	add	r2, pc, #4	@ (adr r2, 8003e78 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003e8d 	.word	0x08003e8d
 8003e7c:	08003e9b 	.word	0x08003e9b
 8003e80:	08003eb1 	.word	0x08003eb1
 8003e84:	08003ecf 	.word	0x08003ecf
 8003e88:	08003ecf 	.word	0x08003ecf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e8c:	4b81      	ldr	r3, [pc, #516]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e90:	4a80      	ldr	r2, [pc, #512]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e98:	e01a      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f001 fbd2 	bl	800564c <RCCEx_PLL2_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003eae:	e00f      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb4:	3328      	adds	r3, #40	@ 0x28
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f001 fc79 	bl	80057b0 <RCCEx_PLL3_Config>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ec4:	e004      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ecc:	e000      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10a      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ed8:	4b6e      	ldr	r3, [pc, #440]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003edc:	f023 0107 	bic.w	r1, r3, #7
 8003ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee6:	4a6b      	ldr	r2, [pc, #428]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	6513      	str	r3, [r2, #80]	@ 0x50
 8003eec:	e003      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ef2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efe:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8003f02:	f04f 0b00 	mov.w	fp, #0
 8003f06:	ea5a 030b 	orrs.w	r3, sl, fp
 8003f0a:	d05b      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f14:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003f18:	d03b      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003f1a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003f1e:	d834      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003f20:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f24:	d037      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003f26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f2a:	d82e      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003f2c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003f30:	d033      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003f32:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003f36:	d828      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003f38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f3c:	d01a      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003f3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f42:	d822      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003f48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f4c:	d007      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003f4e:	e01c      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f50:	4b50      	ldr	r3, [pc, #320]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f54:	4a4f      	ldr	r2, [pc, #316]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f5c:	e01e      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f62:	3308      	adds	r3, #8
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f001 fb70 	bl	800564c <RCCEx_PLL2_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003f72:	e013      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f78:	3328      	adds	r3, #40	@ 0x28
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f001 fc17 	bl	80057b0 <RCCEx_PLL3_Config>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f88:	e008      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f90:	e004      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003f92:	bf00      	nop
 8003f94:	e002      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003f96:	bf00      	nop
 8003f98:	e000      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003f9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10b      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003fa4:	4b3b      	ldr	r3, [pc, #236]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003fb4:	4a37      	ldr	r2, [pc, #220]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fb6:	430b      	orrs	r3, r1
 8003fb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fba:	e003      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003fd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003fda:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	d05d      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003fec:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003ff0:	d03b      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003ff2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003ff6:	d834      	bhi.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003ff8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ffc:	d037      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003ffe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004002:	d82e      	bhi.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004004:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004008:	d033      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800400a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800400e:	d828      	bhi.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004010:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004014:	d01a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004016:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800401a:	d822      	bhi.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004020:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004024:	d007      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004026:	e01c      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004028:	4b1a      	ldr	r3, [pc, #104]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800402a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402c:	4a19      	ldr	r2, [pc, #100]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800402e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004032:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004034:	e01e      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800403a:	3308      	adds	r3, #8
 800403c:	2100      	movs	r1, #0
 800403e:	4618      	mov	r0, r3
 8004040:	f001 fb04 	bl	800564c <RCCEx_PLL2_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800404a:	e013      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800404c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004050:	3328      	adds	r3, #40	@ 0x28
 8004052:	2100      	movs	r1, #0
 8004054:	4618      	mov	r0, r3
 8004056:	f001 fbab 	bl	80057b0 <RCCEx_PLL3_Config>
 800405a:	4603      	mov	r3, r0
 800405c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004060:	e008      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004068:	e004      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800406a:	bf00      	nop
 800406c:	e002      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800406e:	bf00      	nop
 8004070:	e000      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004074:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10d      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800407c:	4b05      	ldr	r3, [pc, #20]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800407e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004080:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004088:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800408c:	4a01      	ldr	r2, [pc, #4]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800408e:	430b      	orrs	r3, r1
 8004090:	6593      	str	r3, [r2, #88]	@ 0x58
 8004092:	e005      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004094:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004098:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800409c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80040a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80040ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80040b0:	2300      	movs	r3, #0
 80040b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80040b6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4313      	orrs	r3, r2
 80040be:	d03a      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80040c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040c6:	2b30      	cmp	r3, #48	@ 0x30
 80040c8:	d01f      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80040ca:	2b30      	cmp	r3, #48	@ 0x30
 80040cc:	d819      	bhi.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d00c      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	d815      	bhi.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d019      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80040da:	2b10      	cmp	r3, #16
 80040dc:	d111      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040de:	4baa      	ldr	r3, [pc, #680]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e2:	4aa9      	ldr	r2, [pc, #676]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80040ea:	e011      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040f0:	3308      	adds	r3, #8
 80040f2:	2102      	movs	r1, #2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f001 faa9 	bl	800564c <RCCEx_PLL2_Config>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004100:	e006      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004108:	e002      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800410a:	bf00      	nop
 800410c:	e000      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800410e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004110:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10a      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004118:	4b9b      	ldr	r3, [pc, #620]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800411a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004126:	4a98      	ldr	r2, [pc, #608]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004128:	430b      	orrs	r3, r1
 800412a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800412c:	e003      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004132:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004142:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004146:	2300      	movs	r3, #0
 8004148:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800414c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004150:	460b      	mov	r3, r1
 8004152:	4313      	orrs	r3, r2
 8004154:	d051      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800415a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800415c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004160:	d035      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004162:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004166:	d82e      	bhi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004168:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800416c:	d031      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800416e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004172:	d828      	bhi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004174:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004178:	d01a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800417a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800417e:	d822      	bhi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004188:	d007      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800418a:	e01c      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800418c:	4b7e      	ldr	r3, [pc, #504]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800418e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004190:	4a7d      	ldr	r2, [pc, #500]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004198:	e01c      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800419a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800419e:	3308      	adds	r3, #8
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f001 fa52 	bl	800564c <RCCEx_PLL2_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041ae:	e011      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041b4:	3328      	adds	r3, #40	@ 0x28
 80041b6:	2100      	movs	r1, #0
 80041b8:	4618      	mov	r0, r3
 80041ba:	f001 faf9 	bl	80057b0 <RCCEx_PLL3_Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041c4:	e006      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041cc:	e002      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80041ce:	bf00      	nop
 80041d0:	e000      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80041d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80041dc:	4b6a      	ldr	r3, [pc, #424]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80041e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ea:	4a67      	ldr	r2, [pc, #412]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041ec:	430b      	orrs	r3, r1
 80041ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80041f0:	e003      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80041fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004202:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004206:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800420a:	2300      	movs	r3, #0
 800420c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004210:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004214:	460b      	mov	r3, r1
 8004216:	4313      	orrs	r3, r2
 8004218:	d053      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800421a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800421e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004224:	d033      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004226:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800422a:	d82c      	bhi.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800422c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004230:	d02f      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004232:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004236:	d826      	bhi.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004238:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800423c:	d02b      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800423e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004242:	d820      	bhi.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004244:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004248:	d012      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800424a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800424e:	d81a      	bhi.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004250:	2b00      	cmp	r3, #0
 8004252:	d022      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004258:	d115      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800425a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800425e:	3308      	adds	r3, #8
 8004260:	2101      	movs	r1, #1
 8004262:	4618      	mov	r0, r3
 8004264:	f001 f9f2 	bl	800564c <RCCEx_PLL2_Config>
 8004268:	4603      	mov	r3, r0
 800426a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800426e:	e015      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004274:	3328      	adds	r3, #40	@ 0x28
 8004276:	2101      	movs	r1, #1
 8004278:	4618      	mov	r0, r3
 800427a:	f001 fa99 	bl	80057b0 <RCCEx_PLL3_Config>
 800427e:	4603      	mov	r3, r0
 8004280:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004284:	e00a      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800428c:	e006      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800428e:	bf00      	nop
 8004290:	e004      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004292:	bf00      	nop
 8004294:	e002      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004296:	bf00      	nop
 8004298:	e000      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800429a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800429c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10a      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80042a4:	4b38      	ldr	r3, [pc, #224]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042a8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80042ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042b2:	4a35      	ldr	r2, [pc, #212]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042b4:	430b      	orrs	r3, r1
 80042b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80042b8:	e003      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80042c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80042ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042d2:	2300      	movs	r3, #0
 80042d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80042d8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042dc:	460b      	mov	r3, r1
 80042de:	4313      	orrs	r3, r2
 80042e0:	d058      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80042e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80042ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042ee:	d033      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80042f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042f4:	d82c      	bhi.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80042f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042fa:	d02f      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80042fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004300:	d826      	bhi.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004302:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004306:	d02b      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004308:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800430c:	d820      	bhi.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800430e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004312:	d012      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004314:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004318:	d81a      	bhi.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d022      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800431e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004322:	d115      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004328:	3308      	adds	r3, #8
 800432a:	2101      	movs	r1, #1
 800432c:	4618      	mov	r0, r3
 800432e:	f001 f98d 	bl	800564c <RCCEx_PLL2_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004338:	e015      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800433a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800433e:	3328      	adds	r3, #40	@ 0x28
 8004340:	2101      	movs	r1, #1
 8004342:	4618      	mov	r0, r3
 8004344:	f001 fa34 	bl	80057b0 <RCCEx_PLL3_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800434e:	e00a      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004356:	e006      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004358:	bf00      	nop
 800435a:	e004      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800435c:	bf00      	nop
 800435e:	e002      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004360:	bf00      	nop
 8004362:	e000      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004366:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10e      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800436e:	4b06      	ldr	r3, [pc, #24]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004372:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800437a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800437e:	4a02      	ldr	r2, [pc, #8]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004380:	430b      	orrs	r3, r1
 8004382:	6593      	str	r3, [r2, #88]	@ 0x58
 8004384:	e006      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004386:	bf00      	nop
 8004388:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004390:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80043a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043a4:	2300      	movs	r3, #0
 80043a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80043aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4313      	orrs	r3, r2
 80043b2:	d037      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80043b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043be:	d00e      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80043c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043c4:	d816      	bhi.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d018      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80043ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043ce:	d111      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d0:	4bc4      	ldr	r3, [pc, #784]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d4:	4ac3      	ldr	r2, [pc, #780]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80043dc:	e00f      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e2:	3308      	adds	r3, #8
 80043e4:	2101      	movs	r1, #1
 80043e6:	4618      	mov	r0, r3
 80043e8:	f001 f930 	bl	800564c <RCCEx_PLL2_Config>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80043f2:	e004      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80043fa:	e000      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80043fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004406:	4bb7      	ldr	r3, [pc, #732]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800440a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800440e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004412:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004414:	4ab3      	ldr	r2, [pc, #716]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004416:	430b      	orrs	r3, r1
 8004418:	6513      	str	r3, [r2, #80]	@ 0x50
 800441a:	e003      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004420:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004430:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004434:	2300      	movs	r3, #0
 8004436:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800443a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800443e:	460b      	mov	r3, r1
 8004440:	4313      	orrs	r3, r2
 8004442:	d039      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800444a:	2b03      	cmp	r3, #3
 800444c:	d81c      	bhi.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800444e:	a201      	add	r2, pc, #4	@ (adr r2, 8004454 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	08004491 	.word	0x08004491
 8004458:	08004465 	.word	0x08004465
 800445c:	08004473 	.word	0x08004473
 8004460:	08004491 	.word	0x08004491
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004464:	4b9f      	ldr	r3, [pc, #636]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004468:	4a9e      	ldr	r2, [pc, #632]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800446a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800446e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004470:	e00f      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004476:	3308      	adds	r3, #8
 8004478:	2102      	movs	r1, #2
 800447a:	4618      	mov	r0, r3
 800447c:	f001 f8e6 	bl	800564c <RCCEx_PLL2_Config>
 8004480:	4603      	mov	r3, r0
 8004482:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004486:	e004      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800448e:	e000      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004492:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10a      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800449a:	4b92      	ldr	r3, [pc, #584]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800449c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800449e:	f023 0103 	bic.w	r1, r3, #3
 80044a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a8:	4a8e      	ldr	r2, [pc, #568]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044aa:	430b      	orrs	r3, r1
 80044ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044ae:	e003      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80044c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044c8:	2300      	movs	r3, #0
 80044ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f000 8099 	beq.w	800460c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044da:	4b83      	ldr	r3, [pc, #524]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a82      	ldr	r2, [pc, #520]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80044e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044e6:	f7fd fbf9 	bl	8001cdc <HAL_GetTick>
 80044ea:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044ee:	e00b      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f0:	f7fd fbf4 	bl	8001cdc <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b64      	cmp	r3, #100	@ 0x64
 80044fe:	d903      	bls.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004506:	e005      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004508:	4b77      	ldr	r3, [pc, #476]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0ed      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004514:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004518:	2b00      	cmp	r3, #0
 800451a:	d173      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800451c:	4b71      	ldr	r3, [pc, #452]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800451e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004524:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004528:	4053      	eors	r3, r2
 800452a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800452e:	2b00      	cmp	r3, #0
 8004530:	d015      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004532:	4b6c      	ldr	r3, [pc, #432]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800453a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800453e:	4b69      	ldr	r3, [pc, #420]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004542:	4a68      	ldr	r2, [pc, #416]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004548:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800454a:	4b66      	ldr	r3, [pc, #408]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454e:	4a65      	ldr	r2, [pc, #404]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004554:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004556:	4a63      	ldr	r2, [pc, #396]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004558:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800455c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800455e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004562:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800456a:	d118      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456c:	f7fd fbb6 	bl	8001cdc <HAL_GetTick>
 8004570:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004574:	e00d      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004576:	f7fd fbb1 	bl	8001cdc <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004580:	1ad2      	subs	r2, r2, r3
 8004582:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004586:	429a      	cmp	r2, r3
 8004588:	d903      	bls.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004590:	e005      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004592:	4b54      	ldr	r3, [pc, #336]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0eb      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800459e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d129      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80045ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045b6:	d10e      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80045b8:	4b4a      	ldr	r3, [pc, #296]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80045c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80045c8:	091a      	lsrs	r2, r3, #4
 80045ca:	4b48      	ldr	r3, [pc, #288]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	4a45      	ldr	r2, [pc, #276]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045d0:	430b      	orrs	r3, r1
 80045d2:	6113      	str	r3, [r2, #16]
 80045d4:	e005      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80045d6:	4b43      	ldr	r3, [pc, #268]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	4a42      	ldr	r2, [pc, #264]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80045e0:	6113      	str	r3, [r2, #16]
 80045e2:	4b40      	ldr	r3, [pc, #256]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045e4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80045e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80045ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f2:	4a3c      	ldr	r2, [pc, #240]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045f4:	430b      	orrs	r3, r1
 80045f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045f8:	e008      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004602:	e003      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004604:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004608:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800460c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004614:	f002 0301 	and.w	r3, r2, #1
 8004618:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800461c:	2300      	movs	r3, #0
 800461e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004622:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004626:	460b      	mov	r3, r1
 8004628:	4313      	orrs	r3, r2
 800462a:	f000 808f 	beq.w	800474c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800462e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004632:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004634:	2b28      	cmp	r3, #40	@ 0x28
 8004636:	d871      	bhi.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004638:	a201      	add	r2, pc, #4	@ (adr r2, 8004640 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800463a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463e:	bf00      	nop
 8004640:	08004725 	.word	0x08004725
 8004644:	0800471d 	.word	0x0800471d
 8004648:	0800471d 	.word	0x0800471d
 800464c:	0800471d 	.word	0x0800471d
 8004650:	0800471d 	.word	0x0800471d
 8004654:	0800471d 	.word	0x0800471d
 8004658:	0800471d 	.word	0x0800471d
 800465c:	0800471d 	.word	0x0800471d
 8004660:	080046f1 	.word	0x080046f1
 8004664:	0800471d 	.word	0x0800471d
 8004668:	0800471d 	.word	0x0800471d
 800466c:	0800471d 	.word	0x0800471d
 8004670:	0800471d 	.word	0x0800471d
 8004674:	0800471d 	.word	0x0800471d
 8004678:	0800471d 	.word	0x0800471d
 800467c:	0800471d 	.word	0x0800471d
 8004680:	08004707 	.word	0x08004707
 8004684:	0800471d 	.word	0x0800471d
 8004688:	0800471d 	.word	0x0800471d
 800468c:	0800471d 	.word	0x0800471d
 8004690:	0800471d 	.word	0x0800471d
 8004694:	0800471d 	.word	0x0800471d
 8004698:	0800471d 	.word	0x0800471d
 800469c:	0800471d 	.word	0x0800471d
 80046a0:	08004725 	.word	0x08004725
 80046a4:	0800471d 	.word	0x0800471d
 80046a8:	0800471d 	.word	0x0800471d
 80046ac:	0800471d 	.word	0x0800471d
 80046b0:	0800471d 	.word	0x0800471d
 80046b4:	0800471d 	.word	0x0800471d
 80046b8:	0800471d 	.word	0x0800471d
 80046bc:	0800471d 	.word	0x0800471d
 80046c0:	08004725 	.word	0x08004725
 80046c4:	0800471d 	.word	0x0800471d
 80046c8:	0800471d 	.word	0x0800471d
 80046cc:	0800471d 	.word	0x0800471d
 80046d0:	0800471d 	.word	0x0800471d
 80046d4:	0800471d 	.word	0x0800471d
 80046d8:	0800471d 	.word	0x0800471d
 80046dc:	0800471d 	.word	0x0800471d
 80046e0:	08004725 	.word	0x08004725
 80046e4:	58024400 	.word	0x58024400
 80046e8:	58024800 	.word	0x58024800
 80046ec:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046f4:	3308      	adds	r3, #8
 80046f6:	2101      	movs	r1, #1
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 ffa7 	bl	800564c <RCCEx_PLL2_Config>
 80046fe:	4603      	mov	r3, r0
 8004700:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004704:	e00f      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800470a:	3328      	adds	r3, #40	@ 0x28
 800470c:	2101      	movs	r1, #1
 800470e:	4618      	mov	r0, r3
 8004710:	f001 f84e 	bl	80057b0 <RCCEx_PLL3_Config>
 8004714:	4603      	mov	r3, r0
 8004716:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800471a:	e004      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004722:	e000      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004726:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10a      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800472e:	4bbf      	ldr	r3, [pc, #764]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004732:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800473a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800473c:	4abb      	ldr	r2, [pc, #748]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800473e:	430b      	orrs	r3, r1
 8004740:	6553      	str	r3, [r2, #84]	@ 0x54
 8004742:	e003      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004744:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004748:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800474c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004754:	f002 0302 	and.w	r3, r2, #2
 8004758:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800475c:	2300      	movs	r3, #0
 800475e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004762:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004766:	460b      	mov	r3, r1
 8004768:	4313      	orrs	r3, r2
 800476a:	d041      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800476c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004772:	2b05      	cmp	r3, #5
 8004774:	d824      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004776:	a201      	add	r2, pc, #4	@ (adr r2, 800477c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	080047c9 	.word	0x080047c9
 8004780:	08004795 	.word	0x08004795
 8004784:	080047ab 	.word	0x080047ab
 8004788:	080047c9 	.word	0x080047c9
 800478c:	080047c9 	.word	0x080047c9
 8004790:	080047c9 	.word	0x080047c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004798:	3308      	adds	r3, #8
 800479a:	2101      	movs	r1, #1
 800479c:	4618      	mov	r0, r3
 800479e:	f000 ff55 	bl	800564c <RCCEx_PLL2_Config>
 80047a2:	4603      	mov	r3, r0
 80047a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80047a8:	e00f      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ae:	3328      	adds	r3, #40	@ 0x28
 80047b0:	2101      	movs	r1, #1
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fffc 	bl	80057b0 <RCCEx_PLL3_Config>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80047be:	e004      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80047c6:	e000      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80047c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10a      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80047d2:	4b96      	ldr	r3, [pc, #600]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80047d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d6:	f023 0107 	bic.w	r1, r3, #7
 80047da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047e0:	4a92      	ldr	r2, [pc, #584]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80047e2:	430b      	orrs	r3, r1
 80047e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80047e6:	e003      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f8:	f002 0304 	and.w	r3, r2, #4
 80047fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004800:	2300      	movs	r3, #0
 8004802:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004806:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800480a:	460b      	mov	r3, r1
 800480c:	4313      	orrs	r3, r2
 800480e:	d044      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004818:	2b05      	cmp	r3, #5
 800481a:	d825      	bhi.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800481c:	a201      	add	r2, pc, #4	@ (adr r2, 8004824 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800481e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004822:	bf00      	nop
 8004824:	08004871 	.word	0x08004871
 8004828:	0800483d 	.word	0x0800483d
 800482c:	08004853 	.word	0x08004853
 8004830:	08004871 	.word	0x08004871
 8004834:	08004871 	.word	0x08004871
 8004838:	08004871 	.word	0x08004871
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800483c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004840:	3308      	adds	r3, #8
 8004842:	2101      	movs	r1, #1
 8004844:	4618      	mov	r0, r3
 8004846:	f000 ff01 	bl	800564c <RCCEx_PLL2_Config>
 800484a:	4603      	mov	r3, r0
 800484c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004850:	e00f      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004856:	3328      	adds	r3, #40	@ 0x28
 8004858:	2101      	movs	r1, #1
 800485a:	4618      	mov	r0, r3
 800485c:	f000 ffa8 	bl	80057b0 <RCCEx_PLL3_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004866:	e004      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800486e:	e000      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004872:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10b      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800487a:	4b6c      	ldr	r3, [pc, #432]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800487c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800487e:	f023 0107 	bic.w	r1, r3, #7
 8004882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800488a:	4a68      	ldr	r2, [pc, #416]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800488c:	430b      	orrs	r3, r1
 800488e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004890:	e003      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004892:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004896:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800489a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	f002 0320 	and.w	r3, r2, #32
 80048a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048aa:	2300      	movs	r3, #0
 80048ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80048b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4313      	orrs	r3, r2
 80048b8:	d055      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80048ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048c6:	d033      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80048c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048cc:	d82c      	bhi.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80048ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d2:	d02f      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80048d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d8:	d826      	bhi.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80048da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048de:	d02b      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80048e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048e4:	d820      	bhi.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80048e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048ea:	d012      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80048ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048f0:	d81a      	bhi.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d022      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80048f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048fa:	d115      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004900:	3308      	adds	r3, #8
 8004902:	2100      	movs	r1, #0
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fea1 	bl	800564c <RCCEx_PLL2_Config>
 800490a:	4603      	mov	r3, r0
 800490c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004910:	e015      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004916:	3328      	adds	r3, #40	@ 0x28
 8004918:	2102      	movs	r1, #2
 800491a:	4618      	mov	r0, r3
 800491c:	f000 ff48 	bl	80057b0 <RCCEx_PLL3_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004926:	e00a      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800492e:	e006      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004930:	bf00      	nop
 8004932:	e004      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004934:	bf00      	nop
 8004936:	e002      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004938:	bf00      	nop
 800493a:	e000      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800493c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800493e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10b      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004946:	4b39      	ldr	r3, [pc, #228]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800494e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004952:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004956:	4a35      	ldr	r2, [pc, #212]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004958:	430b      	orrs	r3, r1
 800495a:	6553      	str	r3, [r2, #84]	@ 0x54
 800495c:	e003      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004962:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800496a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004972:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004976:	2300      	movs	r3, #0
 8004978:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800497c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004980:	460b      	mov	r3, r1
 8004982:	4313      	orrs	r3, r2
 8004984:	d058      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800498a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800498e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004992:	d033      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004994:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004998:	d82c      	bhi.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800499a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800499e:	d02f      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80049a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049a4:	d826      	bhi.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80049a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049aa:	d02b      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80049ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049b0:	d820      	bhi.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80049b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049b6:	d012      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80049b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049bc:	d81a      	bhi.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d022      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80049c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c6:	d115      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049cc:	3308      	adds	r3, #8
 80049ce:	2100      	movs	r1, #0
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fe3b 	bl	800564c <RCCEx_PLL2_Config>
 80049d6:	4603      	mov	r3, r0
 80049d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80049dc:	e015      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049e2:	3328      	adds	r3, #40	@ 0x28
 80049e4:	2102      	movs	r1, #2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fee2 	bl	80057b0 <RCCEx_PLL3_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80049f2:	e00a      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049fa:	e006      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80049fc:	bf00      	nop
 80049fe:	e004      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004a00:	bf00      	nop
 8004a02:	e002      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004a04:	bf00      	nop
 8004a06:	e000      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10e      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a12:	4b06      	ldr	r3, [pc, #24]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a16:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a22:	4a02      	ldr	r2, [pc, #8]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004a24:	430b      	orrs	r3, r1
 8004a26:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a28:	e006      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004a2a:	bf00      	nop
 8004a2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a40:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004a44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004a52:	460b      	mov	r3, r1
 8004a54:	4313      	orrs	r3, r2
 8004a56:	d055      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a60:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004a64:	d033      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004a66:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004a6a:	d82c      	bhi.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a70:	d02f      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004a72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a76:	d826      	bhi.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004a78:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004a7c:	d02b      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004a7e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004a82:	d820      	bhi.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004a84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a88:	d012      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004a8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a8e:	d81a      	bhi.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d022      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a98:	d115      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a9e:	3308      	adds	r3, #8
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fdd2 	bl	800564c <RCCEx_PLL2_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004aae:	e015      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ab4:	3328      	adds	r3, #40	@ 0x28
 8004ab6:	2102      	movs	r1, #2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 fe79 	bl	80057b0 <RCCEx_PLL3_Config>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004ac4:	e00a      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004acc:	e006      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004ace:	bf00      	nop
 8004ad0:	e004      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004ad2:	bf00      	nop
 8004ad4:	e002      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004ad6:	bf00      	nop
 8004ad8:	e000      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004adc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10b      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004ae4:	4ba0      	ldr	r3, [pc, #640]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004af0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004af4:	4a9c      	ldr	r2, [pc, #624]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004af6:	430b      	orrs	r3, r1
 8004af8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004afa:	e003      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0c:	f002 0308 	and.w	r3, r2, #8
 8004b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b14:	2300      	movs	r3, #0
 8004b16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b1a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4313      	orrs	r3, r2
 8004b22:	d01e      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b30:	d10c      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b36:	3328      	adds	r3, #40	@ 0x28
 8004b38:	2102      	movs	r1, #2
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fe38 	bl	80057b0 <RCCEx_PLL3_Config>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004b4c:	4b86      	ldr	r3, [pc, #536]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b50:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b5c:	4a82      	ldr	r2, [pc, #520]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	f002 0310 	and.w	r3, r2, #16
 8004b6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b72:	2300      	movs	r3, #0
 8004b74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b78:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	d01e      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b8e:	d10c      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b94:	3328      	adds	r3, #40	@ 0x28
 8004b96:	2102      	movs	r1, #2
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 fe09 	bl	80057b0 <RCCEx_PLL3_Config>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004baa:	4b6f      	ldr	r3, [pc, #444]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bba:	4a6b      	ldr	r2, [pc, #428]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004bcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bce:	2300      	movs	r3, #0
 8004bd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bd2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	d03e      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004be4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004be8:	d022      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004bea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bee:	d81b      	bhi.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf8:	d00b      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004bfa:	e015      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c00:	3308      	adds	r3, #8
 8004c02:	2100      	movs	r1, #0
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fd21 	bl	800564c <RCCEx_PLL2_Config>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c10:	e00f      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c16:	3328      	adds	r3, #40	@ 0x28
 8004c18:	2102      	movs	r1, #2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fdc8 	bl	80057b0 <RCCEx_PLL3_Config>
 8004c20:	4603      	mov	r3, r0
 8004c22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c26:	e004      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c2e:	e000      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10b      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c3a:	4b4b      	ldr	r3, [pc, #300]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004c4a:	4a47      	ldr	r2, [pc, #284]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c50:	e003      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c56:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c62:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004c66:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c68:	2300      	movs	r3, #0
 8004c6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c6c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004c70:	460b      	mov	r3, r1
 8004c72:	4313      	orrs	r3, r2
 8004c74:	d03b      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c82:	d01f      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004c84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c88:	d818      	bhi.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004c8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c8e:	d003      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004c90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c94:	d007      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004c96:	e011      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c98:	4b33      	ldr	r3, [pc, #204]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9c:	4a32      	ldr	r2, [pc, #200]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004ca4:	e00f      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004caa:	3328      	adds	r3, #40	@ 0x28
 8004cac:	2101      	movs	r1, #1
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fd7e 	bl	80057b0 <RCCEx_PLL3_Config>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004cba:	e004      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10b      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cce:	4b26      	ldr	r3, [pc, #152]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cde:	4a22      	ldr	r2, [pc, #136]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ce4:	e003      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004cfa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d00:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004d04:	460b      	mov	r3, r1
 8004d06:	4313      	orrs	r3, r2
 8004d08:	d034      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d18:	d007      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004d1a:	e011      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d1c:	4b12      	ldr	r3, [pc, #72]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d20:	4a11      	ldr	r2, [pc, #68]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d28:	e00e      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d2e:	3308      	adds	r3, #8
 8004d30:	2102      	movs	r1, #2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fc8a 	bl	800564c <RCCEx_PLL2_Config>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d3e:	e003      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10d      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d50:	4b05      	ldr	r3, [pc, #20]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d5e:	4a02      	ldr	r2, [pc, #8]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d60:	430b      	orrs	r3, r1
 8004d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d64:	e006      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004d66:	bf00      	nop
 8004d68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004d80:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d82:	2300      	movs	r3, #0
 8004d84:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d86:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	d00c      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d94:	3328      	adds	r3, #40	@ 0x28
 8004d96:	2102      	movs	r1, #2
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fd09 	bl	80057b0 <RCCEx_PLL3_Config>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004db6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004db8:	2300      	movs	r3, #0
 8004dba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dbc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	d036      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dd0:	d018      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004dd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dd6:	d811      	bhi.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004dd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ddc:	d014      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004dde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004de2:	d80b      	bhi.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d011      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004de8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dec:	d106      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dee:	4bb7      	ldr	r3, [pc, #732]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df2:	4ab6      	ldr	r2, [pc, #728]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004df8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004dfa:	e008      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e02:	e004      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004e04:	bf00      	nop
 8004e06:	e002      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004e08:	bf00      	nop
 8004e0a:	e000      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10a      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e16:	4bad      	ldr	r3, [pc, #692]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e1a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e24:	4aa9      	ldr	r2, [pc, #676]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e26:	430b      	orrs	r3, r1
 8004e28:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e2a:	e003      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004e40:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e42:	2300      	movs	r3, #0
 8004e44:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e46:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	d009      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e50:	4b9e      	ldr	r3, [pc, #632]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e54:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e5e:	4a9b      	ldr	r2, [pc, #620]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e60:	430b      	orrs	r3, r1
 8004e62:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004e70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e72:	2300      	movs	r3, #0
 8004e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e76:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	d009      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e80:	4b92      	ldr	r3, [pc, #584]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e84:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e8e:	4a8f      	ldr	r2, [pc, #572]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e90:	430b      	orrs	r3, r1
 8004e92:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004ea0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ea6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4313      	orrs	r3, r2
 8004eae:	d00e      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004eb0:	4b86      	ldr	r3, [pc, #536]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	4a85      	ldr	r2, [pc, #532]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004eb6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004eba:	6113      	str	r3, [r2, #16]
 8004ebc:	4b83      	ldr	r3, [pc, #524]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ebe:	6919      	ldr	r1, [r3, #16]
 8004ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ec4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ec8:	4a80      	ldr	r2, [pc, #512]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004eca:	430b      	orrs	r3, r1
 8004ecc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004eda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004edc:	2300      	movs	r3, #0
 8004ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ee0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	d009      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004eea:	4b78      	ldr	r3, [pc, #480]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ef8:	4a74      	ldr	r2, [pc, #464]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004efa:	430b      	orrs	r3, r1
 8004efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f06:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004f0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f10:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004f14:	460b      	mov	r3, r1
 8004f16:	4313      	orrs	r3, r2
 8004f18:	d00a      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f1a:	4b6c      	ldr	r3, [pc, #432]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f1e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f2a:	4a68      	ldr	r2, [pc, #416]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f38:	2100      	movs	r1, #0
 8004f3a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f42:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004f46:	460b      	mov	r3, r1
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	d011      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f50:	3308      	adds	r3, #8
 8004f52:	2100      	movs	r1, #0
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fb79 	bl	800564c <RCCEx_PLL2_Config>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004f60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	2100      	movs	r1, #0
 8004f7a:	6239      	str	r1, [r7, #32]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f82:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004f86:	460b      	mov	r3, r1
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	d011      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f90:	3308      	adds	r3, #8
 8004f92:	2101      	movs	r1, #1
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fb59 	bl	800564c <RCCEx_PLL2_Config>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004fa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb8:	2100      	movs	r1, #0
 8004fba:	61b9      	str	r1, [r7, #24]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	d011      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	2102      	movs	r1, #2
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 fb39 	bl	800564c <RCCEx_PLL2_Config>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004fe0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	6139      	str	r1, [r7, #16]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005006:	460b      	mov	r3, r1
 8005008:	4313      	orrs	r3, r2
 800500a:	d011      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800500c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005010:	3328      	adds	r3, #40	@ 0x28
 8005012:	2100      	movs	r1, #0
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fbcb 	bl	80057b0 <RCCEx_PLL3_Config>
 800501a:	4603      	mov	r3, r0
 800501c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005020:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800502c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	2100      	movs	r1, #0
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005046:	460b      	mov	r3, r1
 8005048:	4313      	orrs	r3, r2
 800504a:	d011      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800504c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005050:	3328      	adds	r3, #40	@ 0x28
 8005052:	2101      	movs	r1, #1
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fbab 	bl	80057b0 <RCCEx_PLL3_Config>
 800505a:	4603      	mov	r3, r0
 800505c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005060:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005068:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800506c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005078:	2100      	movs	r1, #0
 800507a:	6039      	str	r1, [r7, #0]
 800507c:	f003 0320 	and.w	r3, r3, #32
 8005080:	607b      	str	r3, [r7, #4]
 8005082:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005086:	460b      	mov	r3, r1
 8005088:	4313      	orrs	r3, r2
 800508a:	d011      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800508c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005090:	3328      	adds	r3, #40	@ 0x28
 8005092:	2102      	movs	r1, #2
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fb8b 	bl	80057b0 <RCCEx_PLL3_Config>
 800509a:	4603      	mov	r3, r0
 800509c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80050a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80050b0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	e000      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
}
 80050be:	4618      	mov	r0, r3
 80050c0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80050c4:	46bd      	mov	sp, r7
 80050c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ca:	bf00      	nop
 80050cc:	58024400 	.word	0x58024400

080050d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80050d4:	f7fe fe00 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 80050d8:	4602      	mov	r2, r0
 80050da:	4b06      	ldr	r3, [pc, #24]	@ (80050f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	091b      	lsrs	r3, r3, #4
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	4904      	ldr	r1, [pc, #16]	@ (80050f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80050e6:	5ccb      	ldrb	r3, [r1, r3]
 80050e8:	f003 031f 	and.w	r3, r3, #31
 80050ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	58024400 	.word	0x58024400
 80050f8:	0800c6ec 	.word	0x0800c6ec

080050fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b089      	sub	sp, #36	@ 0x24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005104:	4ba1      	ldr	r3, [pc, #644]	@ (800538c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005108:	f003 0303 	and.w	r3, r3, #3
 800510c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800510e:	4b9f      	ldr	r3, [pc, #636]	@ (800538c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005112:	0b1b      	lsrs	r3, r3, #12
 8005114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005118:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800511a:	4b9c      	ldr	r3, [pc, #624]	@ (800538c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800511c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511e:	091b      	lsrs	r3, r3, #4
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005126:	4b99      	ldr	r3, [pc, #612]	@ (800538c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512a:	08db      	lsrs	r3, r3, #3
 800512c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	fb02 f303 	mul.w	r3, r2, r3
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800513e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 8111 	beq.w	800536c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b02      	cmp	r3, #2
 800514e:	f000 8083 	beq.w	8005258 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	2b02      	cmp	r3, #2
 8005156:	f200 80a1 	bhi.w	800529c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d056      	beq.n	8005214 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005166:	e099      	b.n	800529c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005168:	4b88      	ldr	r3, [pc, #544]	@ (800538c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0320 	and.w	r3, r3, #32
 8005170:	2b00      	cmp	r3, #0
 8005172:	d02d      	beq.n	80051d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005174:	4b85      	ldr	r3, [pc, #532]	@ (800538c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	08db      	lsrs	r3, r3, #3
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	4a84      	ldr	r2, [pc, #528]	@ (8005390 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005180:	fa22 f303 	lsr.w	r3, r2, r3
 8005184:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	ee07 3a90 	vmov	s15, r3
 800518c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519e:	4b7b      	ldr	r3, [pc, #492]	@ (800538c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80051b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005394 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80051ce:	e087      	b.n	80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	ee07 3a90 	vmov	s15, r3
 80051d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051da:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005398 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80051de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051e2:	4b6a      	ldr	r3, [pc, #424]	@ (800538c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ea:	ee07 3a90 	vmov	s15, r3
 80051ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051f6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005394 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800520a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005212:	e065      	b.n	80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800539c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005226:	4b59      	ldr	r3, [pc, #356]	@ (800538c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800522e:	ee07 3a90 	vmov	s15, r3
 8005232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005236:	ed97 6a03 	vldr	s12, [r7, #12]
 800523a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005394 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800523e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800524a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800524e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005256:	e043      	b.n	80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005262:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80053a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800526a:	4b48      	ldr	r3, [pc, #288]	@ (800538c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800526c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800527a:	ed97 6a03 	vldr	s12, [r7, #12]
 800527e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005394 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800528a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800528e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800529a:	e021      	b.n	80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800539c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80052aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ae:	4b37      	ldr	r3, [pc, #220]	@ (800538c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b6:	ee07 3a90 	vmov	s15, r3
 80052ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052be:	ed97 6a03 	vldr	s12, [r7, #12]
 80052c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005394 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80052e0:	4b2a      	ldr	r3, [pc, #168]	@ (800538c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e4:	0a5b      	lsrs	r3, r3, #9
 80052e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80052fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005306:	ee17 2a90 	vmov	r2, s15
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800530e:	4b1f      	ldr	r3, [pc, #124]	@ (800538c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005312:	0c1b      	lsrs	r3, r3, #16
 8005314:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005318:	ee07 3a90 	vmov	s15, r3
 800531c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005320:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005324:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005328:	edd7 6a07 	vldr	s13, [r7, #28]
 800532c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005334:	ee17 2a90 	vmov	r2, s15
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800533c:	4b13      	ldr	r3, [pc, #76]	@ (800538c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800533e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005340:	0e1b      	lsrs	r3, r3, #24
 8005342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005352:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005356:	edd7 6a07 	vldr	s13, [r7, #28]
 800535a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800535e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005362:	ee17 2a90 	vmov	r2, s15
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800536a:	e008      	b.n	800537e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	609a      	str	r2, [r3, #8]
}
 800537e:	bf00      	nop
 8005380:	3724      	adds	r7, #36	@ 0x24
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	58024400 	.word	0x58024400
 8005390:	03d09000 	.word	0x03d09000
 8005394:	46000000 	.word	0x46000000
 8005398:	4c742400 	.word	0x4c742400
 800539c:	4a742400 	.word	0x4a742400
 80053a0:	4af42400 	.word	0x4af42400

080053a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b089      	sub	sp, #36	@ 0x24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053ac:	4ba1      	ldr	r3, [pc, #644]	@ (8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b0:	f003 0303 	and.w	r3, r3, #3
 80053b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80053b6:	4b9f      	ldr	r3, [pc, #636]	@ (8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ba:	0d1b      	lsrs	r3, r3, #20
 80053bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80053c2:	4b9c      	ldr	r3, [pc, #624]	@ (8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c6:	0a1b      	lsrs	r3, r3, #8
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80053ce:	4b99      	ldr	r3, [pc, #612]	@ (8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d2:	08db      	lsrs	r3, r3, #3
 80053d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	fb02 f303 	mul.w	r3, r2, r3
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 8111 	beq.w	8005614 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	f000 8083 	beq.w	8005500 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	f200 80a1 	bhi.w	8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d056      	beq.n	80054bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800540e:	e099      	b.n	8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005410:	4b88      	ldr	r3, [pc, #544]	@ (8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b00      	cmp	r3, #0
 800541a:	d02d      	beq.n	8005478 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800541c:	4b85      	ldr	r3, [pc, #532]	@ (8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	08db      	lsrs	r3, r3, #3
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	4a84      	ldr	r2, [pc, #528]	@ (8005638 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005428:	fa22 f303 	lsr.w	r3, r2, r3
 800542c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	ee07 3a90 	vmov	s15, r3
 8005434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005446:	4b7b      	ldr	r3, [pc, #492]	@ (8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005456:	ed97 6a03 	vldr	s12, [r7, #12]
 800545a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800563c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800545e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800546a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800546e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005472:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005476:	e087      	b.n	8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	ee07 3a90 	vmov	s15, r3
 800547e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005482:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005640 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800548a:	4b6a      	ldr	r3, [pc, #424]	@ (8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800548c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005492:	ee07 3a90 	vmov	s15, r3
 8005496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800549a:	ed97 6a03 	vldr	s12, [r7, #12]
 800549e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800563c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054ba:	e065      	b.n	8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005644 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80054ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ce:	4b59      	ldr	r3, [pc, #356]	@ (8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d6:	ee07 3a90 	vmov	s15, r3
 80054da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054de:	ed97 6a03 	vldr	s12, [r7, #12]
 80054e2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800563c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054fe:	e043      	b.n	8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	ee07 3a90 	vmov	s15, r3
 8005506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005648 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800550e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005512:	4b48      	ldr	r3, [pc, #288]	@ (8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800551a:	ee07 3a90 	vmov	s15, r3
 800551e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005522:	ed97 6a03 	vldr	s12, [r7, #12]
 8005526:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800563c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800552a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800552e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800553a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005542:	e021      	b.n	8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	ee07 3a90 	vmov	s15, r3
 800554a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005644 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005556:	4b37      	ldr	r3, [pc, #220]	@ (8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555e:	ee07 3a90 	vmov	s15, r3
 8005562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005566:	ed97 6a03 	vldr	s12, [r7, #12]
 800556a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800563c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800556e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800557a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800557e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005586:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005588:	4b2a      	ldr	r3, [pc, #168]	@ (8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800558a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558c:	0a5b      	lsrs	r3, r3, #9
 800558e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800559e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80055a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ae:	ee17 2a90 	vmov	r2, s15
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80055b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ba:	0c1b      	lsrs	r3, r3, #16
 80055bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055c0:	ee07 3a90 	vmov	s15, r3
 80055c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80055d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055dc:	ee17 2a90 	vmov	r2, s15
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80055e4:	4b13      	ldr	r3, [pc, #76]	@ (8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e8:	0e1b      	lsrs	r3, r3, #24
 80055ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ee:	ee07 3a90 	vmov	s15, r3
 80055f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800560a:	ee17 2a90 	vmov	r2, s15
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005612:	e008      	b.n	8005626 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	609a      	str	r2, [r3, #8]
}
 8005626:	bf00      	nop
 8005628:	3724      	adds	r7, #36	@ 0x24
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	58024400 	.word	0x58024400
 8005638:	03d09000 	.word	0x03d09000
 800563c:	46000000 	.word	0x46000000
 8005640:	4c742400 	.word	0x4c742400
 8005644:	4a742400 	.word	0x4a742400
 8005648:	4af42400 	.word	0x4af42400

0800564c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800565a:	4b53      	ldr	r3, [pc, #332]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 800565c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	2b03      	cmp	r3, #3
 8005664:	d101      	bne.n	800566a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e099      	b.n	800579e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800566a:	4b4f      	ldr	r3, [pc, #316]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a4e      	ldr	r2, [pc, #312]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 8005670:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005676:	f7fc fb31 	bl	8001cdc <HAL_GetTick>
 800567a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800567c:	e008      	b.n	8005690 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800567e:	f7fc fb2d 	bl	8001cdc <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d901      	bls.n	8005690 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e086      	b.n	800579e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005690:	4b45      	ldr	r3, [pc, #276]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1f0      	bne.n	800567e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800569c:	4b42      	ldr	r3, [pc, #264]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 800569e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	031b      	lsls	r3, r3, #12
 80056aa:	493f      	ldr	r1, [pc, #252]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	3b01      	subs	r3, #1
 80056c0:	025b      	lsls	r3, r3, #9
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	431a      	orrs	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	041b      	lsls	r3, r3, #16
 80056ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	3b01      	subs	r3, #1
 80056da:	061b      	lsls	r3, r3, #24
 80056dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80056e0:	4931      	ldr	r1, [pc, #196]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80056e6:	4b30      	ldr	r3, [pc, #192]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 80056e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	492d      	ldr	r1, [pc, #180]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80056f8:	4b2b      	ldr	r3, [pc, #172]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 80056fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fc:	f023 0220 	bic.w	r2, r3, #32
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	4928      	ldr	r1, [pc, #160]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 8005706:	4313      	orrs	r3, r2
 8005708:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800570a:	4b27      	ldr	r3, [pc, #156]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 800570c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570e:	4a26      	ldr	r2, [pc, #152]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 8005710:	f023 0310 	bic.w	r3, r3, #16
 8005714:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005716:	4b24      	ldr	r3, [pc, #144]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 8005718:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800571a:	4b24      	ldr	r3, [pc, #144]	@ (80057ac <RCCEx_PLL2_Config+0x160>)
 800571c:	4013      	ands	r3, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	69d2      	ldr	r2, [r2, #28]
 8005722:	00d2      	lsls	r2, r2, #3
 8005724:	4920      	ldr	r1, [pc, #128]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 8005726:	4313      	orrs	r3, r2
 8005728:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800572a:	4b1f      	ldr	r3, [pc, #124]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 800572c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572e:	4a1e      	ldr	r2, [pc, #120]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 8005730:	f043 0310 	orr.w	r3, r3, #16
 8005734:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d106      	bne.n	800574a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800573c:	4b1a      	ldr	r3, [pc, #104]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 800573e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005740:	4a19      	ldr	r2, [pc, #100]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 8005742:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005746:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005748:	e00f      	b.n	800576a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d106      	bne.n	800575e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005750:	4b15      	ldr	r3, [pc, #84]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 8005752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005754:	4a14      	ldr	r2, [pc, #80]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 8005756:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800575a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800575c:	e005      	b.n	800576a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800575e:	4b12      	ldr	r3, [pc, #72]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 8005760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005762:	4a11      	ldr	r2, [pc, #68]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 8005764:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005768:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800576a:	4b0f      	ldr	r3, [pc, #60]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a0e      	ldr	r2, [pc, #56]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 8005770:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005776:	f7fc fab1 	bl	8001cdc <HAL_GetTick>
 800577a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800577c:	e008      	b.n	8005790 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800577e:	f7fc faad 	bl	8001cdc <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e006      	b.n	800579e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005790:	4b05      	ldr	r3, [pc, #20]	@ (80057a8 <RCCEx_PLL2_Config+0x15c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0f0      	beq.n	800577e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800579c:	7bfb      	ldrb	r3, [r7, #15]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	58024400 	.word	0x58024400
 80057ac:	ffff0007 	.word	0xffff0007

080057b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057be:	4b53      	ldr	r3, [pc, #332]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 80057c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d101      	bne.n	80057ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e099      	b.n	8005902 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80057ce:	4b4f      	ldr	r3, [pc, #316]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a4e      	ldr	r2, [pc, #312]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 80057d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057da:	f7fc fa7f 	bl	8001cdc <HAL_GetTick>
 80057de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80057e0:	e008      	b.n	80057f4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80057e2:	f7fc fa7b 	bl	8001cdc <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e086      	b.n	8005902 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80057f4:	4b45      	ldr	r3, [pc, #276]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1f0      	bne.n	80057e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005800:	4b42      	ldr	r3, [pc, #264]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 8005802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005804:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	051b      	lsls	r3, r3, #20
 800580e:	493f      	ldr	r1, [pc, #252]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 8005810:	4313      	orrs	r3, r2
 8005812:	628b      	str	r3, [r1, #40]	@ 0x28
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	3b01      	subs	r3, #1
 800581a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	3b01      	subs	r3, #1
 8005824:	025b      	lsls	r3, r3, #9
 8005826:	b29b      	uxth	r3, r3
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	3b01      	subs	r3, #1
 8005830:	041b      	lsls	r3, r3, #16
 8005832:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	3b01      	subs	r3, #1
 800583e:	061b      	lsls	r3, r3, #24
 8005840:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005844:	4931      	ldr	r1, [pc, #196]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 8005846:	4313      	orrs	r3, r2
 8005848:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800584a:	4b30      	ldr	r3, [pc, #192]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 800584c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800584e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	492d      	ldr	r1, [pc, #180]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 8005858:	4313      	orrs	r3, r2
 800585a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800585c:	4b2b      	ldr	r3, [pc, #172]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 800585e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005860:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	4928      	ldr	r1, [pc, #160]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 800586a:	4313      	orrs	r3, r2
 800586c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800586e:	4b27      	ldr	r3, [pc, #156]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 8005870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005872:	4a26      	ldr	r2, [pc, #152]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 8005874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005878:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800587a:	4b24      	ldr	r3, [pc, #144]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 800587c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800587e:	4b24      	ldr	r3, [pc, #144]	@ (8005910 <RCCEx_PLL3_Config+0x160>)
 8005880:	4013      	ands	r3, r2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	69d2      	ldr	r2, [r2, #28]
 8005886:	00d2      	lsls	r2, r2, #3
 8005888:	4920      	ldr	r1, [pc, #128]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 800588a:	4313      	orrs	r3, r2
 800588c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800588e:	4b1f      	ldr	r3, [pc, #124]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 8005890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005892:	4a1e      	ldr	r2, [pc, #120]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 8005894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005898:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d106      	bne.n	80058ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80058a0:	4b1a      	ldr	r3, [pc, #104]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 80058a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a4:	4a19      	ldr	r2, [pc, #100]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 80058a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80058aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80058ac:	e00f      	b.n	80058ce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d106      	bne.n	80058c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80058b4:	4b15      	ldr	r3, [pc, #84]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 80058b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b8:	4a14      	ldr	r2, [pc, #80]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 80058ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80058be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80058c0:	e005      	b.n	80058ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80058c2:	4b12      	ldr	r3, [pc, #72]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 80058c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c6:	4a11      	ldr	r2, [pc, #68]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 80058c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80058ce:	4b0f      	ldr	r3, [pc, #60]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a0e      	ldr	r2, [pc, #56]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 80058d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058da:	f7fc f9ff 	bl	8001cdc <HAL_GetTick>
 80058de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80058e0:	e008      	b.n	80058f4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80058e2:	f7fc f9fb 	bl	8001cdc <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e006      	b.n	8005902 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80058f4:	4b05      	ldr	r3, [pc, #20]	@ (800590c <RCCEx_PLL3_Config+0x15c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0f0      	beq.n	80058e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	58024400 	.word	0x58024400
 8005910:	ffff0007 	.word	0xffff0007

08005914 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e049      	b.n	80059ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fb fd38 	bl	80013b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3304      	adds	r3, #4
 8005950:	4619      	mov	r1, r3
 8005952:	4610      	mov	r0, r2
 8005954:	f000 fe1e 	bl	8006594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b082      	sub	sp, #8
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e049      	b.n	8005a68 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d106      	bne.n	80059ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f841 	bl	8005a70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2202      	movs	r2, #2
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3304      	adds	r3, #4
 80059fe:	4619      	mov	r1, r3
 8005a00:	4610      	mov	r0, r2
 8005a02:	f000 fdc7 	bl	8006594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d109      	bne.n	8005aac <HAL_TIM_PWM_Start_IT+0x28>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	bf14      	ite	ne
 8005aa4:	2301      	movne	r3, #1
 8005aa6:	2300      	moveq	r3, #0
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	e03c      	b.n	8005b26 <HAL_TIM_PWM_Start_IT+0xa2>
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d109      	bne.n	8005ac6 <HAL_TIM_PWM_Start_IT+0x42>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	bf14      	ite	ne
 8005abe:	2301      	movne	r3, #1
 8005ac0:	2300      	moveq	r3, #0
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	e02f      	b.n	8005b26 <HAL_TIM_PWM_Start_IT+0xa2>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d109      	bne.n	8005ae0 <HAL_TIM_PWM_Start_IT+0x5c>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	bf14      	ite	ne
 8005ad8:	2301      	movne	r3, #1
 8005ada:	2300      	moveq	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	e022      	b.n	8005b26 <HAL_TIM_PWM_Start_IT+0xa2>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b0c      	cmp	r3, #12
 8005ae4:	d109      	bne.n	8005afa <HAL_TIM_PWM_Start_IT+0x76>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	bf14      	ite	ne
 8005af2:	2301      	movne	r3, #1
 8005af4:	2300      	moveq	r3, #0
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	e015      	b.n	8005b26 <HAL_TIM_PWM_Start_IT+0xa2>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b10      	cmp	r3, #16
 8005afe:	d109      	bne.n	8005b14 <HAL_TIM_PWM_Start_IT+0x90>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	bf14      	ite	ne
 8005b0c:	2301      	movne	r3, #1
 8005b0e:	2300      	moveq	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	e008      	b.n	8005b26 <HAL_TIM_PWM_Start_IT+0xa2>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	bf14      	ite	ne
 8005b20:	2301      	movne	r3, #1
 8005b22:	2300      	moveq	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e0f6      	b.n	8005d1c <HAL_TIM_PWM_Start_IT+0x298>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d104      	bne.n	8005b3e <HAL_TIM_PWM_Start_IT+0xba>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b3c:	e023      	b.n	8005b86 <HAL_TIM_PWM_Start_IT+0x102>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d104      	bne.n	8005b4e <HAL_TIM_PWM_Start_IT+0xca>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b4c:	e01b      	b.n	8005b86 <HAL_TIM_PWM_Start_IT+0x102>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d104      	bne.n	8005b5e <HAL_TIM_PWM_Start_IT+0xda>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b5c:	e013      	b.n	8005b86 <HAL_TIM_PWM_Start_IT+0x102>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b0c      	cmp	r3, #12
 8005b62:	d104      	bne.n	8005b6e <HAL_TIM_PWM_Start_IT+0xea>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b6c:	e00b      	b.n	8005b86 <HAL_TIM_PWM_Start_IT+0x102>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b10      	cmp	r3, #16
 8005b72:	d104      	bne.n	8005b7e <HAL_TIM_PWM_Start_IT+0xfa>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b7c:	e003      	b.n	8005b86 <HAL_TIM_PWM_Start_IT+0x102>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2202      	movs	r2, #2
 8005b82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b0c      	cmp	r3, #12
 8005b8a:	d841      	bhi.n	8005c10 <HAL_TIM_PWM_Start_IT+0x18c>
 8005b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b94 <HAL_TIM_PWM_Start_IT+0x110>)
 8005b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b92:	bf00      	nop
 8005b94:	08005bc9 	.word	0x08005bc9
 8005b98:	08005c11 	.word	0x08005c11
 8005b9c:	08005c11 	.word	0x08005c11
 8005ba0:	08005c11 	.word	0x08005c11
 8005ba4:	08005bdb 	.word	0x08005bdb
 8005ba8:	08005c11 	.word	0x08005c11
 8005bac:	08005c11 	.word	0x08005c11
 8005bb0:	08005c11 	.word	0x08005c11
 8005bb4:	08005bed 	.word	0x08005bed
 8005bb8:	08005c11 	.word	0x08005c11
 8005bbc:	08005c11 	.word	0x08005c11
 8005bc0:	08005c11 	.word	0x08005c11
 8005bc4:	08005bff 	.word	0x08005bff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f042 0202 	orr.w	r2, r2, #2
 8005bd6:	60da      	str	r2, [r3, #12]
      break;
 8005bd8:	e01d      	b.n	8005c16 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68da      	ldr	r2, [r3, #12]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f042 0204 	orr.w	r2, r2, #4
 8005be8:	60da      	str	r2, [r3, #12]
      break;
 8005bea:	e014      	b.n	8005c16 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0208 	orr.w	r2, r2, #8
 8005bfa:	60da      	str	r2, [r3, #12]
      break;
 8005bfc:	e00b      	b.n	8005c16 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0210 	orr.w	r2, r2, #16
 8005c0c:	60da      	str	r2, [r3, #12]
      break;
 8005c0e:	e002      	b.n	8005c16 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	73fb      	strb	r3, [r7, #15]
      break;
 8005c14:	bf00      	nop
  }

  if (status == HAL_OK)
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d17e      	bne.n	8005d1a <HAL_TIM_PWM_Start_IT+0x296>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2201      	movs	r2, #1
 8005c22:	6839      	ldr	r1, [r7, #0]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f001 f8d5 	bl	8006dd4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a3d      	ldr	r2, [pc, #244]	@ (8005d24 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d013      	beq.n	8005c5c <HAL_TIM_PWM_Start_IT+0x1d8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a3b      	ldr	r2, [pc, #236]	@ (8005d28 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00e      	beq.n	8005c5c <HAL_TIM_PWM_Start_IT+0x1d8>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a3a      	ldr	r2, [pc, #232]	@ (8005d2c <HAL_TIM_PWM_Start_IT+0x2a8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d009      	beq.n	8005c5c <HAL_TIM_PWM_Start_IT+0x1d8>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a38      	ldr	r2, [pc, #224]	@ (8005d30 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d004      	beq.n	8005c5c <HAL_TIM_PWM_Start_IT+0x1d8>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a37      	ldr	r2, [pc, #220]	@ (8005d34 <HAL_TIM_PWM_Start_IT+0x2b0>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d101      	bne.n	8005c60 <HAL_TIM_PWM_Start_IT+0x1dc>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e000      	b.n	8005c62 <HAL_TIM_PWM_Start_IT+0x1de>
 8005c60:	2300      	movs	r3, #0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d007      	beq.n	8005c76 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a2a      	ldr	r2, [pc, #168]	@ (8005d24 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d02c      	beq.n	8005cda <HAL_TIM_PWM_Start_IT+0x256>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c88:	d027      	beq.n	8005cda <HAL_TIM_PWM_Start_IT+0x256>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8005d38 <HAL_TIM_PWM_Start_IT+0x2b4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d022      	beq.n	8005cda <HAL_TIM_PWM_Start_IT+0x256>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a28      	ldr	r2, [pc, #160]	@ (8005d3c <HAL_TIM_PWM_Start_IT+0x2b8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d01d      	beq.n	8005cda <HAL_TIM_PWM_Start_IT+0x256>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a27      	ldr	r2, [pc, #156]	@ (8005d40 <HAL_TIM_PWM_Start_IT+0x2bc>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d018      	beq.n	8005cda <HAL_TIM_PWM_Start_IT+0x256>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1e      	ldr	r2, [pc, #120]	@ (8005d28 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d013      	beq.n	8005cda <HAL_TIM_PWM_Start_IT+0x256>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a23      	ldr	r2, [pc, #140]	@ (8005d44 <HAL_TIM_PWM_Start_IT+0x2c0>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00e      	beq.n	8005cda <HAL_TIM_PWM_Start_IT+0x256>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1a      	ldr	r2, [pc, #104]	@ (8005d2c <HAL_TIM_PWM_Start_IT+0x2a8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d009      	beq.n	8005cda <HAL_TIM_PWM_Start_IT+0x256>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1f      	ldr	r2, [pc, #124]	@ (8005d48 <HAL_TIM_PWM_Start_IT+0x2c4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d004      	beq.n	8005cda <HAL_TIM_PWM_Start_IT+0x256>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d4c <HAL_TIM_PWM_Start_IT+0x2c8>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d115      	bne.n	8005d06 <HAL_TIM_PWM_Start_IT+0x282>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8005d50 <HAL_TIM_PWM_Start_IT+0x2cc>)
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2b06      	cmp	r3, #6
 8005cea:	d015      	beq.n	8005d18 <HAL_TIM_PWM_Start_IT+0x294>
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cf2:	d011      	beq.n	8005d18 <HAL_TIM_PWM_Start_IT+0x294>
      {
        __HAL_TIM_ENABLE(htim);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d04:	e008      	b.n	8005d18 <HAL_TIM_PWM_Start_IT+0x294>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f042 0201 	orr.w	r2, r2, #1
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	e000      	b.n	8005d1a <HAL_TIM_PWM_Start_IT+0x296>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d18:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40010000 	.word	0x40010000
 8005d28:	40010400 	.word	0x40010400
 8005d2c:	40014000 	.word	0x40014000
 8005d30:	40014400 	.word	0x40014400
 8005d34:	40014800 	.word	0x40014800
 8005d38:	40000400 	.word	0x40000400
 8005d3c:	40000800 	.word	0x40000800
 8005d40:	40000c00 	.word	0x40000c00
 8005d44:	40001800 	.word	0x40001800
 8005d48:	4000e000 	.word	0x4000e000
 8005d4c:	4000e400 	.word	0x4000e400
 8005d50:	00010007 	.word	0x00010007

08005d54 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b0c      	cmp	r3, #12
 8005d66:	d841      	bhi.n	8005dec <HAL_TIM_PWM_Stop_IT+0x98>
 8005d68:	a201      	add	r2, pc, #4	@ (adr r2, 8005d70 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8005d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6e:	bf00      	nop
 8005d70:	08005da5 	.word	0x08005da5
 8005d74:	08005ded 	.word	0x08005ded
 8005d78:	08005ded 	.word	0x08005ded
 8005d7c:	08005ded 	.word	0x08005ded
 8005d80:	08005db7 	.word	0x08005db7
 8005d84:	08005ded 	.word	0x08005ded
 8005d88:	08005ded 	.word	0x08005ded
 8005d8c:	08005ded 	.word	0x08005ded
 8005d90:	08005dc9 	.word	0x08005dc9
 8005d94:	08005ded 	.word	0x08005ded
 8005d98:	08005ded 	.word	0x08005ded
 8005d9c:	08005ded 	.word	0x08005ded
 8005da0:	08005ddb 	.word	0x08005ddb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0202 	bic.w	r2, r2, #2
 8005db2:	60da      	str	r2, [r3, #12]
      break;
 8005db4:	e01d      	b.n	8005df2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0204 	bic.w	r2, r2, #4
 8005dc4:	60da      	str	r2, [r3, #12]
      break;
 8005dc6:	e014      	b.n	8005df2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0208 	bic.w	r2, r2, #8
 8005dd6:	60da      	str	r2, [r3, #12]
      break;
 8005dd8:	e00b      	b.n	8005df2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0210 	bic.w	r2, r2, #16
 8005de8:	60da      	str	r2, [r3, #12]
      break;
 8005dea:	e002      	b.n	8005df2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	73fb      	strb	r3, [r7, #15]
      break;
 8005df0:	bf00      	nop
  }

  if (status == HAL_OK)
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f040 8081 	bne.w	8005efc <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 ffe6 	bl	8006dd4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a3e      	ldr	r2, [pc, #248]	@ (8005f08 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d013      	beq.n	8005e3a <HAL_TIM_PWM_Stop_IT+0xe6>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a3d      	ldr	r2, [pc, #244]	@ (8005f0c <HAL_TIM_PWM_Stop_IT+0x1b8>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d00e      	beq.n	8005e3a <HAL_TIM_PWM_Stop_IT+0xe6>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a3b      	ldr	r2, [pc, #236]	@ (8005f10 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d009      	beq.n	8005e3a <HAL_TIM_PWM_Stop_IT+0xe6>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a3a      	ldr	r2, [pc, #232]	@ (8005f14 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d004      	beq.n	8005e3a <HAL_TIM_PWM_Stop_IT+0xe6>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a38      	ldr	r2, [pc, #224]	@ (8005f18 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d101      	bne.n	8005e3e <HAL_TIM_PWM_Stop_IT+0xea>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <HAL_TIM_PWM_Stop_IT+0xec>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d017      	beq.n	8005e74 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6a1a      	ldr	r2, [r3, #32]
 8005e4a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e4e:	4013      	ands	r3, r2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10f      	bne.n	8005e74 <HAL_TIM_PWM_Stop_IT+0x120>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6a1a      	ldr	r2, [r3, #32]
 8005e5a:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e5e:	4013      	ands	r3, r2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d107      	bne.n	8005e74 <HAL_TIM_PWM_Stop_IT+0x120>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e72:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6a1a      	ldr	r2, [r3, #32]
 8005e7a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e7e:	4013      	ands	r3, r2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10f      	bne.n	8005ea4 <HAL_TIM_PWM_Stop_IT+0x150>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6a1a      	ldr	r2, [r3, #32]
 8005e8a:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e8e:	4013      	ands	r3, r2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d107      	bne.n	8005ea4 <HAL_TIM_PWM_Stop_IT+0x150>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0201 	bic.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d104      	bne.n	8005eb4 <HAL_TIM_PWM_Stop_IT+0x160>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005eb2:	e023      	b.n	8005efc <HAL_TIM_PWM_Stop_IT+0x1a8>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	d104      	bne.n	8005ec4 <HAL_TIM_PWM_Stop_IT+0x170>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ec2:	e01b      	b.n	8005efc <HAL_TIM_PWM_Stop_IT+0x1a8>
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	d104      	bne.n	8005ed4 <HAL_TIM_PWM_Stop_IT+0x180>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ed2:	e013      	b.n	8005efc <HAL_TIM_PWM_Stop_IT+0x1a8>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2b0c      	cmp	r3, #12
 8005ed8:	d104      	bne.n	8005ee4 <HAL_TIM_PWM_Stop_IT+0x190>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ee2:	e00b      	b.n	8005efc <HAL_TIM_PWM_Stop_IT+0x1a8>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b10      	cmp	r3, #16
 8005ee8:	d104      	bne.n	8005ef4 <HAL_TIM_PWM_Stop_IT+0x1a0>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ef2:	e003      	b.n	8005efc <HAL_TIM_PWM_Stop_IT+0x1a8>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	40010000 	.word	0x40010000
 8005f0c:	40010400 	.word	0x40010400
 8005f10:	40014000 	.word	0x40014000
 8005f14:	40014400 	.word	0x40014400
 8005f18:	40014800 	.word	0x40014800

08005f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d020      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01b      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0202 	mvn.w	r2, #2
 8005f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fb00 	bl	800656c <HAL_TIM_IC_CaptureCallback>
 8005f6c:	e005      	b.n	8005f7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 faf2 	bl	8006558 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7fb f875 	bl	8001064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d020      	beq.n	8005fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01b      	beq.n	8005fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0204 	mvn.w	r2, #4
 8005f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fada 	bl	800656c <HAL_TIM_IC_CaptureCallback>
 8005fb8:	e005      	b.n	8005fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 facc 	bl	8006558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7fb f84f 	bl	8001064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f003 0308 	and.w	r3, r3, #8
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d020      	beq.n	8006018 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f003 0308 	and.w	r3, r3, #8
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d01b      	beq.n	8006018 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 0208 	mvn.w	r2, #8
 8005fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2204      	movs	r2, #4
 8005fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fab4 	bl	800656c <HAL_TIM_IC_CaptureCallback>
 8006004:	e005      	b.n	8006012 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 faa6 	bl	8006558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7fb f829 	bl	8001064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f003 0310 	and.w	r3, r3, #16
 800601e:	2b00      	cmp	r3, #0
 8006020:	d020      	beq.n	8006064 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01b      	beq.n	8006064 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0210 	mvn.w	r2, #16
 8006034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2208      	movs	r2, #8
 800603a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa8e 	bl	800656c <HAL_TIM_IC_CaptureCallback>
 8006050:	e005      	b.n	800605e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fa80 	bl	8006558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7fb f803 	bl	8001064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00c      	beq.n	8006088 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d007      	beq.n	8006088 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f06f 0201 	mvn.w	r2, #1
 8006080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fa5e 	bl	8006544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608e:	2b00      	cmp	r3, #0
 8006090:	d104      	bne.n	800609c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00c      	beq.n	80060b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d007      	beq.n	80060b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80060ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 ff5b 	bl	8006f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00c      	beq.n	80060da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d007      	beq.n	80060da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80060d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 ff53 	bl	8006f80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00c      	beq.n	80060fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d007      	beq.n	80060fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fa41 	bl	8006580 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00c      	beq.n	8006122 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b00      	cmp	r3, #0
 8006110:	d007      	beq.n	8006122 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f06f 0220 	mvn.w	r2, #32
 800611a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 ff1b 	bl	8006f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006122:	bf00      	nop
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006146:	2302      	movs	r3, #2
 8006148:	e0ff      	b.n	800634a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b14      	cmp	r3, #20
 8006156:	f200 80f0 	bhi.w	800633a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800615a:	a201      	add	r2, pc, #4	@ (adr r2, 8006160 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800615c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006160:	080061b5 	.word	0x080061b5
 8006164:	0800633b 	.word	0x0800633b
 8006168:	0800633b 	.word	0x0800633b
 800616c:	0800633b 	.word	0x0800633b
 8006170:	080061f5 	.word	0x080061f5
 8006174:	0800633b 	.word	0x0800633b
 8006178:	0800633b 	.word	0x0800633b
 800617c:	0800633b 	.word	0x0800633b
 8006180:	08006237 	.word	0x08006237
 8006184:	0800633b 	.word	0x0800633b
 8006188:	0800633b 	.word	0x0800633b
 800618c:	0800633b 	.word	0x0800633b
 8006190:	08006277 	.word	0x08006277
 8006194:	0800633b 	.word	0x0800633b
 8006198:	0800633b 	.word	0x0800633b
 800619c:	0800633b 	.word	0x0800633b
 80061a0:	080062b9 	.word	0x080062b9
 80061a4:	0800633b 	.word	0x0800633b
 80061a8:	0800633b 	.word	0x0800633b
 80061ac:	0800633b 	.word	0x0800633b
 80061b0:	080062f9 	.word	0x080062f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68b9      	ldr	r1, [r7, #8]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fa96 	bl	80066ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699a      	ldr	r2, [r3, #24]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0208 	orr.w	r2, r2, #8
 80061ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0204 	bic.w	r2, r2, #4
 80061de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6999      	ldr	r1, [r3, #24]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	691a      	ldr	r2, [r3, #16]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	619a      	str	r2, [r3, #24]
      break;
 80061f2:	e0a5      	b.n	8006340 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fb06 	bl	800680c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	699a      	ldr	r2, [r3, #24]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800620e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800621e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6999      	ldr	r1, [r3, #24]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	021a      	lsls	r2, r3, #8
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	619a      	str	r2, [r3, #24]
      break;
 8006234:	e084      	b.n	8006340 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	4618      	mov	r0, r3
 800623e:	f000 fb6f 	bl	8006920 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69da      	ldr	r2, [r3, #28]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f042 0208 	orr.w	r2, r2, #8
 8006250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69da      	ldr	r2, [r3, #28]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0204 	bic.w	r2, r2, #4
 8006260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69d9      	ldr	r1, [r3, #28]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	61da      	str	r2, [r3, #28]
      break;
 8006274:	e064      	b.n	8006340 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	4618      	mov	r0, r3
 800627e:	f000 fbd7 	bl	8006a30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69da      	ldr	r2, [r3, #28]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	69da      	ldr	r2, [r3, #28]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69d9      	ldr	r1, [r3, #28]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	021a      	lsls	r2, r3, #8
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	61da      	str	r2, [r3, #28]
      break;
 80062b6:	e043      	b.n	8006340 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fc20 	bl	8006b04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0208 	orr.w	r2, r2, #8
 80062d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0204 	bic.w	r2, r2, #4
 80062e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	691a      	ldr	r2, [r3, #16]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80062f6:	e023      	b.n	8006340 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68b9      	ldr	r1, [r7, #8]
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 fc64 	bl	8006bcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006312:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006322:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	021a      	lsls	r2, r3, #8
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006338:	e002      	b.n	8006340 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	75fb      	strb	r3, [r7, #23]
      break;
 800633e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006348:	7dfb      	ldrb	r3, [r7, #23]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop

08006354 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006368:	2b01      	cmp	r3, #1
 800636a:	d101      	bne.n	8006370 <HAL_TIM_ConfigClockSource+0x1c>
 800636c:	2302      	movs	r3, #2
 800636e:	e0dc      	b.n	800652a <HAL_TIM_ConfigClockSource+0x1d6>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	4b6a      	ldr	r3, [pc, #424]	@ (8006534 <HAL_TIM_ConfigClockSource+0x1e0>)
 800638c:	4013      	ands	r3, r2
 800638e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006396:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a64      	ldr	r2, [pc, #400]	@ (8006538 <HAL_TIM_ConfigClockSource+0x1e4>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	f000 80a9 	beq.w	80064fe <HAL_TIM_ConfigClockSource+0x1aa>
 80063ac:	4a62      	ldr	r2, [pc, #392]	@ (8006538 <HAL_TIM_ConfigClockSource+0x1e4>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	f200 80ae 	bhi.w	8006510 <HAL_TIM_ConfigClockSource+0x1bc>
 80063b4:	4a61      	ldr	r2, [pc, #388]	@ (800653c <HAL_TIM_ConfigClockSource+0x1e8>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	f000 80a1 	beq.w	80064fe <HAL_TIM_ConfigClockSource+0x1aa>
 80063bc:	4a5f      	ldr	r2, [pc, #380]	@ (800653c <HAL_TIM_ConfigClockSource+0x1e8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	f200 80a6 	bhi.w	8006510 <HAL_TIM_ConfigClockSource+0x1bc>
 80063c4:	4a5e      	ldr	r2, [pc, #376]	@ (8006540 <HAL_TIM_ConfigClockSource+0x1ec>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	f000 8099 	beq.w	80064fe <HAL_TIM_ConfigClockSource+0x1aa>
 80063cc:	4a5c      	ldr	r2, [pc, #368]	@ (8006540 <HAL_TIM_ConfigClockSource+0x1ec>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	f200 809e 	bhi.w	8006510 <HAL_TIM_ConfigClockSource+0x1bc>
 80063d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80063d8:	f000 8091 	beq.w	80064fe <HAL_TIM_ConfigClockSource+0x1aa>
 80063dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80063e0:	f200 8096 	bhi.w	8006510 <HAL_TIM_ConfigClockSource+0x1bc>
 80063e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063e8:	f000 8089 	beq.w	80064fe <HAL_TIM_ConfigClockSource+0x1aa>
 80063ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063f0:	f200 808e 	bhi.w	8006510 <HAL_TIM_ConfigClockSource+0x1bc>
 80063f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063f8:	d03e      	beq.n	8006478 <HAL_TIM_ConfigClockSource+0x124>
 80063fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063fe:	f200 8087 	bhi.w	8006510 <HAL_TIM_ConfigClockSource+0x1bc>
 8006402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006406:	f000 8086 	beq.w	8006516 <HAL_TIM_ConfigClockSource+0x1c2>
 800640a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800640e:	d87f      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x1bc>
 8006410:	2b70      	cmp	r3, #112	@ 0x70
 8006412:	d01a      	beq.n	800644a <HAL_TIM_ConfigClockSource+0xf6>
 8006414:	2b70      	cmp	r3, #112	@ 0x70
 8006416:	d87b      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x1bc>
 8006418:	2b60      	cmp	r3, #96	@ 0x60
 800641a:	d050      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x16a>
 800641c:	2b60      	cmp	r3, #96	@ 0x60
 800641e:	d877      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x1bc>
 8006420:	2b50      	cmp	r3, #80	@ 0x50
 8006422:	d03c      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x14a>
 8006424:	2b50      	cmp	r3, #80	@ 0x50
 8006426:	d873      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x1bc>
 8006428:	2b40      	cmp	r3, #64	@ 0x40
 800642a:	d058      	beq.n	80064de <HAL_TIM_ConfigClockSource+0x18a>
 800642c:	2b40      	cmp	r3, #64	@ 0x40
 800642e:	d86f      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x1bc>
 8006430:	2b30      	cmp	r3, #48	@ 0x30
 8006432:	d064      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x1aa>
 8006434:	2b30      	cmp	r3, #48	@ 0x30
 8006436:	d86b      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x1bc>
 8006438:	2b20      	cmp	r3, #32
 800643a:	d060      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x1aa>
 800643c:	2b20      	cmp	r3, #32
 800643e:	d867      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x1bc>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d05c      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x1aa>
 8006444:	2b10      	cmp	r3, #16
 8006446:	d05a      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x1aa>
 8006448:	e062      	b.n	8006510 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800645a:	f000 fc9b 	bl	8006d94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800646c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	609a      	str	r2, [r3, #8]
      break;
 8006476:	e04f      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006488:	f000 fc84 	bl	8006d94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800649a:	609a      	str	r2, [r3, #8]
      break;
 800649c:	e03c      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064aa:	461a      	mov	r2, r3
 80064ac:	f000 fbf4 	bl	8006c98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2150      	movs	r1, #80	@ 0x50
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fc4e 	bl	8006d58 <TIM_ITRx_SetConfig>
      break;
 80064bc:	e02c      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ca:	461a      	mov	r2, r3
 80064cc:	f000 fc13 	bl	8006cf6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2160      	movs	r1, #96	@ 0x60
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fc3e 	bl	8006d58 <TIM_ITRx_SetConfig>
      break;
 80064dc:	e01c      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ea:	461a      	mov	r2, r3
 80064ec:	f000 fbd4 	bl	8006c98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2140      	movs	r1, #64	@ 0x40
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 fc2e 	bl	8006d58 <TIM_ITRx_SetConfig>
      break;
 80064fc:	e00c      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4619      	mov	r1, r3
 8006508:	4610      	mov	r0, r2
 800650a:	f000 fc25 	bl	8006d58 <TIM_ITRx_SetConfig>
      break;
 800650e:	e003      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	73fb      	strb	r3, [r7, #15]
      break;
 8006514:	e000      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006516:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006528:	7bfb      	ldrb	r3, [r7, #15]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	ffceff88 	.word	0xffceff88
 8006538:	00100040 	.word	0x00100040
 800653c:	00100030 	.word	0x00100030
 8006540:	00100020 	.word	0x00100020

08006544 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a47      	ldr	r2, [pc, #284]	@ (80066c4 <TIM_Base_SetConfig+0x130>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d013      	beq.n	80065d4 <TIM_Base_SetConfig+0x40>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b2:	d00f      	beq.n	80065d4 <TIM_Base_SetConfig+0x40>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a44      	ldr	r2, [pc, #272]	@ (80066c8 <TIM_Base_SetConfig+0x134>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00b      	beq.n	80065d4 <TIM_Base_SetConfig+0x40>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a43      	ldr	r2, [pc, #268]	@ (80066cc <TIM_Base_SetConfig+0x138>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d007      	beq.n	80065d4 <TIM_Base_SetConfig+0x40>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a42      	ldr	r2, [pc, #264]	@ (80066d0 <TIM_Base_SetConfig+0x13c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d003      	beq.n	80065d4 <TIM_Base_SetConfig+0x40>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a41      	ldr	r2, [pc, #260]	@ (80066d4 <TIM_Base_SetConfig+0x140>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d108      	bne.n	80065e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a36      	ldr	r2, [pc, #216]	@ (80066c4 <TIM_Base_SetConfig+0x130>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d027      	beq.n	800663e <TIM_Base_SetConfig+0xaa>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f4:	d023      	beq.n	800663e <TIM_Base_SetConfig+0xaa>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a33      	ldr	r2, [pc, #204]	@ (80066c8 <TIM_Base_SetConfig+0x134>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d01f      	beq.n	800663e <TIM_Base_SetConfig+0xaa>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a32      	ldr	r2, [pc, #200]	@ (80066cc <TIM_Base_SetConfig+0x138>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d01b      	beq.n	800663e <TIM_Base_SetConfig+0xaa>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a31      	ldr	r2, [pc, #196]	@ (80066d0 <TIM_Base_SetConfig+0x13c>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d017      	beq.n	800663e <TIM_Base_SetConfig+0xaa>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a30      	ldr	r2, [pc, #192]	@ (80066d4 <TIM_Base_SetConfig+0x140>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d013      	beq.n	800663e <TIM_Base_SetConfig+0xaa>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a2f      	ldr	r2, [pc, #188]	@ (80066d8 <TIM_Base_SetConfig+0x144>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00f      	beq.n	800663e <TIM_Base_SetConfig+0xaa>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a2e      	ldr	r2, [pc, #184]	@ (80066dc <TIM_Base_SetConfig+0x148>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00b      	beq.n	800663e <TIM_Base_SetConfig+0xaa>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a2d      	ldr	r2, [pc, #180]	@ (80066e0 <TIM_Base_SetConfig+0x14c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d007      	beq.n	800663e <TIM_Base_SetConfig+0xaa>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a2c      	ldr	r2, [pc, #176]	@ (80066e4 <TIM_Base_SetConfig+0x150>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d003      	beq.n	800663e <TIM_Base_SetConfig+0xaa>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a2b      	ldr	r2, [pc, #172]	@ (80066e8 <TIM_Base_SetConfig+0x154>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d108      	bne.n	8006650 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	4313      	orrs	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	4313      	orrs	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	689a      	ldr	r2, [r3, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a14      	ldr	r2, [pc, #80]	@ (80066c4 <TIM_Base_SetConfig+0x130>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00f      	beq.n	8006696 <TIM_Base_SetConfig+0x102>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a16      	ldr	r2, [pc, #88]	@ (80066d4 <TIM_Base_SetConfig+0x140>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00b      	beq.n	8006696 <TIM_Base_SetConfig+0x102>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a15      	ldr	r2, [pc, #84]	@ (80066d8 <TIM_Base_SetConfig+0x144>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d007      	beq.n	8006696 <TIM_Base_SetConfig+0x102>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a14      	ldr	r2, [pc, #80]	@ (80066dc <TIM_Base_SetConfig+0x148>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d003      	beq.n	8006696 <TIM_Base_SetConfig+0x102>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a13      	ldr	r2, [pc, #76]	@ (80066e0 <TIM_Base_SetConfig+0x14c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d103      	bne.n	800669e <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	691a      	ldr	r2, [r3, #16]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f043 0204 	orr.w	r2, r3, #4
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	601a      	str	r2, [r3, #0]
}
 80066b6:	bf00      	nop
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	40010000 	.word	0x40010000
 80066c8:	40000400 	.word	0x40000400
 80066cc:	40000800 	.word	0x40000800
 80066d0:	40000c00 	.word	0x40000c00
 80066d4:	40010400 	.word	0x40010400
 80066d8:	40014000 	.word	0x40014000
 80066dc:	40014400 	.word	0x40014400
 80066e0:	40014800 	.word	0x40014800
 80066e4:	4000e000 	.word	0x4000e000
 80066e8:	4000e400 	.word	0x4000e400

080066ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	f023 0201 	bic.w	r2, r3, #1
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4b37      	ldr	r3, [pc, #220]	@ (80067f4 <TIM_OC1_SetConfig+0x108>)
 8006718:	4013      	ands	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f023 0303 	bic.w	r3, r3, #3
 8006722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	4313      	orrs	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f023 0302 	bic.w	r3, r3, #2
 8006734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	4313      	orrs	r3, r2
 800673e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a2d      	ldr	r2, [pc, #180]	@ (80067f8 <TIM_OC1_SetConfig+0x10c>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d00f      	beq.n	8006768 <TIM_OC1_SetConfig+0x7c>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a2c      	ldr	r2, [pc, #176]	@ (80067fc <TIM_OC1_SetConfig+0x110>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00b      	beq.n	8006768 <TIM_OC1_SetConfig+0x7c>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a2b      	ldr	r2, [pc, #172]	@ (8006800 <TIM_OC1_SetConfig+0x114>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d007      	beq.n	8006768 <TIM_OC1_SetConfig+0x7c>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a2a      	ldr	r2, [pc, #168]	@ (8006804 <TIM_OC1_SetConfig+0x118>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d003      	beq.n	8006768 <TIM_OC1_SetConfig+0x7c>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a29      	ldr	r2, [pc, #164]	@ (8006808 <TIM_OC1_SetConfig+0x11c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d10c      	bne.n	8006782 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f023 0308 	bic.w	r3, r3, #8
 800676e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	4313      	orrs	r3, r2
 8006778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f023 0304 	bic.w	r3, r3, #4
 8006780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a1c      	ldr	r2, [pc, #112]	@ (80067f8 <TIM_OC1_SetConfig+0x10c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00f      	beq.n	80067aa <TIM_OC1_SetConfig+0xbe>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a1b      	ldr	r2, [pc, #108]	@ (80067fc <TIM_OC1_SetConfig+0x110>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00b      	beq.n	80067aa <TIM_OC1_SetConfig+0xbe>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a1a      	ldr	r2, [pc, #104]	@ (8006800 <TIM_OC1_SetConfig+0x114>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d007      	beq.n	80067aa <TIM_OC1_SetConfig+0xbe>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a19      	ldr	r2, [pc, #100]	@ (8006804 <TIM_OC1_SetConfig+0x118>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d003      	beq.n	80067aa <TIM_OC1_SetConfig+0xbe>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a18      	ldr	r2, [pc, #96]	@ (8006808 <TIM_OC1_SetConfig+0x11c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d111      	bne.n	80067ce <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	621a      	str	r2, [r3, #32]
}
 80067e8:	bf00      	nop
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	fffeff8f 	.word	0xfffeff8f
 80067f8:	40010000 	.word	0x40010000
 80067fc:	40010400 	.word	0x40010400
 8006800:	40014000 	.word	0x40014000
 8006804:	40014400 	.word	0x40014400
 8006808:	40014800 	.word	0x40014800

0800680c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	f023 0210 	bic.w	r2, r3, #16
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	4b34      	ldr	r3, [pc, #208]	@ (8006908 <TIM_OC2_SetConfig+0xfc>)
 8006838:	4013      	ands	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	021b      	lsls	r3, r3, #8
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	4313      	orrs	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f023 0320 	bic.w	r3, r3, #32
 8006856:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a29      	ldr	r2, [pc, #164]	@ (800690c <TIM_OC2_SetConfig+0x100>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d003      	beq.n	8006874 <TIM_OC2_SetConfig+0x68>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a28      	ldr	r2, [pc, #160]	@ (8006910 <TIM_OC2_SetConfig+0x104>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d10d      	bne.n	8006890 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800687a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	011b      	lsls	r3, r3, #4
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4313      	orrs	r3, r2
 8006886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800688e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a1e      	ldr	r2, [pc, #120]	@ (800690c <TIM_OC2_SetConfig+0x100>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00f      	beq.n	80068b8 <TIM_OC2_SetConfig+0xac>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a1d      	ldr	r2, [pc, #116]	@ (8006910 <TIM_OC2_SetConfig+0x104>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00b      	beq.n	80068b8 <TIM_OC2_SetConfig+0xac>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006914 <TIM_OC2_SetConfig+0x108>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d007      	beq.n	80068b8 <TIM_OC2_SetConfig+0xac>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006918 <TIM_OC2_SetConfig+0x10c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d003      	beq.n	80068b8 <TIM_OC2_SetConfig+0xac>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a1a      	ldr	r2, [pc, #104]	@ (800691c <TIM_OC2_SetConfig+0x110>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d113      	bne.n	80068e0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	feff8fff 	.word	0xfeff8fff
 800690c:	40010000 	.word	0x40010000
 8006910:	40010400 	.word	0x40010400
 8006914:	40014000 	.word	0x40014000
 8006918:	40014400 	.word	0x40014400
 800691c:	40014800 	.word	0x40014800

08006920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	4b33      	ldr	r3, [pc, #204]	@ (8006a18 <TIM_OC3_SetConfig+0xf8>)
 800694c:	4013      	ands	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0303 	bic.w	r3, r3, #3
 8006956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	021b      	lsls	r3, r3, #8
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	4313      	orrs	r3, r2
 8006974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a28      	ldr	r2, [pc, #160]	@ (8006a1c <TIM_OC3_SetConfig+0xfc>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d003      	beq.n	8006986 <TIM_OC3_SetConfig+0x66>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a27      	ldr	r2, [pc, #156]	@ (8006a20 <TIM_OC3_SetConfig+0x100>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d10d      	bne.n	80069a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800698c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	021b      	lsls	r3, r3, #8
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	4313      	orrs	r3, r2
 8006998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a1d      	ldr	r2, [pc, #116]	@ (8006a1c <TIM_OC3_SetConfig+0xfc>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d00f      	beq.n	80069ca <TIM_OC3_SetConfig+0xaa>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a1c      	ldr	r2, [pc, #112]	@ (8006a20 <TIM_OC3_SetConfig+0x100>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00b      	beq.n	80069ca <TIM_OC3_SetConfig+0xaa>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a24 <TIM_OC3_SetConfig+0x104>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d007      	beq.n	80069ca <TIM_OC3_SetConfig+0xaa>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a1a      	ldr	r2, [pc, #104]	@ (8006a28 <TIM_OC3_SetConfig+0x108>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d003      	beq.n	80069ca <TIM_OC3_SetConfig+0xaa>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a19      	ldr	r2, [pc, #100]	@ (8006a2c <TIM_OC3_SetConfig+0x10c>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d113      	bne.n	80069f2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	011b      	lsls	r3, r3, #4
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	621a      	str	r2, [r3, #32]
}
 8006a0c:	bf00      	nop
 8006a0e:	371c      	adds	r7, #28
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	fffeff8f 	.word	0xfffeff8f
 8006a1c:	40010000 	.word	0x40010000
 8006a20:	40010400 	.word	0x40010400
 8006a24:	40014000 	.word	0x40014000
 8006a28:	40014400 	.word	0x40014400
 8006a2c:	40014800 	.word	0x40014800

08006a30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4b24      	ldr	r3, [pc, #144]	@ (8006aec <TIM_OC4_SetConfig+0xbc>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	021b      	lsls	r3, r3, #8
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	031b      	lsls	r3, r3, #12
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a19      	ldr	r2, [pc, #100]	@ (8006af0 <TIM_OC4_SetConfig+0xc0>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00f      	beq.n	8006ab0 <TIM_OC4_SetConfig+0x80>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a18      	ldr	r2, [pc, #96]	@ (8006af4 <TIM_OC4_SetConfig+0xc4>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00b      	beq.n	8006ab0 <TIM_OC4_SetConfig+0x80>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a17      	ldr	r2, [pc, #92]	@ (8006af8 <TIM_OC4_SetConfig+0xc8>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d007      	beq.n	8006ab0 <TIM_OC4_SetConfig+0x80>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a16      	ldr	r2, [pc, #88]	@ (8006afc <TIM_OC4_SetConfig+0xcc>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d003      	beq.n	8006ab0 <TIM_OC4_SetConfig+0x80>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a15      	ldr	r2, [pc, #84]	@ (8006b00 <TIM_OC4_SetConfig+0xd0>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d109      	bne.n	8006ac4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ab6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	019b      	lsls	r3, r3, #6
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	621a      	str	r2, [r3, #32]
}
 8006ade:	bf00      	nop
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	feff8fff 	.word	0xfeff8fff
 8006af0:	40010000 	.word	0x40010000
 8006af4:	40010400 	.word	0x40010400
 8006af8:	40014000 	.word	0x40014000
 8006afc:	40014400 	.word	0x40014400
 8006b00:	40014800 	.word	0x40014800

08006b04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4b21      	ldr	r3, [pc, #132]	@ (8006bb4 <TIM_OC5_SetConfig+0xb0>)
 8006b30:	4013      	ands	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006b44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	041b      	lsls	r3, r3, #16
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a18      	ldr	r2, [pc, #96]	@ (8006bb8 <TIM_OC5_SetConfig+0xb4>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d00f      	beq.n	8006b7a <TIM_OC5_SetConfig+0x76>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a17      	ldr	r2, [pc, #92]	@ (8006bbc <TIM_OC5_SetConfig+0xb8>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00b      	beq.n	8006b7a <TIM_OC5_SetConfig+0x76>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a16      	ldr	r2, [pc, #88]	@ (8006bc0 <TIM_OC5_SetConfig+0xbc>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d007      	beq.n	8006b7a <TIM_OC5_SetConfig+0x76>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a15      	ldr	r2, [pc, #84]	@ (8006bc4 <TIM_OC5_SetConfig+0xc0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d003      	beq.n	8006b7a <TIM_OC5_SetConfig+0x76>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a14      	ldr	r2, [pc, #80]	@ (8006bc8 <TIM_OC5_SetConfig+0xc4>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d109      	bne.n	8006b8e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	021b      	lsls	r3, r3, #8
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	621a      	str	r2, [r3, #32]
}
 8006ba8:	bf00      	nop
 8006baa:	371c      	adds	r7, #28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	fffeff8f 	.word	0xfffeff8f
 8006bb8:	40010000 	.word	0x40010000
 8006bbc:	40010400 	.word	0x40010400
 8006bc0:	40014000 	.word	0x40014000
 8006bc4:	40014400 	.word	0x40014400
 8006bc8:	40014800 	.word	0x40014800

08006bcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	4b22      	ldr	r3, [pc, #136]	@ (8006c80 <TIM_OC6_SetConfig+0xb4>)
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	021b      	lsls	r3, r3, #8
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	051b      	lsls	r3, r3, #20
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a19      	ldr	r2, [pc, #100]	@ (8006c84 <TIM_OC6_SetConfig+0xb8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d00f      	beq.n	8006c44 <TIM_OC6_SetConfig+0x78>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a18      	ldr	r2, [pc, #96]	@ (8006c88 <TIM_OC6_SetConfig+0xbc>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d00b      	beq.n	8006c44 <TIM_OC6_SetConfig+0x78>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a17      	ldr	r2, [pc, #92]	@ (8006c8c <TIM_OC6_SetConfig+0xc0>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d007      	beq.n	8006c44 <TIM_OC6_SetConfig+0x78>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a16      	ldr	r2, [pc, #88]	@ (8006c90 <TIM_OC6_SetConfig+0xc4>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d003      	beq.n	8006c44 <TIM_OC6_SetConfig+0x78>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a15      	ldr	r2, [pc, #84]	@ (8006c94 <TIM_OC6_SetConfig+0xc8>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d109      	bne.n	8006c58 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	029b      	lsls	r3, r3, #10
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	621a      	str	r2, [r3, #32]
}
 8006c72:	bf00      	nop
 8006c74:	371c      	adds	r7, #28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	feff8fff 	.word	0xfeff8fff
 8006c84:	40010000 	.word	0x40010000
 8006c88:	40010400 	.word	0x40010400
 8006c8c:	40014000 	.word	0x40014000
 8006c90:	40014400 	.word	0x40014400
 8006c94:	40014800 	.word	0x40014800

08006c98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	f023 0201 	bic.w	r2, r3, #1
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	011b      	lsls	r3, r3, #4
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f023 030a 	bic.w	r3, r3, #10
 8006cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	621a      	str	r2, [r3, #32]
}
 8006cea:	bf00      	nop
 8006cec:	371c      	adds	r7, #28
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b087      	sub	sp, #28
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	60f8      	str	r0, [r7, #12]
 8006cfe:	60b9      	str	r1, [r7, #8]
 8006d00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	f023 0210 	bic.w	r2, r3, #16
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	031b      	lsls	r3, r3, #12
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	011b      	lsls	r3, r3, #4
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	621a      	str	r2, [r3, #32]
}
 8006d4a:	bf00      	nop
 8006d4c:	371c      	adds	r7, #28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
	...

08006d58 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	4b09      	ldr	r3, [pc, #36]	@ (8006d90 <TIM_ITRx_SetConfig+0x38>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	f043 0307 	orr.w	r3, r3, #7
 8006d7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	609a      	str	r2, [r3, #8]
}
 8006d82:	bf00      	nop
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	ffcfff8f 	.word	0xffcfff8f

08006d94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	021a      	lsls	r2, r3, #8
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	431a      	orrs	r2, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	609a      	str	r2, [r3, #8]
}
 8006dc8:	bf00      	nop
 8006dca:	371c      	adds	r7, #28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f003 031f 	and.w	r3, r3, #31
 8006de6:	2201      	movs	r2, #1
 8006de8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6a1a      	ldr	r2, [r3, #32]
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	43db      	mvns	r3, r3
 8006df6:	401a      	ands	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6a1a      	ldr	r2, [r3, #32]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f003 031f 	and.w	r3, r3, #31
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	fa01 f303 	lsl.w	r3, r1, r3
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	621a      	str	r2, [r3, #32]
}
 8006e12:	bf00      	nop
 8006e14:	371c      	adds	r7, #28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
	...

08006e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d101      	bne.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e34:	2302      	movs	r3, #2
 8006e36:	e077      	b.n	8006f28 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a35      	ldr	r2, [pc, #212]	@ (8006f34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d004      	beq.n	8006e6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a34      	ldr	r2, [pc, #208]	@ (8006f38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d108      	bne.n	8006e7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006e72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a25      	ldr	r2, [pc, #148]	@ (8006f34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d02c      	beq.n	8006efc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eaa:	d027      	beq.n	8006efc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a22      	ldr	r2, [pc, #136]	@ (8006f3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d022      	beq.n	8006efc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a21      	ldr	r2, [pc, #132]	@ (8006f40 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d01d      	beq.n	8006efc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a1f      	ldr	r2, [pc, #124]	@ (8006f44 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d018      	beq.n	8006efc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a1a      	ldr	r2, [pc, #104]	@ (8006f38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d013      	beq.n	8006efc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8006f48 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d00e      	beq.n	8006efc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1a      	ldr	r2, [pc, #104]	@ (8006f4c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d009      	beq.n	8006efc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a18      	ldr	r2, [pc, #96]	@ (8006f50 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d004      	beq.n	8006efc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a17      	ldr	r2, [pc, #92]	@ (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d10c      	bne.n	8006f16 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	40010000 	.word	0x40010000
 8006f38:	40010400 	.word	0x40010400
 8006f3c:	40000400 	.word	0x40000400
 8006f40:	40000800 	.word	0x40000800
 8006f44:	40000c00 	.word	0x40000c00
 8006f48:	40001800 	.word	0x40001800
 8006f4c:	40014000 	.word	0x40014000
 8006f50:	4000e000 	.word	0x4000e000
 8006f54:	4000e400 	.word	0x4000e400

08006f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e042      	b.n	800702c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d106      	bne.n	8006fbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7fa fa6f 	bl	800149c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2224      	movs	r2, #36	@ 0x24
 8006fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 0201 	bic.w	r2, r2, #1
 8006fd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d002      	beq.n	8006fe4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f001 fb64 	bl	80086ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fcf5 	bl	80079d4 <UART_SetConfig>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d101      	bne.n	8006ff4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e01b      	b.n	800702c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007002:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689a      	ldr	r2, [r3, #8]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007012:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0201 	orr.w	r2, r2, #1
 8007022:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f001 fbe3 	bl	80087f0 <UART_CheckIdleState>
 800702a:	4603      	mov	r3, r0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b08a      	sub	sp, #40	@ 0x28
 8007038:	af02      	add	r7, sp, #8
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	603b      	str	r3, [r7, #0]
 8007040:	4613      	mov	r3, r2
 8007042:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800704a:	2b20      	cmp	r3, #32
 800704c:	d17b      	bne.n	8007146 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <HAL_UART_Transmit+0x26>
 8007054:	88fb      	ldrh	r3, [r7, #6]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e074      	b.n	8007148 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2221      	movs	r2, #33	@ 0x21
 800706a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800706e:	f7fa fe35 	bl	8001cdc <HAL_GetTick>
 8007072:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	88fa      	ldrh	r2, [r7, #6]
 8007078:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	88fa      	ldrh	r2, [r7, #6]
 8007080:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800708c:	d108      	bne.n	80070a0 <HAL_UART_Transmit+0x6c>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d104      	bne.n	80070a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007096:	2300      	movs	r3, #0
 8007098:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	61bb      	str	r3, [r7, #24]
 800709e:	e003      	b.n	80070a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070a4:	2300      	movs	r3, #0
 80070a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070a8:	e030      	b.n	800710c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	2200      	movs	r2, #0
 80070b2:	2180      	movs	r1, #128	@ 0x80
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f001 fc45 	bl	8008944 <UART_WaitOnFlagUntilTimeout>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d005      	beq.n	80070cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2220      	movs	r2, #32
 80070c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e03d      	b.n	8007148 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10b      	bne.n	80070ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	3302      	adds	r3, #2
 80070e6:	61bb      	str	r3, [r7, #24]
 80070e8:	e007      	b.n	80070fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	781a      	ldrb	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	3301      	adds	r3, #1
 80070f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007100:	b29b      	uxth	r3, r3
 8007102:	3b01      	subs	r3, #1
 8007104:	b29a      	uxth	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007112:	b29b      	uxth	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1c8      	bne.n	80070aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	2200      	movs	r2, #0
 8007120:	2140      	movs	r1, #64	@ 0x40
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f001 fc0e 	bl	8008944 <UART_WaitOnFlagUntilTimeout>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2220      	movs	r2, #32
 8007132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e006      	b.n	8007148 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2220      	movs	r2, #32
 800713e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	e000      	b.n	8007148 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007146:	2302      	movs	r3, #2
  }
}
 8007148:	4618      	mov	r0, r3
 800714a:	3720      	adds	r7, #32
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b08a      	sub	sp, #40	@ 0x28
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	4613      	mov	r3, r2
 800715c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007164:	2b20      	cmp	r3, #32
 8007166:	d137      	bne.n	80071d8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d002      	beq.n	8007174 <HAL_UART_Receive_IT+0x24>
 800716e:	88fb      	ldrh	r3, [r7, #6]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e030      	b.n	80071da <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a18      	ldr	r2, [pc, #96]	@ (80071e4 <HAL_UART_Receive_IT+0x94>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d01f      	beq.n	80071c8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d018      	beq.n	80071c8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	e853 3f00 	ldrex	r3, [r3]
 80071a2:	613b      	str	r3, [r7, #16]
   return(result);
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80071aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
 80071b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b4:	623b      	str	r3, [r7, #32]
 80071b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b8:	69f9      	ldr	r1, [r7, #28]
 80071ba:	6a3a      	ldr	r2, [r7, #32]
 80071bc:	e841 2300 	strex	r3, r2, [r1]
 80071c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1e6      	bne.n	8007196 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80071c8:	88fb      	ldrh	r3, [r7, #6]
 80071ca:	461a      	mov	r2, r3
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f001 fc26 	bl	8008a20 <UART_Start_Receive_IT>
 80071d4:	4603      	mov	r3, r0
 80071d6:	e000      	b.n	80071da <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80071d8:	2302      	movs	r3, #2
  }
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3728      	adds	r7, #40	@ 0x28
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	58000c00 	.word	0x58000c00

080071e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b0ba      	sub	sp, #232	@ 0xe8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800720e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007212:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007216:	4013      	ands	r3, r2
 8007218:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800721c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007220:	2b00      	cmp	r3, #0
 8007222:	d11b      	bne.n	800725c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007228:	f003 0320 	and.w	r3, r3, #32
 800722c:	2b00      	cmp	r3, #0
 800722e:	d015      	beq.n	800725c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007234:	f003 0320 	and.w	r3, r3, #32
 8007238:	2b00      	cmp	r3, #0
 800723a:	d105      	bne.n	8007248 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800723c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d009      	beq.n	800725c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 8393 	beq.w	8007978 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	4798      	blx	r3
      }
      return;
 800725a:	e38d      	b.n	8007978 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800725c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 8123 	beq.w	80074ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007266:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800726a:	4b8d      	ldr	r3, [pc, #564]	@ (80074a0 <HAL_UART_IRQHandler+0x2b8>)
 800726c:	4013      	ands	r3, r2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d106      	bne.n	8007280 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007272:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007276:	4b8b      	ldr	r3, [pc, #556]	@ (80074a4 <HAL_UART_IRQHandler+0x2bc>)
 8007278:	4013      	ands	r3, r2
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 8116 	beq.w	80074ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007284:	f003 0301 	and.w	r3, r3, #1
 8007288:	2b00      	cmp	r3, #0
 800728a:	d011      	beq.n	80072b0 <HAL_UART_IRQHandler+0xc8>
 800728c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00b      	beq.n	80072b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2201      	movs	r2, #1
 800729e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072a6:	f043 0201 	orr.w	r2, r3, #1
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d011      	beq.n	80072e0 <HAL_UART_IRQHandler+0xf8>
 80072bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00b      	beq.n	80072e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2202      	movs	r2, #2
 80072ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072d6:	f043 0204 	orr.w	r2, r3, #4
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072e4:	f003 0304 	and.w	r3, r3, #4
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d011      	beq.n	8007310 <HAL_UART_IRQHandler+0x128>
 80072ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00b      	beq.n	8007310 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2204      	movs	r2, #4
 80072fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007306:	f043 0202 	orr.w	r2, r3, #2
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007314:	f003 0308 	and.w	r3, r3, #8
 8007318:	2b00      	cmp	r3, #0
 800731a:	d017      	beq.n	800734c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800731c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007320:	f003 0320 	and.w	r3, r3, #32
 8007324:	2b00      	cmp	r3, #0
 8007326:	d105      	bne.n	8007334 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007328:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800732c:	4b5c      	ldr	r3, [pc, #368]	@ (80074a0 <HAL_UART_IRQHandler+0x2b8>)
 800732e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00b      	beq.n	800734c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2208      	movs	r2, #8
 800733a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007342:	f043 0208 	orr.w	r2, r3, #8
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800734c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007350:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007354:	2b00      	cmp	r3, #0
 8007356:	d012      	beq.n	800737e <HAL_UART_IRQHandler+0x196>
 8007358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800735c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00c      	beq.n	800737e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800736c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007374:	f043 0220 	orr.w	r2, r3, #32
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 82f9 	beq.w	800797c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800738a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800738e:	f003 0320 	and.w	r3, r3, #32
 8007392:	2b00      	cmp	r3, #0
 8007394:	d013      	beq.n	80073be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800739a:	f003 0320 	and.w	r3, r3, #32
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d105      	bne.n	80073ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d007      	beq.n	80073be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d2:	2b40      	cmp	r3, #64	@ 0x40
 80073d4:	d005      	beq.n	80073e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80073d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d054      	beq.n	800748c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 fc3e 	bl	8008c64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f2:	2b40      	cmp	r3, #64	@ 0x40
 80073f4:	d146      	bne.n	8007484 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3308      	adds	r3, #8
 80073fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007400:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007404:	e853 3f00 	ldrex	r3, [r3]
 8007408:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800740c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007410:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007414:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3308      	adds	r3, #8
 800741e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007422:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007426:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800742e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007432:	e841 2300 	strex	r3, r2, [r1]
 8007436:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800743a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1d9      	bne.n	80073f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007448:	2b00      	cmp	r3, #0
 800744a:	d017      	beq.n	800747c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007452:	4a15      	ldr	r2, [pc, #84]	@ (80074a8 <HAL_UART_IRQHandler+0x2c0>)
 8007454:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800745c:	4618      	mov	r0, r3
 800745e:	f7fb f8ef 	bl	8002640 <HAL_DMA_Abort_IT>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d019      	beq.n	800749c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800746e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007476:	4610      	mov	r0, r2
 8007478:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800747a:	e00f      	b.n	800749c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fa93 	bl	80079a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007482:	e00b      	b.n	800749c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fa8f 	bl	80079a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800748a:	e007      	b.n	800749c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fa8b 	bl	80079a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800749a:	e26f      	b.n	800797c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800749c:	bf00      	nop
    return;
 800749e:	e26d      	b.n	800797c <HAL_UART_IRQHandler+0x794>
 80074a0:	10000001 	.word	0x10000001
 80074a4:	04000120 	.word	0x04000120
 80074a8:	08008d31 	.word	0x08008d31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	f040 8203 	bne.w	80078bc <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80074b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074ba:	f003 0310 	and.w	r3, r3, #16
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 81fc 	beq.w	80078bc <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80074c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074c8:	f003 0310 	and.w	r3, r3, #16
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 81f5 	beq.w	80078bc <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2210      	movs	r2, #16
 80074d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074e4:	2b40      	cmp	r3, #64	@ 0x40
 80074e6:	f040 816d 	bne.w	80077c4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4aa4      	ldr	r2, [pc, #656]	@ (8007784 <HAL_UART_IRQHandler+0x59c>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d068      	beq.n	80075ca <HAL_UART_IRQHandler+0x3e2>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4aa1      	ldr	r2, [pc, #644]	@ (8007788 <HAL_UART_IRQHandler+0x5a0>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d061      	beq.n	80075ca <HAL_UART_IRQHandler+0x3e2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a9f      	ldr	r2, [pc, #636]	@ (800778c <HAL_UART_IRQHandler+0x5a4>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d05a      	beq.n	80075ca <HAL_UART_IRQHandler+0x3e2>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a9c      	ldr	r2, [pc, #624]	@ (8007790 <HAL_UART_IRQHandler+0x5a8>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d053      	beq.n	80075ca <HAL_UART_IRQHandler+0x3e2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a9a      	ldr	r2, [pc, #616]	@ (8007794 <HAL_UART_IRQHandler+0x5ac>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d04c      	beq.n	80075ca <HAL_UART_IRQHandler+0x3e2>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a97      	ldr	r2, [pc, #604]	@ (8007798 <HAL_UART_IRQHandler+0x5b0>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d045      	beq.n	80075ca <HAL_UART_IRQHandler+0x3e2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a95      	ldr	r2, [pc, #596]	@ (800779c <HAL_UART_IRQHandler+0x5b4>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d03e      	beq.n	80075ca <HAL_UART_IRQHandler+0x3e2>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a92      	ldr	r2, [pc, #584]	@ (80077a0 <HAL_UART_IRQHandler+0x5b8>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d037      	beq.n	80075ca <HAL_UART_IRQHandler+0x3e2>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a90      	ldr	r2, [pc, #576]	@ (80077a4 <HAL_UART_IRQHandler+0x5bc>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d030      	beq.n	80075ca <HAL_UART_IRQHandler+0x3e2>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a8d      	ldr	r2, [pc, #564]	@ (80077a8 <HAL_UART_IRQHandler+0x5c0>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d029      	beq.n	80075ca <HAL_UART_IRQHandler+0x3e2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a8b      	ldr	r2, [pc, #556]	@ (80077ac <HAL_UART_IRQHandler+0x5c4>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d022      	beq.n	80075ca <HAL_UART_IRQHandler+0x3e2>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a88      	ldr	r2, [pc, #544]	@ (80077b0 <HAL_UART_IRQHandler+0x5c8>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d01b      	beq.n	80075ca <HAL_UART_IRQHandler+0x3e2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a86      	ldr	r2, [pc, #536]	@ (80077b4 <HAL_UART_IRQHandler+0x5cc>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d014      	beq.n	80075ca <HAL_UART_IRQHandler+0x3e2>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a83      	ldr	r2, [pc, #524]	@ (80077b8 <HAL_UART_IRQHandler+0x5d0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d00d      	beq.n	80075ca <HAL_UART_IRQHandler+0x3e2>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a81      	ldr	r2, [pc, #516]	@ (80077bc <HAL_UART_IRQHandler+0x5d4>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d006      	beq.n	80075ca <HAL_UART_IRQHandler+0x3e2>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a7e      	ldr	r2, [pc, #504]	@ (80077c0 <HAL_UART_IRQHandler+0x5d8>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d106      	bne.n	80075d8 <HAL_UART_IRQHandler+0x3f0>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	e005      	b.n	80075e4 <HAL_UART_IRQHandler+0x3fc>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 80ad 	beq.w	800774c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80075f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075fc:	429a      	cmp	r2, r3
 80075fe:	f080 80a5 	bcs.w	800774c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007608:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007618:	f000 8087 	beq.w	800772a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007630:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007634:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007638:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007646:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800764a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007652:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007656:	e841 2300 	strex	r3, r2, [r1]
 800765a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800765e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1da      	bne.n	800761c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3308      	adds	r3, #8
 800766c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007676:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007678:	f023 0301 	bic.w	r3, r3, #1
 800767c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3308      	adds	r3, #8
 8007686:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800768a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800768e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007692:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800769c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e1      	bne.n	8007666 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3308      	adds	r3, #8
 80076a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80076b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3308      	adds	r3, #8
 80076c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80076c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80076c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80076cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80076ce:	e841 2300 	strex	r3, r2, [r1]
 80076d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80076d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1e3      	bne.n	80076a2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2220      	movs	r2, #32
 80076de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80076f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076f8:	f023 0310 	bic.w	r3, r3, #16
 80076fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800770a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800770c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007710:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007718:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1e4      	bne.n	80076e8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007724:	4618      	mov	r0, r3
 8007726:	f7fa fc6d 	bl	8002004 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2202      	movs	r2, #2
 800772e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800773c:	b29b      	uxth	r3, r3
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	b29b      	uxth	r3, r3
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f939 	bl	80079bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800774a:	e119      	b.n	8007980 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007756:	429a      	cmp	r2, r3
 8007758:	f040 8112 	bne.w	8007980 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007768:	f040 810a 	bne.w	8007980 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007778:	4619      	mov	r1, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f91e 	bl	80079bc <HAL_UARTEx_RxEventCallback>
      return;
 8007780:	e0fe      	b.n	8007980 <HAL_UART_IRQHandler+0x798>
 8007782:	bf00      	nop
 8007784:	40020010 	.word	0x40020010
 8007788:	40020028 	.word	0x40020028
 800778c:	40020040 	.word	0x40020040
 8007790:	40020058 	.word	0x40020058
 8007794:	40020070 	.word	0x40020070
 8007798:	40020088 	.word	0x40020088
 800779c:	400200a0 	.word	0x400200a0
 80077a0:	400200b8 	.word	0x400200b8
 80077a4:	40020410 	.word	0x40020410
 80077a8:	40020428 	.word	0x40020428
 80077ac:	40020440 	.word	0x40020440
 80077b0:	40020458 	.word	0x40020458
 80077b4:	40020470 	.word	0x40020470
 80077b8:	40020488 	.word	0x40020488
 80077bc:	400204a0 	.word	0x400204a0
 80077c0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077de:	b29b      	uxth	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 80cf 	beq.w	8007984 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80077e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 80ca 	beq.w	8007984 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f8:	e853 3f00 	ldrex	r3, [r3]
 80077fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007800:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007804:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	461a      	mov	r2, r3
 800780e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007812:	647b      	str	r3, [r7, #68]	@ 0x44
 8007814:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007818:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e4      	bne.n	80077f0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3308      	adds	r3, #8
 800782c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	623b      	str	r3, [r7, #32]
   return(result);
 8007836:	6a3a      	ldr	r2, [r7, #32]
 8007838:	4b55      	ldr	r3, [pc, #340]	@ (8007990 <HAL_UART_IRQHandler+0x7a8>)
 800783a:	4013      	ands	r3, r2
 800783c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3308      	adds	r3, #8
 8007846:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800784a:	633a      	str	r2, [r7, #48]	@ 0x30
 800784c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e3      	bne.n	8007826 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2220      	movs	r2, #32
 8007862:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	e853 3f00 	ldrex	r3, [r3]
 800787e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f023 0310 	bic.w	r3, r3, #16
 8007886:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007894:	61fb      	str	r3, [r7, #28]
 8007896:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	69b9      	ldr	r1, [r7, #24]
 800789a:	69fa      	ldr	r2, [r7, #28]
 800789c:	e841 2300 	strex	r3, r2, [r1]
 80078a0:	617b      	str	r3, [r7, #20]
   return(result);
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e4      	bne.n	8007872 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2202      	movs	r2, #2
 80078ac:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f881 	bl	80079bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078ba:	e063      	b.n	8007984 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80078bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00e      	beq.n	80078e6 <HAL_UART_IRQHandler+0x6fe>
 80078c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d008      	beq.n	80078e6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80078dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 ff84 	bl	80097ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078e4:	e051      	b.n	800798a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80078e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d014      	beq.n	800791c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80078f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d105      	bne.n	800790a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80078fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007902:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d008      	beq.n	800791c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800790e:	2b00      	cmp	r3, #0
 8007910:	d03a      	beq.n	8007988 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	4798      	blx	r3
    }
    return;
 800791a:	e035      	b.n	8007988 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800791c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007924:	2b00      	cmp	r3, #0
 8007926:	d009      	beq.n	800793c <HAL_UART_IRQHandler+0x754>
 8007928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800792c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007930:	2b00      	cmp	r3, #0
 8007932:	d003      	beq.n	800793c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 fa0d 	bl	8008d54 <UART_EndTransmit_IT>
    return;
 800793a:	e026      	b.n	800798a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800793c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007940:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d009      	beq.n	800795c <HAL_UART_IRQHandler+0x774>
 8007948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800794c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d003      	beq.n	800795c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 ff5d 	bl	8009814 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800795a:	e016      	b.n	800798a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800795c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007960:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d010      	beq.n	800798a <HAL_UART_IRQHandler+0x7a2>
 8007968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800796c:	2b00      	cmp	r3, #0
 800796e:	da0c      	bge.n	800798a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f001 ff45 	bl	8009800 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007976:	e008      	b.n	800798a <HAL_UART_IRQHandler+0x7a2>
      return;
 8007978:	bf00      	nop
 800797a:	e006      	b.n	800798a <HAL_UART_IRQHandler+0x7a2>
    return;
 800797c:	bf00      	nop
 800797e:	e004      	b.n	800798a <HAL_UART_IRQHandler+0x7a2>
      return;
 8007980:	bf00      	nop
 8007982:	e002      	b.n	800798a <HAL_UART_IRQHandler+0x7a2>
      return;
 8007984:	bf00      	nop
 8007986:	e000      	b.n	800798a <HAL_UART_IRQHandler+0x7a2>
    return;
 8007988:	bf00      	nop
  }
}
 800798a:	37e8      	adds	r7, #232	@ 0xe8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	effffffe 	.word	0xeffffffe

08007994 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	460b      	mov	r3, r1
 80079c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079d8:	b092      	sub	sp, #72	@ 0x48
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	689a      	ldr	r2, [r3, #8]
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	431a      	orrs	r2, r3
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	431a      	orrs	r2, r3
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	4bbe      	ldr	r3, [pc, #760]	@ (8007cfc <UART_SetConfig+0x328>)
 8007a04:	4013      	ands	r3, r2
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	6812      	ldr	r2, [r2, #0]
 8007a0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007a0c:	430b      	orrs	r3, r1
 8007a0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4ab3      	ldr	r2, [pc, #716]	@ (8007d00 <UART_SetConfig+0x32c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d004      	beq.n	8007a40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	689a      	ldr	r2, [r3, #8]
 8007a46:	4baf      	ldr	r3, [pc, #700]	@ (8007d04 <UART_SetConfig+0x330>)
 8007a48:	4013      	ands	r3, r2
 8007a4a:	697a      	ldr	r2, [r7, #20]
 8007a4c:	6812      	ldr	r2, [r2, #0]
 8007a4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007a50:	430b      	orrs	r3, r1
 8007a52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5a:	f023 010f 	bic.w	r1, r3, #15
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4aa6      	ldr	r2, [pc, #664]	@ (8007d08 <UART_SetConfig+0x334>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d177      	bne.n	8007b64 <UART_SetConfig+0x190>
 8007a74:	4ba5      	ldr	r3, [pc, #660]	@ (8007d0c <UART_SetConfig+0x338>)
 8007a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a7c:	2b28      	cmp	r3, #40	@ 0x28
 8007a7e:	d86d      	bhi.n	8007b5c <UART_SetConfig+0x188>
 8007a80:	a201      	add	r2, pc, #4	@ (adr r2, 8007a88 <UART_SetConfig+0xb4>)
 8007a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a86:	bf00      	nop
 8007a88:	08007b2d 	.word	0x08007b2d
 8007a8c:	08007b5d 	.word	0x08007b5d
 8007a90:	08007b5d 	.word	0x08007b5d
 8007a94:	08007b5d 	.word	0x08007b5d
 8007a98:	08007b5d 	.word	0x08007b5d
 8007a9c:	08007b5d 	.word	0x08007b5d
 8007aa0:	08007b5d 	.word	0x08007b5d
 8007aa4:	08007b5d 	.word	0x08007b5d
 8007aa8:	08007b35 	.word	0x08007b35
 8007aac:	08007b5d 	.word	0x08007b5d
 8007ab0:	08007b5d 	.word	0x08007b5d
 8007ab4:	08007b5d 	.word	0x08007b5d
 8007ab8:	08007b5d 	.word	0x08007b5d
 8007abc:	08007b5d 	.word	0x08007b5d
 8007ac0:	08007b5d 	.word	0x08007b5d
 8007ac4:	08007b5d 	.word	0x08007b5d
 8007ac8:	08007b3d 	.word	0x08007b3d
 8007acc:	08007b5d 	.word	0x08007b5d
 8007ad0:	08007b5d 	.word	0x08007b5d
 8007ad4:	08007b5d 	.word	0x08007b5d
 8007ad8:	08007b5d 	.word	0x08007b5d
 8007adc:	08007b5d 	.word	0x08007b5d
 8007ae0:	08007b5d 	.word	0x08007b5d
 8007ae4:	08007b5d 	.word	0x08007b5d
 8007ae8:	08007b45 	.word	0x08007b45
 8007aec:	08007b5d 	.word	0x08007b5d
 8007af0:	08007b5d 	.word	0x08007b5d
 8007af4:	08007b5d 	.word	0x08007b5d
 8007af8:	08007b5d 	.word	0x08007b5d
 8007afc:	08007b5d 	.word	0x08007b5d
 8007b00:	08007b5d 	.word	0x08007b5d
 8007b04:	08007b5d 	.word	0x08007b5d
 8007b08:	08007b4d 	.word	0x08007b4d
 8007b0c:	08007b5d 	.word	0x08007b5d
 8007b10:	08007b5d 	.word	0x08007b5d
 8007b14:	08007b5d 	.word	0x08007b5d
 8007b18:	08007b5d 	.word	0x08007b5d
 8007b1c:	08007b5d 	.word	0x08007b5d
 8007b20:	08007b5d 	.word	0x08007b5d
 8007b24:	08007b5d 	.word	0x08007b5d
 8007b28:	08007b55 	.word	0x08007b55
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b32:	e326      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007b34:	2304      	movs	r3, #4
 8007b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b3a:	e322      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007b3c:	2308      	movs	r3, #8
 8007b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b42:	e31e      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007b44:	2310      	movs	r3, #16
 8007b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b4a:	e31a      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007b4c:	2320      	movs	r3, #32
 8007b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b52:	e316      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007b54:	2340      	movs	r3, #64	@ 0x40
 8007b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b5a:	e312      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007b5c:	2380      	movs	r3, #128	@ 0x80
 8007b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b62:	e30e      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a69      	ldr	r2, [pc, #420]	@ (8007d10 <UART_SetConfig+0x33c>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d130      	bne.n	8007bd0 <UART_SetConfig+0x1fc>
 8007b6e:	4b67      	ldr	r3, [pc, #412]	@ (8007d0c <UART_SetConfig+0x338>)
 8007b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b72:	f003 0307 	and.w	r3, r3, #7
 8007b76:	2b05      	cmp	r3, #5
 8007b78:	d826      	bhi.n	8007bc8 <UART_SetConfig+0x1f4>
 8007b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b80 <UART_SetConfig+0x1ac>)
 8007b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b80:	08007b99 	.word	0x08007b99
 8007b84:	08007ba1 	.word	0x08007ba1
 8007b88:	08007ba9 	.word	0x08007ba9
 8007b8c:	08007bb1 	.word	0x08007bb1
 8007b90:	08007bb9 	.word	0x08007bb9
 8007b94:	08007bc1 	.word	0x08007bc1
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b9e:	e2f0      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007ba0:	2304      	movs	r3, #4
 8007ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ba6:	e2ec      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007ba8:	2308      	movs	r3, #8
 8007baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bae:	e2e8      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007bb0:	2310      	movs	r3, #16
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bb6:	e2e4      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007bb8:	2320      	movs	r3, #32
 8007bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bbe:	e2e0      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007bc0:	2340      	movs	r3, #64	@ 0x40
 8007bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bc6:	e2dc      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007bc8:	2380      	movs	r3, #128	@ 0x80
 8007bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bce:	e2d8      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a4f      	ldr	r2, [pc, #316]	@ (8007d14 <UART_SetConfig+0x340>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d130      	bne.n	8007c3c <UART_SetConfig+0x268>
 8007bda:	4b4c      	ldr	r3, [pc, #304]	@ (8007d0c <UART_SetConfig+0x338>)
 8007bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bde:	f003 0307 	and.w	r3, r3, #7
 8007be2:	2b05      	cmp	r3, #5
 8007be4:	d826      	bhi.n	8007c34 <UART_SetConfig+0x260>
 8007be6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bec <UART_SetConfig+0x218>)
 8007be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bec:	08007c05 	.word	0x08007c05
 8007bf0:	08007c0d 	.word	0x08007c0d
 8007bf4:	08007c15 	.word	0x08007c15
 8007bf8:	08007c1d 	.word	0x08007c1d
 8007bfc:	08007c25 	.word	0x08007c25
 8007c00:	08007c2d 	.word	0x08007c2d
 8007c04:	2300      	movs	r3, #0
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c0a:	e2ba      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007c0c:	2304      	movs	r3, #4
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c12:	e2b6      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007c14:	2308      	movs	r3, #8
 8007c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c1a:	e2b2      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007c1c:	2310      	movs	r3, #16
 8007c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c22:	e2ae      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007c24:	2320      	movs	r3, #32
 8007c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c2a:	e2aa      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007c2c:	2340      	movs	r3, #64	@ 0x40
 8007c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c32:	e2a6      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007c34:	2380      	movs	r3, #128	@ 0x80
 8007c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c3a:	e2a2      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a35      	ldr	r2, [pc, #212]	@ (8007d18 <UART_SetConfig+0x344>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d130      	bne.n	8007ca8 <UART_SetConfig+0x2d4>
 8007c46:	4b31      	ldr	r3, [pc, #196]	@ (8007d0c <UART_SetConfig+0x338>)
 8007c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c4a:	f003 0307 	and.w	r3, r3, #7
 8007c4e:	2b05      	cmp	r3, #5
 8007c50:	d826      	bhi.n	8007ca0 <UART_SetConfig+0x2cc>
 8007c52:	a201      	add	r2, pc, #4	@ (adr r2, 8007c58 <UART_SetConfig+0x284>)
 8007c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c58:	08007c71 	.word	0x08007c71
 8007c5c:	08007c79 	.word	0x08007c79
 8007c60:	08007c81 	.word	0x08007c81
 8007c64:	08007c89 	.word	0x08007c89
 8007c68:	08007c91 	.word	0x08007c91
 8007c6c:	08007c99 	.word	0x08007c99
 8007c70:	2300      	movs	r3, #0
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c76:	e284      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007c78:	2304      	movs	r3, #4
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c7e:	e280      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007c80:	2308      	movs	r3, #8
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c86:	e27c      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007c88:	2310      	movs	r3, #16
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c8e:	e278      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007c90:	2320      	movs	r3, #32
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c96:	e274      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007c98:	2340      	movs	r3, #64	@ 0x40
 8007c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c9e:	e270      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007ca0:	2380      	movs	r3, #128	@ 0x80
 8007ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ca6:	e26c      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a1b      	ldr	r2, [pc, #108]	@ (8007d1c <UART_SetConfig+0x348>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d142      	bne.n	8007d38 <UART_SetConfig+0x364>
 8007cb2:	4b16      	ldr	r3, [pc, #88]	@ (8007d0c <UART_SetConfig+0x338>)
 8007cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cb6:	f003 0307 	and.w	r3, r3, #7
 8007cba:	2b05      	cmp	r3, #5
 8007cbc:	d838      	bhi.n	8007d30 <UART_SetConfig+0x35c>
 8007cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007cc4 <UART_SetConfig+0x2f0>)
 8007cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc4:	08007cdd 	.word	0x08007cdd
 8007cc8:	08007ce5 	.word	0x08007ce5
 8007ccc:	08007ced 	.word	0x08007ced
 8007cd0:	08007cf5 	.word	0x08007cf5
 8007cd4:	08007d21 	.word	0x08007d21
 8007cd8:	08007d29 	.word	0x08007d29
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ce2:	e24e      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007ce4:	2304      	movs	r3, #4
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cea:	e24a      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007cec:	2308      	movs	r3, #8
 8007cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cf2:	e246      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007cf4:	2310      	movs	r3, #16
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cfa:	e242      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007cfc:	cfff69f3 	.word	0xcfff69f3
 8007d00:	58000c00 	.word	0x58000c00
 8007d04:	11fff4ff 	.word	0x11fff4ff
 8007d08:	40011000 	.word	0x40011000
 8007d0c:	58024400 	.word	0x58024400
 8007d10:	40004400 	.word	0x40004400
 8007d14:	40004800 	.word	0x40004800
 8007d18:	40004c00 	.word	0x40004c00
 8007d1c:	40005000 	.word	0x40005000
 8007d20:	2320      	movs	r3, #32
 8007d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d26:	e22c      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007d28:	2340      	movs	r3, #64	@ 0x40
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d2e:	e228      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007d30:	2380      	movs	r3, #128	@ 0x80
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d36:	e224      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4ab1      	ldr	r2, [pc, #708]	@ (8008004 <UART_SetConfig+0x630>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d176      	bne.n	8007e30 <UART_SetConfig+0x45c>
 8007d42:	4bb1      	ldr	r3, [pc, #708]	@ (8008008 <UART_SetConfig+0x634>)
 8007d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d4a:	2b28      	cmp	r3, #40	@ 0x28
 8007d4c:	d86c      	bhi.n	8007e28 <UART_SetConfig+0x454>
 8007d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d54 <UART_SetConfig+0x380>)
 8007d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d54:	08007df9 	.word	0x08007df9
 8007d58:	08007e29 	.word	0x08007e29
 8007d5c:	08007e29 	.word	0x08007e29
 8007d60:	08007e29 	.word	0x08007e29
 8007d64:	08007e29 	.word	0x08007e29
 8007d68:	08007e29 	.word	0x08007e29
 8007d6c:	08007e29 	.word	0x08007e29
 8007d70:	08007e29 	.word	0x08007e29
 8007d74:	08007e01 	.word	0x08007e01
 8007d78:	08007e29 	.word	0x08007e29
 8007d7c:	08007e29 	.word	0x08007e29
 8007d80:	08007e29 	.word	0x08007e29
 8007d84:	08007e29 	.word	0x08007e29
 8007d88:	08007e29 	.word	0x08007e29
 8007d8c:	08007e29 	.word	0x08007e29
 8007d90:	08007e29 	.word	0x08007e29
 8007d94:	08007e09 	.word	0x08007e09
 8007d98:	08007e29 	.word	0x08007e29
 8007d9c:	08007e29 	.word	0x08007e29
 8007da0:	08007e29 	.word	0x08007e29
 8007da4:	08007e29 	.word	0x08007e29
 8007da8:	08007e29 	.word	0x08007e29
 8007dac:	08007e29 	.word	0x08007e29
 8007db0:	08007e29 	.word	0x08007e29
 8007db4:	08007e11 	.word	0x08007e11
 8007db8:	08007e29 	.word	0x08007e29
 8007dbc:	08007e29 	.word	0x08007e29
 8007dc0:	08007e29 	.word	0x08007e29
 8007dc4:	08007e29 	.word	0x08007e29
 8007dc8:	08007e29 	.word	0x08007e29
 8007dcc:	08007e29 	.word	0x08007e29
 8007dd0:	08007e29 	.word	0x08007e29
 8007dd4:	08007e19 	.word	0x08007e19
 8007dd8:	08007e29 	.word	0x08007e29
 8007ddc:	08007e29 	.word	0x08007e29
 8007de0:	08007e29 	.word	0x08007e29
 8007de4:	08007e29 	.word	0x08007e29
 8007de8:	08007e29 	.word	0x08007e29
 8007dec:	08007e29 	.word	0x08007e29
 8007df0:	08007e29 	.word	0x08007e29
 8007df4:	08007e21 	.word	0x08007e21
 8007df8:	2301      	movs	r3, #1
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dfe:	e1c0      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007e00:	2304      	movs	r3, #4
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e06:	e1bc      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007e08:	2308      	movs	r3, #8
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e0e:	e1b8      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007e10:	2310      	movs	r3, #16
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e16:	e1b4      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007e18:	2320      	movs	r3, #32
 8007e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e1e:	e1b0      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007e20:	2340      	movs	r3, #64	@ 0x40
 8007e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e26:	e1ac      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007e28:	2380      	movs	r3, #128	@ 0x80
 8007e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e2e:	e1a8      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a75      	ldr	r2, [pc, #468]	@ (800800c <UART_SetConfig+0x638>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d130      	bne.n	8007e9c <UART_SetConfig+0x4c8>
 8007e3a:	4b73      	ldr	r3, [pc, #460]	@ (8008008 <UART_SetConfig+0x634>)
 8007e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e3e:	f003 0307 	and.w	r3, r3, #7
 8007e42:	2b05      	cmp	r3, #5
 8007e44:	d826      	bhi.n	8007e94 <UART_SetConfig+0x4c0>
 8007e46:	a201      	add	r2, pc, #4	@ (adr r2, 8007e4c <UART_SetConfig+0x478>)
 8007e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4c:	08007e65 	.word	0x08007e65
 8007e50:	08007e6d 	.word	0x08007e6d
 8007e54:	08007e75 	.word	0x08007e75
 8007e58:	08007e7d 	.word	0x08007e7d
 8007e5c:	08007e85 	.word	0x08007e85
 8007e60:	08007e8d 	.word	0x08007e8d
 8007e64:	2300      	movs	r3, #0
 8007e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e6a:	e18a      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007e6c:	2304      	movs	r3, #4
 8007e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e72:	e186      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007e74:	2308      	movs	r3, #8
 8007e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e7a:	e182      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007e7c:	2310      	movs	r3, #16
 8007e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e82:	e17e      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007e84:	2320      	movs	r3, #32
 8007e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e8a:	e17a      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007e8c:	2340      	movs	r3, #64	@ 0x40
 8007e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e92:	e176      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007e94:	2380      	movs	r3, #128	@ 0x80
 8007e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e9a:	e172      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a5b      	ldr	r2, [pc, #364]	@ (8008010 <UART_SetConfig+0x63c>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d130      	bne.n	8007f08 <UART_SetConfig+0x534>
 8007ea6:	4b58      	ldr	r3, [pc, #352]	@ (8008008 <UART_SetConfig+0x634>)
 8007ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eaa:	f003 0307 	and.w	r3, r3, #7
 8007eae:	2b05      	cmp	r3, #5
 8007eb0:	d826      	bhi.n	8007f00 <UART_SetConfig+0x52c>
 8007eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb8 <UART_SetConfig+0x4e4>)
 8007eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb8:	08007ed1 	.word	0x08007ed1
 8007ebc:	08007ed9 	.word	0x08007ed9
 8007ec0:	08007ee1 	.word	0x08007ee1
 8007ec4:	08007ee9 	.word	0x08007ee9
 8007ec8:	08007ef1 	.word	0x08007ef1
 8007ecc:	08007ef9 	.word	0x08007ef9
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ed6:	e154      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007ed8:	2304      	movs	r3, #4
 8007eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ede:	e150      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007ee0:	2308      	movs	r3, #8
 8007ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ee6:	e14c      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007ee8:	2310      	movs	r3, #16
 8007eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eee:	e148      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007ef0:	2320      	movs	r3, #32
 8007ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ef6:	e144      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007ef8:	2340      	movs	r3, #64	@ 0x40
 8007efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007efe:	e140      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007f00:	2380      	movs	r3, #128	@ 0x80
 8007f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f06:	e13c      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a41      	ldr	r2, [pc, #260]	@ (8008014 <UART_SetConfig+0x640>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	f040 8082 	bne.w	8008018 <UART_SetConfig+0x644>
 8007f14:	4b3c      	ldr	r3, [pc, #240]	@ (8008008 <UART_SetConfig+0x634>)
 8007f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f1c:	2b28      	cmp	r3, #40	@ 0x28
 8007f1e:	d86d      	bhi.n	8007ffc <UART_SetConfig+0x628>
 8007f20:	a201      	add	r2, pc, #4	@ (adr r2, 8007f28 <UART_SetConfig+0x554>)
 8007f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f26:	bf00      	nop
 8007f28:	08007fcd 	.word	0x08007fcd
 8007f2c:	08007ffd 	.word	0x08007ffd
 8007f30:	08007ffd 	.word	0x08007ffd
 8007f34:	08007ffd 	.word	0x08007ffd
 8007f38:	08007ffd 	.word	0x08007ffd
 8007f3c:	08007ffd 	.word	0x08007ffd
 8007f40:	08007ffd 	.word	0x08007ffd
 8007f44:	08007ffd 	.word	0x08007ffd
 8007f48:	08007fd5 	.word	0x08007fd5
 8007f4c:	08007ffd 	.word	0x08007ffd
 8007f50:	08007ffd 	.word	0x08007ffd
 8007f54:	08007ffd 	.word	0x08007ffd
 8007f58:	08007ffd 	.word	0x08007ffd
 8007f5c:	08007ffd 	.word	0x08007ffd
 8007f60:	08007ffd 	.word	0x08007ffd
 8007f64:	08007ffd 	.word	0x08007ffd
 8007f68:	08007fdd 	.word	0x08007fdd
 8007f6c:	08007ffd 	.word	0x08007ffd
 8007f70:	08007ffd 	.word	0x08007ffd
 8007f74:	08007ffd 	.word	0x08007ffd
 8007f78:	08007ffd 	.word	0x08007ffd
 8007f7c:	08007ffd 	.word	0x08007ffd
 8007f80:	08007ffd 	.word	0x08007ffd
 8007f84:	08007ffd 	.word	0x08007ffd
 8007f88:	08007fe5 	.word	0x08007fe5
 8007f8c:	08007ffd 	.word	0x08007ffd
 8007f90:	08007ffd 	.word	0x08007ffd
 8007f94:	08007ffd 	.word	0x08007ffd
 8007f98:	08007ffd 	.word	0x08007ffd
 8007f9c:	08007ffd 	.word	0x08007ffd
 8007fa0:	08007ffd 	.word	0x08007ffd
 8007fa4:	08007ffd 	.word	0x08007ffd
 8007fa8:	08007fed 	.word	0x08007fed
 8007fac:	08007ffd 	.word	0x08007ffd
 8007fb0:	08007ffd 	.word	0x08007ffd
 8007fb4:	08007ffd 	.word	0x08007ffd
 8007fb8:	08007ffd 	.word	0x08007ffd
 8007fbc:	08007ffd 	.word	0x08007ffd
 8007fc0:	08007ffd 	.word	0x08007ffd
 8007fc4:	08007ffd 	.word	0x08007ffd
 8007fc8:	08007ff5 	.word	0x08007ff5
 8007fcc:	2301      	movs	r3, #1
 8007fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fd2:	e0d6      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007fd4:	2304      	movs	r3, #4
 8007fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fda:	e0d2      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007fdc:	2308      	movs	r3, #8
 8007fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fe2:	e0ce      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007fe4:	2310      	movs	r3, #16
 8007fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fea:	e0ca      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007fec:	2320      	movs	r3, #32
 8007fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ff2:	e0c6      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007ff4:	2340      	movs	r3, #64	@ 0x40
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ffa:	e0c2      	b.n	8008182 <UART_SetConfig+0x7ae>
 8007ffc:	2380      	movs	r3, #128	@ 0x80
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008002:	e0be      	b.n	8008182 <UART_SetConfig+0x7ae>
 8008004:	40011400 	.word	0x40011400
 8008008:	58024400 	.word	0x58024400
 800800c:	40007800 	.word	0x40007800
 8008010:	40007c00 	.word	0x40007c00
 8008014:	40011800 	.word	0x40011800
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4aad      	ldr	r2, [pc, #692]	@ (80082d4 <UART_SetConfig+0x900>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d176      	bne.n	8008110 <UART_SetConfig+0x73c>
 8008022:	4bad      	ldr	r3, [pc, #692]	@ (80082d8 <UART_SetConfig+0x904>)
 8008024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008026:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800802a:	2b28      	cmp	r3, #40	@ 0x28
 800802c:	d86c      	bhi.n	8008108 <UART_SetConfig+0x734>
 800802e:	a201      	add	r2, pc, #4	@ (adr r2, 8008034 <UART_SetConfig+0x660>)
 8008030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008034:	080080d9 	.word	0x080080d9
 8008038:	08008109 	.word	0x08008109
 800803c:	08008109 	.word	0x08008109
 8008040:	08008109 	.word	0x08008109
 8008044:	08008109 	.word	0x08008109
 8008048:	08008109 	.word	0x08008109
 800804c:	08008109 	.word	0x08008109
 8008050:	08008109 	.word	0x08008109
 8008054:	080080e1 	.word	0x080080e1
 8008058:	08008109 	.word	0x08008109
 800805c:	08008109 	.word	0x08008109
 8008060:	08008109 	.word	0x08008109
 8008064:	08008109 	.word	0x08008109
 8008068:	08008109 	.word	0x08008109
 800806c:	08008109 	.word	0x08008109
 8008070:	08008109 	.word	0x08008109
 8008074:	080080e9 	.word	0x080080e9
 8008078:	08008109 	.word	0x08008109
 800807c:	08008109 	.word	0x08008109
 8008080:	08008109 	.word	0x08008109
 8008084:	08008109 	.word	0x08008109
 8008088:	08008109 	.word	0x08008109
 800808c:	08008109 	.word	0x08008109
 8008090:	08008109 	.word	0x08008109
 8008094:	080080f1 	.word	0x080080f1
 8008098:	08008109 	.word	0x08008109
 800809c:	08008109 	.word	0x08008109
 80080a0:	08008109 	.word	0x08008109
 80080a4:	08008109 	.word	0x08008109
 80080a8:	08008109 	.word	0x08008109
 80080ac:	08008109 	.word	0x08008109
 80080b0:	08008109 	.word	0x08008109
 80080b4:	080080f9 	.word	0x080080f9
 80080b8:	08008109 	.word	0x08008109
 80080bc:	08008109 	.word	0x08008109
 80080c0:	08008109 	.word	0x08008109
 80080c4:	08008109 	.word	0x08008109
 80080c8:	08008109 	.word	0x08008109
 80080cc:	08008109 	.word	0x08008109
 80080d0:	08008109 	.word	0x08008109
 80080d4:	08008101 	.word	0x08008101
 80080d8:	2301      	movs	r3, #1
 80080da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080de:	e050      	b.n	8008182 <UART_SetConfig+0x7ae>
 80080e0:	2304      	movs	r3, #4
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080e6:	e04c      	b.n	8008182 <UART_SetConfig+0x7ae>
 80080e8:	2308      	movs	r3, #8
 80080ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ee:	e048      	b.n	8008182 <UART_SetConfig+0x7ae>
 80080f0:	2310      	movs	r3, #16
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080f6:	e044      	b.n	8008182 <UART_SetConfig+0x7ae>
 80080f8:	2320      	movs	r3, #32
 80080fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080fe:	e040      	b.n	8008182 <UART_SetConfig+0x7ae>
 8008100:	2340      	movs	r3, #64	@ 0x40
 8008102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008106:	e03c      	b.n	8008182 <UART_SetConfig+0x7ae>
 8008108:	2380      	movs	r3, #128	@ 0x80
 800810a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800810e:	e038      	b.n	8008182 <UART_SetConfig+0x7ae>
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a71      	ldr	r2, [pc, #452]	@ (80082dc <UART_SetConfig+0x908>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d130      	bne.n	800817c <UART_SetConfig+0x7a8>
 800811a:	4b6f      	ldr	r3, [pc, #444]	@ (80082d8 <UART_SetConfig+0x904>)
 800811c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	2b05      	cmp	r3, #5
 8008124:	d826      	bhi.n	8008174 <UART_SetConfig+0x7a0>
 8008126:	a201      	add	r2, pc, #4	@ (adr r2, 800812c <UART_SetConfig+0x758>)
 8008128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812c:	08008145 	.word	0x08008145
 8008130:	0800814d 	.word	0x0800814d
 8008134:	08008155 	.word	0x08008155
 8008138:	0800815d 	.word	0x0800815d
 800813c:	08008165 	.word	0x08008165
 8008140:	0800816d 	.word	0x0800816d
 8008144:	2302      	movs	r3, #2
 8008146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800814a:	e01a      	b.n	8008182 <UART_SetConfig+0x7ae>
 800814c:	2304      	movs	r3, #4
 800814e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008152:	e016      	b.n	8008182 <UART_SetConfig+0x7ae>
 8008154:	2308      	movs	r3, #8
 8008156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800815a:	e012      	b.n	8008182 <UART_SetConfig+0x7ae>
 800815c:	2310      	movs	r3, #16
 800815e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008162:	e00e      	b.n	8008182 <UART_SetConfig+0x7ae>
 8008164:	2320      	movs	r3, #32
 8008166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800816a:	e00a      	b.n	8008182 <UART_SetConfig+0x7ae>
 800816c:	2340      	movs	r3, #64	@ 0x40
 800816e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008172:	e006      	b.n	8008182 <UART_SetConfig+0x7ae>
 8008174:	2380      	movs	r3, #128	@ 0x80
 8008176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800817a:	e002      	b.n	8008182 <UART_SetConfig+0x7ae>
 800817c:	2380      	movs	r3, #128	@ 0x80
 800817e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a55      	ldr	r2, [pc, #340]	@ (80082dc <UART_SetConfig+0x908>)
 8008188:	4293      	cmp	r3, r2
 800818a:	f040 80f8 	bne.w	800837e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800818e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008192:	2b20      	cmp	r3, #32
 8008194:	dc46      	bgt.n	8008224 <UART_SetConfig+0x850>
 8008196:	2b02      	cmp	r3, #2
 8008198:	db75      	blt.n	8008286 <UART_SetConfig+0x8b2>
 800819a:	3b02      	subs	r3, #2
 800819c:	2b1e      	cmp	r3, #30
 800819e:	d872      	bhi.n	8008286 <UART_SetConfig+0x8b2>
 80081a0:	a201      	add	r2, pc, #4	@ (adr r2, 80081a8 <UART_SetConfig+0x7d4>)
 80081a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a6:	bf00      	nop
 80081a8:	0800822b 	.word	0x0800822b
 80081ac:	08008287 	.word	0x08008287
 80081b0:	08008233 	.word	0x08008233
 80081b4:	08008287 	.word	0x08008287
 80081b8:	08008287 	.word	0x08008287
 80081bc:	08008287 	.word	0x08008287
 80081c0:	08008243 	.word	0x08008243
 80081c4:	08008287 	.word	0x08008287
 80081c8:	08008287 	.word	0x08008287
 80081cc:	08008287 	.word	0x08008287
 80081d0:	08008287 	.word	0x08008287
 80081d4:	08008287 	.word	0x08008287
 80081d8:	08008287 	.word	0x08008287
 80081dc:	08008287 	.word	0x08008287
 80081e0:	08008253 	.word	0x08008253
 80081e4:	08008287 	.word	0x08008287
 80081e8:	08008287 	.word	0x08008287
 80081ec:	08008287 	.word	0x08008287
 80081f0:	08008287 	.word	0x08008287
 80081f4:	08008287 	.word	0x08008287
 80081f8:	08008287 	.word	0x08008287
 80081fc:	08008287 	.word	0x08008287
 8008200:	08008287 	.word	0x08008287
 8008204:	08008287 	.word	0x08008287
 8008208:	08008287 	.word	0x08008287
 800820c:	08008287 	.word	0x08008287
 8008210:	08008287 	.word	0x08008287
 8008214:	08008287 	.word	0x08008287
 8008218:	08008287 	.word	0x08008287
 800821c:	08008287 	.word	0x08008287
 8008220:	08008279 	.word	0x08008279
 8008224:	2b40      	cmp	r3, #64	@ 0x40
 8008226:	d02a      	beq.n	800827e <UART_SetConfig+0x8aa>
 8008228:	e02d      	b.n	8008286 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800822a:	f7fc ff51 	bl	80050d0 <HAL_RCCEx_GetD3PCLK1Freq>
 800822e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008230:	e02f      	b.n	8008292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008236:	4618      	mov	r0, r3
 8008238:	f7fc ff60 	bl	80050fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800823c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008240:	e027      	b.n	8008292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008242:	f107 0318 	add.w	r3, r7, #24
 8008246:	4618      	mov	r0, r3
 8008248:	f7fd f8ac 	bl	80053a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008250:	e01f      	b.n	8008292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008252:	4b21      	ldr	r3, [pc, #132]	@ (80082d8 <UART_SetConfig+0x904>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0320 	and.w	r3, r3, #32
 800825a:	2b00      	cmp	r3, #0
 800825c:	d009      	beq.n	8008272 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800825e:	4b1e      	ldr	r3, [pc, #120]	@ (80082d8 <UART_SetConfig+0x904>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	08db      	lsrs	r3, r3, #3
 8008264:	f003 0303 	and.w	r3, r3, #3
 8008268:	4a1d      	ldr	r2, [pc, #116]	@ (80082e0 <UART_SetConfig+0x90c>)
 800826a:	fa22 f303 	lsr.w	r3, r2, r3
 800826e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008270:	e00f      	b.n	8008292 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008272:	4b1b      	ldr	r3, [pc, #108]	@ (80082e0 <UART_SetConfig+0x90c>)
 8008274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008276:	e00c      	b.n	8008292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008278:	4b1a      	ldr	r3, [pc, #104]	@ (80082e4 <UART_SetConfig+0x910>)
 800827a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800827c:	e009      	b.n	8008292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800827e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008284:	e005      	b.n	8008292 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008290:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 81ee 	beq.w	8008676 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800829e:	4a12      	ldr	r2, [pc, #72]	@ (80082e8 <UART_SetConfig+0x914>)
 80082a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082a4:	461a      	mov	r2, r3
 80082a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80082ac:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	4613      	mov	r3, r2
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	4413      	add	r3, r2
 80082b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d305      	bcc.n	80082ca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d910      	bls.n	80082ec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80082d0:	e1d1      	b.n	8008676 <UART_SetConfig+0xca2>
 80082d2:	bf00      	nop
 80082d4:	40011c00 	.word	0x40011c00
 80082d8:	58024400 	.word	0x58024400
 80082dc:	58000c00 	.word	0x58000c00
 80082e0:	03d09000 	.word	0x03d09000
 80082e4:	003d0900 	.word	0x003d0900
 80082e8:	0800c704 	.word	0x0800c704
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ee:	2200      	movs	r2, #0
 80082f0:	60bb      	str	r3, [r7, #8]
 80082f2:	60fa      	str	r2, [r7, #12]
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f8:	4ac0      	ldr	r2, [pc, #768]	@ (80085fc <UART_SetConfig+0xc28>)
 80082fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	2200      	movs	r2, #0
 8008302:	603b      	str	r3, [r7, #0]
 8008304:	607a      	str	r2, [r7, #4]
 8008306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800830a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800830e:	f7f8 fa1b 	bl	8000748 <__aeabi_uldivmod>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	4610      	mov	r0, r2
 8008318:	4619      	mov	r1, r3
 800831a:	f04f 0200 	mov.w	r2, #0
 800831e:	f04f 0300 	mov.w	r3, #0
 8008322:	020b      	lsls	r3, r1, #8
 8008324:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008328:	0202      	lsls	r2, r0, #8
 800832a:	6979      	ldr	r1, [r7, #20]
 800832c:	6849      	ldr	r1, [r1, #4]
 800832e:	0849      	lsrs	r1, r1, #1
 8008330:	2000      	movs	r0, #0
 8008332:	460c      	mov	r4, r1
 8008334:	4605      	mov	r5, r0
 8008336:	eb12 0804 	adds.w	r8, r2, r4
 800833a:	eb43 0905 	adc.w	r9, r3, r5
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	469a      	mov	sl, r3
 8008346:	4693      	mov	fp, r2
 8008348:	4652      	mov	r2, sl
 800834a:	465b      	mov	r3, fp
 800834c:	4640      	mov	r0, r8
 800834e:	4649      	mov	r1, r9
 8008350:	f7f8 f9fa 	bl	8000748 <__aeabi_uldivmod>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	4613      	mov	r3, r2
 800835a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800835c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008362:	d308      	bcc.n	8008376 <UART_SetConfig+0x9a2>
 8008364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800836a:	d204      	bcs.n	8008376 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008372:	60da      	str	r2, [r3, #12]
 8008374:	e17f      	b.n	8008676 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800837c:	e17b      	b.n	8008676 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008386:	f040 80bd 	bne.w	8008504 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800838a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800838e:	2b20      	cmp	r3, #32
 8008390:	dc48      	bgt.n	8008424 <UART_SetConfig+0xa50>
 8008392:	2b00      	cmp	r3, #0
 8008394:	db7b      	blt.n	800848e <UART_SetConfig+0xaba>
 8008396:	2b20      	cmp	r3, #32
 8008398:	d879      	bhi.n	800848e <UART_SetConfig+0xaba>
 800839a:	a201      	add	r2, pc, #4	@ (adr r2, 80083a0 <UART_SetConfig+0x9cc>)
 800839c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a0:	0800842b 	.word	0x0800842b
 80083a4:	08008433 	.word	0x08008433
 80083a8:	0800848f 	.word	0x0800848f
 80083ac:	0800848f 	.word	0x0800848f
 80083b0:	0800843b 	.word	0x0800843b
 80083b4:	0800848f 	.word	0x0800848f
 80083b8:	0800848f 	.word	0x0800848f
 80083bc:	0800848f 	.word	0x0800848f
 80083c0:	0800844b 	.word	0x0800844b
 80083c4:	0800848f 	.word	0x0800848f
 80083c8:	0800848f 	.word	0x0800848f
 80083cc:	0800848f 	.word	0x0800848f
 80083d0:	0800848f 	.word	0x0800848f
 80083d4:	0800848f 	.word	0x0800848f
 80083d8:	0800848f 	.word	0x0800848f
 80083dc:	0800848f 	.word	0x0800848f
 80083e0:	0800845b 	.word	0x0800845b
 80083e4:	0800848f 	.word	0x0800848f
 80083e8:	0800848f 	.word	0x0800848f
 80083ec:	0800848f 	.word	0x0800848f
 80083f0:	0800848f 	.word	0x0800848f
 80083f4:	0800848f 	.word	0x0800848f
 80083f8:	0800848f 	.word	0x0800848f
 80083fc:	0800848f 	.word	0x0800848f
 8008400:	0800848f 	.word	0x0800848f
 8008404:	0800848f 	.word	0x0800848f
 8008408:	0800848f 	.word	0x0800848f
 800840c:	0800848f 	.word	0x0800848f
 8008410:	0800848f 	.word	0x0800848f
 8008414:	0800848f 	.word	0x0800848f
 8008418:	0800848f 	.word	0x0800848f
 800841c:	0800848f 	.word	0x0800848f
 8008420:	08008481 	.word	0x08008481
 8008424:	2b40      	cmp	r3, #64	@ 0x40
 8008426:	d02e      	beq.n	8008486 <UART_SetConfig+0xab2>
 8008428:	e031      	b.n	800848e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800842a:	f7fb fc85 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 800842e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008430:	e033      	b.n	800849a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008432:	f7fb fc97 	bl	8003d64 <HAL_RCC_GetPCLK2Freq>
 8008436:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008438:	e02f      	b.n	800849a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800843a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800843e:	4618      	mov	r0, r3
 8008440:	f7fc fe5c 	bl	80050fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008448:	e027      	b.n	800849a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800844a:	f107 0318 	add.w	r3, r7, #24
 800844e:	4618      	mov	r0, r3
 8008450:	f7fc ffa8 	bl	80053a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008458:	e01f      	b.n	800849a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800845a:	4b69      	ldr	r3, [pc, #420]	@ (8008600 <UART_SetConfig+0xc2c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	2b00      	cmp	r3, #0
 8008464:	d009      	beq.n	800847a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008466:	4b66      	ldr	r3, [pc, #408]	@ (8008600 <UART_SetConfig+0xc2c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	08db      	lsrs	r3, r3, #3
 800846c:	f003 0303 	and.w	r3, r3, #3
 8008470:	4a64      	ldr	r2, [pc, #400]	@ (8008604 <UART_SetConfig+0xc30>)
 8008472:	fa22 f303 	lsr.w	r3, r2, r3
 8008476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008478:	e00f      	b.n	800849a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800847a:	4b62      	ldr	r3, [pc, #392]	@ (8008604 <UART_SetConfig+0xc30>)
 800847c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800847e:	e00c      	b.n	800849a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008480:	4b61      	ldr	r3, [pc, #388]	@ (8008608 <UART_SetConfig+0xc34>)
 8008482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008484:	e009      	b.n	800849a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800848a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800848c:	e005      	b.n	800849a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008498:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800849a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 80ea 	beq.w	8008676 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a6:	4a55      	ldr	r2, [pc, #340]	@ (80085fc <UART_SetConfig+0xc28>)
 80084a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ac:	461a      	mov	r2, r3
 80084ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80084b4:	005a      	lsls	r2, r3, #1
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	085b      	lsrs	r3, r3, #1
 80084bc:	441a      	add	r2, r3
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ca:	2b0f      	cmp	r3, #15
 80084cc:	d916      	bls.n	80084fc <UART_SetConfig+0xb28>
 80084ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084d4:	d212      	bcs.n	80084fc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d8:	b29b      	uxth	r3, r3
 80084da:	f023 030f 	bic.w	r3, r3, #15
 80084de:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e2:	085b      	lsrs	r3, r3, #1
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	f003 0307 	and.w	r3, r3, #7
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80084ee:	4313      	orrs	r3, r2
 80084f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80084f8:	60da      	str	r2, [r3, #12]
 80084fa:	e0bc      	b.n	8008676 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008502:	e0b8      	b.n	8008676 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008504:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008508:	2b20      	cmp	r3, #32
 800850a:	dc4b      	bgt.n	80085a4 <UART_SetConfig+0xbd0>
 800850c:	2b00      	cmp	r3, #0
 800850e:	f2c0 8087 	blt.w	8008620 <UART_SetConfig+0xc4c>
 8008512:	2b20      	cmp	r3, #32
 8008514:	f200 8084 	bhi.w	8008620 <UART_SetConfig+0xc4c>
 8008518:	a201      	add	r2, pc, #4	@ (adr r2, 8008520 <UART_SetConfig+0xb4c>)
 800851a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851e:	bf00      	nop
 8008520:	080085ab 	.word	0x080085ab
 8008524:	080085b3 	.word	0x080085b3
 8008528:	08008621 	.word	0x08008621
 800852c:	08008621 	.word	0x08008621
 8008530:	080085bb 	.word	0x080085bb
 8008534:	08008621 	.word	0x08008621
 8008538:	08008621 	.word	0x08008621
 800853c:	08008621 	.word	0x08008621
 8008540:	080085cb 	.word	0x080085cb
 8008544:	08008621 	.word	0x08008621
 8008548:	08008621 	.word	0x08008621
 800854c:	08008621 	.word	0x08008621
 8008550:	08008621 	.word	0x08008621
 8008554:	08008621 	.word	0x08008621
 8008558:	08008621 	.word	0x08008621
 800855c:	08008621 	.word	0x08008621
 8008560:	080085db 	.word	0x080085db
 8008564:	08008621 	.word	0x08008621
 8008568:	08008621 	.word	0x08008621
 800856c:	08008621 	.word	0x08008621
 8008570:	08008621 	.word	0x08008621
 8008574:	08008621 	.word	0x08008621
 8008578:	08008621 	.word	0x08008621
 800857c:	08008621 	.word	0x08008621
 8008580:	08008621 	.word	0x08008621
 8008584:	08008621 	.word	0x08008621
 8008588:	08008621 	.word	0x08008621
 800858c:	08008621 	.word	0x08008621
 8008590:	08008621 	.word	0x08008621
 8008594:	08008621 	.word	0x08008621
 8008598:	08008621 	.word	0x08008621
 800859c:	08008621 	.word	0x08008621
 80085a0:	08008613 	.word	0x08008613
 80085a4:	2b40      	cmp	r3, #64	@ 0x40
 80085a6:	d037      	beq.n	8008618 <UART_SetConfig+0xc44>
 80085a8:	e03a      	b.n	8008620 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085aa:	f7fb fbc5 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 80085ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80085b0:	e03c      	b.n	800862c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085b2:	f7fb fbd7 	bl	8003d64 <HAL_RCC_GetPCLK2Freq>
 80085b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80085b8:	e038      	b.n	800862c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fc fd9c 	bl	80050fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085c8:	e030      	b.n	800862c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085ca:	f107 0318 	add.w	r3, r7, #24
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fc fee8 	bl	80053a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085d8:	e028      	b.n	800862c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085da:	4b09      	ldr	r3, [pc, #36]	@ (8008600 <UART_SetConfig+0xc2c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0320 	and.w	r3, r3, #32
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d012      	beq.n	800860c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085e6:	4b06      	ldr	r3, [pc, #24]	@ (8008600 <UART_SetConfig+0xc2c>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	08db      	lsrs	r3, r3, #3
 80085ec:	f003 0303 	and.w	r3, r3, #3
 80085f0:	4a04      	ldr	r2, [pc, #16]	@ (8008604 <UART_SetConfig+0xc30>)
 80085f2:	fa22 f303 	lsr.w	r3, r2, r3
 80085f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085f8:	e018      	b.n	800862c <UART_SetConfig+0xc58>
 80085fa:	bf00      	nop
 80085fc:	0800c704 	.word	0x0800c704
 8008600:	58024400 	.word	0x58024400
 8008604:	03d09000 	.word	0x03d09000
 8008608:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800860c:	4b24      	ldr	r3, [pc, #144]	@ (80086a0 <UART_SetConfig+0xccc>)
 800860e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008610:	e00c      	b.n	800862c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008612:	4b24      	ldr	r3, [pc, #144]	@ (80086a4 <UART_SetConfig+0xcd0>)
 8008614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008616:	e009      	b.n	800862c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008618:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800861c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800861e:	e005      	b.n	800862c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008620:	2300      	movs	r3, #0
 8008622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800862a:	bf00      	nop
    }

    if (pclk != 0U)
 800862c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800862e:	2b00      	cmp	r3, #0
 8008630:	d021      	beq.n	8008676 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008636:	4a1c      	ldr	r2, [pc, #112]	@ (80086a8 <UART_SetConfig+0xcd4>)
 8008638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800863c:	461a      	mov	r2, r3
 800863e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008640:	fbb3 f2f2 	udiv	r2, r3, r2
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	085b      	lsrs	r3, r3, #1
 800864a:	441a      	add	r2, r3
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	fbb2 f3f3 	udiv	r3, r2, r3
 8008654:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008658:	2b0f      	cmp	r3, #15
 800865a:	d909      	bls.n	8008670 <UART_SetConfig+0xc9c>
 800865c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800865e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008662:	d205      	bcs.n	8008670 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008666:	b29a      	uxth	r2, r3
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	60da      	str	r2, [r3, #12]
 800866e:	e002      	b.n	8008676 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2201      	movs	r2, #1
 800867a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	2201      	movs	r2, #1
 8008682:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2200      	movs	r2, #0
 800868a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	2200      	movs	r2, #0
 8008690:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008692:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008696:	4618      	mov	r0, r3
 8008698:	3748      	adds	r7, #72	@ 0x48
 800869a:	46bd      	mov	sp, r7
 800869c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086a0:	03d09000 	.word	0x03d09000
 80086a4:	003d0900 	.word	0x003d0900
 80086a8:	0800c704 	.word	0x0800c704

080086ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b8:	f003 0308 	and.w	r3, r3, #8
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00a      	beq.n	80086d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	430a      	orrs	r2, r1
 80086d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00a      	beq.n	80086f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	430a      	orrs	r2, r1
 80086f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086fc:	f003 0302 	and.w	r3, r3, #2
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00a      	beq.n	800871a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	430a      	orrs	r2, r1
 8008718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800871e:	f003 0304 	and.w	r3, r3, #4
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00a      	beq.n	800873c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	430a      	orrs	r2, r1
 800873a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008740:	f003 0310 	and.w	r3, r3, #16
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00a      	beq.n	800875e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	430a      	orrs	r2, r1
 800875c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008762:	f003 0320 	and.w	r3, r3, #32
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00a      	beq.n	8008780 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	430a      	orrs	r2, r1
 800877e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008788:	2b00      	cmp	r3, #0
 800878a:	d01a      	beq.n	80087c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	430a      	orrs	r2, r1
 80087a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087aa:	d10a      	bne.n	80087c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00a      	beq.n	80087e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	430a      	orrs	r2, r1
 80087e2:	605a      	str	r2, [r3, #4]
  }
}
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b098      	sub	sp, #96	@ 0x60
 80087f4:	af02      	add	r7, sp, #8
 80087f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008800:	f7f9 fa6c 	bl	8001cdc <HAL_GetTick>
 8008804:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0308 	and.w	r3, r3, #8
 8008810:	2b08      	cmp	r3, #8
 8008812:	d12f      	bne.n	8008874 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008814:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800881c:	2200      	movs	r2, #0
 800881e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f88e 	bl	8008944 <UART_WaitOnFlagUntilTimeout>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d022      	beq.n	8008874 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008836:	e853 3f00 	ldrex	r3, [r3]
 800883a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800883c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800883e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008842:	653b      	str	r3, [r7, #80]	@ 0x50
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	461a      	mov	r2, r3
 800884a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800884c:	647b      	str	r3, [r7, #68]	@ 0x44
 800884e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008850:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008852:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008854:	e841 2300 	strex	r3, r2, [r1]
 8008858:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800885a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1e6      	bne.n	800882e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2220      	movs	r2, #32
 8008864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e063      	b.n	800893c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0304 	and.w	r3, r3, #4
 800887e:	2b04      	cmp	r3, #4
 8008880:	d149      	bne.n	8008916 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008882:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800888a:	2200      	movs	r2, #0
 800888c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 f857 	bl	8008944 <UART_WaitOnFlagUntilTimeout>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d03c      	beq.n	8008916 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a4:	e853 3f00 	ldrex	r3, [r3]
 80088a8:	623b      	str	r3, [r7, #32]
   return(result);
 80088aa:	6a3b      	ldr	r3, [r7, #32]
 80088ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	461a      	mov	r2, r3
 80088b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80088bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088c2:	e841 2300 	strex	r3, r2, [r1]
 80088c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80088c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1e6      	bne.n	800889c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	3308      	adds	r3, #8
 80088d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	e853 3f00 	ldrex	r3, [r3]
 80088dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f023 0301 	bic.w	r3, r3, #1
 80088e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	3308      	adds	r3, #8
 80088ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088ee:	61fa      	str	r2, [r7, #28]
 80088f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f2:	69b9      	ldr	r1, [r7, #24]
 80088f4:	69fa      	ldr	r2, [r7, #28]
 80088f6:	e841 2300 	strex	r3, r2, [r1]
 80088fa:	617b      	str	r3, [r7, #20]
   return(result);
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1e5      	bne.n	80088ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2220      	movs	r2, #32
 8008906:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e012      	b.n	800893c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2220      	movs	r2, #32
 800891a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2220      	movs	r2, #32
 8008922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3758      	adds	r7, #88	@ 0x58
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	603b      	str	r3, [r7, #0]
 8008950:	4613      	mov	r3, r2
 8008952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008954:	e04f      	b.n	80089f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895c:	d04b      	beq.n	80089f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800895e:	f7f9 f9bd 	bl	8001cdc <HAL_GetTick>
 8008962:	4602      	mov	r2, r0
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	429a      	cmp	r2, r3
 800896c:	d302      	bcc.n	8008974 <UART_WaitOnFlagUntilTimeout+0x30>
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d101      	bne.n	8008978 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e04e      	b.n	8008a16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 0304 	and.w	r3, r3, #4
 8008982:	2b00      	cmp	r3, #0
 8008984:	d037      	beq.n	80089f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b80      	cmp	r3, #128	@ 0x80
 800898a:	d034      	beq.n	80089f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2b40      	cmp	r3, #64	@ 0x40
 8008990:	d031      	beq.n	80089f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	69db      	ldr	r3, [r3, #28]
 8008998:	f003 0308 	and.w	r3, r3, #8
 800899c:	2b08      	cmp	r3, #8
 800899e:	d110      	bne.n	80089c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2208      	movs	r2, #8
 80089a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f000 f95b 	bl	8008c64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2208      	movs	r2, #8
 80089b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e029      	b.n	8008a16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	69db      	ldr	r3, [r3, #28]
 80089c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089d0:	d111      	bne.n	80089f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80089da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 f941 	bl	8008c64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2220      	movs	r2, #32
 80089e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80089f2:	2303      	movs	r3, #3
 80089f4:	e00f      	b.n	8008a16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	69da      	ldr	r2, [r3, #28]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	4013      	ands	r3, r2
 8008a00:	68ba      	ldr	r2, [r7, #8]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	bf0c      	ite	eq
 8008a06:	2301      	moveq	r3, #1
 8008a08:	2300      	movne	r3, #0
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	79fb      	ldrb	r3, [r7, #7]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d0a0      	beq.n	8008956 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
	...

08008a20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b0a3      	sub	sp, #140	@ 0x8c
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	88fa      	ldrh	r2, [r7, #6]
 8008a38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	88fa      	ldrh	r2, [r7, #6]
 8008a40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a52:	d10e      	bne.n	8008a72 <UART_Start_Receive_IT+0x52>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d105      	bne.n	8008a68 <UART_Start_Receive_IT+0x48>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008a62:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a66:	e02d      	b.n	8008ac4 <UART_Start_Receive_IT+0xa4>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	22ff      	movs	r2, #255	@ 0xff
 8008a6c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a70:	e028      	b.n	8008ac4 <UART_Start_Receive_IT+0xa4>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10d      	bne.n	8008a96 <UART_Start_Receive_IT+0x76>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d104      	bne.n	8008a8c <UART_Start_Receive_IT+0x6c>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	22ff      	movs	r2, #255	@ 0xff
 8008a86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a8a:	e01b      	b.n	8008ac4 <UART_Start_Receive_IT+0xa4>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	227f      	movs	r2, #127	@ 0x7f
 8008a90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a94:	e016      	b.n	8008ac4 <UART_Start_Receive_IT+0xa4>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a9e:	d10d      	bne.n	8008abc <UART_Start_Receive_IT+0x9c>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d104      	bne.n	8008ab2 <UART_Start_Receive_IT+0x92>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	227f      	movs	r2, #127	@ 0x7f
 8008aac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ab0:	e008      	b.n	8008ac4 <UART_Start_Receive_IT+0xa4>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	223f      	movs	r2, #63	@ 0x3f
 8008ab6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008aba:	e003      	b.n	8008ac4 <UART_Start_Receive_IT+0xa4>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2222      	movs	r2, #34	@ 0x22
 8008ad0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3308      	adds	r3, #8
 8008ada:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008adc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ade:	e853 3f00 	ldrex	r3, [r3]
 8008ae2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008ae4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ae6:	f043 0301 	orr.w	r3, r3, #1
 8008aea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3308      	adds	r3, #8
 8008af4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008af8:	673a      	str	r2, [r7, #112]	@ 0x70
 8008afa:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008afe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008b00:	e841 2300 	strex	r3, r2, [r1]
 8008b04:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008b06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1e3      	bne.n	8008ad4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b14:	d14f      	bne.n	8008bb6 <UART_Start_Receive_IT+0x196>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008b1c:	88fa      	ldrh	r2, [r7, #6]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d349      	bcc.n	8008bb6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b2a:	d107      	bne.n	8008b3c <UART_Start_Receive_IT+0x11c>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d103      	bne.n	8008b3c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	4a47      	ldr	r2, [pc, #284]	@ (8008c54 <UART_Start_Receive_IT+0x234>)
 8008b38:	675a      	str	r2, [r3, #116]	@ 0x74
 8008b3a:	e002      	b.n	8008b42 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	4a46      	ldr	r2, [pc, #280]	@ (8008c58 <UART_Start_Receive_IT+0x238>)
 8008b40:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d01a      	beq.n	8008b80 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b52:	e853 3f00 	ldrex	r3, [r3]
 8008b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	461a      	mov	r2, r3
 8008b68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b6e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b70:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008b72:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008b74:	e841 2300 	strex	r3, r2, [r1]
 8008b78:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d1e4      	bne.n	8008b4a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3308      	adds	r3, #8
 8008b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b8a:	e853 3f00 	ldrex	r3, [r3]
 8008b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3308      	adds	r3, #8
 8008b9e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008ba0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008ba2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008ba6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ba8:	e841 2300 	strex	r3, r2, [r1]
 8008bac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1e5      	bne.n	8008b80 <UART_Start_Receive_IT+0x160>
 8008bb4:	e046      	b.n	8008c44 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bbe:	d107      	bne.n	8008bd0 <UART_Start_Receive_IT+0x1b0>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d103      	bne.n	8008bd0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	4a24      	ldr	r2, [pc, #144]	@ (8008c5c <UART_Start_Receive_IT+0x23c>)
 8008bcc:	675a      	str	r2, [r3, #116]	@ 0x74
 8008bce:	e002      	b.n	8008bd6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	4a23      	ldr	r2, [pc, #140]	@ (8008c60 <UART_Start_Receive_IT+0x240>)
 8008bd4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d019      	beq.n	8008c12 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be6:	e853 3f00 	ldrex	r3, [r3]
 8008bea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bee:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008bf2:	677b      	str	r3, [r7, #116]	@ 0x74
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bfe:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008c02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c04:	e841 2300 	strex	r3, r2, [r1]
 8008c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1e6      	bne.n	8008bde <UART_Start_Receive_IT+0x1be>
 8008c10:	e018      	b.n	8008c44 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	e853 3f00 	ldrex	r3, [r3]
 8008c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	f043 0320 	orr.w	r3, r3, #32
 8008c26:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008c30:	623b      	str	r3, [r7, #32]
 8008c32:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c34:	69f9      	ldr	r1, [r7, #28]
 8008c36:	6a3a      	ldr	r2, [r7, #32]
 8008c38:	e841 2300 	strex	r3, r2, [r1]
 8008c3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1e6      	bne.n	8008c12 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	378c      	adds	r7, #140	@ 0x8c
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	08009481 	.word	0x08009481
 8008c58:	0800911d 	.word	0x0800911d
 8008c5c:	08008f65 	.word	0x08008f65
 8008c60:	08008dad 	.word	0x08008dad

08008c64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b095      	sub	sp, #84	@ 0x54
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c74:	e853 3f00 	ldrex	r3, [r3]
 8008c78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	461a      	mov	r2, r3
 8008c88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c92:	e841 2300 	strex	r3, r2, [r1]
 8008c96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1e6      	bne.n	8008c6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	3308      	adds	r3, #8
 8008ca4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca6:	6a3b      	ldr	r3, [r7, #32]
 8008ca8:	e853 3f00 	ldrex	r3, [r3]
 8008cac:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cae:	69fa      	ldr	r2, [r7, #28]
 8008cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8008d2c <UART_EndRxTransfer+0xc8>)
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	3308      	adds	r3, #8
 8008cbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cc6:	e841 2300 	strex	r3, r2, [r1]
 8008cca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1e5      	bne.n	8008c9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d118      	bne.n	8008d0c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	e853 3f00 	ldrex	r3, [r3]
 8008ce6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	f023 0310 	bic.w	r3, r3, #16
 8008cee:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cf8:	61bb      	str	r3, [r7, #24]
 8008cfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfc:	6979      	ldr	r1, [r7, #20]
 8008cfe:	69ba      	ldr	r2, [r7, #24]
 8008d00:	e841 2300 	strex	r3, r2, [r1]
 8008d04:	613b      	str	r3, [r7, #16]
   return(result);
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1e6      	bne.n	8008cda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2220      	movs	r2, #32
 8008d10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008d20:	bf00      	nop
 8008d22:	3754      	adds	r7, #84	@ 0x54
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr
 8008d2c:	effffffe 	.word	0xeffffffe

08008d30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7fe fe2e 	bl	80079a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d4c:	bf00      	nop
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b088      	sub	sp, #32
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	e853 3f00 	ldrex	r3, [r3]
 8008d68:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d70:	61fb      	str	r3, [r7, #28]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	461a      	mov	r2, r3
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	61bb      	str	r3, [r7, #24]
 8008d7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7e:	6979      	ldr	r1, [r7, #20]
 8008d80:	69ba      	ldr	r2, [r7, #24]
 8008d82:	e841 2300 	strex	r3, r2, [r1]
 8008d86:	613b      	str	r3, [r7, #16]
   return(result);
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1e6      	bne.n	8008d5c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2220      	movs	r2, #32
 8008d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f7fe fdf9 	bl	8007994 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008da2:	bf00      	nop
 8008da4:	3720      	adds	r7, #32
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
	...

08008dac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b09c      	sub	sp, #112	@ 0x70
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008dba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dc4:	2b22      	cmp	r3, #34	@ 0x22
 8008dc6:	f040 80be 	bne.w	8008f46 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008dd4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008dd8:	b2d9      	uxtb	r1, r3
 8008dda:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008dde:	b2da      	uxtb	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008de4:	400a      	ands	r2, r1
 8008de6:	b2d2      	uxtb	r2, r2
 8008de8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dee:	1c5a      	adds	r2, r3, #1
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f040 80a1 	bne.w	8008f56 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e1c:	e853 3f00 	ldrex	r3, [r3]
 8008e20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e34:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e3a:	e841 2300 	strex	r3, r2, [r1]
 8008e3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1e6      	bne.n	8008e14 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3308      	adds	r3, #8
 8008e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e50:	e853 3f00 	ldrex	r3, [r3]
 8008e54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e58:	f023 0301 	bic.w	r3, r3, #1
 8008e5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	3308      	adds	r3, #8
 8008e64:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008e66:	647a      	str	r2, [r7, #68]	@ 0x44
 8008e68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e6e:	e841 2300 	strex	r3, r2, [r1]
 8008e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d1e5      	bne.n	8008e46 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2220      	movs	r2, #32
 8008e7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a33      	ldr	r2, [pc, #204]	@ (8008f60 <UART_RxISR_8BIT+0x1b4>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d01f      	beq.n	8008ed8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d018      	beq.n	8008ed8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eae:	e853 3f00 	ldrex	r3, [r3]
 8008eb2:	623b      	str	r3, [r7, #32]
   return(result);
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008eba:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ec6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008eca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e6      	bne.n	8008ea6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d12e      	bne.n	8008f3e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	e853 3f00 	ldrex	r3, [r3]
 8008ef2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f023 0310 	bic.w	r3, r3, #16
 8008efa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	461a      	mov	r2, r3
 8008f02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f04:	61fb      	str	r3, [r7, #28]
 8008f06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f08:	69b9      	ldr	r1, [r7, #24]
 8008f0a:	69fa      	ldr	r2, [r7, #28]
 8008f0c:	e841 2300 	strex	r3, r2, [r1]
 8008f10:	617b      	str	r3, [r7, #20]
   return(result);
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1e6      	bne.n	8008ee6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	f003 0310 	and.w	r3, r3, #16
 8008f22:	2b10      	cmp	r3, #16
 8008f24:	d103      	bne.n	8008f2e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2210      	movs	r2, #16
 8008f2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7fe fd40 	bl	80079bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f3c:	e00b      	b.n	8008f56 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7f8 f8ea 	bl	8001118 <HAL_UART_RxCpltCallback>
}
 8008f44:	e007      	b.n	8008f56 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	699a      	ldr	r2, [r3, #24]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f042 0208 	orr.w	r2, r2, #8
 8008f54:	619a      	str	r2, [r3, #24]
}
 8008f56:	bf00      	nop
 8008f58:	3770      	adds	r7, #112	@ 0x70
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	58000c00 	.word	0x58000c00

08008f64 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b09c      	sub	sp, #112	@ 0x70
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f72:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f7c:	2b22      	cmp	r3, #34	@ 0x22
 8008f7e:	f040 80be 	bne.w	80090fe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f88:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f90:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008f92:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008f96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008fa0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fa6:	1c9a      	adds	r2, r3, #2
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f040 80a1 	bne.w	800910e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fd4:	e853 3f00 	ldrex	r3, [r3]
 8008fd8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fe0:	667b      	str	r3, [r7, #100]	@ 0x64
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008fea:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fec:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008ff0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008ff2:	e841 2300 	strex	r3, r2, [r1]
 8008ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008ff8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1e6      	bne.n	8008fcc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3308      	adds	r3, #8
 8009004:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009008:	e853 3f00 	ldrex	r3, [r3]
 800900c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800900e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009010:	f023 0301 	bic.w	r3, r3, #1
 8009014:	663b      	str	r3, [r7, #96]	@ 0x60
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3308      	adds	r3, #8
 800901c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800901e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009020:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009022:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009024:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009026:	e841 2300 	strex	r3, r2, [r1]
 800902a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800902c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1e5      	bne.n	8008ffe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2220      	movs	r2, #32
 8009036:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a33      	ldr	r2, [pc, #204]	@ (8009118 <UART_RxISR_16BIT+0x1b4>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d01f      	beq.n	8009090 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800905a:	2b00      	cmp	r3, #0
 800905c:	d018      	beq.n	8009090 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	e853 3f00 	ldrex	r3, [r3]
 800906a:	61fb      	str	r3, [r7, #28]
   return(result);
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009072:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	461a      	mov	r2, r3
 800907a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800907c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800907e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009080:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009084:	e841 2300 	strex	r3, r2, [r1]
 8009088:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800908a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1e6      	bne.n	800905e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009094:	2b01      	cmp	r3, #1
 8009096:	d12e      	bne.n	80090f6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	e853 3f00 	ldrex	r3, [r3]
 80090aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	f023 0310 	bic.w	r3, r3, #16
 80090b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	461a      	mov	r2, r3
 80090ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090bc:	61bb      	str	r3, [r7, #24]
 80090be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	6979      	ldr	r1, [r7, #20]
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	613b      	str	r3, [r7, #16]
   return(result);
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e6      	bne.n	800909e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	69db      	ldr	r3, [r3, #28]
 80090d6:	f003 0310 	and.w	r3, r3, #16
 80090da:	2b10      	cmp	r3, #16
 80090dc:	d103      	bne.n	80090e6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2210      	movs	r2, #16
 80090e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80090ec:	4619      	mov	r1, r3
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7fe fc64 	bl	80079bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090f4:	e00b      	b.n	800910e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7f8 f80e 	bl	8001118 <HAL_UART_RxCpltCallback>
}
 80090fc:	e007      	b.n	800910e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	699a      	ldr	r2, [r3, #24]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f042 0208 	orr.w	r2, r2, #8
 800910c:	619a      	str	r2, [r3, #24]
}
 800910e:	bf00      	nop
 8009110:	3770      	adds	r7, #112	@ 0x70
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	58000c00 	.word	0x58000c00

0800911c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b0ac      	sub	sp, #176	@ 0xb0
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800912a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	69db      	ldr	r3, [r3, #28]
 8009134:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009152:	2b22      	cmp	r3, #34	@ 0x22
 8009154:	f040 8181 	bne.w	800945a <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800915e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009162:	e124      	b.n	80093ae <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800916a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800916e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009172:	b2d9      	uxtb	r1, r3
 8009174:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009178:	b2da      	uxtb	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800917e:	400a      	ands	r2, r1
 8009180:	b2d2      	uxtb	r2, r2
 8009182:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009188:	1c5a      	adds	r2, r3, #1
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009194:	b29b      	uxth	r3, r3
 8009196:	3b01      	subs	r3, #1
 8009198:	b29a      	uxth	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80091aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091ae:	f003 0307 	and.w	r3, r3, #7
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d053      	beq.n	800925e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091ba:	f003 0301 	and.w	r3, r3, #1
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d011      	beq.n	80091e6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80091c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80091c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00b      	beq.n	80091e6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2201      	movs	r2, #1
 80091d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091dc:	f043 0201 	orr.w	r2, r3, #1
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091ea:	f003 0302 	and.w	r3, r3, #2
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d011      	beq.n	8009216 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80091f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80091f6:	f003 0301 	and.w	r3, r3, #1
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00b      	beq.n	8009216 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2202      	movs	r2, #2
 8009204:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800920c:	f043 0204 	orr.w	r2, r3, #4
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800921a:	f003 0304 	and.w	r3, r3, #4
 800921e:	2b00      	cmp	r3, #0
 8009220:	d011      	beq.n	8009246 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009226:	f003 0301 	and.w	r3, r3, #1
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00b      	beq.n	8009246 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2204      	movs	r2, #4
 8009234:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800923c:	f043 0202 	orr.w	r2, r3, #2
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800924c:	2b00      	cmp	r3, #0
 800924e:	d006      	beq.n	800925e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7fe fba9 	bl	80079a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009264:	b29b      	uxth	r3, r3
 8009266:	2b00      	cmp	r3, #0
 8009268:	f040 80a1 	bne.w	80093ae <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009272:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009274:	e853 3f00 	ldrex	r3, [r3]
 8009278:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800927a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800927c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009280:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	461a      	mov	r2, r3
 800928a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800928e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009290:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009292:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009294:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009296:	e841 2300 	strex	r3, r2, [r1]
 800929a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800929c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1e4      	bne.n	800926c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	3308      	adds	r3, #8
 80092a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092ac:	e853 3f00 	ldrex	r3, [r3]
 80092b0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80092b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80092b4:	4b6f      	ldr	r3, [pc, #444]	@ (8009474 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80092b6:	4013      	ands	r3, r2
 80092b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3308      	adds	r3, #8
 80092c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80092c6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80092c8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ca:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80092cc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80092ce:	e841 2300 	strex	r3, r2, [r1]
 80092d2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80092d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1e3      	bne.n	80092a2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2220      	movs	r2, #32
 80092de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a61      	ldr	r2, [pc, #388]	@ (8009478 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d021      	beq.n	800933c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009302:	2b00      	cmp	r3, #0
 8009304:	d01a      	beq.n	800933c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800930e:	e853 3f00 	ldrex	r3, [r3]
 8009312:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009316:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800931a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	461a      	mov	r2, r3
 8009324:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009328:	657b      	str	r3, [r7, #84]	@ 0x54
 800932a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800932e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009330:	e841 2300 	strex	r3, r2, [r1]
 8009334:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1e4      	bne.n	8009306 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009340:	2b01      	cmp	r3, #1
 8009342:	d130      	bne.n	80093a6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009352:	e853 3f00 	ldrex	r3, [r3]
 8009356:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935a:	f023 0310 	bic.w	r3, r3, #16
 800935e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	461a      	mov	r2, r3
 8009368:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800936c:	643b      	str	r3, [r7, #64]	@ 0x40
 800936e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009370:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009372:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009374:	e841 2300 	strex	r3, r2, [r1]
 8009378:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800937a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1e4      	bne.n	800934a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	69db      	ldr	r3, [r3, #28]
 8009386:	f003 0310 	and.w	r3, r3, #16
 800938a:	2b10      	cmp	r3, #16
 800938c:	d103      	bne.n	8009396 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2210      	movs	r2, #16
 8009394:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f7fe fb0c 	bl	80079bc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80093a4:	e00e      	b.n	80093c4 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f7f7 feb6 	bl	8001118 <HAL_UART_RxCpltCallback>
        break;
 80093ac:	e00a      	b.n	80093c4 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093ae:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d006      	beq.n	80093c4 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 80093b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093ba:	f003 0320 	and.w	r3, r3, #32
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f47f aed0 	bne.w	8009164 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093ca:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80093ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d049      	beq.n	800946a <UART_RxISR_8BIT_FIFOEN+0x34e>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80093dc:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d242      	bcs.n	800946a <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3308      	adds	r3, #8
 80093ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ec:	6a3b      	ldr	r3, [r7, #32]
 80093ee:	e853 3f00 	ldrex	r3, [r3]
 80093f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3308      	adds	r3, #8
 8009404:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009408:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800940a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800940e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009410:	e841 2300 	strex	r3, r2, [r1]
 8009414:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1e3      	bne.n	80093e4 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a17      	ldr	r2, [pc, #92]	@ (800947c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009420:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	e853 3f00 	ldrex	r3, [r3]
 800942e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	f043 0320 	orr.w	r3, r3, #32
 8009436:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	461a      	mov	r2, r3
 8009440:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009444:	61bb      	str	r3, [r7, #24]
 8009446:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009448:	6979      	ldr	r1, [r7, #20]
 800944a:	69ba      	ldr	r2, [r7, #24]
 800944c:	e841 2300 	strex	r3, r2, [r1]
 8009450:	613b      	str	r3, [r7, #16]
   return(result);
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1e4      	bne.n	8009422 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009458:	e007      	b.n	800946a <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	699a      	ldr	r2, [r3, #24]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f042 0208 	orr.w	r2, r2, #8
 8009468:	619a      	str	r2, [r3, #24]
}
 800946a:	bf00      	nop
 800946c:	37b0      	adds	r7, #176	@ 0xb0
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	effffffe 	.word	0xeffffffe
 8009478:	58000c00 	.word	0x58000c00
 800947c:	08008dad 	.word	0x08008dad

08009480 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b0ae      	sub	sp, #184	@ 0xb8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800948e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	69db      	ldr	r3, [r3, #28]
 8009498:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094b6:	2b22      	cmp	r3, #34	@ 0x22
 80094b8:	f040 8185 	bne.w	80097c6 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80094c2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094c6:	e128      	b.n	800971a <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ce:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80094da:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80094de:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80094e2:	4013      	ands	r3, r2
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80094ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094f0:	1c9a      	adds	r2, r3, #2
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	3b01      	subs	r3, #1
 8009500:	b29a      	uxth	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	69db      	ldr	r3, [r3, #28]
 800950e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009512:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009516:	f003 0307 	and.w	r3, r3, #7
 800951a:	2b00      	cmp	r3, #0
 800951c:	d053      	beq.n	80095c6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800951e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	2b00      	cmp	r3, #0
 8009528:	d011      	beq.n	800954e <UART_RxISR_16BIT_FIFOEN+0xce>
 800952a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800952e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00b      	beq.n	800954e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2201      	movs	r2, #1
 800953c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009544:	f043 0201 	orr.w	r2, r3, #1
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800954e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009552:	f003 0302 	and.w	r3, r3, #2
 8009556:	2b00      	cmp	r3, #0
 8009558:	d011      	beq.n	800957e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800955a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00b      	beq.n	800957e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2202      	movs	r2, #2
 800956c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009574:	f043 0204 	orr.w	r2, r3, #4
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800957e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009582:	f003 0304 	and.w	r3, r3, #4
 8009586:	2b00      	cmp	r3, #0
 8009588:	d011      	beq.n	80095ae <UART_RxISR_16BIT_FIFOEN+0x12e>
 800958a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00b      	beq.n	80095ae <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2204      	movs	r2, #4
 800959c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095a4:	f043 0202 	orr.w	r2, r3, #2
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d006      	beq.n	80095c6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f7fe f9f5 	bl	80079a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f040 80a3 	bne.w	800971a <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80095dc:	e853 3f00 	ldrex	r3, [r3]
 80095e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80095e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	461a      	mov	r2, r3
 80095f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80095f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80095fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80095fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009602:	e841 2300 	strex	r3, r2, [r1]
 8009606:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1e2      	bne.n	80095d4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	3308      	adds	r3, #8
 8009614:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009616:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009618:	e853 3f00 	ldrex	r3, [r3]
 800961c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800961e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009620:	4b6f      	ldr	r3, [pc, #444]	@ (80097e0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009622:	4013      	ands	r3, r2
 8009624:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3308      	adds	r3, #8
 800962e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009632:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009634:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009636:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009638:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800963a:	e841 2300 	strex	r3, r2, [r1]
 800963e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009640:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1e3      	bne.n	800960e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2220      	movs	r2, #32
 800964a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a61      	ldr	r2, [pc, #388]	@ (80097e4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d021      	beq.n	80096a8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800966e:	2b00      	cmp	r3, #0
 8009670:	d01a      	beq.n	80096a8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800967a:	e853 3f00 	ldrex	r3, [r3]
 800967e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009680:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009682:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009686:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	461a      	mov	r2, r3
 8009690:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009694:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009696:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009698:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800969a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800969c:	e841 2300 	strex	r3, r2, [r1]
 80096a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80096a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1e4      	bne.n	8009672 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d130      	bne.n	8009712 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096be:	e853 3f00 	ldrex	r3, [r3]
 80096c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096c6:	f023 0310 	bic.w	r3, r3, #16
 80096ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	461a      	mov	r2, r3
 80096d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80096d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80096da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096e0:	e841 2300 	strex	r3, r2, [r1]
 80096e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1e4      	bne.n	80096b6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	69db      	ldr	r3, [r3, #28]
 80096f2:	f003 0310 	and.w	r3, r3, #16
 80096f6:	2b10      	cmp	r3, #16
 80096f8:	d103      	bne.n	8009702 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2210      	movs	r2, #16
 8009700:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009708:	4619      	mov	r1, r3
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7fe f956 	bl	80079bc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009710:	e00e      	b.n	8009730 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f7f7 fd00 	bl	8001118 <HAL_UART_RxCpltCallback>
        break;
 8009718:	e00a      	b.n	8009730 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800971a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800971e:	2b00      	cmp	r3, #0
 8009720:	d006      	beq.n	8009730 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 8009722:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009726:	f003 0320 	and.w	r3, r3, #32
 800972a:	2b00      	cmp	r3, #0
 800972c:	f47f aecc 	bne.w	80094c8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009736:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800973a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800973e:	2b00      	cmp	r3, #0
 8009740:	d049      	beq.n	80097d6 <UART_RxISR_16BIT_FIFOEN+0x356>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009748:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800974c:	429a      	cmp	r2, r3
 800974e:	d242      	bcs.n	80097d6 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3308      	adds	r3, #8
 8009756:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975a:	e853 3f00 	ldrex	r3, [r3]
 800975e:	623b      	str	r3, [r7, #32]
   return(result);
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009766:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3308      	adds	r3, #8
 8009770:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009774:	633a      	str	r2, [r7, #48]	@ 0x30
 8009776:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009778:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800977a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800977c:	e841 2300 	strex	r3, r2, [r1]
 8009780:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1e3      	bne.n	8009750 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a17      	ldr	r2, [pc, #92]	@ (80097e8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800978c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	e853 3f00 	ldrex	r3, [r3]
 800979a:	60fb      	str	r3, [r7, #12]
   return(result);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f043 0320 	orr.w	r3, r3, #32
 80097a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	461a      	mov	r2, r3
 80097ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80097b0:	61fb      	str	r3, [r7, #28]
 80097b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b4:	69b9      	ldr	r1, [r7, #24]
 80097b6:	69fa      	ldr	r2, [r7, #28]
 80097b8:	e841 2300 	strex	r3, r2, [r1]
 80097bc:	617b      	str	r3, [r7, #20]
   return(result);
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1e4      	bne.n	800978e <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097c4:	e007      	b.n	80097d6 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	699a      	ldr	r2, [r3, #24]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f042 0208 	orr.w	r2, r2, #8
 80097d4:	619a      	str	r2, [r3, #24]
}
 80097d6:	bf00      	nop
 80097d8:	37b8      	adds	r7, #184	@ 0xb8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	effffffe 	.word	0xeffffffe
 80097e4:	58000c00 	.word	0x58000c00
 80097e8:	08008f65 	.word	0x08008f65

080097ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009836:	2b01      	cmp	r3, #1
 8009838:	d101      	bne.n	800983e <HAL_UARTEx_EnableFifoMode+0x16>
 800983a:	2302      	movs	r3, #2
 800983c:	e02b      	b.n	8009896 <HAL_UARTEx_EnableFifoMode+0x6e>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2224      	movs	r2, #36	@ 0x24
 800984a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f022 0201 	bic.w	r2, r2, #1
 8009864:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800986c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8009874:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f88a 	bl	8009998 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2220      	movs	r2, #32
 8009888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d101      	bne.n	80098b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098b2:	2302      	movs	r3, #2
 80098b4:	e02d      	b.n	8009912 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2224      	movs	r2, #36	@ 0x24
 80098c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f022 0201 	bic.w	r2, r2, #1
 80098dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	683a      	ldr	r2, [r7, #0]
 80098ee:	430a      	orrs	r2, r1
 80098f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f850 	bl	8009998 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2220      	movs	r2, #32
 8009904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b084      	sub	sp, #16
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800992a:	2b01      	cmp	r3, #1
 800992c:	d101      	bne.n	8009932 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800992e:	2302      	movs	r3, #2
 8009930:	e02d      	b.n	800998e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2201      	movs	r2, #1
 8009936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2224      	movs	r2, #36	@ 0x24
 800993e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f022 0201 	bic.w	r2, r2, #1
 8009958:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	683a      	ldr	r2, [r7, #0]
 800996a:	430a      	orrs	r2, r1
 800996c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f812 	bl	8009998 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2220      	movs	r2, #32
 8009980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
	...

08009998 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d108      	bne.n	80099ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099b8:	e031      	b.n	8009a1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099ba:	2310      	movs	r3, #16
 80099bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80099be:	2310      	movs	r3, #16
 80099c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	0e5b      	lsrs	r3, r3, #25
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	f003 0307 	and.w	r3, r3, #7
 80099d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	0f5b      	lsrs	r3, r3, #29
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	f003 0307 	and.w	r3, r3, #7
 80099e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099e2:	7bbb      	ldrb	r3, [r7, #14]
 80099e4:	7b3a      	ldrb	r2, [r7, #12]
 80099e6:	4911      	ldr	r1, [pc, #68]	@ (8009a2c <UARTEx_SetNbDataToProcess+0x94>)
 80099e8:	5c8a      	ldrb	r2, [r1, r2]
 80099ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80099ee:	7b3a      	ldrb	r2, [r7, #12]
 80099f0:	490f      	ldr	r1, [pc, #60]	@ (8009a30 <UARTEx_SetNbDataToProcess+0x98>)
 80099f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
 8009a02:	7b7a      	ldrb	r2, [r7, #13]
 8009a04:	4909      	ldr	r1, [pc, #36]	@ (8009a2c <UARTEx_SetNbDataToProcess+0x94>)
 8009a06:	5c8a      	ldrb	r2, [r1, r2]
 8009a08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a0c:	7b7a      	ldrb	r2, [r7, #13]
 8009a0e:	4908      	ldr	r1, [pc, #32]	@ (8009a30 <UARTEx_SetNbDataToProcess+0x98>)
 8009a10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a12:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009a1e:	bf00      	nop
 8009a20:	3714      	adds	r7, #20
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	0800c71c 	.word	0x0800c71c
 8009a30:	0800c724 	.word	0x0800c724

08009a34 <atof>:
 8009a34:	2100      	movs	r1, #0
 8009a36:	f000 bdb5 	b.w	800a5a4 <strtod>

08009a3a <sulp>:
 8009a3a:	b570      	push	{r4, r5, r6, lr}
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	460d      	mov	r5, r1
 8009a40:	4616      	mov	r6, r2
 8009a42:	ec45 4b10 	vmov	d0, r4, r5
 8009a46:	f001 ff13 	bl	800b870 <__ulp>
 8009a4a:	b17e      	cbz	r6, 8009a6c <sulp+0x32>
 8009a4c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009a50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	dd09      	ble.n	8009a6c <sulp+0x32>
 8009a58:	051b      	lsls	r3, r3, #20
 8009a5a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8009a5e:	2000      	movs	r0, #0
 8009a60:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8009a64:	ec41 0b17 	vmov	d7, r0, r1
 8009a68:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009a6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a70 <_strtod_l>:
 8009a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a74:	ed2d 8b0a 	vpush	{d8-d12}
 8009a78:	b097      	sub	sp, #92	@ 0x5c
 8009a7a:	4688      	mov	r8, r1
 8009a7c:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a7e:	2200      	movs	r2, #0
 8009a80:	9212      	str	r2, [sp, #72]	@ 0x48
 8009a82:	9005      	str	r0, [sp, #20]
 8009a84:	f04f 0a00 	mov.w	sl, #0
 8009a88:	f04f 0b00 	mov.w	fp, #0
 8009a8c:	460a      	mov	r2, r1
 8009a8e:	9211      	str	r2, [sp, #68]	@ 0x44
 8009a90:	7811      	ldrb	r1, [r2, #0]
 8009a92:	292b      	cmp	r1, #43	@ 0x2b
 8009a94:	d04c      	beq.n	8009b30 <_strtod_l+0xc0>
 8009a96:	d839      	bhi.n	8009b0c <_strtod_l+0x9c>
 8009a98:	290d      	cmp	r1, #13
 8009a9a:	d833      	bhi.n	8009b04 <_strtod_l+0x94>
 8009a9c:	2908      	cmp	r1, #8
 8009a9e:	d833      	bhi.n	8009b08 <_strtod_l+0x98>
 8009aa0:	2900      	cmp	r1, #0
 8009aa2:	d03c      	beq.n	8009b1e <_strtod_l+0xae>
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	9208      	str	r2, [sp, #32]
 8009aa8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8009aaa:	782a      	ldrb	r2, [r5, #0]
 8009aac:	2a30      	cmp	r2, #48	@ 0x30
 8009aae:	f040 80b7 	bne.w	8009c20 <_strtod_l+0x1b0>
 8009ab2:	786a      	ldrb	r2, [r5, #1]
 8009ab4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009ab8:	2a58      	cmp	r2, #88	@ 0x58
 8009aba:	d170      	bne.n	8009b9e <_strtod_l+0x12e>
 8009abc:	9302      	str	r3, [sp, #8]
 8009abe:	9b08      	ldr	r3, [sp, #32]
 8009ac0:	9301      	str	r3, [sp, #4]
 8009ac2:	ab12      	add	r3, sp, #72	@ 0x48
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	4a90      	ldr	r2, [pc, #576]	@ (8009d08 <_strtod_l+0x298>)
 8009ac8:	9805      	ldr	r0, [sp, #20]
 8009aca:	ab13      	add	r3, sp, #76	@ 0x4c
 8009acc:	a911      	add	r1, sp, #68	@ 0x44
 8009ace:	f000 ffd1 	bl	800aa74 <__gethex>
 8009ad2:	f010 060f 	ands.w	r6, r0, #15
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	d005      	beq.n	8009ae6 <_strtod_l+0x76>
 8009ada:	2e06      	cmp	r6, #6
 8009adc:	d12a      	bne.n	8009b34 <_strtod_l+0xc4>
 8009ade:	3501      	adds	r5, #1
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	9511      	str	r5, [sp, #68]	@ 0x44
 8009ae4:	9308      	str	r3, [sp, #32]
 8009ae6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f040 8537 	bne.w	800a55c <_strtod_l+0xaec>
 8009aee:	9b08      	ldr	r3, [sp, #32]
 8009af0:	ec4b ab10 	vmov	d0, sl, fp
 8009af4:	b1cb      	cbz	r3, 8009b2a <_strtod_l+0xba>
 8009af6:	eeb1 0b40 	vneg.f64	d0, d0
 8009afa:	b017      	add	sp, #92	@ 0x5c
 8009afc:	ecbd 8b0a 	vpop	{d8-d12}
 8009b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b04:	2920      	cmp	r1, #32
 8009b06:	d1cd      	bne.n	8009aa4 <_strtod_l+0x34>
 8009b08:	3201      	adds	r2, #1
 8009b0a:	e7c0      	b.n	8009a8e <_strtod_l+0x1e>
 8009b0c:	292d      	cmp	r1, #45	@ 0x2d
 8009b0e:	d1c9      	bne.n	8009aa4 <_strtod_l+0x34>
 8009b10:	2101      	movs	r1, #1
 8009b12:	9108      	str	r1, [sp, #32]
 8009b14:	1c51      	adds	r1, r2, #1
 8009b16:	9111      	str	r1, [sp, #68]	@ 0x44
 8009b18:	7852      	ldrb	r2, [r2, #1]
 8009b1a:	2a00      	cmp	r2, #0
 8009b1c:	d1c4      	bne.n	8009aa8 <_strtod_l+0x38>
 8009b1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b20:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f040 8517 	bne.w	800a558 <_strtod_l+0xae8>
 8009b2a:	ec4b ab10 	vmov	d0, sl, fp
 8009b2e:	e7e4      	b.n	8009afa <_strtod_l+0x8a>
 8009b30:	2100      	movs	r1, #0
 8009b32:	e7ee      	b.n	8009b12 <_strtod_l+0xa2>
 8009b34:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009b36:	b13a      	cbz	r2, 8009b48 <_strtod_l+0xd8>
 8009b38:	2135      	movs	r1, #53	@ 0x35
 8009b3a:	a814      	add	r0, sp, #80	@ 0x50
 8009b3c:	f001 ff8f 	bl	800ba5e <__copybits>
 8009b40:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009b42:	9805      	ldr	r0, [sp, #20]
 8009b44:	f001 fb68 	bl	800b218 <_Bfree>
 8009b48:	1e73      	subs	r3, r6, #1
 8009b4a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009b4c:	2b04      	cmp	r3, #4
 8009b4e:	d806      	bhi.n	8009b5e <_strtod_l+0xee>
 8009b50:	e8df f003 	tbb	[pc, r3]
 8009b54:	201d0314 	.word	0x201d0314
 8009b58:	14          	.byte	0x14
 8009b59:	00          	.byte	0x00
 8009b5a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8009b5e:	05e3      	lsls	r3, r4, #23
 8009b60:	bf48      	it	mi
 8009b62:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009b66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b6a:	0d1b      	lsrs	r3, r3, #20
 8009b6c:	051b      	lsls	r3, r3, #20
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1b9      	bne.n	8009ae6 <_strtod_l+0x76>
 8009b72:	f000 fe89 	bl	800a888 <__errno>
 8009b76:	2322      	movs	r3, #34	@ 0x22
 8009b78:	6003      	str	r3, [r0, #0]
 8009b7a:	e7b4      	b.n	8009ae6 <_strtod_l+0x76>
 8009b7c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8009b80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009b84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009b88:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009b8c:	e7e7      	b.n	8009b5e <_strtod_l+0xee>
 8009b8e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009d10 <_strtod_l+0x2a0>
 8009b92:	e7e4      	b.n	8009b5e <_strtod_l+0xee>
 8009b94:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009b98:	f04f 3aff 	mov.w	sl, #4294967295
 8009b9c:	e7df      	b.n	8009b5e <_strtod_l+0xee>
 8009b9e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ba0:	1c5a      	adds	r2, r3, #1
 8009ba2:	9211      	str	r2, [sp, #68]	@ 0x44
 8009ba4:	785b      	ldrb	r3, [r3, #1]
 8009ba6:	2b30      	cmp	r3, #48	@ 0x30
 8009ba8:	d0f9      	beq.n	8009b9e <_strtod_l+0x12e>
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d09b      	beq.n	8009ae6 <_strtod_l+0x76>
 8009bae:	2301      	movs	r3, #1
 8009bb0:	9307      	str	r3, [sp, #28]
 8009bb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009bb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	9306      	str	r3, [sp, #24]
 8009bba:	4699      	mov	r9, r3
 8009bbc:	461d      	mov	r5, r3
 8009bbe:	220a      	movs	r2, #10
 8009bc0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8009bc2:	7804      	ldrb	r4, [r0, #0]
 8009bc4:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8009bc8:	b2d9      	uxtb	r1, r3
 8009bca:	2909      	cmp	r1, #9
 8009bcc:	d92a      	bls.n	8009c24 <_strtod_l+0x1b4>
 8009bce:	494f      	ldr	r1, [pc, #316]	@ (8009d0c <_strtod_l+0x29c>)
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f000 fe00 	bl	800a7d6 <strncmp>
 8009bd6:	b398      	cbz	r0, 8009c40 <_strtod_l+0x1d0>
 8009bd8:	2000      	movs	r0, #0
 8009bda:	4622      	mov	r2, r4
 8009bdc:	462b      	mov	r3, r5
 8009bde:	4607      	mov	r7, r0
 8009be0:	4601      	mov	r1, r0
 8009be2:	2a65      	cmp	r2, #101	@ 0x65
 8009be4:	d001      	beq.n	8009bea <_strtod_l+0x17a>
 8009be6:	2a45      	cmp	r2, #69	@ 0x45
 8009be8:	d118      	bne.n	8009c1c <_strtod_l+0x1ac>
 8009bea:	b91b      	cbnz	r3, 8009bf4 <_strtod_l+0x184>
 8009bec:	9b07      	ldr	r3, [sp, #28]
 8009bee:	4303      	orrs	r3, r0
 8009bf0:	d095      	beq.n	8009b1e <_strtod_l+0xae>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8009bf8:	f108 0201 	add.w	r2, r8, #1
 8009bfc:	9211      	str	r2, [sp, #68]	@ 0x44
 8009bfe:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009c02:	2a2b      	cmp	r2, #43	@ 0x2b
 8009c04:	d074      	beq.n	8009cf0 <_strtod_l+0x280>
 8009c06:	2a2d      	cmp	r2, #45	@ 0x2d
 8009c08:	d07a      	beq.n	8009d00 <_strtod_l+0x290>
 8009c0a:	f04f 0e00 	mov.w	lr, #0
 8009c0e:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8009c12:	2c09      	cmp	r4, #9
 8009c14:	f240 8082 	bls.w	8009d1c <_strtod_l+0x2ac>
 8009c18:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8009c1c:	2400      	movs	r4, #0
 8009c1e:	e09d      	b.n	8009d5c <_strtod_l+0x2ec>
 8009c20:	2300      	movs	r3, #0
 8009c22:	e7c5      	b.n	8009bb0 <_strtod_l+0x140>
 8009c24:	2d08      	cmp	r5, #8
 8009c26:	bfc8      	it	gt
 8009c28:	9906      	ldrgt	r1, [sp, #24]
 8009c2a:	f100 0001 	add.w	r0, r0, #1
 8009c2e:	bfca      	itet	gt
 8009c30:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009c34:	fb02 3909 	mlale	r9, r2, r9, r3
 8009c38:	9306      	strgt	r3, [sp, #24]
 8009c3a:	3501      	adds	r5, #1
 8009c3c:	9011      	str	r0, [sp, #68]	@ 0x44
 8009c3e:	e7bf      	b.n	8009bc0 <_strtod_l+0x150>
 8009c40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c42:	1c5a      	adds	r2, r3, #1
 8009c44:	9211      	str	r2, [sp, #68]	@ 0x44
 8009c46:	785a      	ldrb	r2, [r3, #1]
 8009c48:	b3bd      	cbz	r5, 8009cba <_strtod_l+0x24a>
 8009c4a:	4607      	mov	r7, r0
 8009c4c:	462b      	mov	r3, r5
 8009c4e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009c52:	2909      	cmp	r1, #9
 8009c54:	d912      	bls.n	8009c7c <_strtod_l+0x20c>
 8009c56:	2101      	movs	r1, #1
 8009c58:	e7c3      	b.n	8009be2 <_strtod_l+0x172>
 8009c5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c5c:	1c5a      	adds	r2, r3, #1
 8009c5e:	9211      	str	r2, [sp, #68]	@ 0x44
 8009c60:	785a      	ldrb	r2, [r3, #1]
 8009c62:	3001      	adds	r0, #1
 8009c64:	2a30      	cmp	r2, #48	@ 0x30
 8009c66:	d0f8      	beq.n	8009c5a <_strtod_l+0x1ea>
 8009c68:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009c6c:	2b08      	cmp	r3, #8
 8009c6e:	f200 847a 	bhi.w	800a566 <_strtod_l+0xaf6>
 8009c72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c74:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c76:	4607      	mov	r7, r0
 8009c78:	2000      	movs	r0, #0
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	3a30      	subs	r2, #48	@ 0x30
 8009c7e:	f100 0101 	add.w	r1, r0, #1
 8009c82:	d014      	beq.n	8009cae <_strtod_l+0x23e>
 8009c84:	440f      	add	r7, r1
 8009c86:	469c      	mov	ip, r3
 8009c88:	f04f 0e0a 	mov.w	lr, #10
 8009c8c:	f10c 0401 	add.w	r4, ip, #1
 8009c90:	1ae6      	subs	r6, r4, r3
 8009c92:	42b1      	cmp	r1, r6
 8009c94:	dc13      	bgt.n	8009cbe <_strtod_l+0x24e>
 8009c96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009c9a:	1819      	adds	r1, r3, r0
 8009c9c:	2908      	cmp	r1, #8
 8009c9e:	f103 0301 	add.w	r3, r3, #1
 8009ca2:	4403      	add	r3, r0
 8009ca4:	dc19      	bgt.n	8009cda <_strtod_l+0x26a>
 8009ca6:	210a      	movs	r1, #10
 8009ca8:	fb01 2909 	mla	r9, r1, r9, r2
 8009cac:	2100      	movs	r1, #0
 8009cae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009cb0:	1c50      	adds	r0, r2, #1
 8009cb2:	9011      	str	r0, [sp, #68]	@ 0x44
 8009cb4:	7852      	ldrb	r2, [r2, #1]
 8009cb6:	4608      	mov	r0, r1
 8009cb8:	e7c9      	b.n	8009c4e <_strtod_l+0x1de>
 8009cba:	4628      	mov	r0, r5
 8009cbc:	e7d2      	b.n	8009c64 <_strtod_l+0x1f4>
 8009cbe:	f1bc 0f08 	cmp.w	ip, #8
 8009cc2:	dc03      	bgt.n	8009ccc <_strtod_l+0x25c>
 8009cc4:	fb0e f909 	mul.w	r9, lr, r9
 8009cc8:	46a4      	mov	ip, r4
 8009cca:	e7df      	b.n	8009c8c <_strtod_l+0x21c>
 8009ccc:	2c10      	cmp	r4, #16
 8009cce:	bfde      	ittt	le
 8009cd0:	9e06      	ldrle	r6, [sp, #24]
 8009cd2:	fb0e f606 	mulle.w	r6, lr, r6
 8009cd6:	9606      	strle	r6, [sp, #24]
 8009cd8:	e7f6      	b.n	8009cc8 <_strtod_l+0x258>
 8009cda:	290f      	cmp	r1, #15
 8009cdc:	bfdf      	itttt	le
 8009cde:	9806      	ldrle	r0, [sp, #24]
 8009ce0:	210a      	movle	r1, #10
 8009ce2:	fb01 2200 	mlale	r2, r1, r0, r2
 8009ce6:	9206      	strle	r2, [sp, #24]
 8009ce8:	e7e0      	b.n	8009cac <_strtod_l+0x23c>
 8009cea:	2700      	movs	r7, #0
 8009cec:	2101      	movs	r1, #1
 8009cee:	e77d      	b.n	8009bec <_strtod_l+0x17c>
 8009cf0:	f04f 0e00 	mov.w	lr, #0
 8009cf4:	f108 0202 	add.w	r2, r8, #2
 8009cf8:	9211      	str	r2, [sp, #68]	@ 0x44
 8009cfa:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009cfe:	e786      	b.n	8009c0e <_strtod_l+0x19e>
 8009d00:	f04f 0e01 	mov.w	lr, #1
 8009d04:	e7f6      	b.n	8009cf4 <_strtod_l+0x284>
 8009d06:	bf00      	nop
 8009d08:	0800c8a8 	.word	0x0800c8a8
 8009d0c:	0800c72c 	.word	0x0800c72c
 8009d10:	7ff00000 	.word	0x7ff00000
 8009d14:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009d16:	1c54      	adds	r4, r2, #1
 8009d18:	9411      	str	r4, [sp, #68]	@ 0x44
 8009d1a:	7852      	ldrb	r2, [r2, #1]
 8009d1c:	2a30      	cmp	r2, #48	@ 0x30
 8009d1e:	d0f9      	beq.n	8009d14 <_strtod_l+0x2a4>
 8009d20:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8009d24:	2c08      	cmp	r4, #8
 8009d26:	f63f af79 	bhi.w	8009c1c <_strtod_l+0x1ac>
 8009d2a:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8009d2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009d30:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d32:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009d34:	1c54      	adds	r4, r2, #1
 8009d36:	9411      	str	r4, [sp, #68]	@ 0x44
 8009d38:	7852      	ldrb	r2, [r2, #1]
 8009d3a:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8009d3e:	2e09      	cmp	r6, #9
 8009d40:	d937      	bls.n	8009db2 <_strtod_l+0x342>
 8009d42:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009d44:	1ba4      	subs	r4, r4, r6
 8009d46:	2c08      	cmp	r4, #8
 8009d48:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8009d4c:	dc02      	bgt.n	8009d54 <_strtod_l+0x2e4>
 8009d4e:	4564      	cmp	r4, ip
 8009d50:	bfa8      	it	ge
 8009d52:	4664      	movge	r4, ip
 8009d54:	f1be 0f00 	cmp.w	lr, #0
 8009d58:	d000      	beq.n	8009d5c <_strtod_l+0x2ec>
 8009d5a:	4264      	negs	r4, r4
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d14d      	bne.n	8009dfc <_strtod_l+0x38c>
 8009d60:	9b07      	ldr	r3, [sp, #28]
 8009d62:	4318      	orrs	r0, r3
 8009d64:	f47f aebf 	bne.w	8009ae6 <_strtod_l+0x76>
 8009d68:	2900      	cmp	r1, #0
 8009d6a:	f47f aed8 	bne.w	8009b1e <_strtod_l+0xae>
 8009d6e:	2a69      	cmp	r2, #105	@ 0x69
 8009d70:	d027      	beq.n	8009dc2 <_strtod_l+0x352>
 8009d72:	dc24      	bgt.n	8009dbe <_strtod_l+0x34e>
 8009d74:	2a49      	cmp	r2, #73	@ 0x49
 8009d76:	d024      	beq.n	8009dc2 <_strtod_l+0x352>
 8009d78:	2a4e      	cmp	r2, #78	@ 0x4e
 8009d7a:	f47f aed0 	bne.w	8009b1e <_strtod_l+0xae>
 8009d7e:	4997      	ldr	r1, [pc, #604]	@ (8009fdc <_strtod_l+0x56c>)
 8009d80:	a811      	add	r0, sp, #68	@ 0x44
 8009d82:	f001 f899 	bl	800aeb8 <__match>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	f43f aec9 	beq.w	8009b1e <_strtod_l+0xae>
 8009d8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	2b28      	cmp	r3, #40	@ 0x28
 8009d92:	d12d      	bne.n	8009df0 <_strtod_l+0x380>
 8009d94:	4992      	ldr	r1, [pc, #584]	@ (8009fe0 <_strtod_l+0x570>)
 8009d96:	aa14      	add	r2, sp, #80	@ 0x50
 8009d98:	a811      	add	r0, sp, #68	@ 0x44
 8009d9a:	f001 f8a1 	bl	800aee0 <__hexnan>
 8009d9e:	2805      	cmp	r0, #5
 8009da0:	d126      	bne.n	8009df0 <_strtod_l+0x380>
 8009da2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009da4:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8009da8:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009dac:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009db0:	e699      	b.n	8009ae6 <_strtod_l+0x76>
 8009db2:	240a      	movs	r4, #10
 8009db4:	fb04 2c0c 	mla	ip, r4, ip, r2
 8009db8:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8009dbc:	e7b9      	b.n	8009d32 <_strtod_l+0x2c2>
 8009dbe:	2a6e      	cmp	r2, #110	@ 0x6e
 8009dc0:	e7db      	b.n	8009d7a <_strtod_l+0x30a>
 8009dc2:	4988      	ldr	r1, [pc, #544]	@ (8009fe4 <_strtod_l+0x574>)
 8009dc4:	a811      	add	r0, sp, #68	@ 0x44
 8009dc6:	f001 f877 	bl	800aeb8 <__match>
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	f43f aea7 	beq.w	8009b1e <_strtod_l+0xae>
 8009dd0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009dd2:	4985      	ldr	r1, [pc, #532]	@ (8009fe8 <_strtod_l+0x578>)
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	a811      	add	r0, sp, #68	@ 0x44
 8009dd8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009dda:	f001 f86d 	bl	800aeb8 <__match>
 8009dde:	b910      	cbnz	r0, 8009de6 <_strtod_l+0x376>
 8009de0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009de2:	3301      	adds	r3, #1
 8009de4:	9311      	str	r3, [sp, #68]	@ 0x44
 8009de6:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8009ffc <_strtod_l+0x58c>
 8009dea:	f04f 0a00 	mov.w	sl, #0
 8009dee:	e67a      	b.n	8009ae6 <_strtod_l+0x76>
 8009df0:	487e      	ldr	r0, [pc, #504]	@ (8009fec <_strtod_l+0x57c>)
 8009df2:	f000 fd85 	bl	800a900 <nan>
 8009df6:	ec5b ab10 	vmov	sl, fp, d0
 8009dfa:	e674      	b.n	8009ae6 <_strtod_l+0x76>
 8009dfc:	ee07 9a90 	vmov	s15, r9
 8009e00:	1be2      	subs	r2, r4, r7
 8009e02:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009e06:	2d00      	cmp	r5, #0
 8009e08:	bf08      	it	eq
 8009e0a:	461d      	moveq	r5, r3
 8009e0c:	2b10      	cmp	r3, #16
 8009e0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e10:	461a      	mov	r2, r3
 8009e12:	bfa8      	it	ge
 8009e14:	2210      	movge	r2, #16
 8009e16:	2b09      	cmp	r3, #9
 8009e18:	ec5b ab17 	vmov	sl, fp, d7
 8009e1c:	dc15      	bgt.n	8009e4a <_strtod_l+0x3da>
 8009e1e:	1be1      	subs	r1, r4, r7
 8009e20:	2900      	cmp	r1, #0
 8009e22:	f43f ae60 	beq.w	8009ae6 <_strtod_l+0x76>
 8009e26:	eba4 0107 	sub.w	r1, r4, r7
 8009e2a:	dd72      	ble.n	8009f12 <_strtod_l+0x4a2>
 8009e2c:	2916      	cmp	r1, #22
 8009e2e:	dc59      	bgt.n	8009ee4 <_strtod_l+0x474>
 8009e30:	4b6f      	ldr	r3, [pc, #444]	@ (8009ff0 <_strtod_l+0x580>)
 8009e32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e38:	ed93 7b00 	vldr	d7, [r3]
 8009e3c:	ec4b ab16 	vmov	d6, sl, fp
 8009e40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009e44:	ec5b ab17 	vmov	sl, fp, d7
 8009e48:	e64d      	b.n	8009ae6 <_strtod_l+0x76>
 8009e4a:	4969      	ldr	r1, [pc, #420]	@ (8009ff0 <_strtod_l+0x580>)
 8009e4c:	eddd 6a06 	vldr	s13, [sp, #24]
 8009e50:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009e54:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8009e58:	2b0f      	cmp	r3, #15
 8009e5a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8009e5e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009e62:	ec5b ab16 	vmov	sl, fp, d6
 8009e66:	ddda      	ble.n	8009e1e <_strtod_l+0x3ae>
 8009e68:	1a9a      	subs	r2, r3, r2
 8009e6a:	1be1      	subs	r1, r4, r7
 8009e6c:	440a      	add	r2, r1
 8009e6e:	2a00      	cmp	r2, #0
 8009e70:	f340 8094 	ble.w	8009f9c <_strtod_l+0x52c>
 8009e74:	f012 000f 	ands.w	r0, r2, #15
 8009e78:	d00a      	beq.n	8009e90 <_strtod_l+0x420>
 8009e7a:	495d      	ldr	r1, [pc, #372]	@ (8009ff0 <_strtod_l+0x580>)
 8009e7c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009e80:	ed91 7b00 	vldr	d7, [r1]
 8009e84:	ec4b ab16 	vmov	d6, sl, fp
 8009e88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009e8c:	ec5b ab17 	vmov	sl, fp, d7
 8009e90:	f032 020f 	bics.w	r2, r2, #15
 8009e94:	d073      	beq.n	8009f7e <_strtod_l+0x50e>
 8009e96:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8009e9a:	dd47      	ble.n	8009f2c <_strtod_l+0x4bc>
 8009e9c:	2400      	movs	r4, #0
 8009e9e:	4625      	mov	r5, r4
 8009ea0:	9407      	str	r4, [sp, #28]
 8009ea2:	4626      	mov	r6, r4
 8009ea4:	9a05      	ldr	r2, [sp, #20]
 8009ea6:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009ffc <_strtod_l+0x58c>
 8009eaa:	2322      	movs	r3, #34	@ 0x22
 8009eac:	6013      	str	r3, [r2, #0]
 8009eae:	f04f 0a00 	mov.w	sl, #0
 8009eb2:	9b07      	ldr	r3, [sp, #28]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f43f ae16 	beq.w	8009ae6 <_strtod_l+0x76>
 8009eba:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009ebc:	9805      	ldr	r0, [sp, #20]
 8009ebe:	f001 f9ab 	bl	800b218 <_Bfree>
 8009ec2:	9805      	ldr	r0, [sp, #20]
 8009ec4:	4631      	mov	r1, r6
 8009ec6:	f001 f9a7 	bl	800b218 <_Bfree>
 8009eca:	9805      	ldr	r0, [sp, #20]
 8009ecc:	4629      	mov	r1, r5
 8009ece:	f001 f9a3 	bl	800b218 <_Bfree>
 8009ed2:	9907      	ldr	r1, [sp, #28]
 8009ed4:	9805      	ldr	r0, [sp, #20]
 8009ed6:	f001 f99f 	bl	800b218 <_Bfree>
 8009eda:	9805      	ldr	r0, [sp, #20]
 8009edc:	4621      	mov	r1, r4
 8009ede:	f001 f99b 	bl	800b218 <_Bfree>
 8009ee2:	e600      	b.n	8009ae6 <_strtod_l+0x76>
 8009ee4:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8009ee8:	1be0      	subs	r0, r4, r7
 8009eea:	4281      	cmp	r1, r0
 8009eec:	dbbc      	blt.n	8009e68 <_strtod_l+0x3f8>
 8009eee:	4a40      	ldr	r2, [pc, #256]	@ (8009ff0 <_strtod_l+0x580>)
 8009ef0:	f1c3 030f 	rsb	r3, r3, #15
 8009ef4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009ef8:	ed91 7b00 	vldr	d7, [r1]
 8009efc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009efe:	ec4b ab16 	vmov	d6, sl, fp
 8009f02:	1acb      	subs	r3, r1, r3
 8009f04:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009f08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009f0c:	ed92 6b00 	vldr	d6, [r2]
 8009f10:	e796      	b.n	8009e40 <_strtod_l+0x3d0>
 8009f12:	3116      	adds	r1, #22
 8009f14:	dba8      	blt.n	8009e68 <_strtod_l+0x3f8>
 8009f16:	4b36      	ldr	r3, [pc, #216]	@ (8009ff0 <_strtod_l+0x580>)
 8009f18:	1b3c      	subs	r4, r7, r4
 8009f1a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009f1e:	ed94 7b00 	vldr	d7, [r4]
 8009f22:	ec4b ab16 	vmov	d6, sl, fp
 8009f26:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009f2a:	e78b      	b.n	8009e44 <_strtod_l+0x3d4>
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	ec4b ab17 	vmov	d7, sl, fp
 8009f32:	4e30      	ldr	r6, [pc, #192]	@ (8009ff4 <_strtod_l+0x584>)
 8009f34:	1112      	asrs	r2, r2, #4
 8009f36:	4601      	mov	r1, r0
 8009f38:	2a01      	cmp	r2, #1
 8009f3a:	dc23      	bgt.n	8009f84 <_strtod_l+0x514>
 8009f3c:	b108      	cbz	r0, 8009f42 <_strtod_l+0x4d2>
 8009f3e:	ec5b ab17 	vmov	sl, fp, d7
 8009f42:	4a2c      	ldr	r2, [pc, #176]	@ (8009ff4 <_strtod_l+0x584>)
 8009f44:	482c      	ldr	r0, [pc, #176]	@ (8009ff8 <_strtod_l+0x588>)
 8009f46:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009f4a:	ed92 7b00 	vldr	d7, [r2]
 8009f4e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009f52:	ec4b ab16 	vmov	d6, sl, fp
 8009f56:	4a29      	ldr	r2, [pc, #164]	@ (8009ffc <_strtod_l+0x58c>)
 8009f58:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009f5c:	ee17 1a90 	vmov	r1, s15
 8009f60:	400a      	ands	r2, r1
 8009f62:	4282      	cmp	r2, r0
 8009f64:	ec5b ab17 	vmov	sl, fp, d7
 8009f68:	d898      	bhi.n	8009e9c <_strtod_l+0x42c>
 8009f6a:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8009f6e:	4282      	cmp	r2, r0
 8009f70:	bf86      	itte	hi
 8009f72:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a000 <_strtod_l+0x590>
 8009f76:	f04f 3aff 	movhi.w	sl, #4294967295
 8009f7a:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8009f7e:	2200      	movs	r2, #0
 8009f80:	9206      	str	r2, [sp, #24]
 8009f82:	e076      	b.n	800a072 <_strtod_l+0x602>
 8009f84:	f012 0f01 	tst.w	r2, #1
 8009f88:	d004      	beq.n	8009f94 <_strtod_l+0x524>
 8009f8a:	ed96 6b00 	vldr	d6, [r6]
 8009f8e:	2001      	movs	r0, #1
 8009f90:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009f94:	3101      	adds	r1, #1
 8009f96:	1052      	asrs	r2, r2, #1
 8009f98:	3608      	adds	r6, #8
 8009f9a:	e7cd      	b.n	8009f38 <_strtod_l+0x4c8>
 8009f9c:	d0ef      	beq.n	8009f7e <_strtod_l+0x50e>
 8009f9e:	4252      	negs	r2, r2
 8009fa0:	f012 000f 	ands.w	r0, r2, #15
 8009fa4:	d00a      	beq.n	8009fbc <_strtod_l+0x54c>
 8009fa6:	4912      	ldr	r1, [pc, #72]	@ (8009ff0 <_strtod_l+0x580>)
 8009fa8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009fac:	ed91 7b00 	vldr	d7, [r1]
 8009fb0:	ec4b ab16 	vmov	d6, sl, fp
 8009fb4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009fb8:	ec5b ab17 	vmov	sl, fp, d7
 8009fbc:	1112      	asrs	r2, r2, #4
 8009fbe:	d0de      	beq.n	8009f7e <_strtod_l+0x50e>
 8009fc0:	2a1f      	cmp	r2, #31
 8009fc2:	dd1f      	ble.n	800a004 <_strtod_l+0x594>
 8009fc4:	2400      	movs	r4, #0
 8009fc6:	4625      	mov	r5, r4
 8009fc8:	9407      	str	r4, [sp, #28]
 8009fca:	4626      	mov	r6, r4
 8009fcc:	9a05      	ldr	r2, [sp, #20]
 8009fce:	2322      	movs	r3, #34	@ 0x22
 8009fd0:	f04f 0a00 	mov.w	sl, #0
 8009fd4:	f04f 0b00 	mov.w	fp, #0
 8009fd8:	6013      	str	r3, [r2, #0]
 8009fda:	e76a      	b.n	8009eb2 <_strtod_l+0x442>
 8009fdc:	0800c737 	.word	0x0800c737
 8009fe0:	0800c894 	.word	0x0800c894
 8009fe4:	0800c72e 	.word	0x0800c72e
 8009fe8:	0800c731 	.word	0x0800c731
 8009fec:	0800c85e 	.word	0x0800c85e
 8009ff0:	0800c920 	.word	0x0800c920
 8009ff4:	0800c8f8 	.word	0x0800c8f8
 8009ff8:	7ca00000 	.word	0x7ca00000
 8009ffc:	7ff00000 	.word	0x7ff00000
 800a000:	7fefffff 	.word	0x7fefffff
 800a004:	f012 0110 	ands.w	r1, r2, #16
 800a008:	bf18      	it	ne
 800a00a:	216a      	movne	r1, #106	@ 0x6a
 800a00c:	9106      	str	r1, [sp, #24]
 800a00e:	ec4b ab17 	vmov	d7, sl, fp
 800a012:	49af      	ldr	r1, [pc, #700]	@ (800a2d0 <_strtod_l+0x860>)
 800a014:	2000      	movs	r0, #0
 800a016:	07d6      	lsls	r6, r2, #31
 800a018:	d504      	bpl.n	800a024 <_strtod_l+0x5b4>
 800a01a:	ed91 6b00 	vldr	d6, [r1]
 800a01e:	2001      	movs	r0, #1
 800a020:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a024:	1052      	asrs	r2, r2, #1
 800a026:	f101 0108 	add.w	r1, r1, #8
 800a02a:	d1f4      	bne.n	800a016 <_strtod_l+0x5a6>
 800a02c:	b108      	cbz	r0, 800a032 <_strtod_l+0x5c2>
 800a02e:	ec5b ab17 	vmov	sl, fp, d7
 800a032:	9a06      	ldr	r2, [sp, #24]
 800a034:	b1b2      	cbz	r2, 800a064 <_strtod_l+0x5f4>
 800a036:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800a03a:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800a03e:	2a00      	cmp	r2, #0
 800a040:	4658      	mov	r0, fp
 800a042:	dd0f      	ble.n	800a064 <_strtod_l+0x5f4>
 800a044:	2a1f      	cmp	r2, #31
 800a046:	dd55      	ble.n	800a0f4 <_strtod_l+0x684>
 800a048:	2a34      	cmp	r2, #52	@ 0x34
 800a04a:	bfde      	ittt	le
 800a04c:	f04f 32ff 	movle.w	r2, #4294967295
 800a050:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800a054:	408a      	lslle	r2, r1
 800a056:	f04f 0a00 	mov.w	sl, #0
 800a05a:	bfcc      	ite	gt
 800a05c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a060:	ea02 0b00 	andle.w	fp, r2, r0
 800a064:	ec4b ab17 	vmov	d7, sl, fp
 800a068:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a070:	d0a8      	beq.n	8009fc4 <_strtod_l+0x554>
 800a072:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a074:	9805      	ldr	r0, [sp, #20]
 800a076:	f8cd 9000 	str.w	r9, [sp]
 800a07a:	462a      	mov	r2, r5
 800a07c:	f001 f934 	bl	800b2e8 <__s2b>
 800a080:	9007      	str	r0, [sp, #28]
 800a082:	2800      	cmp	r0, #0
 800a084:	f43f af0a 	beq.w	8009e9c <_strtod_l+0x42c>
 800a088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a08a:	1b3f      	subs	r7, r7, r4
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	bfb4      	ite	lt
 800a090:	463b      	movlt	r3, r7
 800a092:	2300      	movge	r3, #0
 800a094:	930a      	str	r3, [sp, #40]	@ 0x28
 800a096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a098:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800a2c0 <_strtod_l+0x850>
 800a09c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a0a0:	2400      	movs	r4, #0
 800a0a2:	930d      	str	r3, [sp, #52]	@ 0x34
 800a0a4:	4625      	mov	r5, r4
 800a0a6:	9b07      	ldr	r3, [sp, #28]
 800a0a8:	9805      	ldr	r0, [sp, #20]
 800a0aa:	6859      	ldr	r1, [r3, #4]
 800a0ac:	f001 f874 	bl	800b198 <_Balloc>
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	f43f aef6 	beq.w	8009ea4 <_strtod_l+0x434>
 800a0b8:	9b07      	ldr	r3, [sp, #28]
 800a0ba:	691a      	ldr	r2, [r3, #16]
 800a0bc:	ec4b ab19 	vmov	d9, sl, fp
 800a0c0:	3202      	adds	r2, #2
 800a0c2:	f103 010c 	add.w	r1, r3, #12
 800a0c6:	0092      	lsls	r2, r2, #2
 800a0c8:	300c      	adds	r0, #12
 800a0ca:	f000 fc0a 	bl	800a8e2 <memcpy>
 800a0ce:	eeb0 0b49 	vmov.f64	d0, d9
 800a0d2:	9805      	ldr	r0, [sp, #20]
 800a0d4:	aa14      	add	r2, sp, #80	@ 0x50
 800a0d6:	a913      	add	r1, sp, #76	@ 0x4c
 800a0d8:	f001 fc3a 	bl	800b950 <__d2b>
 800a0dc:	9012      	str	r0, [sp, #72]	@ 0x48
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	f43f aee0 	beq.w	8009ea4 <_strtod_l+0x434>
 800a0e4:	9805      	ldr	r0, [sp, #20]
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	f001 f994 	bl	800b414 <__i2b>
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	b940      	cbnz	r0, 800a102 <_strtod_l+0x692>
 800a0f0:	2500      	movs	r5, #0
 800a0f2:	e6d7      	b.n	8009ea4 <_strtod_l+0x434>
 800a0f4:	f04f 31ff 	mov.w	r1, #4294967295
 800a0f8:	fa01 f202 	lsl.w	r2, r1, r2
 800a0fc:	ea02 0a0a 	and.w	sl, r2, sl
 800a100:	e7b0      	b.n	800a064 <_strtod_l+0x5f4>
 800a102:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800a104:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a106:	2f00      	cmp	r7, #0
 800a108:	bfab      	itete	ge
 800a10a:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800a10c:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800a10e:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800a112:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800a116:	bfac      	ite	ge
 800a118:	eb07 0903 	addge.w	r9, r7, r3
 800a11c:	eba3 0807 	sublt.w	r8, r3, r7
 800a120:	9b06      	ldr	r3, [sp, #24]
 800a122:	1aff      	subs	r7, r7, r3
 800a124:	4417      	add	r7, r2
 800a126:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800a12a:	4a6a      	ldr	r2, [pc, #424]	@ (800a2d4 <_strtod_l+0x864>)
 800a12c:	3f01      	subs	r7, #1
 800a12e:	4297      	cmp	r7, r2
 800a130:	da51      	bge.n	800a1d6 <_strtod_l+0x766>
 800a132:	1bd1      	subs	r1, r2, r7
 800a134:	291f      	cmp	r1, #31
 800a136:	eba3 0301 	sub.w	r3, r3, r1
 800a13a:	f04f 0201 	mov.w	r2, #1
 800a13e:	dc3e      	bgt.n	800a1be <_strtod_l+0x74e>
 800a140:	408a      	lsls	r2, r1
 800a142:	920c      	str	r2, [sp, #48]	@ 0x30
 800a144:	2200      	movs	r2, #0
 800a146:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a148:	eb09 0703 	add.w	r7, r9, r3
 800a14c:	4498      	add	r8, r3
 800a14e:	9b06      	ldr	r3, [sp, #24]
 800a150:	45b9      	cmp	r9, r7
 800a152:	4498      	add	r8, r3
 800a154:	464b      	mov	r3, r9
 800a156:	bfa8      	it	ge
 800a158:	463b      	movge	r3, r7
 800a15a:	4543      	cmp	r3, r8
 800a15c:	bfa8      	it	ge
 800a15e:	4643      	movge	r3, r8
 800a160:	2b00      	cmp	r3, #0
 800a162:	bfc2      	ittt	gt
 800a164:	1aff      	subgt	r7, r7, r3
 800a166:	eba8 0803 	subgt.w	r8, r8, r3
 800a16a:	eba9 0903 	subgt.w	r9, r9, r3
 800a16e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a170:	2b00      	cmp	r3, #0
 800a172:	dd16      	ble.n	800a1a2 <_strtod_l+0x732>
 800a174:	4629      	mov	r1, r5
 800a176:	9805      	ldr	r0, [sp, #20]
 800a178:	461a      	mov	r2, r3
 800a17a:	f001 fa03 	bl	800b584 <__pow5mult>
 800a17e:	4605      	mov	r5, r0
 800a180:	2800      	cmp	r0, #0
 800a182:	d0b5      	beq.n	800a0f0 <_strtod_l+0x680>
 800a184:	4601      	mov	r1, r0
 800a186:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a188:	9805      	ldr	r0, [sp, #20]
 800a18a:	f001 f959 	bl	800b440 <__multiply>
 800a18e:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a190:	2800      	cmp	r0, #0
 800a192:	f43f ae87 	beq.w	8009ea4 <_strtod_l+0x434>
 800a196:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a198:	9805      	ldr	r0, [sp, #20]
 800a19a:	f001 f83d 	bl	800b218 <_Bfree>
 800a19e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1a0:	9312      	str	r3, [sp, #72]	@ 0x48
 800a1a2:	2f00      	cmp	r7, #0
 800a1a4:	dc1b      	bgt.n	800a1de <_strtod_l+0x76e>
 800a1a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	dd21      	ble.n	800a1f0 <_strtod_l+0x780>
 800a1ac:	4631      	mov	r1, r6
 800a1ae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a1b0:	9805      	ldr	r0, [sp, #20]
 800a1b2:	f001 f9e7 	bl	800b584 <__pow5mult>
 800a1b6:	4606      	mov	r6, r0
 800a1b8:	b9d0      	cbnz	r0, 800a1f0 <_strtod_l+0x780>
 800a1ba:	2600      	movs	r6, #0
 800a1bc:	e672      	b.n	8009ea4 <_strtod_l+0x434>
 800a1be:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800a1c2:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800a1c6:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800a1ca:	37e2      	adds	r7, #226	@ 0xe2
 800a1cc:	fa02 f107 	lsl.w	r1, r2, r7
 800a1d0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a1d2:	920c      	str	r2, [sp, #48]	@ 0x30
 800a1d4:	e7b8      	b.n	800a148 <_strtod_l+0x6d8>
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a1da:	2201      	movs	r2, #1
 800a1dc:	e7f9      	b.n	800a1d2 <_strtod_l+0x762>
 800a1de:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a1e0:	9805      	ldr	r0, [sp, #20]
 800a1e2:	463a      	mov	r2, r7
 800a1e4:	f001 fa28 	bl	800b638 <__lshift>
 800a1e8:	9012      	str	r0, [sp, #72]	@ 0x48
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d1db      	bne.n	800a1a6 <_strtod_l+0x736>
 800a1ee:	e659      	b.n	8009ea4 <_strtod_l+0x434>
 800a1f0:	f1b8 0f00 	cmp.w	r8, #0
 800a1f4:	dd07      	ble.n	800a206 <_strtod_l+0x796>
 800a1f6:	4631      	mov	r1, r6
 800a1f8:	9805      	ldr	r0, [sp, #20]
 800a1fa:	4642      	mov	r2, r8
 800a1fc:	f001 fa1c 	bl	800b638 <__lshift>
 800a200:	4606      	mov	r6, r0
 800a202:	2800      	cmp	r0, #0
 800a204:	d0d9      	beq.n	800a1ba <_strtod_l+0x74a>
 800a206:	f1b9 0f00 	cmp.w	r9, #0
 800a20a:	dd08      	ble.n	800a21e <_strtod_l+0x7ae>
 800a20c:	4629      	mov	r1, r5
 800a20e:	9805      	ldr	r0, [sp, #20]
 800a210:	464a      	mov	r2, r9
 800a212:	f001 fa11 	bl	800b638 <__lshift>
 800a216:	4605      	mov	r5, r0
 800a218:	2800      	cmp	r0, #0
 800a21a:	f43f ae43 	beq.w	8009ea4 <_strtod_l+0x434>
 800a21e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a220:	9805      	ldr	r0, [sp, #20]
 800a222:	4632      	mov	r2, r6
 800a224:	f001 fa90 	bl	800b748 <__mdiff>
 800a228:	4604      	mov	r4, r0
 800a22a:	2800      	cmp	r0, #0
 800a22c:	f43f ae3a 	beq.w	8009ea4 <_strtod_l+0x434>
 800a230:	2300      	movs	r3, #0
 800a232:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800a236:	60c3      	str	r3, [r0, #12]
 800a238:	4629      	mov	r1, r5
 800a23a:	f001 fa69 	bl	800b710 <__mcmp>
 800a23e:	2800      	cmp	r0, #0
 800a240:	da4c      	bge.n	800a2dc <_strtod_l+0x86c>
 800a242:	ea58 080a 	orrs.w	r8, r8, sl
 800a246:	d172      	bne.n	800a32e <_strtod_l+0x8be>
 800a248:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d16e      	bne.n	800a32e <_strtod_l+0x8be>
 800a250:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a254:	0d1b      	lsrs	r3, r3, #20
 800a256:	051b      	lsls	r3, r3, #20
 800a258:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a25c:	d967      	bls.n	800a32e <_strtod_l+0x8be>
 800a25e:	6963      	ldr	r3, [r4, #20]
 800a260:	b913      	cbnz	r3, 800a268 <_strtod_l+0x7f8>
 800a262:	6923      	ldr	r3, [r4, #16]
 800a264:	2b01      	cmp	r3, #1
 800a266:	dd62      	ble.n	800a32e <_strtod_l+0x8be>
 800a268:	4621      	mov	r1, r4
 800a26a:	2201      	movs	r2, #1
 800a26c:	9805      	ldr	r0, [sp, #20]
 800a26e:	f001 f9e3 	bl	800b638 <__lshift>
 800a272:	4629      	mov	r1, r5
 800a274:	4604      	mov	r4, r0
 800a276:	f001 fa4b 	bl	800b710 <__mcmp>
 800a27a:	2800      	cmp	r0, #0
 800a27c:	dd57      	ble.n	800a32e <_strtod_l+0x8be>
 800a27e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a282:	9a06      	ldr	r2, [sp, #24]
 800a284:	0d1b      	lsrs	r3, r3, #20
 800a286:	051b      	lsls	r3, r3, #20
 800a288:	2a00      	cmp	r2, #0
 800a28a:	d06e      	beq.n	800a36a <_strtod_l+0x8fa>
 800a28c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a290:	d86b      	bhi.n	800a36a <_strtod_l+0x8fa>
 800a292:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a296:	f67f ae99 	bls.w	8009fcc <_strtod_l+0x55c>
 800a29a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800a2c8 <_strtod_l+0x858>
 800a29e:	ec4b ab16 	vmov	d6, sl, fp
 800a2a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d8 <_strtod_l+0x868>)
 800a2a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a2a8:	ee17 2a90 	vmov	r2, s15
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	ec5b ab17 	vmov	sl, fp, d7
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f47f ae01 	bne.w	8009eba <_strtod_l+0x44a>
 800a2b8:	9a05      	ldr	r2, [sp, #20]
 800a2ba:	2322      	movs	r3, #34	@ 0x22
 800a2bc:	6013      	str	r3, [r2, #0]
 800a2be:	e5fc      	b.n	8009eba <_strtod_l+0x44a>
 800a2c0:	ffc00000 	.word	0xffc00000
 800a2c4:	41dfffff 	.word	0x41dfffff
 800a2c8:	00000000 	.word	0x00000000
 800a2cc:	39500000 	.word	0x39500000
 800a2d0:	0800c8c0 	.word	0x0800c8c0
 800a2d4:	fffffc02 	.word	0xfffffc02
 800a2d8:	7ff00000 	.word	0x7ff00000
 800a2dc:	46d9      	mov	r9, fp
 800a2de:	d15d      	bne.n	800a39c <_strtod_l+0x92c>
 800a2e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2e4:	f1b8 0f00 	cmp.w	r8, #0
 800a2e8:	d02a      	beq.n	800a340 <_strtod_l+0x8d0>
 800a2ea:	4aa9      	ldr	r2, [pc, #676]	@ (800a590 <_strtod_l+0xb20>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d12a      	bne.n	800a346 <_strtod_l+0x8d6>
 800a2f0:	9b06      	ldr	r3, [sp, #24]
 800a2f2:	4652      	mov	r2, sl
 800a2f4:	b1fb      	cbz	r3, 800a336 <_strtod_l+0x8c6>
 800a2f6:	4ba7      	ldr	r3, [pc, #668]	@ (800a594 <_strtod_l+0xb24>)
 800a2f8:	ea0b 0303 	and.w	r3, fp, r3
 800a2fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a300:	f04f 31ff 	mov.w	r1, #4294967295
 800a304:	d81a      	bhi.n	800a33c <_strtod_l+0x8cc>
 800a306:	0d1b      	lsrs	r3, r3, #20
 800a308:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a30c:	fa01 f303 	lsl.w	r3, r1, r3
 800a310:	429a      	cmp	r2, r3
 800a312:	d118      	bne.n	800a346 <_strtod_l+0x8d6>
 800a314:	4ba0      	ldr	r3, [pc, #640]	@ (800a598 <_strtod_l+0xb28>)
 800a316:	4599      	cmp	r9, r3
 800a318:	d102      	bne.n	800a320 <_strtod_l+0x8b0>
 800a31a:	3201      	adds	r2, #1
 800a31c:	f43f adc2 	beq.w	8009ea4 <_strtod_l+0x434>
 800a320:	4b9c      	ldr	r3, [pc, #624]	@ (800a594 <_strtod_l+0xb24>)
 800a322:	ea09 0303 	and.w	r3, r9, r3
 800a326:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800a32a:	f04f 0a00 	mov.w	sl, #0
 800a32e:	9b06      	ldr	r3, [sp, #24]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1b2      	bne.n	800a29a <_strtod_l+0x82a>
 800a334:	e5c1      	b.n	8009eba <_strtod_l+0x44a>
 800a336:	f04f 33ff 	mov.w	r3, #4294967295
 800a33a:	e7e9      	b.n	800a310 <_strtod_l+0x8a0>
 800a33c:	460b      	mov	r3, r1
 800a33e:	e7e7      	b.n	800a310 <_strtod_l+0x8a0>
 800a340:	ea53 030a 	orrs.w	r3, r3, sl
 800a344:	d09b      	beq.n	800a27e <_strtod_l+0x80e>
 800a346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a348:	b1c3      	cbz	r3, 800a37c <_strtod_l+0x90c>
 800a34a:	ea13 0f09 	tst.w	r3, r9
 800a34e:	d0ee      	beq.n	800a32e <_strtod_l+0x8be>
 800a350:	9a06      	ldr	r2, [sp, #24]
 800a352:	4650      	mov	r0, sl
 800a354:	4659      	mov	r1, fp
 800a356:	f1b8 0f00 	cmp.w	r8, #0
 800a35a:	d013      	beq.n	800a384 <_strtod_l+0x914>
 800a35c:	f7ff fb6d 	bl	8009a3a <sulp>
 800a360:	ee39 7b00 	vadd.f64	d7, d9, d0
 800a364:	ec5b ab17 	vmov	sl, fp, d7
 800a368:	e7e1      	b.n	800a32e <_strtod_l+0x8be>
 800a36a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a36e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a372:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a376:	f04f 3aff 	mov.w	sl, #4294967295
 800a37a:	e7d8      	b.n	800a32e <_strtod_l+0x8be>
 800a37c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a37e:	ea13 0f0a 	tst.w	r3, sl
 800a382:	e7e4      	b.n	800a34e <_strtod_l+0x8de>
 800a384:	f7ff fb59 	bl	8009a3a <sulp>
 800a388:	ee39 0b40 	vsub.f64	d0, d9, d0
 800a38c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a394:	ec5b ab10 	vmov	sl, fp, d0
 800a398:	d1c9      	bne.n	800a32e <_strtod_l+0x8be>
 800a39a:	e617      	b.n	8009fcc <_strtod_l+0x55c>
 800a39c:	4629      	mov	r1, r5
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f001 fb2e 	bl	800ba00 <__ratio>
 800a3a4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800a3a8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3b0:	d85d      	bhi.n	800a46e <_strtod_l+0x9fe>
 800a3b2:	f1b8 0f00 	cmp.w	r8, #0
 800a3b6:	d164      	bne.n	800a482 <_strtod_l+0xa12>
 800a3b8:	f1ba 0f00 	cmp.w	sl, #0
 800a3bc:	d14b      	bne.n	800a456 <_strtod_l+0x9e6>
 800a3be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3c2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d160      	bne.n	800a48c <_strtod_l+0xa1c>
 800a3ca:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800a3ce:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800a3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3d6:	d401      	bmi.n	800a3dc <_strtod_l+0x96c>
 800a3d8:	ee20 8b08 	vmul.f64	d8, d0, d8
 800a3dc:	eeb1 ab48 	vneg.f64	d10, d8
 800a3e0:	486c      	ldr	r0, [pc, #432]	@ (800a594 <_strtod_l+0xb24>)
 800a3e2:	496e      	ldr	r1, [pc, #440]	@ (800a59c <_strtod_l+0xb2c>)
 800a3e4:	ea09 0700 	and.w	r7, r9, r0
 800a3e8:	428f      	cmp	r7, r1
 800a3ea:	ec53 2b1a 	vmov	r2, r3, d10
 800a3ee:	d17d      	bne.n	800a4ec <_strtod_l+0xa7c>
 800a3f0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800a3f4:	ec4b ab1c 	vmov	d12, sl, fp
 800a3f8:	eeb0 0b4c 	vmov.f64	d0, d12
 800a3fc:	f001 fa38 	bl	800b870 <__ulp>
 800a400:	4864      	ldr	r0, [pc, #400]	@ (800a594 <_strtod_l+0xb24>)
 800a402:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800a406:	ee1c 3a90 	vmov	r3, s25
 800a40a:	4a65      	ldr	r2, [pc, #404]	@ (800a5a0 <_strtod_l+0xb30>)
 800a40c:	ea03 0100 	and.w	r1, r3, r0
 800a410:	4291      	cmp	r1, r2
 800a412:	ec5b ab1c 	vmov	sl, fp, d12
 800a416:	d93c      	bls.n	800a492 <_strtod_l+0xa22>
 800a418:	ee19 2a90 	vmov	r2, s19
 800a41c:	4b5e      	ldr	r3, [pc, #376]	@ (800a598 <_strtod_l+0xb28>)
 800a41e:	429a      	cmp	r2, r3
 800a420:	d104      	bne.n	800a42c <_strtod_l+0x9bc>
 800a422:	ee19 3a10 	vmov	r3, s18
 800a426:	3301      	adds	r3, #1
 800a428:	f43f ad3c 	beq.w	8009ea4 <_strtod_l+0x434>
 800a42c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800a598 <_strtod_l+0xb28>
 800a430:	f04f 3aff 	mov.w	sl, #4294967295
 800a434:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a436:	9805      	ldr	r0, [sp, #20]
 800a438:	f000 feee 	bl	800b218 <_Bfree>
 800a43c:	9805      	ldr	r0, [sp, #20]
 800a43e:	4631      	mov	r1, r6
 800a440:	f000 feea 	bl	800b218 <_Bfree>
 800a444:	9805      	ldr	r0, [sp, #20]
 800a446:	4629      	mov	r1, r5
 800a448:	f000 fee6 	bl	800b218 <_Bfree>
 800a44c:	9805      	ldr	r0, [sp, #20]
 800a44e:	4621      	mov	r1, r4
 800a450:	f000 fee2 	bl	800b218 <_Bfree>
 800a454:	e627      	b.n	800a0a6 <_strtod_l+0x636>
 800a456:	f1ba 0f01 	cmp.w	sl, #1
 800a45a:	d103      	bne.n	800a464 <_strtod_l+0x9f4>
 800a45c:	f1bb 0f00 	cmp.w	fp, #0
 800a460:	f43f adb4 	beq.w	8009fcc <_strtod_l+0x55c>
 800a464:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800a468:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800a46c:	e7b8      	b.n	800a3e0 <_strtod_l+0x970>
 800a46e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800a472:	ee20 8b08 	vmul.f64	d8, d0, d8
 800a476:	f1b8 0f00 	cmp.w	r8, #0
 800a47a:	d0af      	beq.n	800a3dc <_strtod_l+0x96c>
 800a47c:	eeb0 ab48 	vmov.f64	d10, d8
 800a480:	e7ae      	b.n	800a3e0 <_strtod_l+0x970>
 800a482:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800a486:	eeb0 8b4a 	vmov.f64	d8, d10
 800a48a:	e7a9      	b.n	800a3e0 <_strtod_l+0x970>
 800a48c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800a490:	e7a6      	b.n	800a3e0 <_strtod_l+0x970>
 800a492:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a496:	9b06      	ldr	r3, [sp, #24]
 800a498:	46d9      	mov	r9, fp
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1ca      	bne.n	800a434 <_strtod_l+0x9c4>
 800a49e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a4a2:	0d1b      	lsrs	r3, r3, #20
 800a4a4:	051b      	lsls	r3, r3, #20
 800a4a6:	429f      	cmp	r7, r3
 800a4a8:	d1c4      	bne.n	800a434 <_strtod_l+0x9c4>
 800a4aa:	ec51 0b18 	vmov	r0, r1, d8
 800a4ae:	f7f6 f963 	bl	8000778 <__aeabi_d2lz>
 800a4b2:	f7f6 f91b 	bl	80006ec <__aeabi_l2d>
 800a4b6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800a4ba:	ec41 0b17 	vmov	d7, r0, r1
 800a4be:	ea49 090a 	orr.w	r9, r9, sl
 800a4c2:	ea59 0908 	orrs.w	r9, r9, r8
 800a4c6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800a4ca:	d03c      	beq.n	800a546 <_strtod_l+0xad6>
 800a4cc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800a578 <_strtod_l+0xb08>
 800a4d0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4d8:	f53f acef 	bmi.w	8009eba <_strtod_l+0x44a>
 800a4dc:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800a580 <_strtod_l+0xb10>
 800a4e0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4e8:	dda4      	ble.n	800a434 <_strtod_l+0x9c4>
 800a4ea:	e4e6      	b.n	8009eba <_strtod_l+0x44a>
 800a4ec:	9906      	ldr	r1, [sp, #24]
 800a4ee:	b1e1      	cbz	r1, 800a52a <_strtod_l+0xaba>
 800a4f0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800a4f4:	d819      	bhi.n	800a52a <_strtod_l+0xaba>
 800a4f6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800a4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4fe:	d811      	bhi.n	800a524 <_strtod_l+0xab4>
 800a500:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800a504:	ee18 3a10 	vmov	r3, s16
 800a508:	2b01      	cmp	r3, #1
 800a50a:	bf38      	it	cc
 800a50c:	2301      	movcc	r3, #1
 800a50e:	ee08 3a10 	vmov	s16, r3
 800a512:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800a516:	f1b8 0f00 	cmp.w	r8, #0
 800a51a:	d111      	bne.n	800a540 <_strtod_l+0xad0>
 800a51c:	eeb1 7b48 	vneg.f64	d7, d8
 800a520:	ec53 2b17 	vmov	r2, r3, d7
 800a524:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800a528:	1bcb      	subs	r3, r1, r7
 800a52a:	eeb0 0b49 	vmov.f64	d0, d9
 800a52e:	ec43 2b1a 	vmov	d10, r2, r3
 800a532:	f001 f99d 	bl	800b870 <__ulp>
 800a536:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800a53a:	ec5b ab19 	vmov	sl, fp, d9
 800a53e:	e7aa      	b.n	800a496 <_strtod_l+0xa26>
 800a540:	eeb0 7b48 	vmov.f64	d7, d8
 800a544:	e7ec      	b.n	800a520 <_strtod_l+0xab0>
 800a546:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800a588 <_strtod_l+0xb18>
 800a54a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a552:	f57f af6f 	bpl.w	800a434 <_strtod_l+0x9c4>
 800a556:	e4b0      	b.n	8009eba <_strtod_l+0x44a>
 800a558:	2300      	movs	r3, #0
 800a55a:	9308      	str	r3, [sp, #32]
 800a55c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a55e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a560:	6013      	str	r3, [r2, #0]
 800a562:	f7ff bac4 	b.w	8009aee <_strtod_l+0x7e>
 800a566:	2a65      	cmp	r2, #101	@ 0x65
 800a568:	f43f abbf 	beq.w	8009cea <_strtod_l+0x27a>
 800a56c:	2a45      	cmp	r2, #69	@ 0x45
 800a56e:	f43f abbc 	beq.w	8009cea <_strtod_l+0x27a>
 800a572:	2101      	movs	r1, #1
 800a574:	f7ff bbf4 	b.w	8009d60 <_strtod_l+0x2f0>
 800a578:	94a03595 	.word	0x94a03595
 800a57c:	3fdfffff 	.word	0x3fdfffff
 800a580:	35afe535 	.word	0x35afe535
 800a584:	3fe00000 	.word	0x3fe00000
 800a588:	94a03595 	.word	0x94a03595
 800a58c:	3fcfffff 	.word	0x3fcfffff
 800a590:	000fffff 	.word	0x000fffff
 800a594:	7ff00000 	.word	0x7ff00000
 800a598:	7fefffff 	.word	0x7fefffff
 800a59c:	7fe00000 	.word	0x7fe00000
 800a5a0:	7c9fffff 	.word	0x7c9fffff

0800a5a4 <strtod>:
 800a5a4:	460a      	mov	r2, r1
 800a5a6:	4601      	mov	r1, r0
 800a5a8:	4802      	ldr	r0, [pc, #8]	@ (800a5b4 <strtod+0x10>)
 800a5aa:	4b03      	ldr	r3, [pc, #12]	@ (800a5b8 <strtod+0x14>)
 800a5ac:	6800      	ldr	r0, [r0, #0]
 800a5ae:	f7ff ba5f 	b.w	8009a70 <_strtod_l>
 800a5b2:	bf00      	nop
 800a5b4:	240001a0 	.word	0x240001a0
 800a5b8:	24000034 	.word	0x24000034

0800a5bc <std>:
 800a5bc:	2300      	movs	r3, #0
 800a5be:	b510      	push	{r4, lr}
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	e9c0 3300 	strd	r3, r3, [r0]
 800a5c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5ca:	6083      	str	r3, [r0, #8]
 800a5cc:	8181      	strh	r1, [r0, #12]
 800a5ce:	6643      	str	r3, [r0, #100]	@ 0x64
 800a5d0:	81c2      	strh	r2, [r0, #14]
 800a5d2:	6183      	str	r3, [r0, #24]
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	2208      	movs	r2, #8
 800a5d8:	305c      	adds	r0, #92	@ 0x5c
 800a5da:	f000 f8f4 	bl	800a7c6 <memset>
 800a5de:	4b0d      	ldr	r3, [pc, #52]	@ (800a614 <std+0x58>)
 800a5e0:	6263      	str	r3, [r4, #36]	@ 0x24
 800a5e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a618 <std+0x5c>)
 800a5e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a5e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a61c <std+0x60>)
 800a5e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a5ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a620 <std+0x64>)
 800a5ec:	6323      	str	r3, [r4, #48]	@ 0x30
 800a5ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a624 <std+0x68>)
 800a5f0:	6224      	str	r4, [r4, #32]
 800a5f2:	429c      	cmp	r4, r3
 800a5f4:	d006      	beq.n	800a604 <std+0x48>
 800a5f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a5fa:	4294      	cmp	r4, r2
 800a5fc:	d002      	beq.n	800a604 <std+0x48>
 800a5fe:	33d0      	adds	r3, #208	@ 0xd0
 800a600:	429c      	cmp	r4, r3
 800a602:	d105      	bne.n	800a610 <std+0x54>
 800a604:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a60c:	f000 b966 	b.w	800a8dc <__retarget_lock_init_recursive>
 800a610:	bd10      	pop	{r4, pc}
 800a612:	bf00      	nop
 800a614:	0800a741 	.word	0x0800a741
 800a618:	0800a763 	.word	0x0800a763
 800a61c:	0800a79b 	.word	0x0800a79b
 800a620:	0800a7bf 	.word	0x0800a7bf
 800a624:	2400044c 	.word	0x2400044c

0800a628 <stdio_exit_handler>:
 800a628:	4a02      	ldr	r2, [pc, #8]	@ (800a634 <stdio_exit_handler+0xc>)
 800a62a:	4903      	ldr	r1, [pc, #12]	@ (800a638 <stdio_exit_handler+0x10>)
 800a62c:	4803      	ldr	r0, [pc, #12]	@ (800a63c <stdio_exit_handler+0x14>)
 800a62e:	f000 b869 	b.w	800a704 <_fwalk_sglue>
 800a632:	bf00      	nop
 800a634:	24000028 	.word	0x24000028
 800a638:	0800bc09 	.word	0x0800bc09
 800a63c:	240001a4 	.word	0x240001a4

0800a640 <cleanup_stdio>:
 800a640:	6841      	ldr	r1, [r0, #4]
 800a642:	4b0c      	ldr	r3, [pc, #48]	@ (800a674 <cleanup_stdio+0x34>)
 800a644:	4299      	cmp	r1, r3
 800a646:	b510      	push	{r4, lr}
 800a648:	4604      	mov	r4, r0
 800a64a:	d001      	beq.n	800a650 <cleanup_stdio+0x10>
 800a64c:	f001 fadc 	bl	800bc08 <_fflush_r>
 800a650:	68a1      	ldr	r1, [r4, #8]
 800a652:	4b09      	ldr	r3, [pc, #36]	@ (800a678 <cleanup_stdio+0x38>)
 800a654:	4299      	cmp	r1, r3
 800a656:	d002      	beq.n	800a65e <cleanup_stdio+0x1e>
 800a658:	4620      	mov	r0, r4
 800a65a:	f001 fad5 	bl	800bc08 <_fflush_r>
 800a65e:	68e1      	ldr	r1, [r4, #12]
 800a660:	4b06      	ldr	r3, [pc, #24]	@ (800a67c <cleanup_stdio+0x3c>)
 800a662:	4299      	cmp	r1, r3
 800a664:	d004      	beq.n	800a670 <cleanup_stdio+0x30>
 800a666:	4620      	mov	r0, r4
 800a668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a66c:	f001 bacc 	b.w	800bc08 <_fflush_r>
 800a670:	bd10      	pop	{r4, pc}
 800a672:	bf00      	nop
 800a674:	2400044c 	.word	0x2400044c
 800a678:	240004b4 	.word	0x240004b4
 800a67c:	2400051c 	.word	0x2400051c

0800a680 <global_stdio_init.part.0>:
 800a680:	b510      	push	{r4, lr}
 800a682:	4b0b      	ldr	r3, [pc, #44]	@ (800a6b0 <global_stdio_init.part.0+0x30>)
 800a684:	4c0b      	ldr	r4, [pc, #44]	@ (800a6b4 <global_stdio_init.part.0+0x34>)
 800a686:	4a0c      	ldr	r2, [pc, #48]	@ (800a6b8 <global_stdio_init.part.0+0x38>)
 800a688:	601a      	str	r2, [r3, #0]
 800a68a:	4620      	mov	r0, r4
 800a68c:	2200      	movs	r2, #0
 800a68e:	2104      	movs	r1, #4
 800a690:	f7ff ff94 	bl	800a5bc <std>
 800a694:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a698:	2201      	movs	r2, #1
 800a69a:	2109      	movs	r1, #9
 800a69c:	f7ff ff8e 	bl	800a5bc <std>
 800a6a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a6a4:	2202      	movs	r2, #2
 800a6a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6aa:	2112      	movs	r1, #18
 800a6ac:	f7ff bf86 	b.w	800a5bc <std>
 800a6b0:	24000584 	.word	0x24000584
 800a6b4:	2400044c 	.word	0x2400044c
 800a6b8:	0800a629 	.word	0x0800a629

0800a6bc <__sfp_lock_acquire>:
 800a6bc:	4801      	ldr	r0, [pc, #4]	@ (800a6c4 <__sfp_lock_acquire+0x8>)
 800a6be:	f000 b90e 	b.w	800a8de <__retarget_lock_acquire_recursive>
 800a6c2:	bf00      	nop
 800a6c4:	2400058d 	.word	0x2400058d

0800a6c8 <__sfp_lock_release>:
 800a6c8:	4801      	ldr	r0, [pc, #4]	@ (800a6d0 <__sfp_lock_release+0x8>)
 800a6ca:	f000 b909 	b.w	800a8e0 <__retarget_lock_release_recursive>
 800a6ce:	bf00      	nop
 800a6d0:	2400058d 	.word	0x2400058d

0800a6d4 <__sinit>:
 800a6d4:	b510      	push	{r4, lr}
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	f7ff fff0 	bl	800a6bc <__sfp_lock_acquire>
 800a6dc:	6a23      	ldr	r3, [r4, #32]
 800a6de:	b11b      	cbz	r3, 800a6e8 <__sinit+0x14>
 800a6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6e4:	f7ff bff0 	b.w	800a6c8 <__sfp_lock_release>
 800a6e8:	4b04      	ldr	r3, [pc, #16]	@ (800a6fc <__sinit+0x28>)
 800a6ea:	6223      	str	r3, [r4, #32]
 800a6ec:	4b04      	ldr	r3, [pc, #16]	@ (800a700 <__sinit+0x2c>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1f5      	bne.n	800a6e0 <__sinit+0xc>
 800a6f4:	f7ff ffc4 	bl	800a680 <global_stdio_init.part.0>
 800a6f8:	e7f2      	b.n	800a6e0 <__sinit+0xc>
 800a6fa:	bf00      	nop
 800a6fc:	0800a641 	.word	0x0800a641
 800a700:	24000584 	.word	0x24000584

0800a704 <_fwalk_sglue>:
 800a704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a708:	4607      	mov	r7, r0
 800a70a:	4688      	mov	r8, r1
 800a70c:	4614      	mov	r4, r2
 800a70e:	2600      	movs	r6, #0
 800a710:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a714:	f1b9 0901 	subs.w	r9, r9, #1
 800a718:	d505      	bpl.n	800a726 <_fwalk_sglue+0x22>
 800a71a:	6824      	ldr	r4, [r4, #0]
 800a71c:	2c00      	cmp	r4, #0
 800a71e:	d1f7      	bne.n	800a710 <_fwalk_sglue+0xc>
 800a720:	4630      	mov	r0, r6
 800a722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a726:	89ab      	ldrh	r3, [r5, #12]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d907      	bls.n	800a73c <_fwalk_sglue+0x38>
 800a72c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a730:	3301      	adds	r3, #1
 800a732:	d003      	beq.n	800a73c <_fwalk_sglue+0x38>
 800a734:	4629      	mov	r1, r5
 800a736:	4638      	mov	r0, r7
 800a738:	47c0      	blx	r8
 800a73a:	4306      	orrs	r6, r0
 800a73c:	3568      	adds	r5, #104	@ 0x68
 800a73e:	e7e9      	b.n	800a714 <_fwalk_sglue+0x10>

0800a740 <__sread>:
 800a740:	b510      	push	{r4, lr}
 800a742:	460c      	mov	r4, r1
 800a744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a748:	f000 f87a 	bl	800a840 <_read_r>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	bfab      	itete	ge
 800a750:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a752:	89a3      	ldrhlt	r3, [r4, #12]
 800a754:	181b      	addge	r3, r3, r0
 800a756:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a75a:	bfac      	ite	ge
 800a75c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a75e:	81a3      	strhlt	r3, [r4, #12]
 800a760:	bd10      	pop	{r4, pc}

0800a762 <__swrite>:
 800a762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a766:	461f      	mov	r7, r3
 800a768:	898b      	ldrh	r3, [r1, #12]
 800a76a:	05db      	lsls	r3, r3, #23
 800a76c:	4605      	mov	r5, r0
 800a76e:	460c      	mov	r4, r1
 800a770:	4616      	mov	r6, r2
 800a772:	d505      	bpl.n	800a780 <__swrite+0x1e>
 800a774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a778:	2302      	movs	r3, #2
 800a77a:	2200      	movs	r2, #0
 800a77c:	f000 f84e 	bl	800a81c <_lseek_r>
 800a780:	89a3      	ldrh	r3, [r4, #12]
 800a782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a786:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a78a:	81a3      	strh	r3, [r4, #12]
 800a78c:	4632      	mov	r2, r6
 800a78e:	463b      	mov	r3, r7
 800a790:	4628      	mov	r0, r5
 800a792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a796:	f000 b865 	b.w	800a864 <_write_r>

0800a79a <__sseek>:
 800a79a:	b510      	push	{r4, lr}
 800a79c:	460c      	mov	r4, r1
 800a79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a2:	f000 f83b 	bl	800a81c <_lseek_r>
 800a7a6:	1c43      	adds	r3, r0, #1
 800a7a8:	89a3      	ldrh	r3, [r4, #12]
 800a7aa:	bf15      	itete	ne
 800a7ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a7ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a7b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a7b6:	81a3      	strheq	r3, [r4, #12]
 800a7b8:	bf18      	it	ne
 800a7ba:	81a3      	strhne	r3, [r4, #12]
 800a7bc:	bd10      	pop	{r4, pc}

0800a7be <__sclose>:
 800a7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c2:	f000 b81b 	b.w	800a7fc <_close_r>

0800a7c6 <memset>:
 800a7c6:	4402      	add	r2, r0
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d100      	bne.n	800a7d0 <memset+0xa>
 800a7ce:	4770      	bx	lr
 800a7d0:	f803 1b01 	strb.w	r1, [r3], #1
 800a7d4:	e7f9      	b.n	800a7ca <memset+0x4>

0800a7d6 <strncmp>:
 800a7d6:	b510      	push	{r4, lr}
 800a7d8:	b16a      	cbz	r2, 800a7f6 <strncmp+0x20>
 800a7da:	3901      	subs	r1, #1
 800a7dc:	1884      	adds	r4, r0, r2
 800a7de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7e2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d103      	bne.n	800a7f2 <strncmp+0x1c>
 800a7ea:	42a0      	cmp	r0, r4
 800a7ec:	d001      	beq.n	800a7f2 <strncmp+0x1c>
 800a7ee:	2a00      	cmp	r2, #0
 800a7f0:	d1f5      	bne.n	800a7de <strncmp+0x8>
 800a7f2:	1ad0      	subs	r0, r2, r3
 800a7f4:	bd10      	pop	{r4, pc}
 800a7f6:	4610      	mov	r0, r2
 800a7f8:	e7fc      	b.n	800a7f4 <strncmp+0x1e>
	...

0800a7fc <_close_r>:
 800a7fc:	b538      	push	{r3, r4, r5, lr}
 800a7fe:	4d06      	ldr	r5, [pc, #24]	@ (800a818 <_close_r+0x1c>)
 800a800:	2300      	movs	r3, #0
 800a802:	4604      	mov	r4, r0
 800a804:	4608      	mov	r0, r1
 800a806:	602b      	str	r3, [r5, #0]
 800a808:	f7f6 ff58 	bl	80016bc <_close>
 800a80c:	1c43      	adds	r3, r0, #1
 800a80e:	d102      	bne.n	800a816 <_close_r+0x1a>
 800a810:	682b      	ldr	r3, [r5, #0]
 800a812:	b103      	cbz	r3, 800a816 <_close_r+0x1a>
 800a814:	6023      	str	r3, [r4, #0]
 800a816:	bd38      	pop	{r3, r4, r5, pc}
 800a818:	24000588 	.word	0x24000588

0800a81c <_lseek_r>:
 800a81c:	b538      	push	{r3, r4, r5, lr}
 800a81e:	4d07      	ldr	r5, [pc, #28]	@ (800a83c <_lseek_r+0x20>)
 800a820:	4604      	mov	r4, r0
 800a822:	4608      	mov	r0, r1
 800a824:	4611      	mov	r1, r2
 800a826:	2200      	movs	r2, #0
 800a828:	602a      	str	r2, [r5, #0]
 800a82a:	461a      	mov	r2, r3
 800a82c:	f7f6 ff6d 	bl	800170a <_lseek>
 800a830:	1c43      	adds	r3, r0, #1
 800a832:	d102      	bne.n	800a83a <_lseek_r+0x1e>
 800a834:	682b      	ldr	r3, [r5, #0]
 800a836:	b103      	cbz	r3, 800a83a <_lseek_r+0x1e>
 800a838:	6023      	str	r3, [r4, #0]
 800a83a:	bd38      	pop	{r3, r4, r5, pc}
 800a83c:	24000588 	.word	0x24000588

0800a840 <_read_r>:
 800a840:	b538      	push	{r3, r4, r5, lr}
 800a842:	4d07      	ldr	r5, [pc, #28]	@ (800a860 <_read_r+0x20>)
 800a844:	4604      	mov	r4, r0
 800a846:	4608      	mov	r0, r1
 800a848:	4611      	mov	r1, r2
 800a84a:	2200      	movs	r2, #0
 800a84c:	602a      	str	r2, [r5, #0]
 800a84e:	461a      	mov	r2, r3
 800a850:	f7f6 fefb 	bl	800164a <_read>
 800a854:	1c43      	adds	r3, r0, #1
 800a856:	d102      	bne.n	800a85e <_read_r+0x1e>
 800a858:	682b      	ldr	r3, [r5, #0]
 800a85a:	b103      	cbz	r3, 800a85e <_read_r+0x1e>
 800a85c:	6023      	str	r3, [r4, #0]
 800a85e:	bd38      	pop	{r3, r4, r5, pc}
 800a860:	24000588 	.word	0x24000588

0800a864 <_write_r>:
 800a864:	b538      	push	{r3, r4, r5, lr}
 800a866:	4d07      	ldr	r5, [pc, #28]	@ (800a884 <_write_r+0x20>)
 800a868:	4604      	mov	r4, r0
 800a86a:	4608      	mov	r0, r1
 800a86c:	4611      	mov	r1, r2
 800a86e:	2200      	movs	r2, #0
 800a870:	602a      	str	r2, [r5, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	f7f6 ff06 	bl	8001684 <_write>
 800a878:	1c43      	adds	r3, r0, #1
 800a87a:	d102      	bne.n	800a882 <_write_r+0x1e>
 800a87c:	682b      	ldr	r3, [r5, #0]
 800a87e:	b103      	cbz	r3, 800a882 <_write_r+0x1e>
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	bd38      	pop	{r3, r4, r5, pc}
 800a884:	24000588 	.word	0x24000588

0800a888 <__errno>:
 800a888:	4b01      	ldr	r3, [pc, #4]	@ (800a890 <__errno+0x8>)
 800a88a:	6818      	ldr	r0, [r3, #0]
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop
 800a890:	240001a0 	.word	0x240001a0

0800a894 <__libc_init_array>:
 800a894:	b570      	push	{r4, r5, r6, lr}
 800a896:	4d0d      	ldr	r5, [pc, #52]	@ (800a8cc <__libc_init_array+0x38>)
 800a898:	4c0d      	ldr	r4, [pc, #52]	@ (800a8d0 <__libc_init_array+0x3c>)
 800a89a:	1b64      	subs	r4, r4, r5
 800a89c:	10a4      	asrs	r4, r4, #2
 800a89e:	2600      	movs	r6, #0
 800a8a0:	42a6      	cmp	r6, r4
 800a8a2:	d109      	bne.n	800a8b8 <__libc_init_array+0x24>
 800a8a4:	4d0b      	ldr	r5, [pc, #44]	@ (800a8d4 <__libc_init_array+0x40>)
 800a8a6:	4c0c      	ldr	r4, [pc, #48]	@ (800a8d8 <__libc_init_array+0x44>)
 800a8a8:	f001 ff04 	bl	800c6b4 <_init>
 800a8ac:	1b64      	subs	r4, r4, r5
 800a8ae:	10a4      	asrs	r4, r4, #2
 800a8b0:	2600      	movs	r6, #0
 800a8b2:	42a6      	cmp	r6, r4
 800a8b4:	d105      	bne.n	800a8c2 <__libc_init_array+0x2e>
 800a8b6:	bd70      	pop	{r4, r5, r6, pc}
 800a8b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8bc:	4798      	blx	r3
 800a8be:	3601      	adds	r6, #1
 800a8c0:	e7ee      	b.n	800a8a0 <__libc_init_array+0xc>
 800a8c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8c6:	4798      	blx	r3
 800a8c8:	3601      	adds	r6, #1
 800a8ca:	e7f2      	b.n	800a8b2 <__libc_init_array+0x1e>
 800a8cc:	0800cafc 	.word	0x0800cafc
 800a8d0:	0800cafc 	.word	0x0800cafc
 800a8d4:	0800cafc 	.word	0x0800cafc
 800a8d8:	0800cb00 	.word	0x0800cb00

0800a8dc <__retarget_lock_init_recursive>:
 800a8dc:	4770      	bx	lr

0800a8de <__retarget_lock_acquire_recursive>:
 800a8de:	4770      	bx	lr

0800a8e0 <__retarget_lock_release_recursive>:
 800a8e0:	4770      	bx	lr

0800a8e2 <memcpy>:
 800a8e2:	440a      	add	r2, r1
 800a8e4:	4291      	cmp	r1, r2
 800a8e6:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8ea:	d100      	bne.n	800a8ee <memcpy+0xc>
 800a8ec:	4770      	bx	lr
 800a8ee:	b510      	push	{r4, lr}
 800a8f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8f8:	4291      	cmp	r1, r2
 800a8fa:	d1f9      	bne.n	800a8f0 <memcpy+0xe>
 800a8fc:	bd10      	pop	{r4, pc}
	...

0800a900 <nan>:
 800a900:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a908 <nan+0x8>
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	00000000 	.word	0x00000000
 800a90c:	7ff80000 	.word	0x7ff80000

0800a910 <_free_r>:
 800a910:	b538      	push	{r3, r4, r5, lr}
 800a912:	4605      	mov	r5, r0
 800a914:	2900      	cmp	r1, #0
 800a916:	d041      	beq.n	800a99c <_free_r+0x8c>
 800a918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a91c:	1f0c      	subs	r4, r1, #4
 800a91e:	2b00      	cmp	r3, #0
 800a920:	bfb8      	it	lt
 800a922:	18e4      	addlt	r4, r4, r3
 800a924:	f000 fc2c 	bl	800b180 <__malloc_lock>
 800a928:	4a1d      	ldr	r2, [pc, #116]	@ (800a9a0 <_free_r+0x90>)
 800a92a:	6813      	ldr	r3, [r2, #0]
 800a92c:	b933      	cbnz	r3, 800a93c <_free_r+0x2c>
 800a92e:	6063      	str	r3, [r4, #4]
 800a930:	6014      	str	r4, [r2, #0]
 800a932:	4628      	mov	r0, r5
 800a934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a938:	f000 bc28 	b.w	800b18c <__malloc_unlock>
 800a93c:	42a3      	cmp	r3, r4
 800a93e:	d908      	bls.n	800a952 <_free_r+0x42>
 800a940:	6820      	ldr	r0, [r4, #0]
 800a942:	1821      	adds	r1, r4, r0
 800a944:	428b      	cmp	r3, r1
 800a946:	bf01      	itttt	eq
 800a948:	6819      	ldreq	r1, [r3, #0]
 800a94a:	685b      	ldreq	r3, [r3, #4]
 800a94c:	1809      	addeq	r1, r1, r0
 800a94e:	6021      	streq	r1, [r4, #0]
 800a950:	e7ed      	b.n	800a92e <_free_r+0x1e>
 800a952:	461a      	mov	r2, r3
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	b10b      	cbz	r3, 800a95c <_free_r+0x4c>
 800a958:	42a3      	cmp	r3, r4
 800a95a:	d9fa      	bls.n	800a952 <_free_r+0x42>
 800a95c:	6811      	ldr	r1, [r2, #0]
 800a95e:	1850      	adds	r0, r2, r1
 800a960:	42a0      	cmp	r0, r4
 800a962:	d10b      	bne.n	800a97c <_free_r+0x6c>
 800a964:	6820      	ldr	r0, [r4, #0]
 800a966:	4401      	add	r1, r0
 800a968:	1850      	adds	r0, r2, r1
 800a96a:	4283      	cmp	r3, r0
 800a96c:	6011      	str	r1, [r2, #0]
 800a96e:	d1e0      	bne.n	800a932 <_free_r+0x22>
 800a970:	6818      	ldr	r0, [r3, #0]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	6053      	str	r3, [r2, #4]
 800a976:	4408      	add	r0, r1
 800a978:	6010      	str	r0, [r2, #0]
 800a97a:	e7da      	b.n	800a932 <_free_r+0x22>
 800a97c:	d902      	bls.n	800a984 <_free_r+0x74>
 800a97e:	230c      	movs	r3, #12
 800a980:	602b      	str	r3, [r5, #0]
 800a982:	e7d6      	b.n	800a932 <_free_r+0x22>
 800a984:	6820      	ldr	r0, [r4, #0]
 800a986:	1821      	adds	r1, r4, r0
 800a988:	428b      	cmp	r3, r1
 800a98a:	bf04      	itt	eq
 800a98c:	6819      	ldreq	r1, [r3, #0]
 800a98e:	685b      	ldreq	r3, [r3, #4]
 800a990:	6063      	str	r3, [r4, #4]
 800a992:	bf04      	itt	eq
 800a994:	1809      	addeq	r1, r1, r0
 800a996:	6021      	streq	r1, [r4, #0]
 800a998:	6054      	str	r4, [r2, #4]
 800a99a:	e7ca      	b.n	800a932 <_free_r+0x22>
 800a99c:	bd38      	pop	{r3, r4, r5, pc}
 800a99e:	bf00      	nop
 800a9a0:	24000594 	.word	0x24000594

0800a9a4 <rshift>:
 800a9a4:	6903      	ldr	r3, [r0, #16]
 800a9a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a9aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a9b2:	f100 0414 	add.w	r4, r0, #20
 800a9b6:	dd45      	ble.n	800aa44 <rshift+0xa0>
 800a9b8:	f011 011f 	ands.w	r1, r1, #31
 800a9bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a9c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a9c4:	d10c      	bne.n	800a9e0 <rshift+0x3c>
 800a9c6:	f100 0710 	add.w	r7, r0, #16
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	42b1      	cmp	r1, r6
 800a9ce:	d334      	bcc.n	800aa3a <rshift+0x96>
 800a9d0:	1a9b      	subs	r3, r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	1eea      	subs	r2, r5, #3
 800a9d6:	4296      	cmp	r6, r2
 800a9d8:	bf38      	it	cc
 800a9da:	2300      	movcc	r3, #0
 800a9dc:	4423      	add	r3, r4
 800a9de:	e015      	b.n	800aa0c <rshift+0x68>
 800a9e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a9e4:	f1c1 0820 	rsb	r8, r1, #32
 800a9e8:	40cf      	lsrs	r7, r1
 800a9ea:	f105 0e04 	add.w	lr, r5, #4
 800a9ee:	46a1      	mov	r9, r4
 800a9f0:	4576      	cmp	r6, lr
 800a9f2:	46f4      	mov	ip, lr
 800a9f4:	d815      	bhi.n	800aa22 <rshift+0x7e>
 800a9f6:	1a9a      	subs	r2, r3, r2
 800a9f8:	0092      	lsls	r2, r2, #2
 800a9fa:	3a04      	subs	r2, #4
 800a9fc:	3501      	adds	r5, #1
 800a9fe:	42ae      	cmp	r6, r5
 800aa00:	bf38      	it	cc
 800aa02:	2200      	movcc	r2, #0
 800aa04:	18a3      	adds	r3, r4, r2
 800aa06:	50a7      	str	r7, [r4, r2]
 800aa08:	b107      	cbz	r7, 800aa0c <rshift+0x68>
 800aa0a:	3304      	adds	r3, #4
 800aa0c:	1b1a      	subs	r2, r3, r4
 800aa0e:	42a3      	cmp	r3, r4
 800aa10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa14:	bf08      	it	eq
 800aa16:	2300      	moveq	r3, #0
 800aa18:	6102      	str	r2, [r0, #16]
 800aa1a:	bf08      	it	eq
 800aa1c:	6143      	streq	r3, [r0, #20]
 800aa1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa22:	f8dc c000 	ldr.w	ip, [ip]
 800aa26:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa2a:	ea4c 0707 	orr.w	r7, ip, r7
 800aa2e:	f849 7b04 	str.w	r7, [r9], #4
 800aa32:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa36:	40cf      	lsrs	r7, r1
 800aa38:	e7da      	b.n	800a9f0 <rshift+0x4c>
 800aa3a:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa3e:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa42:	e7c3      	b.n	800a9cc <rshift+0x28>
 800aa44:	4623      	mov	r3, r4
 800aa46:	e7e1      	b.n	800aa0c <rshift+0x68>

0800aa48 <__hexdig_fun>:
 800aa48:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aa4c:	2b09      	cmp	r3, #9
 800aa4e:	d802      	bhi.n	800aa56 <__hexdig_fun+0xe>
 800aa50:	3820      	subs	r0, #32
 800aa52:	b2c0      	uxtb	r0, r0
 800aa54:	4770      	bx	lr
 800aa56:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aa5a:	2b05      	cmp	r3, #5
 800aa5c:	d801      	bhi.n	800aa62 <__hexdig_fun+0x1a>
 800aa5e:	3847      	subs	r0, #71	@ 0x47
 800aa60:	e7f7      	b.n	800aa52 <__hexdig_fun+0xa>
 800aa62:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aa66:	2b05      	cmp	r3, #5
 800aa68:	d801      	bhi.n	800aa6e <__hexdig_fun+0x26>
 800aa6a:	3827      	subs	r0, #39	@ 0x27
 800aa6c:	e7f1      	b.n	800aa52 <__hexdig_fun+0xa>
 800aa6e:	2000      	movs	r0, #0
 800aa70:	4770      	bx	lr
	...

0800aa74 <__gethex>:
 800aa74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa78:	b085      	sub	sp, #20
 800aa7a:	468a      	mov	sl, r1
 800aa7c:	9302      	str	r3, [sp, #8]
 800aa7e:	680b      	ldr	r3, [r1, #0]
 800aa80:	9001      	str	r0, [sp, #4]
 800aa82:	4690      	mov	r8, r2
 800aa84:	1c9c      	adds	r4, r3, #2
 800aa86:	46a1      	mov	r9, r4
 800aa88:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aa8c:	2830      	cmp	r0, #48	@ 0x30
 800aa8e:	d0fa      	beq.n	800aa86 <__gethex+0x12>
 800aa90:	eba9 0303 	sub.w	r3, r9, r3
 800aa94:	f1a3 0b02 	sub.w	fp, r3, #2
 800aa98:	f7ff ffd6 	bl	800aa48 <__hexdig_fun>
 800aa9c:	4605      	mov	r5, r0
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	d168      	bne.n	800ab74 <__gethex+0x100>
 800aaa2:	49a0      	ldr	r1, [pc, #640]	@ (800ad24 <__gethex+0x2b0>)
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	4648      	mov	r0, r9
 800aaa8:	f7ff fe95 	bl	800a7d6 <strncmp>
 800aaac:	4607      	mov	r7, r0
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d167      	bne.n	800ab82 <__gethex+0x10e>
 800aab2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aab6:	4626      	mov	r6, r4
 800aab8:	f7ff ffc6 	bl	800aa48 <__hexdig_fun>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d062      	beq.n	800ab86 <__gethex+0x112>
 800aac0:	4623      	mov	r3, r4
 800aac2:	7818      	ldrb	r0, [r3, #0]
 800aac4:	2830      	cmp	r0, #48	@ 0x30
 800aac6:	4699      	mov	r9, r3
 800aac8:	f103 0301 	add.w	r3, r3, #1
 800aacc:	d0f9      	beq.n	800aac2 <__gethex+0x4e>
 800aace:	f7ff ffbb 	bl	800aa48 <__hexdig_fun>
 800aad2:	fab0 f580 	clz	r5, r0
 800aad6:	096d      	lsrs	r5, r5, #5
 800aad8:	f04f 0b01 	mov.w	fp, #1
 800aadc:	464a      	mov	r2, r9
 800aade:	4616      	mov	r6, r2
 800aae0:	3201      	adds	r2, #1
 800aae2:	7830      	ldrb	r0, [r6, #0]
 800aae4:	f7ff ffb0 	bl	800aa48 <__hexdig_fun>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d1f8      	bne.n	800aade <__gethex+0x6a>
 800aaec:	498d      	ldr	r1, [pc, #564]	@ (800ad24 <__gethex+0x2b0>)
 800aaee:	2201      	movs	r2, #1
 800aaf0:	4630      	mov	r0, r6
 800aaf2:	f7ff fe70 	bl	800a7d6 <strncmp>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	d13f      	bne.n	800ab7a <__gethex+0x106>
 800aafa:	b944      	cbnz	r4, 800ab0e <__gethex+0x9a>
 800aafc:	1c74      	adds	r4, r6, #1
 800aafe:	4622      	mov	r2, r4
 800ab00:	4616      	mov	r6, r2
 800ab02:	3201      	adds	r2, #1
 800ab04:	7830      	ldrb	r0, [r6, #0]
 800ab06:	f7ff ff9f 	bl	800aa48 <__hexdig_fun>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d1f8      	bne.n	800ab00 <__gethex+0x8c>
 800ab0e:	1ba4      	subs	r4, r4, r6
 800ab10:	00a7      	lsls	r7, r4, #2
 800ab12:	7833      	ldrb	r3, [r6, #0]
 800ab14:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ab18:	2b50      	cmp	r3, #80	@ 0x50
 800ab1a:	d13e      	bne.n	800ab9a <__gethex+0x126>
 800ab1c:	7873      	ldrb	r3, [r6, #1]
 800ab1e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ab20:	d033      	beq.n	800ab8a <__gethex+0x116>
 800ab22:	2b2d      	cmp	r3, #45	@ 0x2d
 800ab24:	d034      	beq.n	800ab90 <__gethex+0x11c>
 800ab26:	1c71      	adds	r1, r6, #1
 800ab28:	2400      	movs	r4, #0
 800ab2a:	7808      	ldrb	r0, [r1, #0]
 800ab2c:	f7ff ff8c 	bl	800aa48 <__hexdig_fun>
 800ab30:	1e43      	subs	r3, r0, #1
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	2b18      	cmp	r3, #24
 800ab36:	d830      	bhi.n	800ab9a <__gethex+0x126>
 800ab38:	f1a0 0210 	sub.w	r2, r0, #16
 800ab3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab40:	f7ff ff82 	bl	800aa48 <__hexdig_fun>
 800ab44:	f100 3cff 	add.w	ip, r0, #4294967295
 800ab48:	fa5f fc8c 	uxtb.w	ip, ip
 800ab4c:	f1bc 0f18 	cmp.w	ip, #24
 800ab50:	f04f 030a 	mov.w	r3, #10
 800ab54:	d91e      	bls.n	800ab94 <__gethex+0x120>
 800ab56:	b104      	cbz	r4, 800ab5a <__gethex+0xe6>
 800ab58:	4252      	negs	r2, r2
 800ab5a:	4417      	add	r7, r2
 800ab5c:	f8ca 1000 	str.w	r1, [sl]
 800ab60:	b1ed      	cbz	r5, 800ab9e <__gethex+0x12a>
 800ab62:	f1bb 0f00 	cmp.w	fp, #0
 800ab66:	bf0c      	ite	eq
 800ab68:	2506      	moveq	r5, #6
 800ab6a:	2500      	movne	r5, #0
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	b005      	add	sp, #20
 800ab70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab74:	2500      	movs	r5, #0
 800ab76:	462c      	mov	r4, r5
 800ab78:	e7b0      	b.n	800aadc <__gethex+0x68>
 800ab7a:	2c00      	cmp	r4, #0
 800ab7c:	d1c7      	bne.n	800ab0e <__gethex+0x9a>
 800ab7e:	4627      	mov	r7, r4
 800ab80:	e7c7      	b.n	800ab12 <__gethex+0x9e>
 800ab82:	464e      	mov	r6, r9
 800ab84:	462f      	mov	r7, r5
 800ab86:	2501      	movs	r5, #1
 800ab88:	e7c3      	b.n	800ab12 <__gethex+0x9e>
 800ab8a:	2400      	movs	r4, #0
 800ab8c:	1cb1      	adds	r1, r6, #2
 800ab8e:	e7cc      	b.n	800ab2a <__gethex+0xb6>
 800ab90:	2401      	movs	r4, #1
 800ab92:	e7fb      	b.n	800ab8c <__gethex+0x118>
 800ab94:	fb03 0002 	mla	r0, r3, r2, r0
 800ab98:	e7ce      	b.n	800ab38 <__gethex+0xc4>
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	e7de      	b.n	800ab5c <__gethex+0xe8>
 800ab9e:	eba6 0309 	sub.w	r3, r6, r9
 800aba2:	3b01      	subs	r3, #1
 800aba4:	4629      	mov	r1, r5
 800aba6:	2b07      	cmp	r3, #7
 800aba8:	dc0a      	bgt.n	800abc0 <__gethex+0x14c>
 800abaa:	9801      	ldr	r0, [sp, #4]
 800abac:	f000 faf4 	bl	800b198 <_Balloc>
 800abb0:	4604      	mov	r4, r0
 800abb2:	b940      	cbnz	r0, 800abc6 <__gethex+0x152>
 800abb4:	4b5c      	ldr	r3, [pc, #368]	@ (800ad28 <__gethex+0x2b4>)
 800abb6:	4602      	mov	r2, r0
 800abb8:	21e4      	movs	r1, #228	@ 0xe4
 800abba:	485c      	ldr	r0, [pc, #368]	@ (800ad2c <__gethex+0x2b8>)
 800abbc:	f001 f85c 	bl	800bc78 <__assert_func>
 800abc0:	3101      	adds	r1, #1
 800abc2:	105b      	asrs	r3, r3, #1
 800abc4:	e7ef      	b.n	800aba6 <__gethex+0x132>
 800abc6:	f100 0a14 	add.w	sl, r0, #20
 800abca:	2300      	movs	r3, #0
 800abcc:	4655      	mov	r5, sl
 800abce:	469b      	mov	fp, r3
 800abd0:	45b1      	cmp	r9, r6
 800abd2:	d337      	bcc.n	800ac44 <__gethex+0x1d0>
 800abd4:	f845 bb04 	str.w	fp, [r5], #4
 800abd8:	eba5 050a 	sub.w	r5, r5, sl
 800abdc:	10ad      	asrs	r5, r5, #2
 800abde:	6125      	str	r5, [r4, #16]
 800abe0:	4658      	mov	r0, fp
 800abe2:	f000 fbcb 	bl	800b37c <__hi0bits>
 800abe6:	016d      	lsls	r5, r5, #5
 800abe8:	f8d8 6000 	ldr.w	r6, [r8]
 800abec:	1a2d      	subs	r5, r5, r0
 800abee:	42b5      	cmp	r5, r6
 800abf0:	dd54      	ble.n	800ac9c <__gethex+0x228>
 800abf2:	1bad      	subs	r5, r5, r6
 800abf4:	4629      	mov	r1, r5
 800abf6:	4620      	mov	r0, r4
 800abf8:	f000 ff54 	bl	800baa4 <__any_on>
 800abfc:	4681      	mov	r9, r0
 800abfe:	b178      	cbz	r0, 800ac20 <__gethex+0x1ac>
 800ac00:	1e6b      	subs	r3, r5, #1
 800ac02:	1159      	asrs	r1, r3, #5
 800ac04:	f003 021f 	and.w	r2, r3, #31
 800ac08:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ac0c:	f04f 0901 	mov.w	r9, #1
 800ac10:	fa09 f202 	lsl.w	r2, r9, r2
 800ac14:	420a      	tst	r2, r1
 800ac16:	d003      	beq.n	800ac20 <__gethex+0x1ac>
 800ac18:	454b      	cmp	r3, r9
 800ac1a:	dc36      	bgt.n	800ac8a <__gethex+0x216>
 800ac1c:	f04f 0902 	mov.w	r9, #2
 800ac20:	4629      	mov	r1, r5
 800ac22:	4620      	mov	r0, r4
 800ac24:	f7ff febe 	bl	800a9a4 <rshift>
 800ac28:	442f      	add	r7, r5
 800ac2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac2e:	42bb      	cmp	r3, r7
 800ac30:	da42      	bge.n	800acb8 <__gethex+0x244>
 800ac32:	9801      	ldr	r0, [sp, #4]
 800ac34:	4621      	mov	r1, r4
 800ac36:	f000 faef 	bl	800b218 <_Bfree>
 800ac3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	6013      	str	r3, [r2, #0]
 800ac40:	25a3      	movs	r5, #163	@ 0xa3
 800ac42:	e793      	b.n	800ab6c <__gethex+0xf8>
 800ac44:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ac48:	2a2e      	cmp	r2, #46	@ 0x2e
 800ac4a:	d012      	beq.n	800ac72 <__gethex+0x1fe>
 800ac4c:	2b20      	cmp	r3, #32
 800ac4e:	d104      	bne.n	800ac5a <__gethex+0x1e6>
 800ac50:	f845 bb04 	str.w	fp, [r5], #4
 800ac54:	f04f 0b00 	mov.w	fp, #0
 800ac58:	465b      	mov	r3, fp
 800ac5a:	7830      	ldrb	r0, [r6, #0]
 800ac5c:	9303      	str	r3, [sp, #12]
 800ac5e:	f7ff fef3 	bl	800aa48 <__hexdig_fun>
 800ac62:	9b03      	ldr	r3, [sp, #12]
 800ac64:	f000 000f 	and.w	r0, r0, #15
 800ac68:	4098      	lsls	r0, r3
 800ac6a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ac6e:	3304      	adds	r3, #4
 800ac70:	e7ae      	b.n	800abd0 <__gethex+0x15c>
 800ac72:	45b1      	cmp	r9, r6
 800ac74:	d8ea      	bhi.n	800ac4c <__gethex+0x1d8>
 800ac76:	492b      	ldr	r1, [pc, #172]	@ (800ad24 <__gethex+0x2b0>)
 800ac78:	9303      	str	r3, [sp, #12]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	f7ff fdaa 	bl	800a7d6 <strncmp>
 800ac82:	9b03      	ldr	r3, [sp, #12]
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d1e1      	bne.n	800ac4c <__gethex+0x1d8>
 800ac88:	e7a2      	b.n	800abd0 <__gethex+0x15c>
 800ac8a:	1ea9      	subs	r1, r5, #2
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f000 ff09 	bl	800baa4 <__any_on>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d0c2      	beq.n	800ac1c <__gethex+0x1a8>
 800ac96:	f04f 0903 	mov.w	r9, #3
 800ac9a:	e7c1      	b.n	800ac20 <__gethex+0x1ac>
 800ac9c:	da09      	bge.n	800acb2 <__gethex+0x23e>
 800ac9e:	1b75      	subs	r5, r6, r5
 800aca0:	4621      	mov	r1, r4
 800aca2:	9801      	ldr	r0, [sp, #4]
 800aca4:	462a      	mov	r2, r5
 800aca6:	f000 fcc7 	bl	800b638 <__lshift>
 800acaa:	1b7f      	subs	r7, r7, r5
 800acac:	4604      	mov	r4, r0
 800acae:	f100 0a14 	add.w	sl, r0, #20
 800acb2:	f04f 0900 	mov.w	r9, #0
 800acb6:	e7b8      	b.n	800ac2a <__gethex+0x1b6>
 800acb8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800acbc:	42bd      	cmp	r5, r7
 800acbe:	dd6f      	ble.n	800ada0 <__gethex+0x32c>
 800acc0:	1bed      	subs	r5, r5, r7
 800acc2:	42ae      	cmp	r6, r5
 800acc4:	dc34      	bgt.n	800ad30 <__gethex+0x2bc>
 800acc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800acca:	2b02      	cmp	r3, #2
 800accc:	d022      	beq.n	800ad14 <__gethex+0x2a0>
 800acce:	2b03      	cmp	r3, #3
 800acd0:	d024      	beq.n	800ad1c <__gethex+0x2a8>
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d115      	bne.n	800ad02 <__gethex+0x28e>
 800acd6:	42ae      	cmp	r6, r5
 800acd8:	d113      	bne.n	800ad02 <__gethex+0x28e>
 800acda:	2e01      	cmp	r6, #1
 800acdc:	d10b      	bne.n	800acf6 <__gethex+0x282>
 800acde:	9a02      	ldr	r2, [sp, #8]
 800ace0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ace4:	6013      	str	r3, [r2, #0]
 800ace6:	2301      	movs	r3, #1
 800ace8:	6123      	str	r3, [r4, #16]
 800acea:	f8ca 3000 	str.w	r3, [sl]
 800acee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acf0:	2562      	movs	r5, #98	@ 0x62
 800acf2:	601c      	str	r4, [r3, #0]
 800acf4:	e73a      	b.n	800ab6c <__gethex+0xf8>
 800acf6:	1e71      	subs	r1, r6, #1
 800acf8:	4620      	mov	r0, r4
 800acfa:	f000 fed3 	bl	800baa4 <__any_on>
 800acfe:	2800      	cmp	r0, #0
 800ad00:	d1ed      	bne.n	800acde <__gethex+0x26a>
 800ad02:	9801      	ldr	r0, [sp, #4]
 800ad04:	4621      	mov	r1, r4
 800ad06:	f000 fa87 	bl	800b218 <_Bfree>
 800ad0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	6013      	str	r3, [r2, #0]
 800ad10:	2550      	movs	r5, #80	@ 0x50
 800ad12:	e72b      	b.n	800ab6c <__gethex+0xf8>
 800ad14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1f3      	bne.n	800ad02 <__gethex+0x28e>
 800ad1a:	e7e0      	b.n	800acde <__gethex+0x26a>
 800ad1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d1dd      	bne.n	800acde <__gethex+0x26a>
 800ad22:	e7ee      	b.n	800ad02 <__gethex+0x28e>
 800ad24:	0800c72c 	.word	0x0800c72c
 800ad28:	0800c742 	.word	0x0800c742
 800ad2c:	0800c753 	.word	0x0800c753
 800ad30:	1e6f      	subs	r7, r5, #1
 800ad32:	f1b9 0f00 	cmp.w	r9, #0
 800ad36:	d130      	bne.n	800ad9a <__gethex+0x326>
 800ad38:	b127      	cbz	r7, 800ad44 <__gethex+0x2d0>
 800ad3a:	4639      	mov	r1, r7
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	f000 feb1 	bl	800baa4 <__any_on>
 800ad42:	4681      	mov	r9, r0
 800ad44:	117a      	asrs	r2, r7, #5
 800ad46:	2301      	movs	r3, #1
 800ad48:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ad4c:	f007 071f 	and.w	r7, r7, #31
 800ad50:	40bb      	lsls	r3, r7
 800ad52:	4213      	tst	r3, r2
 800ad54:	4629      	mov	r1, r5
 800ad56:	4620      	mov	r0, r4
 800ad58:	bf18      	it	ne
 800ad5a:	f049 0902 	orrne.w	r9, r9, #2
 800ad5e:	f7ff fe21 	bl	800a9a4 <rshift>
 800ad62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ad66:	1b76      	subs	r6, r6, r5
 800ad68:	2502      	movs	r5, #2
 800ad6a:	f1b9 0f00 	cmp.w	r9, #0
 800ad6e:	d047      	beq.n	800ae00 <__gethex+0x38c>
 800ad70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	d015      	beq.n	800ada4 <__gethex+0x330>
 800ad78:	2b03      	cmp	r3, #3
 800ad7a:	d017      	beq.n	800adac <__gethex+0x338>
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d109      	bne.n	800ad94 <__gethex+0x320>
 800ad80:	f019 0f02 	tst.w	r9, #2
 800ad84:	d006      	beq.n	800ad94 <__gethex+0x320>
 800ad86:	f8da 3000 	ldr.w	r3, [sl]
 800ad8a:	ea49 0903 	orr.w	r9, r9, r3
 800ad8e:	f019 0f01 	tst.w	r9, #1
 800ad92:	d10e      	bne.n	800adb2 <__gethex+0x33e>
 800ad94:	f045 0510 	orr.w	r5, r5, #16
 800ad98:	e032      	b.n	800ae00 <__gethex+0x38c>
 800ad9a:	f04f 0901 	mov.w	r9, #1
 800ad9e:	e7d1      	b.n	800ad44 <__gethex+0x2d0>
 800ada0:	2501      	movs	r5, #1
 800ada2:	e7e2      	b.n	800ad6a <__gethex+0x2f6>
 800ada4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ada6:	f1c3 0301 	rsb	r3, r3, #1
 800adaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800adac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d0f0      	beq.n	800ad94 <__gethex+0x320>
 800adb2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800adb6:	f104 0314 	add.w	r3, r4, #20
 800adba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800adbe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800adc2:	f04f 0c00 	mov.w	ip, #0
 800adc6:	4618      	mov	r0, r3
 800adc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800adcc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800add0:	d01b      	beq.n	800ae0a <__gethex+0x396>
 800add2:	3201      	adds	r2, #1
 800add4:	6002      	str	r2, [r0, #0]
 800add6:	2d02      	cmp	r5, #2
 800add8:	f104 0314 	add.w	r3, r4, #20
 800addc:	d13c      	bne.n	800ae58 <__gethex+0x3e4>
 800adde:	f8d8 2000 	ldr.w	r2, [r8]
 800ade2:	3a01      	subs	r2, #1
 800ade4:	42b2      	cmp	r2, r6
 800ade6:	d109      	bne.n	800adfc <__gethex+0x388>
 800ade8:	1171      	asrs	r1, r6, #5
 800adea:	2201      	movs	r2, #1
 800adec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800adf0:	f006 061f 	and.w	r6, r6, #31
 800adf4:	fa02 f606 	lsl.w	r6, r2, r6
 800adf8:	421e      	tst	r6, r3
 800adfa:	d13a      	bne.n	800ae72 <__gethex+0x3fe>
 800adfc:	f045 0520 	orr.w	r5, r5, #32
 800ae00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae02:	601c      	str	r4, [r3, #0]
 800ae04:	9b02      	ldr	r3, [sp, #8]
 800ae06:	601f      	str	r7, [r3, #0]
 800ae08:	e6b0      	b.n	800ab6c <__gethex+0xf8>
 800ae0a:	4299      	cmp	r1, r3
 800ae0c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ae10:	d8d9      	bhi.n	800adc6 <__gethex+0x352>
 800ae12:	68a3      	ldr	r3, [r4, #8]
 800ae14:	459b      	cmp	fp, r3
 800ae16:	db17      	blt.n	800ae48 <__gethex+0x3d4>
 800ae18:	6861      	ldr	r1, [r4, #4]
 800ae1a:	9801      	ldr	r0, [sp, #4]
 800ae1c:	3101      	adds	r1, #1
 800ae1e:	f000 f9bb 	bl	800b198 <_Balloc>
 800ae22:	4681      	mov	r9, r0
 800ae24:	b918      	cbnz	r0, 800ae2e <__gethex+0x3ba>
 800ae26:	4b1a      	ldr	r3, [pc, #104]	@ (800ae90 <__gethex+0x41c>)
 800ae28:	4602      	mov	r2, r0
 800ae2a:	2184      	movs	r1, #132	@ 0x84
 800ae2c:	e6c5      	b.n	800abba <__gethex+0x146>
 800ae2e:	6922      	ldr	r2, [r4, #16]
 800ae30:	3202      	adds	r2, #2
 800ae32:	f104 010c 	add.w	r1, r4, #12
 800ae36:	0092      	lsls	r2, r2, #2
 800ae38:	300c      	adds	r0, #12
 800ae3a:	f7ff fd52 	bl	800a8e2 <memcpy>
 800ae3e:	4621      	mov	r1, r4
 800ae40:	9801      	ldr	r0, [sp, #4]
 800ae42:	f000 f9e9 	bl	800b218 <_Bfree>
 800ae46:	464c      	mov	r4, r9
 800ae48:	6923      	ldr	r3, [r4, #16]
 800ae4a:	1c5a      	adds	r2, r3, #1
 800ae4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae50:	6122      	str	r2, [r4, #16]
 800ae52:	2201      	movs	r2, #1
 800ae54:	615a      	str	r2, [r3, #20]
 800ae56:	e7be      	b.n	800add6 <__gethex+0x362>
 800ae58:	6922      	ldr	r2, [r4, #16]
 800ae5a:	455a      	cmp	r2, fp
 800ae5c:	dd0b      	ble.n	800ae76 <__gethex+0x402>
 800ae5e:	2101      	movs	r1, #1
 800ae60:	4620      	mov	r0, r4
 800ae62:	f7ff fd9f 	bl	800a9a4 <rshift>
 800ae66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae6a:	3701      	adds	r7, #1
 800ae6c:	42bb      	cmp	r3, r7
 800ae6e:	f6ff aee0 	blt.w	800ac32 <__gethex+0x1be>
 800ae72:	2501      	movs	r5, #1
 800ae74:	e7c2      	b.n	800adfc <__gethex+0x388>
 800ae76:	f016 061f 	ands.w	r6, r6, #31
 800ae7a:	d0fa      	beq.n	800ae72 <__gethex+0x3fe>
 800ae7c:	4453      	add	r3, sl
 800ae7e:	f1c6 0620 	rsb	r6, r6, #32
 800ae82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ae86:	f000 fa79 	bl	800b37c <__hi0bits>
 800ae8a:	42b0      	cmp	r0, r6
 800ae8c:	dbe7      	blt.n	800ae5e <__gethex+0x3ea>
 800ae8e:	e7f0      	b.n	800ae72 <__gethex+0x3fe>
 800ae90:	0800c742 	.word	0x0800c742

0800ae94 <L_shift>:
 800ae94:	f1c2 0208 	rsb	r2, r2, #8
 800ae98:	0092      	lsls	r2, r2, #2
 800ae9a:	b570      	push	{r4, r5, r6, lr}
 800ae9c:	f1c2 0620 	rsb	r6, r2, #32
 800aea0:	6843      	ldr	r3, [r0, #4]
 800aea2:	6804      	ldr	r4, [r0, #0]
 800aea4:	fa03 f506 	lsl.w	r5, r3, r6
 800aea8:	432c      	orrs	r4, r5
 800aeaa:	40d3      	lsrs	r3, r2
 800aeac:	6004      	str	r4, [r0, #0]
 800aeae:	f840 3f04 	str.w	r3, [r0, #4]!
 800aeb2:	4288      	cmp	r0, r1
 800aeb4:	d3f4      	bcc.n	800aea0 <L_shift+0xc>
 800aeb6:	bd70      	pop	{r4, r5, r6, pc}

0800aeb8 <__match>:
 800aeb8:	b530      	push	{r4, r5, lr}
 800aeba:	6803      	ldr	r3, [r0, #0]
 800aebc:	3301      	adds	r3, #1
 800aebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aec2:	b914      	cbnz	r4, 800aeca <__match+0x12>
 800aec4:	6003      	str	r3, [r0, #0]
 800aec6:	2001      	movs	r0, #1
 800aec8:	bd30      	pop	{r4, r5, pc}
 800aeca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aece:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aed2:	2d19      	cmp	r5, #25
 800aed4:	bf98      	it	ls
 800aed6:	3220      	addls	r2, #32
 800aed8:	42a2      	cmp	r2, r4
 800aeda:	d0f0      	beq.n	800aebe <__match+0x6>
 800aedc:	2000      	movs	r0, #0
 800aede:	e7f3      	b.n	800aec8 <__match+0x10>

0800aee0 <__hexnan>:
 800aee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee4:	680b      	ldr	r3, [r1, #0]
 800aee6:	6801      	ldr	r1, [r0, #0]
 800aee8:	115e      	asrs	r6, r3, #5
 800aeea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aeee:	f013 031f 	ands.w	r3, r3, #31
 800aef2:	b087      	sub	sp, #28
 800aef4:	bf18      	it	ne
 800aef6:	3604      	addne	r6, #4
 800aef8:	2500      	movs	r5, #0
 800aefa:	1f37      	subs	r7, r6, #4
 800aefc:	4682      	mov	sl, r0
 800aefe:	4690      	mov	r8, r2
 800af00:	9301      	str	r3, [sp, #4]
 800af02:	f846 5c04 	str.w	r5, [r6, #-4]
 800af06:	46b9      	mov	r9, r7
 800af08:	463c      	mov	r4, r7
 800af0a:	9502      	str	r5, [sp, #8]
 800af0c:	46ab      	mov	fp, r5
 800af0e:	784a      	ldrb	r2, [r1, #1]
 800af10:	1c4b      	adds	r3, r1, #1
 800af12:	9303      	str	r3, [sp, #12]
 800af14:	b342      	cbz	r2, 800af68 <__hexnan+0x88>
 800af16:	4610      	mov	r0, r2
 800af18:	9105      	str	r1, [sp, #20]
 800af1a:	9204      	str	r2, [sp, #16]
 800af1c:	f7ff fd94 	bl	800aa48 <__hexdig_fun>
 800af20:	2800      	cmp	r0, #0
 800af22:	d151      	bne.n	800afc8 <__hexnan+0xe8>
 800af24:	9a04      	ldr	r2, [sp, #16]
 800af26:	9905      	ldr	r1, [sp, #20]
 800af28:	2a20      	cmp	r2, #32
 800af2a:	d818      	bhi.n	800af5e <__hexnan+0x7e>
 800af2c:	9b02      	ldr	r3, [sp, #8]
 800af2e:	459b      	cmp	fp, r3
 800af30:	dd13      	ble.n	800af5a <__hexnan+0x7a>
 800af32:	454c      	cmp	r4, r9
 800af34:	d206      	bcs.n	800af44 <__hexnan+0x64>
 800af36:	2d07      	cmp	r5, #7
 800af38:	dc04      	bgt.n	800af44 <__hexnan+0x64>
 800af3a:	462a      	mov	r2, r5
 800af3c:	4649      	mov	r1, r9
 800af3e:	4620      	mov	r0, r4
 800af40:	f7ff ffa8 	bl	800ae94 <L_shift>
 800af44:	4544      	cmp	r4, r8
 800af46:	d952      	bls.n	800afee <__hexnan+0x10e>
 800af48:	2300      	movs	r3, #0
 800af4a:	f1a4 0904 	sub.w	r9, r4, #4
 800af4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800af52:	f8cd b008 	str.w	fp, [sp, #8]
 800af56:	464c      	mov	r4, r9
 800af58:	461d      	mov	r5, r3
 800af5a:	9903      	ldr	r1, [sp, #12]
 800af5c:	e7d7      	b.n	800af0e <__hexnan+0x2e>
 800af5e:	2a29      	cmp	r2, #41	@ 0x29
 800af60:	d157      	bne.n	800b012 <__hexnan+0x132>
 800af62:	3102      	adds	r1, #2
 800af64:	f8ca 1000 	str.w	r1, [sl]
 800af68:	f1bb 0f00 	cmp.w	fp, #0
 800af6c:	d051      	beq.n	800b012 <__hexnan+0x132>
 800af6e:	454c      	cmp	r4, r9
 800af70:	d206      	bcs.n	800af80 <__hexnan+0xa0>
 800af72:	2d07      	cmp	r5, #7
 800af74:	dc04      	bgt.n	800af80 <__hexnan+0xa0>
 800af76:	462a      	mov	r2, r5
 800af78:	4649      	mov	r1, r9
 800af7a:	4620      	mov	r0, r4
 800af7c:	f7ff ff8a 	bl	800ae94 <L_shift>
 800af80:	4544      	cmp	r4, r8
 800af82:	d936      	bls.n	800aff2 <__hexnan+0x112>
 800af84:	f1a8 0204 	sub.w	r2, r8, #4
 800af88:	4623      	mov	r3, r4
 800af8a:	f853 1b04 	ldr.w	r1, [r3], #4
 800af8e:	f842 1f04 	str.w	r1, [r2, #4]!
 800af92:	429f      	cmp	r7, r3
 800af94:	d2f9      	bcs.n	800af8a <__hexnan+0xaa>
 800af96:	1b3b      	subs	r3, r7, r4
 800af98:	f023 0303 	bic.w	r3, r3, #3
 800af9c:	3304      	adds	r3, #4
 800af9e:	3401      	adds	r4, #1
 800afa0:	3e03      	subs	r6, #3
 800afa2:	42b4      	cmp	r4, r6
 800afa4:	bf88      	it	hi
 800afa6:	2304      	movhi	r3, #4
 800afa8:	4443      	add	r3, r8
 800afaa:	2200      	movs	r2, #0
 800afac:	f843 2b04 	str.w	r2, [r3], #4
 800afb0:	429f      	cmp	r7, r3
 800afb2:	d2fb      	bcs.n	800afac <__hexnan+0xcc>
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	b91b      	cbnz	r3, 800afc0 <__hexnan+0xe0>
 800afb8:	4547      	cmp	r7, r8
 800afba:	d128      	bne.n	800b00e <__hexnan+0x12e>
 800afbc:	2301      	movs	r3, #1
 800afbe:	603b      	str	r3, [r7, #0]
 800afc0:	2005      	movs	r0, #5
 800afc2:	b007      	add	sp, #28
 800afc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc8:	3501      	adds	r5, #1
 800afca:	2d08      	cmp	r5, #8
 800afcc:	f10b 0b01 	add.w	fp, fp, #1
 800afd0:	dd06      	ble.n	800afe0 <__hexnan+0x100>
 800afd2:	4544      	cmp	r4, r8
 800afd4:	d9c1      	bls.n	800af5a <__hexnan+0x7a>
 800afd6:	2300      	movs	r3, #0
 800afd8:	f844 3c04 	str.w	r3, [r4, #-4]
 800afdc:	2501      	movs	r5, #1
 800afde:	3c04      	subs	r4, #4
 800afe0:	6822      	ldr	r2, [r4, #0]
 800afe2:	f000 000f 	and.w	r0, r0, #15
 800afe6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800afea:	6020      	str	r0, [r4, #0]
 800afec:	e7b5      	b.n	800af5a <__hexnan+0x7a>
 800afee:	2508      	movs	r5, #8
 800aff0:	e7b3      	b.n	800af5a <__hexnan+0x7a>
 800aff2:	9b01      	ldr	r3, [sp, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d0dd      	beq.n	800afb4 <__hexnan+0xd4>
 800aff8:	f1c3 0320 	rsb	r3, r3, #32
 800affc:	f04f 32ff 	mov.w	r2, #4294967295
 800b000:	40da      	lsrs	r2, r3
 800b002:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b006:	4013      	ands	r3, r2
 800b008:	f846 3c04 	str.w	r3, [r6, #-4]
 800b00c:	e7d2      	b.n	800afb4 <__hexnan+0xd4>
 800b00e:	3f04      	subs	r7, #4
 800b010:	e7d0      	b.n	800afb4 <__hexnan+0xd4>
 800b012:	2004      	movs	r0, #4
 800b014:	e7d5      	b.n	800afc2 <__hexnan+0xe2>
	...

0800b018 <sbrk_aligned>:
 800b018:	b570      	push	{r4, r5, r6, lr}
 800b01a:	4e0f      	ldr	r6, [pc, #60]	@ (800b058 <sbrk_aligned+0x40>)
 800b01c:	460c      	mov	r4, r1
 800b01e:	6831      	ldr	r1, [r6, #0]
 800b020:	4605      	mov	r5, r0
 800b022:	b911      	cbnz	r1, 800b02a <sbrk_aligned+0x12>
 800b024:	f000 fe18 	bl	800bc58 <_sbrk_r>
 800b028:	6030      	str	r0, [r6, #0]
 800b02a:	4621      	mov	r1, r4
 800b02c:	4628      	mov	r0, r5
 800b02e:	f000 fe13 	bl	800bc58 <_sbrk_r>
 800b032:	1c43      	adds	r3, r0, #1
 800b034:	d103      	bne.n	800b03e <sbrk_aligned+0x26>
 800b036:	f04f 34ff 	mov.w	r4, #4294967295
 800b03a:	4620      	mov	r0, r4
 800b03c:	bd70      	pop	{r4, r5, r6, pc}
 800b03e:	1cc4      	adds	r4, r0, #3
 800b040:	f024 0403 	bic.w	r4, r4, #3
 800b044:	42a0      	cmp	r0, r4
 800b046:	d0f8      	beq.n	800b03a <sbrk_aligned+0x22>
 800b048:	1a21      	subs	r1, r4, r0
 800b04a:	4628      	mov	r0, r5
 800b04c:	f000 fe04 	bl	800bc58 <_sbrk_r>
 800b050:	3001      	adds	r0, #1
 800b052:	d1f2      	bne.n	800b03a <sbrk_aligned+0x22>
 800b054:	e7ef      	b.n	800b036 <sbrk_aligned+0x1e>
 800b056:	bf00      	nop
 800b058:	24000590 	.word	0x24000590

0800b05c <_malloc_r>:
 800b05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b060:	1ccd      	adds	r5, r1, #3
 800b062:	f025 0503 	bic.w	r5, r5, #3
 800b066:	3508      	adds	r5, #8
 800b068:	2d0c      	cmp	r5, #12
 800b06a:	bf38      	it	cc
 800b06c:	250c      	movcc	r5, #12
 800b06e:	2d00      	cmp	r5, #0
 800b070:	4606      	mov	r6, r0
 800b072:	db01      	blt.n	800b078 <_malloc_r+0x1c>
 800b074:	42a9      	cmp	r1, r5
 800b076:	d904      	bls.n	800b082 <_malloc_r+0x26>
 800b078:	230c      	movs	r3, #12
 800b07a:	6033      	str	r3, [r6, #0]
 800b07c:	2000      	movs	r0, #0
 800b07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b082:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b158 <_malloc_r+0xfc>
 800b086:	f000 f87b 	bl	800b180 <__malloc_lock>
 800b08a:	f8d8 3000 	ldr.w	r3, [r8]
 800b08e:	461c      	mov	r4, r3
 800b090:	bb44      	cbnz	r4, 800b0e4 <_malloc_r+0x88>
 800b092:	4629      	mov	r1, r5
 800b094:	4630      	mov	r0, r6
 800b096:	f7ff ffbf 	bl	800b018 <sbrk_aligned>
 800b09a:	1c43      	adds	r3, r0, #1
 800b09c:	4604      	mov	r4, r0
 800b09e:	d158      	bne.n	800b152 <_malloc_r+0xf6>
 800b0a0:	f8d8 4000 	ldr.w	r4, [r8]
 800b0a4:	4627      	mov	r7, r4
 800b0a6:	2f00      	cmp	r7, #0
 800b0a8:	d143      	bne.n	800b132 <_malloc_r+0xd6>
 800b0aa:	2c00      	cmp	r4, #0
 800b0ac:	d04b      	beq.n	800b146 <_malloc_r+0xea>
 800b0ae:	6823      	ldr	r3, [r4, #0]
 800b0b0:	4639      	mov	r1, r7
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	eb04 0903 	add.w	r9, r4, r3
 800b0b8:	f000 fdce 	bl	800bc58 <_sbrk_r>
 800b0bc:	4581      	cmp	r9, r0
 800b0be:	d142      	bne.n	800b146 <_malloc_r+0xea>
 800b0c0:	6821      	ldr	r1, [r4, #0]
 800b0c2:	1a6d      	subs	r5, r5, r1
 800b0c4:	4629      	mov	r1, r5
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	f7ff ffa6 	bl	800b018 <sbrk_aligned>
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	d03a      	beq.n	800b146 <_malloc_r+0xea>
 800b0d0:	6823      	ldr	r3, [r4, #0]
 800b0d2:	442b      	add	r3, r5
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	f8d8 3000 	ldr.w	r3, [r8]
 800b0da:	685a      	ldr	r2, [r3, #4]
 800b0dc:	bb62      	cbnz	r2, 800b138 <_malloc_r+0xdc>
 800b0de:	f8c8 7000 	str.w	r7, [r8]
 800b0e2:	e00f      	b.n	800b104 <_malloc_r+0xa8>
 800b0e4:	6822      	ldr	r2, [r4, #0]
 800b0e6:	1b52      	subs	r2, r2, r5
 800b0e8:	d420      	bmi.n	800b12c <_malloc_r+0xd0>
 800b0ea:	2a0b      	cmp	r2, #11
 800b0ec:	d917      	bls.n	800b11e <_malloc_r+0xc2>
 800b0ee:	1961      	adds	r1, r4, r5
 800b0f0:	42a3      	cmp	r3, r4
 800b0f2:	6025      	str	r5, [r4, #0]
 800b0f4:	bf18      	it	ne
 800b0f6:	6059      	strne	r1, [r3, #4]
 800b0f8:	6863      	ldr	r3, [r4, #4]
 800b0fa:	bf08      	it	eq
 800b0fc:	f8c8 1000 	streq.w	r1, [r8]
 800b100:	5162      	str	r2, [r4, r5]
 800b102:	604b      	str	r3, [r1, #4]
 800b104:	4630      	mov	r0, r6
 800b106:	f000 f841 	bl	800b18c <__malloc_unlock>
 800b10a:	f104 000b 	add.w	r0, r4, #11
 800b10e:	1d23      	adds	r3, r4, #4
 800b110:	f020 0007 	bic.w	r0, r0, #7
 800b114:	1ac2      	subs	r2, r0, r3
 800b116:	bf1c      	itt	ne
 800b118:	1a1b      	subne	r3, r3, r0
 800b11a:	50a3      	strne	r3, [r4, r2]
 800b11c:	e7af      	b.n	800b07e <_malloc_r+0x22>
 800b11e:	6862      	ldr	r2, [r4, #4]
 800b120:	42a3      	cmp	r3, r4
 800b122:	bf0c      	ite	eq
 800b124:	f8c8 2000 	streq.w	r2, [r8]
 800b128:	605a      	strne	r2, [r3, #4]
 800b12a:	e7eb      	b.n	800b104 <_malloc_r+0xa8>
 800b12c:	4623      	mov	r3, r4
 800b12e:	6864      	ldr	r4, [r4, #4]
 800b130:	e7ae      	b.n	800b090 <_malloc_r+0x34>
 800b132:	463c      	mov	r4, r7
 800b134:	687f      	ldr	r7, [r7, #4]
 800b136:	e7b6      	b.n	800b0a6 <_malloc_r+0x4a>
 800b138:	461a      	mov	r2, r3
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	42a3      	cmp	r3, r4
 800b13e:	d1fb      	bne.n	800b138 <_malloc_r+0xdc>
 800b140:	2300      	movs	r3, #0
 800b142:	6053      	str	r3, [r2, #4]
 800b144:	e7de      	b.n	800b104 <_malloc_r+0xa8>
 800b146:	230c      	movs	r3, #12
 800b148:	6033      	str	r3, [r6, #0]
 800b14a:	4630      	mov	r0, r6
 800b14c:	f000 f81e 	bl	800b18c <__malloc_unlock>
 800b150:	e794      	b.n	800b07c <_malloc_r+0x20>
 800b152:	6005      	str	r5, [r0, #0]
 800b154:	e7d6      	b.n	800b104 <_malloc_r+0xa8>
 800b156:	bf00      	nop
 800b158:	24000594 	.word	0x24000594

0800b15c <__ascii_mbtowc>:
 800b15c:	b082      	sub	sp, #8
 800b15e:	b901      	cbnz	r1, 800b162 <__ascii_mbtowc+0x6>
 800b160:	a901      	add	r1, sp, #4
 800b162:	b142      	cbz	r2, 800b176 <__ascii_mbtowc+0x1a>
 800b164:	b14b      	cbz	r3, 800b17a <__ascii_mbtowc+0x1e>
 800b166:	7813      	ldrb	r3, [r2, #0]
 800b168:	600b      	str	r3, [r1, #0]
 800b16a:	7812      	ldrb	r2, [r2, #0]
 800b16c:	1e10      	subs	r0, r2, #0
 800b16e:	bf18      	it	ne
 800b170:	2001      	movne	r0, #1
 800b172:	b002      	add	sp, #8
 800b174:	4770      	bx	lr
 800b176:	4610      	mov	r0, r2
 800b178:	e7fb      	b.n	800b172 <__ascii_mbtowc+0x16>
 800b17a:	f06f 0001 	mvn.w	r0, #1
 800b17e:	e7f8      	b.n	800b172 <__ascii_mbtowc+0x16>

0800b180 <__malloc_lock>:
 800b180:	4801      	ldr	r0, [pc, #4]	@ (800b188 <__malloc_lock+0x8>)
 800b182:	f7ff bbac 	b.w	800a8de <__retarget_lock_acquire_recursive>
 800b186:	bf00      	nop
 800b188:	2400058c 	.word	0x2400058c

0800b18c <__malloc_unlock>:
 800b18c:	4801      	ldr	r0, [pc, #4]	@ (800b194 <__malloc_unlock+0x8>)
 800b18e:	f7ff bba7 	b.w	800a8e0 <__retarget_lock_release_recursive>
 800b192:	bf00      	nop
 800b194:	2400058c 	.word	0x2400058c

0800b198 <_Balloc>:
 800b198:	b570      	push	{r4, r5, r6, lr}
 800b19a:	69c6      	ldr	r6, [r0, #28]
 800b19c:	4604      	mov	r4, r0
 800b19e:	460d      	mov	r5, r1
 800b1a0:	b976      	cbnz	r6, 800b1c0 <_Balloc+0x28>
 800b1a2:	2010      	movs	r0, #16
 800b1a4:	f000 fd9a 	bl	800bcdc <malloc>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	61e0      	str	r0, [r4, #28]
 800b1ac:	b920      	cbnz	r0, 800b1b8 <_Balloc+0x20>
 800b1ae:	4b18      	ldr	r3, [pc, #96]	@ (800b210 <_Balloc+0x78>)
 800b1b0:	4818      	ldr	r0, [pc, #96]	@ (800b214 <_Balloc+0x7c>)
 800b1b2:	216b      	movs	r1, #107	@ 0x6b
 800b1b4:	f000 fd60 	bl	800bc78 <__assert_func>
 800b1b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1bc:	6006      	str	r6, [r0, #0]
 800b1be:	60c6      	str	r6, [r0, #12]
 800b1c0:	69e6      	ldr	r6, [r4, #28]
 800b1c2:	68f3      	ldr	r3, [r6, #12]
 800b1c4:	b183      	cbz	r3, 800b1e8 <_Balloc+0x50>
 800b1c6:	69e3      	ldr	r3, [r4, #28]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1ce:	b9b8      	cbnz	r0, 800b200 <_Balloc+0x68>
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	fa01 f605 	lsl.w	r6, r1, r5
 800b1d6:	1d72      	adds	r2, r6, #5
 800b1d8:	0092      	lsls	r2, r2, #2
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f000 fd6a 	bl	800bcb4 <_calloc_r>
 800b1e0:	b160      	cbz	r0, 800b1fc <_Balloc+0x64>
 800b1e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1e6:	e00e      	b.n	800b206 <_Balloc+0x6e>
 800b1e8:	2221      	movs	r2, #33	@ 0x21
 800b1ea:	2104      	movs	r1, #4
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	f000 fd61 	bl	800bcb4 <_calloc_r>
 800b1f2:	69e3      	ldr	r3, [r4, #28]
 800b1f4:	60f0      	str	r0, [r6, #12]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1e4      	bne.n	800b1c6 <_Balloc+0x2e>
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	bd70      	pop	{r4, r5, r6, pc}
 800b200:	6802      	ldr	r2, [r0, #0]
 800b202:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b206:	2300      	movs	r3, #0
 800b208:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b20c:	e7f7      	b.n	800b1fe <_Balloc+0x66>
 800b20e:	bf00      	nop
 800b210:	0800c7b3 	.word	0x0800c7b3
 800b214:	0800c7ca 	.word	0x0800c7ca

0800b218 <_Bfree>:
 800b218:	b570      	push	{r4, r5, r6, lr}
 800b21a:	69c6      	ldr	r6, [r0, #28]
 800b21c:	4605      	mov	r5, r0
 800b21e:	460c      	mov	r4, r1
 800b220:	b976      	cbnz	r6, 800b240 <_Bfree+0x28>
 800b222:	2010      	movs	r0, #16
 800b224:	f000 fd5a 	bl	800bcdc <malloc>
 800b228:	4602      	mov	r2, r0
 800b22a:	61e8      	str	r0, [r5, #28]
 800b22c:	b920      	cbnz	r0, 800b238 <_Bfree+0x20>
 800b22e:	4b09      	ldr	r3, [pc, #36]	@ (800b254 <_Bfree+0x3c>)
 800b230:	4809      	ldr	r0, [pc, #36]	@ (800b258 <_Bfree+0x40>)
 800b232:	218f      	movs	r1, #143	@ 0x8f
 800b234:	f000 fd20 	bl	800bc78 <__assert_func>
 800b238:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b23c:	6006      	str	r6, [r0, #0]
 800b23e:	60c6      	str	r6, [r0, #12]
 800b240:	b13c      	cbz	r4, 800b252 <_Bfree+0x3a>
 800b242:	69eb      	ldr	r3, [r5, #28]
 800b244:	6862      	ldr	r2, [r4, #4]
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b24c:	6021      	str	r1, [r4, #0]
 800b24e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b252:	bd70      	pop	{r4, r5, r6, pc}
 800b254:	0800c7b3 	.word	0x0800c7b3
 800b258:	0800c7ca 	.word	0x0800c7ca

0800b25c <__multadd>:
 800b25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b260:	690d      	ldr	r5, [r1, #16]
 800b262:	4607      	mov	r7, r0
 800b264:	460c      	mov	r4, r1
 800b266:	461e      	mov	r6, r3
 800b268:	f101 0c14 	add.w	ip, r1, #20
 800b26c:	2000      	movs	r0, #0
 800b26e:	f8dc 3000 	ldr.w	r3, [ip]
 800b272:	b299      	uxth	r1, r3
 800b274:	fb02 6101 	mla	r1, r2, r1, r6
 800b278:	0c1e      	lsrs	r6, r3, #16
 800b27a:	0c0b      	lsrs	r3, r1, #16
 800b27c:	fb02 3306 	mla	r3, r2, r6, r3
 800b280:	b289      	uxth	r1, r1
 800b282:	3001      	adds	r0, #1
 800b284:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b288:	4285      	cmp	r5, r0
 800b28a:	f84c 1b04 	str.w	r1, [ip], #4
 800b28e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b292:	dcec      	bgt.n	800b26e <__multadd+0x12>
 800b294:	b30e      	cbz	r6, 800b2da <__multadd+0x7e>
 800b296:	68a3      	ldr	r3, [r4, #8]
 800b298:	42ab      	cmp	r3, r5
 800b29a:	dc19      	bgt.n	800b2d0 <__multadd+0x74>
 800b29c:	6861      	ldr	r1, [r4, #4]
 800b29e:	4638      	mov	r0, r7
 800b2a0:	3101      	adds	r1, #1
 800b2a2:	f7ff ff79 	bl	800b198 <_Balloc>
 800b2a6:	4680      	mov	r8, r0
 800b2a8:	b928      	cbnz	r0, 800b2b6 <__multadd+0x5a>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	4b0c      	ldr	r3, [pc, #48]	@ (800b2e0 <__multadd+0x84>)
 800b2ae:	480d      	ldr	r0, [pc, #52]	@ (800b2e4 <__multadd+0x88>)
 800b2b0:	21ba      	movs	r1, #186	@ 0xba
 800b2b2:	f000 fce1 	bl	800bc78 <__assert_func>
 800b2b6:	6922      	ldr	r2, [r4, #16]
 800b2b8:	3202      	adds	r2, #2
 800b2ba:	f104 010c 	add.w	r1, r4, #12
 800b2be:	0092      	lsls	r2, r2, #2
 800b2c0:	300c      	adds	r0, #12
 800b2c2:	f7ff fb0e 	bl	800a8e2 <memcpy>
 800b2c6:	4621      	mov	r1, r4
 800b2c8:	4638      	mov	r0, r7
 800b2ca:	f7ff ffa5 	bl	800b218 <_Bfree>
 800b2ce:	4644      	mov	r4, r8
 800b2d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b2d4:	3501      	adds	r5, #1
 800b2d6:	615e      	str	r6, [r3, #20]
 800b2d8:	6125      	str	r5, [r4, #16]
 800b2da:	4620      	mov	r0, r4
 800b2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2e0:	0800c742 	.word	0x0800c742
 800b2e4:	0800c7ca 	.word	0x0800c7ca

0800b2e8 <__s2b>:
 800b2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2ec:	460c      	mov	r4, r1
 800b2ee:	4615      	mov	r5, r2
 800b2f0:	461f      	mov	r7, r3
 800b2f2:	2209      	movs	r2, #9
 800b2f4:	3308      	adds	r3, #8
 800b2f6:	4606      	mov	r6, r0
 800b2f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	2201      	movs	r2, #1
 800b300:	429a      	cmp	r2, r3
 800b302:	db09      	blt.n	800b318 <__s2b+0x30>
 800b304:	4630      	mov	r0, r6
 800b306:	f7ff ff47 	bl	800b198 <_Balloc>
 800b30a:	b940      	cbnz	r0, 800b31e <__s2b+0x36>
 800b30c:	4602      	mov	r2, r0
 800b30e:	4b19      	ldr	r3, [pc, #100]	@ (800b374 <__s2b+0x8c>)
 800b310:	4819      	ldr	r0, [pc, #100]	@ (800b378 <__s2b+0x90>)
 800b312:	21d3      	movs	r1, #211	@ 0xd3
 800b314:	f000 fcb0 	bl	800bc78 <__assert_func>
 800b318:	0052      	lsls	r2, r2, #1
 800b31a:	3101      	adds	r1, #1
 800b31c:	e7f0      	b.n	800b300 <__s2b+0x18>
 800b31e:	9b08      	ldr	r3, [sp, #32]
 800b320:	6143      	str	r3, [r0, #20]
 800b322:	2d09      	cmp	r5, #9
 800b324:	f04f 0301 	mov.w	r3, #1
 800b328:	6103      	str	r3, [r0, #16]
 800b32a:	dd16      	ble.n	800b35a <__s2b+0x72>
 800b32c:	f104 0909 	add.w	r9, r4, #9
 800b330:	46c8      	mov	r8, r9
 800b332:	442c      	add	r4, r5
 800b334:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b338:	4601      	mov	r1, r0
 800b33a:	3b30      	subs	r3, #48	@ 0x30
 800b33c:	220a      	movs	r2, #10
 800b33e:	4630      	mov	r0, r6
 800b340:	f7ff ff8c 	bl	800b25c <__multadd>
 800b344:	45a0      	cmp	r8, r4
 800b346:	d1f5      	bne.n	800b334 <__s2b+0x4c>
 800b348:	f1a5 0408 	sub.w	r4, r5, #8
 800b34c:	444c      	add	r4, r9
 800b34e:	1b2d      	subs	r5, r5, r4
 800b350:	1963      	adds	r3, r4, r5
 800b352:	42bb      	cmp	r3, r7
 800b354:	db04      	blt.n	800b360 <__s2b+0x78>
 800b356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b35a:	340a      	adds	r4, #10
 800b35c:	2509      	movs	r5, #9
 800b35e:	e7f6      	b.n	800b34e <__s2b+0x66>
 800b360:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b364:	4601      	mov	r1, r0
 800b366:	3b30      	subs	r3, #48	@ 0x30
 800b368:	220a      	movs	r2, #10
 800b36a:	4630      	mov	r0, r6
 800b36c:	f7ff ff76 	bl	800b25c <__multadd>
 800b370:	e7ee      	b.n	800b350 <__s2b+0x68>
 800b372:	bf00      	nop
 800b374:	0800c742 	.word	0x0800c742
 800b378:	0800c7ca 	.word	0x0800c7ca

0800b37c <__hi0bits>:
 800b37c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b380:	4603      	mov	r3, r0
 800b382:	bf36      	itet	cc
 800b384:	0403      	lslcc	r3, r0, #16
 800b386:	2000      	movcs	r0, #0
 800b388:	2010      	movcc	r0, #16
 800b38a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b38e:	bf3c      	itt	cc
 800b390:	021b      	lslcc	r3, r3, #8
 800b392:	3008      	addcc	r0, #8
 800b394:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b398:	bf3c      	itt	cc
 800b39a:	011b      	lslcc	r3, r3, #4
 800b39c:	3004      	addcc	r0, #4
 800b39e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3a2:	bf3c      	itt	cc
 800b3a4:	009b      	lslcc	r3, r3, #2
 800b3a6:	3002      	addcc	r0, #2
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	db05      	blt.n	800b3b8 <__hi0bits+0x3c>
 800b3ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b3b0:	f100 0001 	add.w	r0, r0, #1
 800b3b4:	bf08      	it	eq
 800b3b6:	2020      	moveq	r0, #32
 800b3b8:	4770      	bx	lr

0800b3ba <__lo0bits>:
 800b3ba:	6803      	ldr	r3, [r0, #0]
 800b3bc:	4602      	mov	r2, r0
 800b3be:	f013 0007 	ands.w	r0, r3, #7
 800b3c2:	d00b      	beq.n	800b3dc <__lo0bits+0x22>
 800b3c4:	07d9      	lsls	r1, r3, #31
 800b3c6:	d421      	bmi.n	800b40c <__lo0bits+0x52>
 800b3c8:	0798      	lsls	r0, r3, #30
 800b3ca:	bf49      	itett	mi
 800b3cc:	085b      	lsrmi	r3, r3, #1
 800b3ce:	089b      	lsrpl	r3, r3, #2
 800b3d0:	2001      	movmi	r0, #1
 800b3d2:	6013      	strmi	r3, [r2, #0]
 800b3d4:	bf5c      	itt	pl
 800b3d6:	6013      	strpl	r3, [r2, #0]
 800b3d8:	2002      	movpl	r0, #2
 800b3da:	4770      	bx	lr
 800b3dc:	b299      	uxth	r1, r3
 800b3de:	b909      	cbnz	r1, 800b3e4 <__lo0bits+0x2a>
 800b3e0:	0c1b      	lsrs	r3, r3, #16
 800b3e2:	2010      	movs	r0, #16
 800b3e4:	b2d9      	uxtb	r1, r3
 800b3e6:	b909      	cbnz	r1, 800b3ec <__lo0bits+0x32>
 800b3e8:	3008      	adds	r0, #8
 800b3ea:	0a1b      	lsrs	r3, r3, #8
 800b3ec:	0719      	lsls	r1, r3, #28
 800b3ee:	bf04      	itt	eq
 800b3f0:	091b      	lsreq	r3, r3, #4
 800b3f2:	3004      	addeq	r0, #4
 800b3f4:	0799      	lsls	r1, r3, #30
 800b3f6:	bf04      	itt	eq
 800b3f8:	089b      	lsreq	r3, r3, #2
 800b3fa:	3002      	addeq	r0, #2
 800b3fc:	07d9      	lsls	r1, r3, #31
 800b3fe:	d403      	bmi.n	800b408 <__lo0bits+0x4e>
 800b400:	085b      	lsrs	r3, r3, #1
 800b402:	f100 0001 	add.w	r0, r0, #1
 800b406:	d003      	beq.n	800b410 <__lo0bits+0x56>
 800b408:	6013      	str	r3, [r2, #0]
 800b40a:	4770      	bx	lr
 800b40c:	2000      	movs	r0, #0
 800b40e:	4770      	bx	lr
 800b410:	2020      	movs	r0, #32
 800b412:	4770      	bx	lr

0800b414 <__i2b>:
 800b414:	b510      	push	{r4, lr}
 800b416:	460c      	mov	r4, r1
 800b418:	2101      	movs	r1, #1
 800b41a:	f7ff febd 	bl	800b198 <_Balloc>
 800b41e:	4602      	mov	r2, r0
 800b420:	b928      	cbnz	r0, 800b42e <__i2b+0x1a>
 800b422:	4b05      	ldr	r3, [pc, #20]	@ (800b438 <__i2b+0x24>)
 800b424:	4805      	ldr	r0, [pc, #20]	@ (800b43c <__i2b+0x28>)
 800b426:	f240 1145 	movw	r1, #325	@ 0x145
 800b42a:	f000 fc25 	bl	800bc78 <__assert_func>
 800b42e:	2301      	movs	r3, #1
 800b430:	6144      	str	r4, [r0, #20]
 800b432:	6103      	str	r3, [r0, #16]
 800b434:	bd10      	pop	{r4, pc}
 800b436:	bf00      	nop
 800b438:	0800c742 	.word	0x0800c742
 800b43c:	0800c7ca 	.word	0x0800c7ca

0800b440 <__multiply>:
 800b440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b444:	4617      	mov	r7, r2
 800b446:	690a      	ldr	r2, [r1, #16]
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	bfa8      	it	ge
 800b44e:	463b      	movge	r3, r7
 800b450:	4689      	mov	r9, r1
 800b452:	bfa4      	itt	ge
 800b454:	460f      	movge	r7, r1
 800b456:	4699      	movge	r9, r3
 800b458:	693d      	ldr	r5, [r7, #16]
 800b45a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	6879      	ldr	r1, [r7, #4]
 800b462:	eb05 060a 	add.w	r6, r5, sl
 800b466:	42b3      	cmp	r3, r6
 800b468:	b085      	sub	sp, #20
 800b46a:	bfb8      	it	lt
 800b46c:	3101      	addlt	r1, #1
 800b46e:	f7ff fe93 	bl	800b198 <_Balloc>
 800b472:	b930      	cbnz	r0, 800b482 <__multiply+0x42>
 800b474:	4602      	mov	r2, r0
 800b476:	4b41      	ldr	r3, [pc, #260]	@ (800b57c <__multiply+0x13c>)
 800b478:	4841      	ldr	r0, [pc, #260]	@ (800b580 <__multiply+0x140>)
 800b47a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b47e:	f000 fbfb 	bl	800bc78 <__assert_func>
 800b482:	f100 0414 	add.w	r4, r0, #20
 800b486:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b48a:	4623      	mov	r3, r4
 800b48c:	2200      	movs	r2, #0
 800b48e:	4573      	cmp	r3, lr
 800b490:	d320      	bcc.n	800b4d4 <__multiply+0x94>
 800b492:	f107 0814 	add.w	r8, r7, #20
 800b496:	f109 0114 	add.w	r1, r9, #20
 800b49a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b49e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b4a2:	9302      	str	r3, [sp, #8]
 800b4a4:	1beb      	subs	r3, r5, r7
 800b4a6:	3b15      	subs	r3, #21
 800b4a8:	f023 0303 	bic.w	r3, r3, #3
 800b4ac:	3304      	adds	r3, #4
 800b4ae:	3715      	adds	r7, #21
 800b4b0:	42bd      	cmp	r5, r7
 800b4b2:	bf38      	it	cc
 800b4b4:	2304      	movcc	r3, #4
 800b4b6:	9301      	str	r3, [sp, #4]
 800b4b8:	9b02      	ldr	r3, [sp, #8]
 800b4ba:	9103      	str	r1, [sp, #12]
 800b4bc:	428b      	cmp	r3, r1
 800b4be:	d80c      	bhi.n	800b4da <__multiply+0x9a>
 800b4c0:	2e00      	cmp	r6, #0
 800b4c2:	dd03      	ble.n	800b4cc <__multiply+0x8c>
 800b4c4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d055      	beq.n	800b578 <__multiply+0x138>
 800b4cc:	6106      	str	r6, [r0, #16]
 800b4ce:	b005      	add	sp, #20
 800b4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4d4:	f843 2b04 	str.w	r2, [r3], #4
 800b4d8:	e7d9      	b.n	800b48e <__multiply+0x4e>
 800b4da:	f8b1 a000 	ldrh.w	sl, [r1]
 800b4de:	f1ba 0f00 	cmp.w	sl, #0
 800b4e2:	d01f      	beq.n	800b524 <__multiply+0xe4>
 800b4e4:	46c4      	mov	ip, r8
 800b4e6:	46a1      	mov	r9, r4
 800b4e8:	2700      	movs	r7, #0
 800b4ea:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b4ee:	f8d9 3000 	ldr.w	r3, [r9]
 800b4f2:	fa1f fb82 	uxth.w	fp, r2
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	fb0a 330b 	mla	r3, sl, fp, r3
 800b4fc:	443b      	add	r3, r7
 800b4fe:	f8d9 7000 	ldr.w	r7, [r9]
 800b502:	0c12      	lsrs	r2, r2, #16
 800b504:	0c3f      	lsrs	r7, r7, #16
 800b506:	fb0a 7202 	mla	r2, sl, r2, r7
 800b50a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b50e:	b29b      	uxth	r3, r3
 800b510:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b514:	4565      	cmp	r5, ip
 800b516:	f849 3b04 	str.w	r3, [r9], #4
 800b51a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b51e:	d8e4      	bhi.n	800b4ea <__multiply+0xaa>
 800b520:	9b01      	ldr	r3, [sp, #4]
 800b522:	50e7      	str	r7, [r4, r3]
 800b524:	9b03      	ldr	r3, [sp, #12]
 800b526:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b52a:	3104      	adds	r1, #4
 800b52c:	f1b9 0f00 	cmp.w	r9, #0
 800b530:	d020      	beq.n	800b574 <__multiply+0x134>
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	4647      	mov	r7, r8
 800b536:	46a4      	mov	ip, r4
 800b538:	f04f 0a00 	mov.w	sl, #0
 800b53c:	f8b7 b000 	ldrh.w	fp, [r7]
 800b540:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b544:	fb09 220b 	mla	r2, r9, fp, r2
 800b548:	4452      	add	r2, sl
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b550:	f84c 3b04 	str.w	r3, [ip], #4
 800b554:	f857 3b04 	ldr.w	r3, [r7], #4
 800b558:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b55c:	f8bc 3000 	ldrh.w	r3, [ip]
 800b560:	fb09 330a 	mla	r3, r9, sl, r3
 800b564:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b568:	42bd      	cmp	r5, r7
 800b56a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b56e:	d8e5      	bhi.n	800b53c <__multiply+0xfc>
 800b570:	9a01      	ldr	r2, [sp, #4]
 800b572:	50a3      	str	r3, [r4, r2]
 800b574:	3404      	adds	r4, #4
 800b576:	e79f      	b.n	800b4b8 <__multiply+0x78>
 800b578:	3e01      	subs	r6, #1
 800b57a:	e7a1      	b.n	800b4c0 <__multiply+0x80>
 800b57c:	0800c742 	.word	0x0800c742
 800b580:	0800c7ca 	.word	0x0800c7ca

0800b584 <__pow5mult>:
 800b584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b588:	4615      	mov	r5, r2
 800b58a:	f012 0203 	ands.w	r2, r2, #3
 800b58e:	4607      	mov	r7, r0
 800b590:	460e      	mov	r6, r1
 800b592:	d007      	beq.n	800b5a4 <__pow5mult+0x20>
 800b594:	4c25      	ldr	r4, [pc, #148]	@ (800b62c <__pow5mult+0xa8>)
 800b596:	3a01      	subs	r2, #1
 800b598:	2300      	movs	r3, #0
 800b59a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b59e:	f7ff fe5d 	bl	800b25c <__multadd>
 800b5a2:	4606      	mov	r6, r0
 800b5a4:	10ad      	asrs	r5, r5, #2
 800b5a6:	d03d      	beq.n	800b624 <__pow5mult+0xa0>
 800b5a8:	69fc      	ldr	r4, [r7, #28]
 800b5aa:	b97c      	cbnz	r4, 800b5cc <__pow5mult+0x48>
 800b5ac:	2010      	movs	r0, #16
 800b5ae:	f000 fb95 	bl	800bcdc <malloc>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	61f8      	str	r0, [r7, #28]
 800b5b6:	b928      	cbnz	r0, 800b5c4 <__pow5mult+0x40>
 800b5b8:	4b1d      	ldr	r3, [pc, #116]	@ (800b630 <__pow5mult+0xac>)
 800b5ba:	481e      	ldr	r0, [pc, #120]	@ (800b634 <__pow5mult+0xb0>)
 800b5bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b5c0:	f000 fb5a 	bl	800bc78 <__assert_func>
 800b5c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5c8:	6004      	str	r4, [r0, #0]
 800b5ca:	60c4      	str	r4, [r0, #12]
 800b5cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b5d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5d4:	b94c      	cbnz	r4, 800b5ea <__pow5mult+0x66>
 800b5d6:	f240 2171 	movw	r1, #625	@ 0x271
 800b5da:	4638      	mov	r0, r7
 800b5dc:	f7ff ff1a 	bl	800b414 <__i2b>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	6003      	str	r3, [r0, #0]
 800b5ea:	f04f 0900 	mov.w	r9, #0
 800b5ee:	07eb      	lsls	r3, r5, #31
 800b5f0:	d50a      	bpl.n	800b608 <__pow5mult+0x84>
 800b5f2:	4631      	mov	r1, r6
 800b5f4:	4622      	mov	r2, r4
 800b5f6:	4638      	mov	r0, r7
 800b5f8:	f7ff ff22 	bl	800b440 <__multiply>
 800b5fc:	4631      	mov	r1, r6
 800b5fe:	4680      	mov	r8, r0
 800b600:	4638      	mov	r0, r7
 800b602:	f7ff fe09 	bl	800b218 <_Bfree>
 800b606:	4646      	mov	r6, r8
 800b608:	106d      	asrs	r5, r5, #1
 800b60a:	d00b      	beq.n	800b624 <__pow5mult+0xa0>
 800b60c:	6820      	ldr	r0, [r4, #0]
 800b60e:	b938      	cbnz	r0, 800b620 <__pow5mult+0x9c>
 800b610:	4622      	mov	r2, r4
 800b612:	4621      	mov	r1, r4
 800b614:	4638      	mov	r0, r7
 800b616:	f7ff ff13 	bl	800b440 <__multiply>
 800b61a:	6020      	str	r0, [r4, #0]
 800b61c:	f8c0 9000 	str.w	r9, [r0]
 800b620:	4604      	mov	r4, r0
 800b622:	e7e4      	b.n	800b5ee <__pow5mult+0x6a>
 800b624:	4630      	mov	r0, r6
 800b626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b62a:	bf00      	nop
 800b62c:	0800c8e8 	.word	0x0800c8e8
 800b630:	0800c7b3 	.word	0x0800c7b3
 800b634:	0800c7ca 	.word	0x0800c7ca

0800b638 <__lshift>:
 800b638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b63c:	460c      	mov	r4, r1
 800b63e:	6849      	ldr	r1, [r1, #4]
 800b640:	6923      	ldr	r3, [r4, #16]
 800b642:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b646:	68a3      	ldr	r3, [r4, #8]
 800b648:	4607      	mov	r7, r0
 800b64a:	4691      	mov	r9, r2
 800b64c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b650:	f108 0601 	add.w	r6, r8, #1
 800b654:	42b3      	cmp	r3, r6
 800b656:	db0b      	blt.n	800b670 <__lshift+0x38>
 800b658:	4638      	mov	r0, r7
 800b65a:	f7ff fd9d 	bl	800b198 <_Balloc>
 800b65e:	4605      	mov	r5, r0
 800b660:	b948      	cbnz	r0, 800b676 <__lshift+0x3e>
 800b662:	4602      	mov	r2, r0
 800b664:	4b28      	ldr	r3, [pc, #160]	@ (800b708 <__lshift+0xd0>)
 800b666:	4829      	ldr	r0, [pc, #164]	@ (800b70c <__lshift+0xd4>)
 800b668:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b66c:	f000 fb04 	bl	800bc78 <__assert_func>
 800b670:	3101      	adds	r1, #1
 800b672:	005b      	lsls	r3, r3, #1
 800b674:	e7ee      	b.n	800b654 <__lshift+0x1c>
 800b676:	2300      	movs	r3, #0
 800b678:	f100 0114 	add.w	r1, r0, #20
 800b67c:	f100 0210 	add.w	r2, r0, #16
 800b680:	4618      	mov	r0, r3
 800b682:	4553      	cmp	r3, sl
 800b684:	db33      	blt.n	800b6ee <__lshift+0xb6>
 800b686:	6920      	ldr	r0, [r4, #16]
 800b688:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b68c:	f104 0314 	add.w	r3, r4, #20
 800b690:	f019 091f 	ands.w	r9, r9, #31
 800b694:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b698:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b69c:	d02b      	beq.n	800b6f6 <__lshift+0xbe>
 800b69e:	f1c9 0e20 	rsb	lr, r9, #32
 800b6a2:	468a      	mov	sl, r1
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	6818      	ldr	r0, [r3, #0]
 800b6a8:	fa00 f009 	lsl.w	r0, r0, r9
 800b6ac:	4310      	orrs	r0, r2
 800b6ae:	f84a 0b04 	str.w	r0, [sl], #4
 800b6b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6b6:	459c      	cmp	ip, r3
 800b6b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b6bc:	d8f3      	bhi.n	800b6a6 <__lshift+0x6e>
 800b6be:	ebac 0304 	sub.w	r3, ip, r4
 800b6c2:	3b15      	subs	r3, #21
 800b6c4:	f023 0303 	bic.w	r3, r3, #3
 800b6c8:	3304      	adds	r3, #4
 800b6ca:	f104 0015 	add.w	r0, r4, #21
 800b6ce:	4560      	cmp	r0, ip
 800b6d0:	bf88      	it	hi
 800b6d2:	2304      	movhi	r3, #4
 800b6d4:	50ca      	str	r2, [r1, r3]
 800b6d6:	b10a      	cbz	r2, 800b6dc <__lshift+0xa4>
 800b6d8:	f108 0602 	add.w	r6, r8, #2
 800b6dc:	3e01      	subs	r6, #1
 800b6de:	4638      	mov	r0, r7
 800b6e0:	612e      	str	r6, [r5, #16]
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	f7ff fd98 	bl	800b218 <_Bfree>
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	e7c5      	b.n	800b682 <__lshift+0x4a>
 800b6f6:	3904      	subs	r1, #4
 800b6f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b700:	459c      	cmp	ip, r3
 800b702:	d8f9      	bhi.n	800b6f8 <__lshift+0xc0>
 800b704:	e7ea      	b.n	800b6dc <__lshift+0xa4>
 800b706:	bf00      	nop
 800b708:	0800c742 	.word	0x0800c742
 800b70c:	0800c7ca 	.word	0x0800c7ca

0800b710 <__mcmp>:
 800b710:	690a      	ldr	r2, [r1, #16]
 800b712:	4603      	mov	r3, r0
 800b714:	6900      	ldr	r0, [r0, #16]
 800b716:	1a80      	subs	r0, r0, r2
 800b718:	b530      	push	{r4, r5, lr}
 800b71a:	d10e      	bne.n	800b73a <__mcmp+0x2a>
 800b71c:	3314      	adds	r3, #20
 800b71e:	3114      	adds	r1, #20
 800b720:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b724:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b728:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b72c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b730:	4295      	cmp	r5, r2
 800b732:	d003      	beq.n	800b73c <__mcmp+0x2c>
 800b734:	d205      	bcs.n	800b742 <__mcmp+0x32>
 800b736:	f04f 30ff 	mov.w	r0, #4294967295
 800b73a:	bd30      	pop	{r4, r5, pc}
 800b73c:	42a3      	cmp	r3, r4
 800b73e:	d3f3      	bcc.n	800b728 <__mcmp+0x18>
 800b740:	e7fb      	b.n	800b73a <__mcmp+0x2a>
 800b742:	2001      	movs	r0, #1
 800b744:	e7f9      	b.n	800b73a <__mcmp+0x2a>
	...

0800b748 <__mdiff>:
 800b748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b74c:	4689      	mov	r9, r1
 800b74e:	4606      	mov	r6, r0
 800b750:	4611      	mov	r1, r2
 800b752:	4648      	mov	r0, r9
 800b754:	4614      	mov	r4, r2
 800b756:	f7ff ffdb 	bl	800b710 <__mcmp>
 800b75a:	1e05      	subs	r5, r0, #0
 800b75c:	d112      	bne.n	800b784 <__mdiff+0x3c>
 800b75e:	4629      	mov	r1, r5
 800b760:	4630      	mov	r0, r6
 800b762:	f7ff fd19 	bl	800b198 <_Balloc>
 800b766:	4602      	mov	r2, r0
 800b768:	b928      	cbnz	r0, 800b776 <__mdiff+0x2e>
 800b76a:	4b3f      	ldr	r3, [pc, #252]	@ (800b868 <__mdiff+0x120>)
 800b76c:	f240 2137 	movw	r1, #567	@ 0x237
 800b770:	483e      	ldr	r0, [pc, #248]	@ (800b86c <__mdiff+0x124>)
 800b772:	f000 fa81 	bl	800bc78 <__assert_func>
 800b776:	2301      	movs	r3, #1
 800b778:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b77c:	4610      	mov	r0, r2
 800b77e:	b003      	add	sp, #12
 800b780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b784:	bfbc      	itt	lt
 800b786:	464b      	movlt	r3, r9
 800b788:	46a1      	movlt	r9, r4
 800b78a:	4630      	mov	r0, r6
 800b78c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b790:	bfba      	itte	lt
 800b792:	461c      	movlt	r4, r3
 800b794:	2501      	movlt	r5, #1
 800b796:	2500      	movge	r5, #0
 800b798:	f7ff fcfe 	bl	800b198 <_Balloc>
 800b79c:	4602      	mov	r2, r0
 800b79e:	b918      	cbnz	r0, 800b7a8 <__mdiff+0x60>
 800b7a0:	4b31      	ldr	r3, [pc, #196]	@ (800b868 <__mdiff+0x120>)
 800b7a2:	f240 2145 	movw	r1, #581	@ 0x245
 800b7a6:	e7e3      	b.n	800b770 <__mdiff+0x28>
 800b7a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b7ac:	6926      	ldr	r6, [r4, #16]
 800b7ae:	60c5      	str	r5, [r0, #12]
 800b7b0:	f109 0310 	add.w	r3, r9, #16
 800b7b4:	f109 0514 	add.w	r5, r9, #20
 800b7b8:	f104 0e14 	add.w	lr, r4, #20
 800b7bc:	f100 0b14 	add.w	fp, r0, #20
 800b7c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b7c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b7c8:	9301      	str	r3, [sp, #4]
 800b7ca:	46d9      	mov	r9, fp
 800b7cc:	f04f 0c00 	mov.w	ip, #0
 800b7d0:	9b01      	ldr	r3, [sp, #4]
 800b7d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b7d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b7da:	9301      	str	r3, [sp, #4]
 800b7dc:	fa1f f38a 	uxth.w	r3, sl
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	b283      	uxth	r3, r0
 800b7e4:	1acb      	subs	r3, r1, r3
 800b7e6:	0c00      	lsrs	r0, r0, #16
 800b7e8:	4463      	add	r3, ip
 800b7ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b7ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b7f8:	4576      	cmp	r6, lr
 800b7fa:	f849 3b04 	str.w	r3, [r9], #4
 800b7fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b802:	d8e5      	bhi.n	800b7d0 <__mdiff+0x88>
 800b804:	1b33      	subs	r3, r6, r4
 800b806:	3b15      	subs	r3, #21
 800b808:	f023 0303 	bic.w	r3, r3, #3
 800b80c:	3415      	adds	r4, #21
 800b80e:	3304      	adds	r3, #4
 800b810:	42a6      	cmp	r6, r4
 800b812:	bf38      	it	cc
 800b814:	2304      	movcc	r3, #4
 800b816:	441d      	add	r5, r3
 800b818:	445b      	add	r3, fp
 800b81a:	461e      	mov	r6, r3
 800b81c:	462c      	mov	r4, r5
 800b81e:	4544      	cmp	r4, r8
 800b820:	d30e      	bcc.n	800b840 <__mdiff+0xf8>
 800b822:	f108 0103 	add.w	r1, r8, #3
 800b826:	1b49      	subs	r1, r1, r5
 800b828:	f021 0103 	bic.w	r1, r1, #3
 800b82c:	3d03      	subs	r5, #3
 800b82e:	45a8      	cmp	r8, r5
 800b830:	bf38      	it	cc
 800b832:	2100      	movcc	r1, #0
 800b834:	440b      	add	r3, r1
 800b836:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b83a:	b191      	cbz	r1, 800b862 <__mdiff+0x11a>
 800b83c:	6117      	str	r7, [r2, #16]
 800b83e:	e79d      	b.n	800b77c <__mdiff+0x34>
 800b840:	f854 1b04 	ldr.w	r1, [r4], #4
 800b844:	46e6      	mov	lr, ip
 800b846:	0c08      	lsrs	r0, r1, #16
 800b848:	fa1c fc81 	uxtah	ip, ip, r1
 800b84c:	4471      	add	r1, lr
 800b84e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b852:	b289      	uxth	r1, r1
 800b854:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b858:	f846 1b04 	str.w	r1, [r6], #4
 800b85c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b860:	e7dd      	b.n	800b81e <__mdiff+0xd6>
 800b862:	3f01      	subs	r7, #1
 800b864:	e7e7      	b.n	800b836 <__mdiff+0xee>
 800b866:	bf00      	nop
 800b868:	0800c742 	.word	0x0800c742
 800b86c:	0800c7ca 	.word	0x0800c7ca

0800b870 <__ulp>:
 800b870:	b082      	sub	sp, #8
 800b872:	ed8d 0b00 	vstr	d0, [sp]
 800b876:	9a01      	ldr	r2, [sp, #4]
 800b878:	4b0f      	ldr	r3, [pc, #60]	@ (800b8b8 <__ulp+0x48>)
 800b87a:	4013      	ands	r3, r2
 800b87c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b880:	2b00      	cmp	r3, #0
 800b882:	dc08      	bgt.n	800b896 <__ulp+0x26>
 800b884:	425b      	negs	r3, r3
 800b886:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b88a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b88e:	da04      	bge.n	800b89a <__ulp+0x2a>
 800b890:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b894:	4113      	asrs	r3, r2
 800b896:	2200      	movs	r2, #0
 800b898:	e008      	b.n	800b8ac <__ulp+0x3c>
 800b89a:	f1a2 0314 	sub.w	r3, r2, #20
 800b89e:	2b1e      	cmp	r3, #30
 800b8a0:	bfda      	itte	le
 800b8a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b8a6:	40da      	lsrle	r2, r3
 800b8a8:	2201      	movgt	r2, #1
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	4610      	mov	r0, r2
 800b8b0:	ec41 0b10 	vmov	d0, r0, r1
 800b8b4:	b002      	add	sp, #8
 800b8b6:	4770      	bx	lr
 800b8b8:	7ff00000 	.word	0x7ff00000

0800b8bc <__b2d>:
 800b8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c0:	6906      	ldr	r6, [r0, #16]
 800b8c2:	f100 0814 	add.w	r8, r0, #20
 800b8c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b8ca:	1f37      	subs	r7, r6, #4
 800b8cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b8d0:	4610      	mov	r0, r2
 800b8d2:	f7ff fd53 	bl	800b37c <__hi0bits>
 800b8d6:	f1c0 0320 	rsb	r3, r0, #32
 800b8da:	280a      	cmp	r0, #10
 800b8dc:	600b      	str	r3, [r1, #0]
 800b8de:	491b      	ldr	r1, [pc, #108]	@ (800b94c <__b2d+0x90>)
 800b8e0:	dc15      	bgt.n	800b90e <__b2d+0x52>
 800b8e2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b8e6:	fa22 f30c 	lsr.w	r3, r2, ip
 800b8ea:	45b8      	cmp	r8, r7
 800b8ec:	ea43 0501 	orr.w	r5, r3, r1
 800b8f0:	bf34      	ite	cc
 800b8f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b8f6:	2300      	movcs	r3, #0
 800b8f8:	3015      	adds	r0, #21
 800b8fa:	fa02 f000 	lsl.w	r0, r2, r0
 800b8fe:	fa23 f30c 	lsr.w	r3, r3, ip
 800b902:	4303      	orrs	r3, r0
 800b904:	461c      	mov	r4, r3
 800b906:	ec45 4b10 	vmov	d0, r4, r5
 800b90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b90e:	45b8      	cmp	r8, r7
 800b910:	bf3a      	itte	cc
 800b912:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b916:	f1a6 0708 	subcc.w	r7, r6, #8
 800b91a:	2300      	movcs	r3, #0
 800b91c:	380b      	subs	r0, #11
 800b91e:	d012      	beq.n	800b946 <__b2d+0x8a>
 800b920:	f1c0 0120 	rsb	r1, r0, #32
 800b924:	fa23 f401 	lsr.w	r4, r3, r1
 800b928:	4082      	lsls	r2, r0
 800b92a:	4322      	orrs	r2, r4
 800b92c:	4547      	cmp	r7, r8
 800b92e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b932:	bf8c      	ite	hi
 800b934:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b938:	2200      	movls	r2, #0
 800b93a:	4083      	lsls	r3, r0
 800b93c:	40ca      	lsrs	r2, r1
 800b93e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b942:	4313      	orrs	r3, r2
 800b944:	e7de      	b.n	800b904 <__b2d+0x48>
 800b946:	ea42 0501 	orr.w	r5, r2, r1
 800b94a:	e7db      	b.n	800b904 <__b2d+0x48>
 800b94c:	3ff00000 	.word	0x3ff00000

0800b950 <__d2b>:
 800b950:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b954:	460f      	mov	r7, r1
 800b956:	2101      	movs	r1, #1
 800b958:	ec59 8b10 	vmov	r8, r9, d0
 800b95c:	4616      	mov	r6, r2
 800b95e:	f7ff fc1b 	bl	800b198 <_Balloc>
 800b962:	4604      	mov	r4, r0
 800b964:	b930      	cbnz	r0, 800b974 <__d2b+0x24>
 800b966:	4602      	mov	r2, r0
 800b968:	4b23      	ldr	r3, [pc, #140]	@ (800b9f8 <__d2b+0xa8>)
 800b96a:	4824      	ldr	r0, [pc, #144]	@ (800b9fc <__d2b+0xac>)
 800b96c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b970:	f000 f982 	bl	800bc78 <__assert_func>
 800b974:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b978:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b97c:	b10d      	cbz	r5, 800b982 <__d2b+0x32>
 800b97e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b982:	9301      	str	r3, [sp, #4]
 800b984:	f1b8 0300 	subs.w	r3, r8, #0
 800b988:	d023      	beq.n	800b9d2 <__d2b+0x82>
 800b98a:	4668      	mov	r0, sp
 800b98c:	9300      	str	r3, [sp, #0]
 800b98e:	f7ff fd14 	bl	800b3ba <__lo0bits>
 800b992:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b996:	b1d0      	cbz	r0, 800b9ce <__d2b+0x7e>
 800b998:	f1c0 0320 	rsb	r3, r0, #32
 800b99c:	fa02 f303 	lsl.w	r3, r2, r3
 800b9a0:	430b      	orrs	r3, r1
 800b9a2:	40c2      	lsrs	r2, r0
 800b9a4:	6163      	str	r3, [r4, #20]
 800b9a6:	9201      	str	r2, [sp, #4]
 800b9a8:	9b01      	ldr	r3, [sp, #4]
 800b9aa:	61a3      	str	r3, [r4, #24]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	bf0c      	ite	eq
 800b9b0:	2201      	moveq	r2, #1
 800b9b2:	2202      	movne	r2, #2
 800b9b4:	6122      	str	r2, [r4, #16]
 800b9b6:	b1a5      	cbz	r5, 800b9e2 <__d2b+0x92>
 800b9b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b9bc:	4405      	add	r5, r0
 800b9be:	603d      	str	r5, [r7, #0]
 800b9c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b9c4:	6030      	str	r0, [r6, #0]
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	b003      	add	sp, #12
 800b9ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9ce:	6161      	str	r1, [r4, #20]
 800b9d0:	e7ea      	b.n	800b9a8 <__d2b+0x58>
 800b9d2:	a801      	add	r0, sp, #4
 800b9d4:	f7ff fcf1 	bl	800b3ba <__lo0bits>
 800b9d8:	9b01      	ldr	r3, [sp, #4]
 800b9da:	6163      	str	r3, [r4, #20]
 800b9dc:	3020      	adds	r0, #32
 800b9de:	2201      	movs	r2, #1
 800b9e0:	e7e8      	b.n	800b9b4 <__d2b+0x64>
 800b9e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b9ea:	6038      	str	r0, [r7, #0]
 800b9ec:	6918      	ldr	r0, [r3, #16]
 800b9ee:	f7ff fcc5 	bl	800b37c <__hi0bits>
 800b9f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b9f6:	e7e5      	b.n	800b9c4 <__d2b+0x74>
 800b9f8:	0800c742 	.word	0x0800c742
 800b9fc:	0800c7ca 	.word	0x0800c7ca

0800ba00 <__ratio>:
 800ba00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba04:	4688      	mov	r8, r1
 800ba06:	4669      	mov	r1, sp
 800ba08:	4681      	mov	r9, r0
 800ba0a:	f7ff ff57 	bl	800b8bc <__b2d>
 800ba0e:	a901      	add	r1, sp, #4
 800ba10:	4640      	mov	r0, r8
 800ba12:	ec55 4b10 	vmov	r4, r5, d0
 800ba16:	f7ff ff51 	bl	800b8bc <__b2d>
 800ba1a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ba1e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ba22:	1ad2      	subs	r2, r2, r3
 800ba24:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ba28:	1a5b      	subs	r3, r3, r1
 800ba2a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800ba2e:	ec57 6b10 	vmov	r6, r7, d0
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	bfd6      	itet	le
 800ba36:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ba3a:	462a      	movgt	r2, r5
 800ba3c:	463a      	movle	r2, r7
 800ba3e:	46ab      	mov	fp, r5
 800ba40:	46a2      	mov	sl, r4
 800ba42:	bfce      	itee	gt
 800ba44:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800ba48:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800ba4c:	ee00 3a90 	vmovle	s1, r3
 800ba50:	ec4b ab17 	vmov	d7, sl, fp
 800ba54:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800ba58:	b003      	add	sp, #12
 800ba5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba5e <__copybits>:
 800ba5e:	3901      	subs	r1, #1
 800ba60:	b570      	push	{r4, r5, r6, lr}
 800ba62:	1149      	asrs	r1, r1, #5
 800ba64:	6914      	ldr	r4, [r2, #16]
 800ba66:	3101      	adds	r1, #1
 800ba68:	f102 0314 	add.w	r3, r2, #20
 800ba6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ba70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ba74:	1f05      	subs	r5, r0, #4
 800ba76:	42a3      	cmp	r3, r4
 800ba78:	d30c      	bcc.n	800ba94 <__copybits+0x36>
 800ba7a:	1aa3      	subs	r3, r4, r2
 800ba7c:	3b11      	subs	r3, #17
 800ba7e:	f023 0303 	bic.w	r3, r3, #3
 800ba82:	3211      	adds	r2, #17
 800ba84:	42a2      	cmp	r2, r4
 800ba86:	bf88      	it	hi
 800ba88:	2300      	movhi	r3, #0
 800ba8a:	4418      	add	r0, r3
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	4288      	cmp	r0, r1
 800ba90:	d305      	bcc.n	800ba9e <__copybits+0x40>
 800ba92:	bd70      	pop	{r4, r5, r6, pc}
 800ba94:	f853 6b04 	ldr.w	r6, [r3], #4
 800ba98:	f845 6f04 	str.w	r6, [r5, #4]!
 800ba9c:	e7eb      	b.n	800ba76 <__copybits+0x18>
 800ba9e:	f840 3b04 	str.w	r3, [r0], #4
 800baa2:	e7f4      	b.n	800ba8e <__copybits+0x30>

0800baa4 <__any_on>:
 800baa4:	f100 0214 	add.w	r2, r0, #20
 800baa8:	6900      	ldr	r0, [r0, #16]
 800baaa:	114b      	asrs	r3, r1, #5
 800baac:	4298      	cmp	r0, r3
 800baae:	b510      	push	{r4, lr}
 800bab0:	db11      	blt.n	800bad6 <__any_on+0x32>
 800bab2:	dd0a      	ble.n	800baca <__any_on+0x26>
 800bab4:	f011 011f 	ands.w	r1, r1, #31
 800bab8:	d007      	beq.n	800baca <__any_on+0x26>
 800baba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800babe:	fa24 f001 	lsr.w	r0, r4, r1
 800bac2:	fa00 f101 	lsl.w	r1, r0, r1
 800bac6:	428c      	cmp	r4, r1
 800bac8:	d10b      	bne.n	800bae2 <__any_on+0x3e>
 800baca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bace:	4293      	cmp	r3, r2
 800bad0:	d803      	bhi.n	800bada <__any_on+0x36>
 800bad2:	2000      	movs	r0, #0
 800bad4:	bd10      	pop	{r4, pc}
 800bad6:	4603      	mov	r3, r0
 800bad8:	e7f7      	b.n	800baca <__any_on+0x26>
 800bada:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bade:	2900      	cmp	r1, #0
 800bae0:	d0f5      	beq.n	800bace <__any_on+0x2a>
 800bae2:	2001      	movs	r0, #1
 800bae4:	e7f6      	b.n	800bad4 <__any_on+0x30>

0800bae6 <__ascii_wctomb>:
 800bae6:	4603      	mov	r3, r0
 800bae8:	4608      	mov	r0, r1
 800baea:	b141      	cbz	r1, 800bafe <__ascii_wctomb+0x18>
 800baec:	2aff      	cmp	r2, #255	@ 0xff
 800baee:	d904      	bls.n	800bafa <__ascii_wctomb+0x14>
 800baf0:	228a      	movs	r2, #138	@ 0x8a
 800baf2:	601a      	str	r2, [r3, #0]
 800baf4:	f04f 30ff 	mov.w	r0, #4294967295
 800baf8:	4770      	bx	lr
 800bafa:	700a      	strb	r2, [r1, #0]
 800bafc:	2001      	movs	r0, #1
 800bafe:	4770      	bx	lr

0800bb00 <__sflush_r>:
 800bb00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb08:	0716      	lsls	r6, r2, #28
 800bb0a:	4605      	mov	r5, r0
 800bb0c:	460c      	mov	r4, r1
 800bb0e:	d454      	bmi.n	800bbba <__sflush_r+0xba>
 800bb10:	684b      	ldr	r3, [r1, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	dc02      	bgt.n	800bb1c <__sflush_r+0x1c>
 800bb16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	dd48      	ble.n	800bbae <__sflush_r+0xae>
 800bb1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb1e:	2e00      	cmp	r6, #0
 800bb20:	d045      	beq.n	800bbae <__sflush_r+0xae>
 800bb22:	2300      	movs	r3, #0
 800bb24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bb28:	682f      	ldr	r7, [r5, #0]
 800bb2a:	6a21      	ldr	r1, [r4, #32]
 800bb2c:	602b      	str	r3, [r5, #0]
 800bb2e:	d030      	beq.n	800bb92 <__sflush_r+0x92>
 800bb30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb32:	89a3      	ldrh	r3, [r4, #12]
 800bb34:	0759      	lsls	r1, r3, #29
 800bb36:	d505      	bpl.n	800bb44 <__sflush_r+0x44>
 800bb38:	6863      	ldr	r3, [r4, #4]
 800bb3a:	1ad2      	subs	r2, r2, r3
 800bb3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb3e:	b10b      	cbz	r3, 800bb44 <__sflush_r+0x44>
 800bb40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb42:	1ad2      	subs	r2, r2, r3
 800bb44:	2300      	movs	r3, #0
 800bb46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb48:	6a21      	ldr	r1, [r4, #32]
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	47b0      	blx	r6
 800bb4e:	1c43      	adds	r3, r0, #1
 800bb50:	89a3      	ldrh	r3, [r4, #12]
 800bb52:	d106      	bne.n	800bb62 <__sflush_r+0x62>
 800bb54:	6829      	ldr	r1, [r5, #0]
 800bb56:	291d      	cmp	r1, #29
 800bb58:	d82b      	bhi.n	800bbb2 <__sflush_r+0xb2>
 800bb5a:	4a2a      	ldr	r2, [pc, #168]	@ (800bc04 <__sflush_r+0x104>)
 800bb5c:	40ca      	lsrs	r2, r1
 800bb5e:	07d6      	lsls	r6, r2, #31
 800bb60:	d527      	bpl.n	800bbb2 <__sflush_r+0xb2>
 800bb62:	2200      	movs	r2, #0
 800bb64:	6062      	str	r2, [r4, #4]
 800bb66:	04d9      	lsls	r1, r3, #19
 800bb68:	6922      	ldr	r2, [r4, #16]
 800bb6a:	6022      	str	r2, [r4, #0]
 800bb6c:	d504      	bpl.n	800bb78 <__sflush_r+0x78>
 800bb6e:	1c42      	adds	r2, r0, #1
 800bb70:	d101      	bne.n	800bb76 <__sflush_r+0x76>
 800bb72:	682b      	ldr	r3, [r5, #0]
 800bb74:	b903      	cbnz	r3, 800bb78 <__sflush_r+0x78>
 800bb76:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb7a:	602f      	str	r7, [r5, #0]
 800bb7c:	b1b9      	cbz	r1, 800bbae <__sflush_r+0xae>
 800bb7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb82:	4299      	cmp	r1, r3
 800bb84:	d002      	beq.n	800bb8c <__sflush_r+0x8c>
 800bb86:	4628      	mov	r0, r5
 800bb88:	f7fe fec2 	bl	800a910 <_free_r>
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb90:	e00d      	b.n	800bbae <__sflush_r+0xae>
 800bb92:	2301      	movs	r3, #1
 800bb94:	4628      	mov	r0, r5
 800bb96:	47b0      	blx	r6
 800bb98:	4602      	mov	r2, r0
 800bb9a:	1c50      	adds	r0, r2, #1
 800bb9c:	d1c9      	bne.n	800bb32 <__sflush_r+0x32>
 800bb9e:	682b      	ldr	r3, [r5, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d0c6      	beq.n	800bb32 <__sflush_r+0x32>
 800bba4:	2b1d      	cmp	r3, #29
 800bba6:	d001      	beq.n	800bbac <__sflush_r+0xac>
 800bba8:	2b16      	cmp	r3, #22
 800bbaa:	d11e      	bne.n	800bbea <__sflush_r+0xea>
 800bbac:	602f      	str	r7, [r5, #0]
 800bbae:	2000      	movs	r0, #0
 800bbb0:	e022      	b.n	800bbf8 <__sflush_r+0xf8>
 800bbb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbb6:	b21b      	sxth	r3, r3
 800bbb8:	e01b      	b.n	800bbf2 <__sflush_r+0xf2>
 800bbba:	690f      	ldr	r7, [r1, #16]
 800bbbc:	2f00      	cmp	r7, #0
 800bbbe:	d0f6      	beq.n	800bbae <__sflush_r+0xae>
 800bbc0:	0793      	lsls	r3, r2, #30
 800bbc2:	680e      	ldr	r6, [r1, #0]
 800bbc4:	bf08      	it	eq
 800bbc6:	694b      	ldreq	r3, [r1, #20]
 800bbc8:	600f      	str	r7, [r1, #0]
 800bbca:	bf18      	it	ne
 800bbcc:	2300      	movne	r3, #0
 800bbce:	eba6 0807 	sub.w	r8, r6, r7
 800bbd2:	608b      	str	r3, [r1, #8]
 800bbd4:	f1b8 0f00 	cmp.w	r8, #0
 800bbd8:	dde9      	ble.n	800bbae <__sflush_r+0xae>
 800bbda:	6a21      	ldr	r1, [r4, #32]
 800bbdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bbde:	4643      	mov	r3, r8
 800bbe0:	463a      	mov	r2, r7
 800bbe2:	4628      	mov	r0, r5
 800bbe4:	47b0      	blx	r6
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	dc08      	bgt.n	800bbfc <__sflush_r+0xfc>
 800bbea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbf2:	81a3      	strh	r3, [r4, #12]
 800bbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbfc:	4407      	add	r7, r0
 800bbfe:	eba8 0800 	sub.w	r8, r8, r0
 800bc02:	e7e7      	b.n	800bbd4 <__sflush_r+0xd4>
 800bc04:	20400001 	.word	0x20400001

0800bc08 <_fflush_r>:
 800bc08:	b538      	push	{r3, r4, r5, lr}
 800bc0a:	690b      	ldr	r3, [r1, #16]
 800bc0c:	4605      	mov	r5, r0
 800bc0e:	460c      	mov	r4, r1
 800bc10:	b913      	cbnz	r3, 800bc18 <_fflush_r+0x10>
 800bc12:	2500      	movs	r5, #0
 800bc14:	4628      	mov	r0, r5
 800bc16:	bd38      	pop	{r3, r4, r5, pc}
 800bc18:	b118      	cbz	r0, 800bc22 <_fflush_r+0x1a>
 800bc1a:	6a03      	ldr	r3, [r0, #32]
 800bc1c:	b90b      	cbnz	r3, 800bc22 <_fflush_r+0x1a>
 800bc1e:	f7fe fd59 	bl	800a6d4 <__sinit>
 800bc22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d0f3      	beq.n	800bc12 <_fflush_r+0xa>
 800bc2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc2c:	07d0      	lsls	r0, r2, #31
 800bc2e:	d404      	bmi.n	800bc3a <_fflush_r+0x32>
 800bc30:	0599      	lsls	r1, r3, #22
 800bc32:	d402      	bmi.n	800bc3a <_fflush_r+0x32>
 800bc34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc36:	f7fe fe52 	bl	800a8de <__retarget_lock_acquire_recursive>
 800bc3a:	4628      	mov	r0, r5
 800bc3c:	4621      	mov	r1, r4
 800bc3e:	f7ff ff5f 	bl	800bb00 <__sflush_r>
 800bc42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc44:	07da      	lsls	r2, r3, #31
 800bc46:	4605      	mov	r5, r0
 800bc48:	d4e4      	bmi.n	800bc14 <_fflush_r+0xc>
 800bc4a:	89a3      	ldrh	r3, [r4, #12]
 800bc4c:	059b      	lsls	r3, r3, #22
 800bc4e:	d4e1      	bmi.n	800bc14 <_fflush_r+0xc>
 800bc50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc52:	f7fe fe45 	bl	800a8e0 <__retarget_lock_release_recursive>
 800bc56:	e7dd      	b.n	800bc14 <_fflush_r+0xc>

0800bc58 <_sbrk_r>:
 800bc58:	b538      	push	{r3, r4, r5, lr}
 800bc5a:	4d06      	ldr	r5, [pc, #24]	@ (800bc74 <_sbrk_r+0x1c>)
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	4604      	mov	r4, r0
 800bc60:	4608      	mov	r0, r1
 800bc62:	602b      	str	r3, [r5, #0]
 800bc64:	f7f5 fd5e 	bl	8001724 <_sbrk>
 800bc68:	1c43      	adds	r3, r0, #1
 800bc6a:	d102      	bne.n	800bc72 <_sbrk_r+0x1a>
 800bc6c:	682b      	ldr	r3, [r5, #0]
 800bc6e:	b103      	cbz	r3, 800bc72 <_sbrk_r+0x1a>
 800bc70:	6023      	str	r3, [r4, #0]
 800bc72:	bd38      	pop	{r3, r4, r5, pc}
 800bc74:	24000588 	.word	0x24000588

0800bc78 <__assert_func>:
 800bc78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc7a:	4614      	mov	r4, r2
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	4b09      	ldr	r3, [pc, #36]	@ (800bca4 <__assert_func+0x2c>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4605      	mov	r5, r0
 800bc84:	68d8      	ldr	r0, [r3, #12]
 800bc86:	b14c      	cbz	r4, 800bc9c <__assert_func+0x24>
 800bc88:	4b07      	ldr	r3, [pc, #28]	@ (800bca8 <__assert_func+0x30>)
 800bc8a:	9100      	str	r1, [sp, #0]
 800bc8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc90:	4906      	ldr	r1, [pc, #24]	@ (800bcac <__assert_func+0x34>)
 800bc92:	462b      	mov	r3, r5
 800bc94:	f000 f82a 	bl	800bcec <fiprintf>
 800bc98:	f000 f83a 	bl	800bd10 <abort>
 800bc9c:	4b04      	ldr	r3, [pc, #16]	@ (800bcb0 <__assert_func+0x38>)
 800bc9e:	461c      	mov	r4, r3
 800bca0:	e7f3      	b.n	800bc8a <__assert_func+0x12>
 800bca2:	bf00      	nop
 800bca4:	240001a0 	.word	0x240001a0
 800bca8:	0800c823 	.word	0x0800c823
 800bcac:	0800c830 	.word	0x0800c830
 800bcb0:	0800c85e 	.word	0x0800c85e

0800bcb4 <_calloc_r>:
 800bcb4:	b570      	push	{r4, r5, r6, lr}
 800bcb6:	fba1 5402 	umull	r5, r4, r1, r2
 800bcba:	b934      	cbnz	r4, 800bcca <_calloc_r+0x16>
 800bcbc:	4629      	mov	r1, r5
 800bcbe:	f7ff f9cd 	bl	800b05c <_malloc_r>
 800bcc2:	4606      	mov	r6, r0
 800bcc4:	b928      	cbnz	r0, 800bcd2 <_calloc_r+0x1e>
 800bcc6:	4630      	mov	r0, r6
 800bcc8:	bd70      	pop	{r4, r5, r6, pc}
 800bcca:	220c      	movs	r2, #12
 800bccc:	6002      	str	r2, [r0, #0]
 800bcce:	2600      	movs	r6, #0
 800bcd0:	e7f9      	b.n	800bcc6 <_calloc_r+0x12>
 800bcd2:	462a      	mov	r2, r5
 800bcd4:	4621      	mov	r1, r4
 800bcd6:	f7fe fd76 	bl	800a7c6 <memset>
 800bcda:	e7f4      	b.n	800bcc6 <_calloc_r+0x12>

0800bcdc <malloc>:
 800bcdc:	4b02      	ldr	r3, [pc, #8]	@ (800bce8 <malloc+0xc>)
 800bcde:	4601      	mov	r1, r0
 800bce0:	6818      	ldr	r0, [r3, #0]
 800bce2:	f7ff b9bb 	b.w	800b05c <_malloc_r>
 800bce6:	bf00      	nop
 800bce8:	240001a0 	.word	0x240001a0

0800bcec <fiprintf>:
 800bcec:	b40e      	push	{r1, r2, r3}
 800bcee:	b503      	push	{r0, r1, lr}
 800bcf0:	4601      	mov	r1, r0
 800bcf2:	ab03      	add	r3, sp, #12
 800bcf4:	4805      	ldr	r0, [pc, #20]	@ (800bd0c <fiprintf+0x20>)
 800bcf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcfa:	6800      	ldr	r0, [r0, #0]
 800bcfc:	9301      	str	r3, [sp, #4]
 800bcfe:	f000 f837 	bl	800bd70 <_vfiprintf_r>
 800bd02:	b002      	add	sp, #8
 800bd04:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd08:	b003      	add	sp, #12
 800bd0a:	4770      	bx	lr
 800bd0c:	240001a0 	.word	0x240001a0

0800bd10 <abort>:
 800bd10:	b508      	push	{r3, lr}
 800bd12:	2006      	movs	r0, #6
 800bd14:	f000 fb8c 	bl	800c430 <raise>
 800bd18:	2001      	movs	r0, #1
 800bd1a:	f7f5 fc8b 	bl	8001634 <_exit>

0800bd1e <__sfputc_r>:
 800bd1e:	6893      	ldr	r3, [r2, #8]
 800bd20:	3b01      	subs	r3, #1
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	b410      	push	{r4}
 800bd26:	6093      	str	r3, [r2, #8]
 800bd28:	da08      	bge.n	800bd3c <__sfputc_r+0x1e>
 800bd2a:	6994      	ldr	r4, [r2, #24]
 800bd2c:	42a3      	cmp	r3, r4
 800bd2e:	db01      	blt.n	800bd34 <__sfputc_r+0x16>
 800bd30:	290a      	cmp	r1, #10
 800bd32:	d103      	bne.n	800bd3c <__sfputc_r+0x1e>
 800bd34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd38:	f000 babe 	b.w	800c2b8 <__swbuf_r>
 800bd3c:	6813      	ldr	r3, [r2, #0]
 800bd3e:	1c58      	adds	r0, r3, #1
 800bd40:	6010      	str	r0, [r2, #0]
 800bd42:	7019      	strb	r1, [r3, #0]
 800bd44:	4608      	mov	r0, r1
 800bd46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <__sfputs_r>:
 800bd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd4e:	4606      	mov	r6, r0
 800bd50:	460f      	mov	r7, r1
 800bd52:	4614      	mov	r4, r2
 800bd54:	18d5      	adds	r5, r2, r3
 800bd56:	42ac      	cmp	r4, r5
 800bd58:	d101      	bne.n	800bd5e <__sfputs_r+0x12>
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	e007      	b.n	800bd6e <__sfputs_r+0x22>
 800bd5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd62:	463a      	mov	r2, r7
 800bd64:	4630      	mov	r0, r6
 800bd66:	f7ff ffda 	bl	800bd1e <__sfputc_r>
 800bd6a:	1c43      	adds	r3, r0, #1
 800bd6c:	d1f3      	bne.n	800bd56 <__sfputs_r+0xa>
 800bd6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd70 <_vfiprintf_r>:
 800bd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd74:	460d      	mov	r5, r1
 800bd76:	b09d      	sub	sp, #116	@ 0x74
 800bd78:	4614      	mov	r4, r2
 800bd7a:	4698      	mov	r8, r3
 800bd7c:	4606      	mov	r6, r0
 800bd7e:	b118      	cbz	r0, 800bd88 <_vfiprintf_r+0x18>
 800bd80:	6a03      	ldr	r3, [r0, #32]
 800bd82:	b90b      	cbnz	r3, 800bd88 <_vfiprintf_r+0x18>
 800bd84:	f7fe fca6 	bl	800a6d4 <__sinit>
 800bd88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd8a:	07d9      	lsls	r1, r3, #31
 800bd8c:	d405      	bmi.n	800bd9a <_vfiprintf_r+0x2a>
 800bd8e:	89ab      	ldrh	r3, [r5, #12]
 800bd90:	059a      	lsls	r2, r3, #22
 800bd92:	d402      	bmi.n	800bd9a <_vfiprintf_r+0x2a>
 800bd94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd96:	f7fe fda2 	bl	800a8de <__retarget_lock_acquire_recursive>
 800bd9a:	89ab      	ldrh	r3, [r5, #12]
 800bd9c:	071b      	lsls	r3, r3, #28
 800bd9e:	d501      	bpl.n	800bda4 <_vfiprintf_r+0x34>
 800bda0:	692b      	ldr	r3, [r5, #16]
 800bda2:	b99b      	cbnz	r3, 800bdcc <_vfiprintf_r+0x5c>
 800bda4:	4629      	mov	r1, r5
 800bda6:	4630      	mov	r0, r6
 800bda8:	f000 fac4 	bl	800c334 <__swsetup_r>
 800bdac:	b170      	cbz	r0, 800bdcc <_vfiprintf_r+0x5c>
 800bdae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdb0:	07dc      	lsls	r4, r3, #31
 800bdb2:	d504      	bpl.n	800bdbe <_vfiprintf_r+0x4e>
 800bdb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb8:	b01d      	add	sp, #116	@ 0x74
 800bdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdbe:	89ab      	ldrh	r3, [r5, #12]
 800bdc0:	0598      	lsls	r0, r3, #22
 800bdc2:	d4f7      	bmi.n	800bdb4 <_vfiprintf_r+0x44>
 800bdc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdc6:	f7fe fd8b 	bl	800a8e0 <__retarget_lock_release_recursive>
 800bdca:	e7f3      	b.n	800bdb4 <_vfiprintf_r+0x44>
 800bdcc:	2300      	movs	r3, #0
 800bdce:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdd0:	2320      	movs	r3, #32
 800bdd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bdd6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdda:	2330      	movs	r3, #48	@ 0x30
 800bddc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bf8c <_vfiprintf_r+0x21c>
 800bde0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bde4:	f04f 0901 	mov.w	r9, #1
 800bde8:	4623      	mov	r3, r4
 800bdea:	469a      	mov	sl, r3
 800bdec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdf0:	b10a      	cbz	r2, 800bdf6 <_vfiprintf_r+0x86>
 800bdf2:	2a25      	cmp	r2, #37	@ 0x25
 800bdf4:	d1f9      	bne.n	800bdea <_vfiprintf_r+0x7a>
 800bdf6:	ebba 0b04 	subs.w	fp, sl, r4
 800bdfa:	d00b      	beq.n	800be14 <_vfiprintf_r+0xa4>
 800bdfc:	465b      	mov	r3, fp
 800bdfe:	4622      	mov	r2, r4
 800be00:	4629      	mov	r1, r5
 800be02:	4630      	mov	r0, r6
 800be04:	f7ff ffa2 	bl	800bd4c <__sfputs_r>
 800be08:	3001      	adds	r0, #1
 800be0a:	f000 80a7 	beq.w	800bf5c <_vfiprintf_r+0x1ec>
 800be0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be10:	445a      	add	r2, fp
 800be12:	9209      	str	r2, [sp, #36]	@ 0x24
 800be14:	f89a 3000 	ldrb.w	r3, [sl]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f000 809f 	beq.w	800bf5c <_vfiprintf_r+0x1ec>
 800be1e:	2300      	movs	r3, #0
 800be20:	f04f 32ff 	mov.w	r2, #4294967295
 800be24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be28:	f10a 0a01 	add.w	sl, sl, #1
 800be2c:	9304      	str	r3, [sp, #16]
 800be2e:	9307      	str	r3, [sp, #28]
 800be30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be34:	931a      	str	r3, [sp, #104]	@ 0x68
 800be36:	4654      	mov	r4, sl
 800be38:	2205      	movs	r2, #5
 800be3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be3e:	4853      	ldr	r0, [pc, #332]	@ (800bf8c <_vfiprintf_r+0x21c>)
 800be40:	f7f4 fa76 	bl	8000330 <memchr>
 800be44:	9a04      	ldr	r2, [sp, #16]
 800be46:	b9d8      	cbnz	r0, 800be80 <_vfiprintf_r+0x110>
 800be48:	06d1      	lsls	r1, r2, #27
 800be4a:	bf44      	itt	mi
 800be4c:	2320      	movmi	r3, #32
 800be4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be52:	0713      	lsls	r3, r2, #28
 800be54:	bf44      	itt	mi
 800be56:	232b      	movmi	r3, #43	@ 0x2b
 800be58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be5c:	f89a 3000 	ldrb.w	r3, [sl]
 800be60:	2b2a      	cmp	r3, #42	@ 0x2a
 800be62:	d015      	beq.n	800be90 <_vfiprintf_r+0x120>
 800be64:	9a07      	ldr	r2, [sp, #28]
 800be66:	4654      	mov	r4, sl
 800be68:	2000      	movs	r0, #0
 800be6a:	f04f 0c0a 	mov.w	ip, #10
 800be6e:	4621      	mov	r1, r4
 800be70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be74:	3b30      	subs	r3, #48	@ 0x30
 800be76:	2b09      	cmp	r3, #9
 800be78:	d94b      	bls.n	800bf12 <_vfiprintf_r+0x1a2>
 800be7a:	b1b0      	cbz	r0, 800beaa <_vfiprintf_r+0x13a>
 800be7c:	9207      	str	r2, [sp, #28]
 800be7e:	e014      	b.n	800beaa <_vfiprintf_r+0x13a>
 800be80:	eba0 0308 	sub.w	r3, r0, r8
 800be84:	fa09 f303 	lsl.w	r3, r9, r3
 800be88:	4313      	orrs	r3, r2
 800be8a:	9304      	str	r3, [sp, #16]
 800be8c:	46a2      	mov	sl, r4
 800be8e:	e7d2      	b.n	800be36 <_vfiprintf_r+0xc6>
 800be90:	9b03      	ldr	r3, [sp, #12]
 800be92:	1d19      	adds	r1, r3, #4
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	9103      	str	r1, [sp, #12]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	bfbb      	ittet	lt
 800be9c:	425b      	neglt	r3, r3
 800be9e:	f042 0202 	orrlt.w	r2, r2, #2
 800bea2:	9307      	strge	r3, [sp, #28]
 800bea4:	9307      	strlt	r3, [sp, #28]
 800bea6:	bfb8      	it	lt
 800bea8:	9204      	strlt	r2, [sp, #16]
 800beaa:	7823      	ldrb	r3, [r4, #0]
 800beac:	2b2e      	cmp	r3, #46	@ 0x2e
 800beae:	d10a      	bne.n	800bec6 <_vfiprintf_r+0x156>
 800beb0:	7863      	ldrb	r3, [r4, #1]
 800beb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800beb4:	d132      	bne.n	800bf1c <_vfiprintf_r+0x1ac>
 800beb6:	9b03      	ldr	r3, [sp, #12]
 800beb8:	1d1a      	adds	r2, r3, #4
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	9203      	str	r2, [sp, #12]
 800bebe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bec2:	3402      	adds	r4, #2
 800bec4:	9305      	str	r3, [sp, #20]
 800bec6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bf9c <_vfiprintf_r+0x22c>
 800beca:	7821      	ldrb	r1, [r4, #0]
 800becc:	2203      	movs	r2, #3
 800bece:	4650      	mov	r0, sl
 800bed0:	f7f4 fa2e 	bl	8000330 <memchr>
 800bed4:	b138      	cbz	r0, 800bee6 <_vfiprintf_r+0x176>
 800bed6:	9b04      	ldr	r3, [sp, #16]
 800bed8:	eba0 000a 	sub.w	r0, r0, sl
 800bedc:	2240      	movs	r2, #64	@ 0x40
 800bede:	4082      	lsls	r2, r0
 800bee0:	4313      	orrs	r3, r2
 800bee2:	3401      	adds	r4, #1
 800bee4:	9304      	str	r3, [sp, #16]
 800bee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beea:	4829      	ldr	r0, [pc, #164]	@ (800bf90 <_vfiprintf_r+0x220>)
 800beec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bef0:	2206      	movs	r2, #6
 800bef2:	f7f4 fa1d 	bl	8000330 <memchr>
 800bef6:	2800      	cmp	r0, #0
 800bef8:	d03f      	beq.n	800bf7a <_vfiprintf_r+0x20a>
 800befa:	4b26      	ldr	r3, [pc, #152]	@ (800bf94 <_vfiprintf_r+0x224>)
 800befc:	bb1b      	cbnz	r3, 800bf46 <_vfiprintf_r+0x1d6>
 800befe:	9b03      	ldr	r3, [sp, #12]
 800bf00:	3307      	adds	r3, #7
 800bf02:	f023 0307 	bic.w	r3, r3, #7
 800bf06:	3308      	adds	r3, #8
 800bf08:	9303      	str	r3, [sp, #12]
 800bf0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf0c:	443b      	add	r3, r7
 800bf0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf10:	e76a      	b.n	800bde8 <_vfiprintf_r+0x78>
 800bf12:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf16:	460c      	mov	r4, r1
 800bf18:	2001      	movs	r0, #1
 800bf1a:	e7a8      	b.n	800be6e <_vfiprintf_r+0xfe>
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	3401      	adds	r4, #1
 800bf20:	9305      	str	r3, [sp, #20]
 800bf22:	4619      	mov	r1, r3
 800bf24:	f04f 0c0a 	mov.w	ip, #10
 800bf28:	4620      	mov	r0, r4
 800bf2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf2e:	3a30      	subs	r2, #48	@ 0x30
 800bf30:	2a09      	cmp	r2, #9
 800bf32:	d903      	bls.n	800bf3c <_vfiprintf_r+0x1cc>
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d0c6      	beq.n	800bec6 <_vfiprintf_r+0x156>
 800bf38:	9105      	str	r1, [sp, #20]
 800bf3a:	e7c4      	b.n	800bec6 <_vfiprintf_r+0x156>
 800bf3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf40:	4604      	mov	r4, r0
 800bf42:	2301      	movs	r3, #1
 800bf44:	e7f0      	b.n	800bf28 <_vfiprintf_r+0x1b8>
 800bf46:	ab03      	add	r3, sp, #12
 800bf48:	9300      	str	r3, [sp, #0]
 800bf4a:	462a      	mov	r2, r5
 800bf4c:	4b12      	ldr	r3, [pc, #72]	@ (800bf98 <_vfiprintf_r+0x228>)
 800bf4e:	a904      	add	r1, sp, #16
 800bf50:	4630      	mov	r0, r6
 800bf52:	f3af 8000 	nop.w
 800bf56:	4607      	mov	r7, r0
 800bf58:	1c78      	adds	r0, r7, #1
 800bf5a:	d1d6      	bne.n	800bf0a <_vfiprintf_r+0x19a>
 800bf5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf5e:	07d9      	lsls	r1, r3, #31
 800bf60:	d405      	bmi.n	800bf6e <_vfiprintf_r+0x1fe>
 800bf62:	89ab      	ldrh	r3, [r5, #12]
 800bf64:	059a      	lsls	r2, r3, #22
 800bf66:	d402      	bmi.n	800bf6e <_vfiprintf_r+0x1fe>
 800bf68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf6a:	f7fe fcb9 	bl	800a8e0 <__retarget_lock_release_recursive>
 800bf6e:	89ab      	ldrh	r3, [r5, #12]
 800bf70:	065b      	lsls	r3, r3, #25
 800bf72:	f53f af1f 	bmi.w	800bdb4 <_vfiprintf_r+0x44>
 800bf76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf78:	e71e      	b.n	800bdb8 <_vfiprintf_r+0x48>
 800bf7a:	ab03      	add	r3, sp, #12
 800bf7c:	9300      	str	r3, [sp, #0]
 800bf7e:	462a      	mov	r2, r5
 800bf80:	4b05      	ldr	r3, [pc, #20]	@ (800bf98 <_vfiprintf_r+0x228>)
 800bf82:	a904      	add	r1, sp, #16
 800bf84:	4630      	mov	r0, r6
 800bf86:	f000 f879 	bl	800c07c <_printf_i>
 800bf8a:	e7e4      	b.n	800bf56 <_vfiprintf_r+0x1e6>
 800bf8c:	0800c85f 	.word	0x0800c85f
 800bf90:	0800c869 	.word	0x0800c869
 800bf94:	00000000 	.word	0x00000000
 800bf98:	0800bd4d 	.word	0x0800bd4d
 800bf9c:	0800c865 	.word	0x0800c865

0800bfa0 <_printf_common>:
 800bfa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa4:	4616      	mov	r6, r2
 800bfa6:	4698      	mov	r8, r3
 800bfa8:	688a      	ldr	r2, [r1, #8]
 800bfaa:	690b      	ldr	r3, [r1, #16]
 800bfac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	bfb8      	it	lt
 800bfb4:	4613      	movlt	r3, r2
 800bfb6:	6033      	str	r3, [r6, #0]
 800bfb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bfbc:	4607      	mov	r7, r0
 800bfbe:	460c      	mov	r4, r1
 800bfc0:	b10a      	cbz	r2, 800bfc6 <_printf_common+0x26>
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	6033      	str	r3, [r6, #0]
 800bfc6:	6823      	ldr	r3, [r4, #0]
 800bfc8:	0699      	lsls	r1, r3, #26
 800bfca:	bf42      	ittt	mi
 800bfcc:	6833      	ldrmi	r3, [r6, #0]
 800bfce:	3302      	addmi	r3, #2
 800bfd0:	6033      	strmi	r3, [r6, #0]
 800bfd2:	6825      	ldr	r5, [r4, #0]
 800bfd4:	f015 0506 	ands.w	r5, r5, #6
 800bfd8:	d106      	bne.n	800bfe8 <_printf_common+0x48>
 800bfda:	f104 0a19 	add.w	sl, r4, #25
 800bfde:	68e3      	ldr	r3, [r4, #12]
 800bfe0:	6832      	ldr	r2, [r6, #0]
 800bfe2:	1a9b      	subs	r3, r3, r2
 800bfe4:	42ab      	cmp	r3, r5
 800bfe6:	dc26      	bgt.n	800c036 <_printf_common+0x96>
 800bfe8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bfec:	6822      	ldr	r2, [r4, #0]
 800bfee:	3b00      	subs	r3, #0
 800bff0:	bf18      	it	ne
 800bff2:	2301      	movne	r3, #1
 800bff4:	0692      	lsls	r2, r2, #26
 800bff6:	d42b      	bmi.n	800c050 <_printf_common+0xb0>
 800bff8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bffc:	4641      	mov	r1, r8
 800bffe:	4638      	mov	r0, r7
 800c000:	47c8      	blx	r9
 800c002:	3001      	adds	r0, #1
 800c004:	d01e      	beq.n	800c044 <_printf_common+0xa4>
 800c006:	6823      	ldr	r3, [r4, #0]
 800c008:	6922      	ldr	r2, [r4, #16]
 800c00a:	f003 0306 	and.w	r3, r3, #6
 800c00e:	2b04      	cmp	r3, #4
 800c010:	bf02      	ittt	eq
 800c012:	68e5      	ldreq	r5, [r4, #12]
 800c014:	6833      	ldreq	r3, [r6, #0]
 800c016:	1aed      	subeq	r5, r5, r3
 800c018:	68a3      	ldr	r3, [r4, #8]
 800c01a:	bf0c      	ite	eq
 800c01c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c020:	2500      	movne	r5, #0
 800c022:	4293      	cmp	r3, r2
 800c024:	bfc4      	itt	gt
 800c026:	1a9b      	subgt	r3, r3, r2
 800c028:	18ed      	addgt	r5, r5, r3
 800c02a:	2600      	movs	r6, #0
 800c02c:	341a      	adds	r4, #26
 800c02e:	42b5      	cmp	r5, r6
 800c030:	d11a      	bne.n	800c068 <_printf_common+0xc8>
 800c032:	2000      	movs	r0, #0
 800c034:	e008      	b.n	800c048 <_printf_common+0xa8>
 800c036:	2301      	movs	r3, #1
 800c038:	4652      	mov	r2, sl
 800c03a:	4641      	mov	r1, r8
 800c03c:	4638      	mov	r0, r7
 800c03e:	47c8      	blx	r9
 800c040:	3001      	adds	r0, #1
 800c042:	d103      	bne.n	800c04c <_printf_common+0xac>
 800c044:	f04f 30ff 	mov.w	r0, #4294967295
 800c048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c04c:	3501      	adds	r5, #1
 800c04e:	e7c6      	b.n	800bfde <_printf_common+0x3e>
 800c050:	18e1      	adds	r1, r4, r3
 800c052:	1c5a      	adds	r2, r3, #1
 800c054:	2030      	movs	r0, #48	@ 0x30
 800c056:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c05a:	4422      	add	r2, r4
 800c05c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c060:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c064:	3302      	adds	r3, #2
 800c066:	e7c7      	b.n	800bff8 <_printf_common+0x58>
 800c068:	2301      	movs	r3, #1
 800c06a:	4622      	mov	r2, r4
 800c06c:	4641      	mov	r1, r8
 800c06e:	4638      	mov	r0, r7
 800c070:	47c8      	blx	r9
 800c072:	3001      	adds	r0, #1
 800c074:	d0e6      	beq.n	800c044 <_printf_common+0xa4>
 800c076:	3601      	adds	r6, #1
 800c078:	e7d9      	b.n	800c02e <_printf_common+0x8e>
	...

0800c07c <_printf_i>:
 800c07c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c080:	7e0f      	ldrb	r7, [r1, #24]
 800c082:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c084:	2f78      	cmp	r7, #120	@ 0x78
 800c086:	4691      	mov	r9, r2
 800c088:	4680      	mov	r8, r0
 800c08a:	460c      	mov	r4, r1
 800c08c:	469a      	mov	sl, r3
 800c08e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c092:	d807      	bhi.n	800c0a4 <_printf_i+0x28>
 800c094:	2f62      	cmp	r7, #98	@ 0x62
 800c096:	d80a      	bhi.n	800c0ae <_printf_i+0x32>
 800c098:	2f00      	cmp	r7, #0
 800c09a:	f000 80d1 	beq.w	800c240 <_printf_i+0x1c4>
 800c09e:	2f58      	cmp	r7, #88	@ 0x58
 800c0a0:	f000 80b8 	beq.w	800c214 <_printf_i+0x198>
 800c0a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c0a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c0ac:	e03a      	b.n	800c124 <_printf_i+0xa8>
 800c0ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c0b2:	2b15      	cmp	r3, #21
 800c0b4:	d8f6      	bhi.n	800c0a4 <_printf_i+0x28>
 800c0b6:	a101      	add	r1, pc, #4	@ (adr r1, 800c0bc <_printf_i+0x40>)
 800c0b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0bc:	0800c115 	.word	0x0800c115
 800c0c0:	0800c129 	.word	0x0800c129
 800c0c4:	0800c0a5 	.word	0x0800c0a5
 800c0c8:	0800c0a5 	.word	0x0800c0a5
 800c0cc:	0800c0a5 	.word	0x0800c0a5
 800c0d0:	0800c0a5 	.word	0x0800c0a5
 800c0d4:	0800c129 	.word	0x0800c129
 800c0d8:	0800c0a5 	.word	0x0800c0a5
 800c0dc:	0800c0a5 	.word	0x0800c0a5
 800c0e0:	0800c0a5 	.word	0x0800c0a5
 800c0e4:	0800c0a5 	.word	0x0800c0a5
 800c0e8:	0800c227 	.word	0x0800c227
 800c0ec:	0800c153 	.word	0x0800c153
 800c0f0:	0800c1e1 	.word	0x0800c1e1
 800c0f4:	0800c0a5 	.word	0x0800c0a5
 800c0f8:	0800c0a5 	.word	0x0800c0a5
 800c0fc:	0800c249 	.word	0x0800c249
 800c100:	0800c0a5 	.word	0x0800c0a5
 800c104:	0800c153 	.word	0x0800c153
 800c108:	0800c0a5 	.word	0x0800c0a5
 800c10c:	0800c0a5 	.word	0x0800c0a5
 800c110:	0800c1e9 	.word	0x0800c1e9
 800c114:	6833      	ldr	r3, [r6, #0]
 800c116:	1d1a      	adds	r2, r3, #4
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	6032      	str	r2, [r6, #0]
 800c11c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c120:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c124:	2301      	movs	r3, #1
 800c126:	e09c      	b.n	800c262 <_printf_i+0x1e6>
 800c128:	6833      	ldr	r3, [r6, #0]
 800c12a:	6820      	ldr	r0, [r4, #0]
 800c12c:	1d19      	adds	r1, r3, #4
 800c12e:	6031      	str	r1, [r6, #0]
 800c130:	0606      	lsls	r6, r0, #24
 800c132:	d501      	bpl.n	800c138 <_printf_i+0xbc>
 800c134:	681d      	ldr	r5, [r3, #0]
 800c136:	e003      	b.n	800c140 <_printf_i+0xc4>
 800c138:	0645      	lsls	r5, r0, #25
 800c13a:	d5fb      	bpl.n	800c134 <_printf_i+0xb8>
 800c13c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c140:	2d00      	cmp	r5, #0
 800c142:	da03      	bge.n	800c14c <_printf_i+0xd0>
 800c144:	232d      	movs	r3, #45	@ 0x2d
 800c146:	426d      	negs	r5, r5
 800c148:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c14c:	4858      	ldr	r0, [pc, #352]	@ (800c2b0 <_printf_i+0x234>)
 800c14e:	230a      	movs	r3, #10
 800c150:	e011      	b.n	800c176 <_printf_i+0xfa>
 800c152:	6821      	ldr	r1, [r4, #0]
 800c154:	6833      	ldr	r3, [r6, #0]
 800c156:	0608      	lsls	r0, r1, #24
 800c158:	f853 5b04 	ldr.w	r5, [r3], #4
 800c15c:	d402      	bmi.n	800c164 <_printf_i+0xe8>
 800c15e:	0649      	lsls	r1, r1, #25
 800c160:	bf48      	it	mi
 800c162:	b2ad      	uxthmi	r5, r5
 800c164:	2f6f      	cmp	r7, #111	@ 0x6f
 800c166:	4852      	ldr	r0, [pc, #328]	@ (800c2b0 <_printf_i+0x234>)
 800c168:	6033      	str	r3, [r6, #0]
 800c16a:	bf14      	ite	ne
 800c16c:	230a      	movne	r3, #10
 800c16e:	2308      	moveq	r3, #8
 800c170:	2100      	movs	r1, #0
 800c172:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c176:	6866      	ldr	r6, [r4, #4]
 800c178:	60a6      	str	r6, [r4, #8]
 800c17a:	2e00      	cmp	r6, #0
 800c17c:	db05      	blt.n	800c18a <_printf_i+0x10e>
 800c17e:	6821      	ldr	r1, [r4, #0]
 800c180:	432e      	orrs	r6, r5
 800c182:	f021 0104 	bic.w	r1, r1, #4
 800c186:	6021      	str	r1, [r4, #0]
 800c188:	d04b      	beq.n	800c222 <_printf_i+0x1a6>
 800c18a:	4616      	mov	r6, r2
 800c18c:	fbb5 f1f3 	udiv	r1, r5, r3
 800c190:	fb03 5711 	mls	r7, r3, r1, r5
 800c194:	5dc7      	ldrb	r7, [r0, r7]
 800c196:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c19a:	462f      	mov	r7, r5
 800c19c:	42bb      	cmp	r3, r7
 800c19e:	460d      	mov	r5, r1
 800c1a0:	d9f4      	bls.n	800c18c <_printf_i+0x110>
 800c1a2:	2b08      	cmp	r3, #8
 800c1a4:	d10b      	bne.n	800c1be <_printf_i+0x142>
 800c1a6:	6823      	ldr	r3, [r4, #0]
 800c1a8:	07df      	lsls	r7, r3, #31
 800c1aa:	d508      	bpl.n	800c1be <_printf_i+0x142>
 800c1ac:	6923      	ldr	r3, [r4, #16]
 800c1ae:	6861      	ldr	r1, [r4, #4]
 800c1b0:	4299      	cmp	r1, r3
 800c1b2:	bfde      	ittt	le
 800c1b4:	2330      	movle	r3, #48	@ 0x30
 800c1b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c1ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c1be:	1b92      	subs	r2, r2, r6
 800c1c0:	6122      	str	r2, [r4, #16]
 800c1c2:	f8cd a000 	str.w	sl, [sp]
 800c1c6:	464b      	mov	r3, r9
 800c1c8:	aa03      	add	r2, sp, #12
 800c1ca:	4621      	mov	r1, r4
 800c1cc:	4640      	mov	r0, r8
 800c1ce:	f7ff fee7 	bl	800bfa0 <_printf_common>
 800c1d2:	3001      	adds	r0, #1
 800c1d4:	d14a      	bne.n	800c26c <_printf_i+0x1f0>
 800c1d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1da:	b004      	add	sp, #16
 800c1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1e0:	6823      	ldr	r3, [r4, #0]
 800c1e2:	f043 0320 	orr.w	r3, r3, #32
 800c1e6:	6023      	str	r3, [r4, #0]
 800c1e8:	4832      	ldr	r0, [pc, #200]	@ (800c2b4 <_printf_i+0x238>)
 800c1ea:	2778      	movs	r7, #120	@ 0x78
 800c1ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c1f0:	6823      	ldr	r3, [r4, #0]
 800c1f2:	6831      	ldr	r1, [r6, #0]
 800c1f4:	061f      	lsls	r7, r3, #24
 800c1f6:	f851 5b04 	ldr.w	r5, [r1], #4
 800c1fa:	d402      	bmi.n	800c202 <_printf_i+0x186>
 800c1fc:	065f      	lsls	r7, r3, #25
 800c1fe:	bf48      	it	mi
 800c200:	b2ad      	uxthmi	r5, r5
 800c202:	6031      	str	r1, [r6, #0]
 800c204:	07d9      	lsls	r1, r3, #31
 800c206:	bf44      	itt	mi
 800c208:	f043 0320 	orrmi.w	r3, r3, #32
 800c20c:	6023      	strmi	r3, [r4, #0]
 800c20e:	b11d      	cbz	r5, 800c218 <_printf_i+0x19c>
 800c210:	2310      	movs	r3, #16
 800c212:	e7ad      	b.n	800c170 <_printf_i+0xf4>
 800c214:	4826      	ldr	r0, [pc, #152]	@ (800c2b0 <_printf_i+0x234>)
 800c216:	e7e9      	b.n	800c1ec <_printf_i+0x170>
 800c218:	6823      	ldr	r3, [r4, #0]
 800c21a:	f023 0320 	bic.w	r3, r3, #32
 800c21e:	6023      	str	r3, [r4, #0]
 800c220:	e7f6      	b.n	800c210 <_printf_i+0x194>
 800c222:	4616      	mov	r6, r2
 800c224:	e7bd      	b.n	800c1a2 <_printf_i+0x126>
 800c226:	6833      	ldr	r3, [r6, #0]
 800c228:	6825      	ldr	r5, [r4, #0]
 800c22a:	6961      	ldr	r1, [r4, #20]
 800c22c:	1d18      	adds	r0, r3, #4
 800c22e:	6030      	str	r0, [r6, #0]
 800c230:	062e      	lsls	r6, r5, #24
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	d501      	bpl.n	800c23a <_printf_i+0x1be>
 800c236:	6019      	str	r1, [r3, #0]
 800c238:	e002      	b.n	800c240 <_printf_i+0x1c4>
 800c23a:	0668      	lsls	r0, r5, #25
 800c23c:	d5fb      	bpl.n	800c236 <_printf_i+0x1ba>
 800c23e:	8019      	strh	r1, [r3, #0]
 800c240:	2300      	movs	r3, #0
 800c242:	6123      	str	r3, [r4, #16]
 800c244:	4616      	mov	r6, r2
 800c246:	e7bc      	b.n	800c1c2 <_printf_i+0x146>
 800c248:	6833      	ldr	r3, [r6, #0]
 800c24a:	1d1a      	adds	r2, r3, #4
 800c24c:	6032      	str	r2, [r6, #0]
 800c24e:	681e      	ldr	r6, [r3, #0]
 800c250:	6862      	ldr	r2, [r4, #4]
 800c252:	2100      	movs	r1, #0
 800c254:	4630      	mov	r0, r6
 800c256:	f7f4 f86b 	bl	8000330 <memchr>
 800c25a:	b108      	cbz	r0, 800c260 <_printf_i+0x1e4>
 800c25c:	1b80      	subs	r0, r0, r6
 800c25e:	6060      	str	r0, [r4, #4]
 800c260:	6863      	ldr	r3, [r4, #4]
 800c262:	6123      	str	r3, [r4, #16]
 800c264:	2300      	movs	r3, #0
 800c266:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c26a:	e7aa      	b.n	800c1c2 <_printf_i+0x146>
 800c26c:	6923      	ldr	r3, [r4, #16]
 800c26e:	4632      	mov	r2, r6
 800c270:	4649      	mov	r1, r9
 800c272:	4640      	mov	r0, r8
 800c274:	47d0      	blx	sl
 800c276:	3001      	adds	r0, #1
 800c278:	d0ad      	beq.n	800c1d6 <_printf_i+0x15a>
 800c27a:	6823      	ldr	r3, [r4, #0]
 800c27c:	079b      	lsls	r3, r3, #30
 800c27e:	d413      	bmi.n	800c2a8 <_printf_i+0x22c>
 800c280:	68e0      	ldr	r0, [r4, #12]
 800c282:	9b03      	ldr	r3, [sp, #12]
 800c284:	4298      	cmp	r0, r3
 800c286:	bfb8      	it	lt
 800c288:	4618      	movlt	r0, r3
 800c28a:	e7a6      	b.n	800c1da <_printf_i+0x15e>
 800c28c:	2301      	movs	r3, #1
 800c28e:	4632      	mov	r2, r6
 800c290:	4649      	mov	r1, r9
 800c292:	4640      	mov	r0, r8
 800c294:	47d0      	blx	sl
 800c296:	3001      	adds	r0, #1
 800c298:	d09d      	beq.n	800c1d6 <_printf_i+0x15a>
 800c29a:	3501      	adds	r5, #1
 800c29c:	68e3      	ldr	r3, [r4, #12]
 800c29e:	9903      	ldr	r1, [sp, #12]
 800c2a0:	1a5b      	subs	r3, r3, r1
 800c2a2:	42ab      	cmp	r3, r5
 800c2a4:	dcf2      	bgt.n	800c28c <_printf_i+0x210>
 800c2a6:	e7eb      	b.n	800c280 <_printf_i+0x204>
 800c2a8:	2500      	movs	r5, #0
 800c2aa:	f104 0619 	add.w	r6, r4, #25
 800c2ae:	e7f5      	b.n	800c29c <_printf_i+0x220>
 800c2b0:	0800c870 	.word	0x0800c870
 800c2b4:	0800c881 	.word	0x0800c881

0800c2b8 <__swbuf_r>:
 800c2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ba:	460e      	mov	r6, r1
 800c2bc:	4614      	mov	r4, r2
 800c2be:	4605      	mov	r5, r0
 800c2c0:	b118      	cbz	r0, 800c2ca <__swbuf_r+0x12>
 800c2c2:	6a03      	ldr	r3, [r0, #32]
 800c2c4:	b90b      	cbnz	r3, 800c2ca <__swbuf_r+0x12>
 800c2c6:	f7fe fa05 	bl	800a6d4 <__sinit>
 800c2ca:	69a3      	ldr	r3, [r4, #24]
 800c2cc:	60a3      	str	r3, [r4, #8]
 800c2ce:	89a3      	ldrh	r3, [r4, #12]
 800c2d0:	071a      	lsls	r2, r3, #28
 800c2d2:	d501      	bpl.n	800c2d8 <__swbuf_r+0x20>
 800c2d4:	6923      	ldr	r3, [r4, #16]
 800c2d6:	b943      	cbnz	r3, 800c2ea <__swbuf_r+0x32>
 800c2d8:	4621      	mov	r1, r4
 800c2da:	4628      	mov	r0, r5
 800c2dc:	f000 f82a 	bl	800c334 <__swsetup_r>
 800c2e0:	b118      	cbz	r0, 800c2ea <__swbuf_r+0x32>
 800c2e2:	f04f 37ff 	mov.w	r7, #4294967295
 800c2e6:	4638      	mov	r0, r7
 800c2e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2ea:	6823      	ldr	r3, [r4, #0]
 800c2ec:	6922      	ldr	r2, [r4, #16]
 800c2ee:	1a98      	subs	r0, r3, r2
 800c2f0:	6963      	ldr	r3, [r4, #20]
 800c2f2:	b2f6      	uxtb	r6, r6
 800c2f4:	4283      	cmp	r3, r0
 800c2f6:	4637      	mov	r7, r6
 800c2f8:	dc05      	bgt.n	800c306 <__swbuf_r+0x4e>
 800c2fa:	4621      	mov	r1, r4
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	f7ff fc83 	bl	800bc08 <_fflush_r>
 800c302:	2800      	cmp	r0, #0
 800c304:	d1ed      	bne.n	800c2e2 <__swbuf_r+0x2a>
 800c306:	68a3      	ldr	r3, [r4, #8]
 800c308:	3b01      	subs	r3, #1
 800c30a:	60a3      	str	r3, [r4, #8]
 800c30c:	6823      	ldr	r3, [r4, #0]
 800c30e:	1c5a      	adds	r2, r3, #1
 800c310:	6022      	str	r2, [r4, #0]
 800c312:	701e      	strb	r6, [r3, #0]
 800c314:	6962      	ldr	r2, [r4, #20]
 800c316:	1c43      	adds	r3, r0, #1
 800c318:	429a      	cmp	r2, r3
 800c31a:	d004      	beq.n	800c326 <__swbuf_r+0x6e>
 800c31c:	89a3      	ldrh	r3, [r4, #12]
 800c31e:	07db      	lsls	r3, r3, #31
 800c320:	d5e1      	bpl.n	800c2e6 <__swbuf_r+0x2e>
 800c322:	2e0a      	cmp	r6, #10
 800c324:	d1df      	bne.n	800c2e6 <__swbuf_r+0x2e>
 800c326:	4621      	mov	r1, r4
 800c328:	4628      	mov	r0, r5
 800c32a:	f7ff fc6d 	bl	800bc08 <_fflush_r>
 800c32e:	2800      	cmp	r0, #0
 800c330:	d0d9      	beq.n	800c2e6 <__swbuf_r+0x2e>
 800c332:	e7d6      	b.n	800c2e2 <__swbuf_r+0x2a>

0800c334 <__swsetup_r>:
 800c334:	b538      	push	{r3, r4, r5, lr}
 800c336:	4b29      	ldr	r3, [pc, #164]	@ (800c3dc <__swsetup_r+0xa8>)
 800c338:	4605      	mov	r5, r0
 800c33a:	6818      	ldr	r0, [r3, #0]
 800c33c:	460c      	mov	r4, r1
 800c33e:	b118      	cbz	r0, 800c348 <__swsetup_r+0x14>
 800c340:	6a03      	ldr	r3, [r0, #32]
 800c342:	b90b      	cbnz	r3, 800c348 <__swsetup_r+0x14>
 800c344:	f7fe f9c6 	bl	800a6d4 <__sinit>
 800c348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c34c:	0719      	lsls	r1, r3, #28
 800c34e:	d422      	bmi.n	800c396 <__swsetup_r+0x62>
 800c350:	06da      	lsls	r2, r3, #27
 800c352:	d407      	bmi.n	800c364 <__swsetup_r+0x30>
 800c354:	2209      	movs	r2, #9
 800c356:	602a      	str	r2, [r5, #0]
 800c358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c35c:	81a3      	strh	r3, [r4, #12]
 800c35e:	f04f 30ff 	mov.w	r0, #4294967295
 800c362:	e033      	b.n	800c3cc <__swsetup_r+0x98>
 800c364:	0758      	lsls	r0, r3, #29
 800c366:	d512      	bpl.n	800c38e <__swsetup_r+0x5a>
 800c368:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c36a:	b141      	cbz	r1, 800c37e <__swsetup_r+0x4a>
 800c36c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c370:	4299      	cmp	r1, r3
 800c372:	d002      	beq.n	800c37a <__swsetup_r+0x46>
 800c374:	4628      	mov	r0, r5
 800c376:	f7fe facb 	bl	800a910 <_free_r>
 800c37a:	2300      	movs	r3, #0
 800c37c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c37e:	89a3      	ldrh	r3, [r4, #12]
 800c380:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c384:	81a3      	strh	r3, [r4, #12]
 800c386:	2300      	movs	r3, #0
 800c388:	6063      	str	r3, [r4, #4]
 800c38a:	6923      	ldr	r3, [r4, #16]
 800c38c:	6023      	str	r3, [r4, #0]
 800c38e:	89a3      	ldrh	r3, [r4, #12]
 800c390:	f043 0308 	orr.w	r3, r3, #8
 800c394:	81a3      	strh	r3, [r4, #12]
 800c396:	6923      	ldr	r3, [r4, #16]
 800c398:	b94b      	cbnz	r3, 800c3ae <__swsetup_r+0x7a>
 800c39a:	89a3      	ldrh	r3, [r4, #12]
 800c39c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c3a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3a4:	d003      	beq.n	800c3ae <__swsetup_r+0x7a>
 800c3a6:	4621      	mov	r1, r4
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	f000 f883 	bl	800c4b4 <__smakebuf_r>
 800c3ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3b2:	f013 0201 	ands.w	r2, r3, #1
 800c3b6:	d00a      	beq.n	800c3ce <__swsetup_r+0x9a>
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	60a2      	str	r2, [r4, #8]
 800c3bc:	6962      	ldr	r2, [r4, #20]
 800c3be:	4252      	negs	r2, r2
 800c3c0:	61a2      	str	r2, [r4, #24]
 800c3c2:	6922      	ldr	r2, [r4, #16]
 800c3c4:	b942      	cbnz	r2, 800c3d8 <__swsetup_r+0xa4>
 800c3c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c3ca:	d1c5      	bne.n	800c358 <__swsetup_r+0x24>
 800c3cc:	bd38      	pop	{r3, r4, r5, pc}
 800c3ce:	0799      	lsls	r1, r3, #30
 800c3d0:	bf58      	it	pl
 800c3d2:	6962      	ldrpl	r2, [r4, #20]
 800c3d4:	60a2      	str	r2, [r4, #8]
 800c3d6:	e7f4      	b.n	800c3c2 <__swsetup_r+0x8e>
 800c3d8:	2000      	movs	r0, #0
 800c3da:	e7f7      	b.n	800c3cc <__swsetup_r+0x98>
 800c3dc:	240001a0 	.word	0x240001a0

0800c3e0 <_raise_r>:
 800c3e0:	291f      	cmp	r1, #31
 800c3e2:	b538      	push	{r3, r4, r5, lr}
 800c3e4:	4605      	mov	r5, r0
 800c3e6:	460c      	mov	r4, r1
 800c3e8:	d904      	bls.n	800c3f4 <_raise_r+0x14>
 800c3ea:	2316      	movs	r3, #22
 800c3ec:	6003      	str	r3, [r0, #0]
 800c3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f2:	bd38      	pop	{r3, r4, r5, pc}
 800c3f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c3f6:	b112      	cbz	r2, 800c3fe <_raise_r+0x1e>
 800c3f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3fc:	b94b      	cbnz	r3, 800c412 <_raise_r+0x32>
 800c3fe:	4628      	mov	r0, r5
 800c400:	f000 f830 	bl	800c464 <_getpid_r>
 800c404:	4622      	mov	r2, r4
 800c406:	4601      	mov	r1, r0
 800c408:	4628      	mov	r0, r5
 800c40a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c40e:	f000 b817 	b.w	800c440 <_kill_r>
 800c412:	2b01      	cmp	r3, #1
 800c414:	d00a      	beq.n	800c42c <_raise_r+0x4c>
 800c416:	1c59      	adds	r1, r3, #1
 800c418:	d103      	bne.n	800c422 <_raise_r+0x42>
 800c41a:	2316      	movs	r3, #22
 800c41c:	6003      	str	r3, [r0, #0]
 800c41e:	2001      	movs	r0, #1
 800c420:	e7e7      	b.n	800c3f2 <_raise_r+0x12>
 800c422:	2100      	movs	r1, #0
 800c424:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c428:	4620      	mov	r0, r4
 800c42a:	4798      	blx	r3
 800c42c:	2000      	movs	r0, #0
 800c42e:	e7e0      	b.n	800c3f2 <_raise_r+0x12>

0800c430 <raise>:
 800c430:	4b02      	ldr	r3, [pc, #8]	@ (800c43c <raise+0xc>)
 800c432:	4601      	mov	r1, r0
 800c434:	6818      	ldr	r0, [r3, #0]
 800c436:	f7ff bfd3 	b.w	800c3e0 <_raise_r>
 800c43a:	bf00      	nop
 800c43c:	240001a0 	.word	0x240001a0

0800c440 <_kill_r>:
 800c440:	b538      	push	{r3, r4, r5, lr}
 800c442:	4d07      	ldr	r5, [pc, #28]	@ (800c460 <_kill_r+0x20>)
 800c444:	2300      	movs	r3, #0
 800c446:	4604      	mov	r4, r0
 800c448:	4608      	mov	r0, r1
 800c44a:	4611      	mov	r1, r2
 800c44c:	602b      	str	r3, [r5, #0]
 800c44e:	f7f5 f8e1 	bl	8001614 <_kill>
 800c452:	1c43      	adds	r3, r0, #1
 800c454:	d102      	bne.n	800c45c <_kill_r+0x1c>
 800c456:	682b      	ldr	r3, [r5, #0]
 800c458:	b103      	cbz	r3, 800c45c <_kill_r+0x1c>
 800c45a:	6023      	str	r3, [r4, #0]
 800c45c:	bd38      	pop	{r3, r4, r5, pc}
 800c45e:	bf00      	nop
 800c460:	24000588 	.word	0x24000588

0800c464 <_getpid_r>:
 800c464:	f7f5 b8ce 	b.w	8001604 <_getpid>

0800c468 <__swhatbuf_r>:
 800c468:	b570      	push	{r4, r5, r6, lr}
 800c46a:	460c      	mov	r4, r1
 800c46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c470:	2900      	cmp	r1, #0
 800c472:	b096      	sub	sp, #88	@ 0x58
 800c474:	4615      	mov	r5, r2
 800c476:	461e      	mov	r6, r3
 800c478:	da0d      	bge.n	800c496 <__swhatbuf_r+0x2e>
 800c47a:	89a3      	ldrh	r3, [r4, #12]
 800c47c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c480:	f04f 0100 	mov.w	r1, #0
 800c484:	bf14      	ite	ne
 800c486:	2340      	movne	r3, #64	@ 0x40
 800c488:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c48c:	2000      	movs	r0, #0
 800c48e:	6031      	str	r1, [r6, #0]
 800c490:	602b      	str	r3, [r5, #0]
 800c492:	b016      	add	sp, #88	@ 0x58
 800c494:	bd70      	pop	{r4, r5, r6, pc}
 800c496:	466a      	mov	r2, sp
 800c498:	f000 f848 	bl	800c52c <_fstat_r>
 800c49c:	2800      	cmp	r0, #0
 800c49e:	dbec      	blt.n	800c47a <__swhatbuf_r+0x12>
 800c4a0:	9901      	ldr	r1, [sp, #4]
 800c4a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c4a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c4aa:	4259      	negs	r1, r3
 800c4ac:	4159      	adcs	r1, r3
 800c4ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4b2:	e7eb      	b.n	800c48c <__swhatbuf_r+0x24>

0800c4b4 <__smakebuf_r>:
 800c4b4:	898b      	ldrh	r3, [r1, #12]
 800c4b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4b8:	079d      	lsls	r5, r3, #30
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	460c      	mov	r4, r1
 800c4be:	d507      	bpl.n	800c4d0 <__smakebuf_r+0x1c>
 800c4c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	6123      	str	r3, [r4, #16]
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	6163      	str	r3, [r4, #20]
 800c4cc:	b003      	add	sp, #12
 800c4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4d0:	ab01      	add	r3, sp, #4
 800c4d2:	466a      	mov	r2, sp
 800c4d4:	f7ff ffc8 	bl	800c468 <__swhatbuf_r>
 800c4d8:	9f00      	ldr	r7, [sp, #0]
 800c4da:	4605      	mov	r5, r0
 800c4dc:	4639      	mov	r1, r7
 800c4de:	4630      	mov	r0, r6
 800c4e0:	f7fe fdbc 	bl	800b05c <_malloc_r>
 800c4e4:	b948      	cbnz	r0, 800c4fa <__smakebuf_r+0x46>
 800c4e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4ea:	059a      	lsls	r2, r3, #22
 800c4ec:	d4ee      	bmi.n	800c4cc <__smakebuf_r+0x18>
 800c4ee:	f023 0303 	bic.w	r3, r3, #3
 800c4f2:	f043 0302 	orr.w	r3, r3, #2
 800c4f6:	81a3      	strh	r3, [r4, #12]
 800c4f8:	e7e2      	b.n	800c4c0 <__smakebuf_r+0xc>
 800c4fa:	89a3      	ldrh	r3, [r4, #12]
 800c4fc:	6020      	str	r0, [r4, #0]
 800c4fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c502:	81a3      	strh	r3, [r4, #12]
 800c504:	9b01      	ldr	r3, [sp, #4]
 800c506:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c50a:	b15b      	cbz	r3, 800c524 <__smakebuf_r+0x70>
 800c50c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c510:	4630      	mov	r0, r6
 800c512:	f000 f81d 	bl	800c550 <_isatty_r>
 800c516:	b128      	cbz	r0, 800c524 <__smakebuf_r+0x70>
 800c518:	89a3      	ldrh	r3, [r4, #12]
 800c51a:	f023 0303 	bic.w	r3, r3, #3
 800c51e:	f043 0301 	orr.w	r3, r3, #1
 800c522:	81a3      	strh	r3, [r4, #12]
 800c524:	89a3      	ldrh	r3, [r4, #12]
 800c526:	431d      	orrs	r5, r3
 800c528:	81a5      	strh	r5, [r4, #12]
 800c52a:	e7cf      	b.n	800c4cc <__smakebuf_r+0x18>

0800c52c <_fstat_r>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4d07      	ldr	r5, [pc, #28]	@ (800c54c <_fstat_r+0x20>)
 800c530:	2300      	movs	r3, #0
 800c532:	4604      	mov	r4, r0
 800c534:	4608      	mov	r0, r1
 800c536:	4611      	mov	r1, r2
 800c538:	602b      	str	r3, [r5, #0]
 800c53a:	f7f5 f8cb 	bl	80016d4 <_fstat>
 800c53e:	1c43      	adds	r3, r0, #1
 800c540:	d102      	bne.n	800c548 <_fstat_r+0x1c>
 800c542:	682b      	ldr	r3, [r5, #0]
 800c544:	b103      	cbz	r3, 800c548 <_fstat_r+0x1c>
 800c546:	6023      	str	r3, [r4, #0]
 800c548:	bd38      	pop	{r3, r4, r5, pc}
 800c54a:	bf00      	nop
 800c54c:	24000588 	.word	0x24000588

0800c550 <_isatty_r>:
 800c550:	b538      	push	{r3, r4, r5, lr}
 800c552:	4d06      	ldr	r5, [pc, #24]	@ (800c56c <_isatty_r+0x1c>)
 800c554:	2300      	movs	r3, #0
 800c556:	4604      	mov	r4, r0
 800c558:	4608      	mov	r0, r1
 800c55a:	602b      	str	r3, [r5, #0]
 800c55c:	f7f5 f8ca 	bl	80016f4 <_isatty>
 800c560:	1c43      	adds	r3, r0, #1
 800c562:	d102      	bne.n	800c56a <_isatty_r+0x1a>
 800c564:	682b      	ldr	r3, [r5, #0]
 800c566:	b103      	cbz	r3, 800c56a <_isatty_r+0x1a>
 800c568:	6023      	str	r3, [r4, #0]
 800c56a:	bd38      	pop	{r3, r4, r5, pc}
 800c56c:	24000588 	.word	0x24000588

0800c570 <fmodf>:
 800c570:	b508      	push	{r3, lr}
 800c572:	ed2d 8b02 	vpush	{d8}
 800c576:	eef0 8a40 	vmov.f32	s17, s0
 800c57a:	eeb0 8a60 	vmov.f32	s16, s1
 800c57e:	f000 f817 	bl	800c5b0 <__ieee754_fmodf>
 800c582:	eef4 8a48 	vcmp.f32	s17, s16
 800c586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c58a:	d60c      	bvs.n	800c5a6 <fmodf+0x36>
 800c58c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c5ac <fmodf+0x3c>
 800c590:	eeb4 8a68 	vcmp.f32	s16, s17
 800c594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c598:	d105      	bne.n	800c5a6 <fmodf+0x36>
 800c59a:	f7fe f975 	bl	800a888 <__errno>
 800c59e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c5a2:	2321      	movs	r3, #33	@ 0x21
 800c5a4:	6003      	str	r3, [r0, #0]
 800c5a6:	ecbd 8b02 	vpop	{d8}
 800c5aa:	bd08      	pop	{r3, pc}
 800c5ac:	00000000 	.word	0x00000000

0800c5b0 <__ieee754_fmodf>:
 800c5b0:	b570      	push	{r4, r5, r6, lr}
 800c5b2:	ee10 6a90 	vmov	r6, s1
 800c5b6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c5ba:	1e5a      	subs	r2, r3, #1
 800c5bc:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c5c0:	d206      	bcs.n	800c5d0 <__ieee754_fmodf+0x20>
 800c5c2:	ee10 4a10 	vmov	r4, s0
 800c5c6:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800c5ca:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c5ce:	d304      	bcc.n	800c5da <__ieee754_fmodf+0x2a>
 800c5d0:	ee60 0a20 	vmul.f32	s1, s0, s1
 800c5d4:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800c5d8:	bd70      	pop	{r4, r5, r6, pc}
 800c5da:	4299      	cmp	r1, r3
 800c5dc:	dbfc      	blt.n	800c5d8 <__ieee754_fmodf+0x28>
 800c5de:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800c5e2:	d105      	bne.n	800c5f0 <__ieee754_fmodf+0x40>
 800c5e4:	4b32      	ldr	r3, [pc, #200]	@ (800c6b0 <__ieee754_fmodf+0x100>)
 800c5e6:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800c5ea:	ed93 0a00 	vldr	s0, [r3]
 800c5ee:	e7f3      	b.n	800c5d8 <__ieee754_fmodf+0x28>
 800c5f0:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800c5f4:	d146      	bne.n	800c684 <__ieee754_fmodf+0xd4>
 800c5f6:	020a      	lsls	r2, r1, #8
 800c5f8:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800c5fc:	2a00      	cmp	r2, #0
 800c5fe:	dc3e      	bgt.n	800c67e <__ieee754_fmodf+0xce>
 800c600:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800c604:	bf01      	itttt	eq
 800c606:	021a      	lsleq	r2, r3, #8
 800c608:	fab2 f282 	clzeq	r2, r2
 800c60c:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800c610:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800c614:	bf16      	itet	ne
 800c616:	15da      	asrne	r2, r3, #23
 800c618:	3282      	addeq	r2, #130	@ 0x82
 800c61a:	3a7f      	subne	r2, #127	@ 0x7f
 800c61c:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800c620:	bfbb      	ittet	lt
 800c622:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800c626:	1a24      	sublt	r4, r4, r0
 800c628:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800c62c:	40a1      	lsllt	r1, r4
 800c62e:	bfa8      	it	ge
 800c630:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800c634:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800c638:	bfb5      	itete	lt
 800c63a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800c63e:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800c642:	1aa4      	sublt	r4, r4, r2
 800c644:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800c648:	bfb8      	it	lt
 800c64a:	fa03 f404 	lsllt.w	r4, r3, r4
 800c64e:	1a80      	subs	r0, r0, r2
 800c650:	1b0b      	subs	r3, r1, r4
 800c652:	b9d0      	cbnz	r0, 800c68a <__ieee754_fmodf+0xda>
 800c654:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800c658:	bf28      	it	cs
 800c65a:	460b      	movcs	r3, r1
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d0c1      	beq.n	800c5e4 <__ieee754_fmodf+0x34>
 800c660:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c664:	db19      	blt.n	800c69a <__ieee754_fmodf+0xea>
 800c666:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800c66a:	db19      	blt.n	800c6a0 <__ieee754_fmodf+0xf0>
 800c66c:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800c670:	327f      	adds	r2, #127	@ 0x7f
 800c672:	432b      	orrs	r3, r5
 800c674:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c678:	ee00 3a10 	vmov	s0, r3
 800c67c:	e7ac      	b.n	800c5d8 <__ieee754_fmodf+0x28>
 800c67e:	3801      	subs	r0, #1
 800c680:	0052      	lsls	r2, r2, #1
 800c682:	e7bb      	b.n	800c5fc <__ieee754_fmodf+0x4c>
 800c684:	15c8      	asrs	r0, r1, #23
 800c686:	387f      	subs	r0, #127	@ 0x7f
 800c688:	e7ba      	b.n	800c600 <__ieee754_fmodf+0x50>
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	da02      	bge.n	800c694 <__ieee754_fmodf+0xe4>
 800c68e:	0049      	lsls	r1, r1, #1
 800c690:	3801      	subs	r0, #1
 800c692:	e7dd      	b.n	800c650 <__ieee754_fmodf+0xa0>
 800c694:	d0a6      	beq.n	800c5e4 <__ieee754_fmodf+0x34>
 800c696:	0059      	lsls	r1, r3, #1
 800c698:	e7fa      	b.n	800c690 <__ieee754_fmodf+0xe0>
 800c69a:	005b      	lsls	r3, r3, #1
 800c69c:	3a01      	subs	r2, #1
 800c69e:	e7df      	b.n	800c660 <__ieee754_fmodf+0xb0>
 800c6a0:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800c6a4:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800c6a8:	3282      	adds	r2, #130	@ 0x82
 800c6aa:	4113      	asrs	r3, r2
 800c6ac:	432b      	orrs	r3, r5
 800c6ae:	e7e3      	b.n	800c678 <__ieee754_fmodf+0xc8>
 800c6b0:	0800caec 	.word	0x0800caec

0800c6b4 <_init>:
 800c6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6b6:	bf00      	nop
 800c6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ba:	bc08      	pop	{r3}
 800c6bc:	469e      	mov	lr, r3
 800c6be:	4770      	bx	lr

0800c6c0 <_fini>:
 800c6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c2:	bf00      	nop
 800c6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6c6:	bc08      	pop	{r3}
 800c6c8:	469e      	mov	lr, r3
 800c6ca:	4770      	bx	lr
