
controlStepMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b22c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800b500  0800b500  0000c500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b924  0800b924  0000c924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b92c  0800b92c  0000c92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b930  0800b930  0000c930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001ec  24000000  0800b934  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003e0  240001ec  0800bb20  0000d1ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240005cc  0800bb20  0000d5cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d1ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   000176c6  00000000  00000000  0000d21a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b5e  00000000  00000000  000248e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001228  00000000  00000000  00027440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e2c  00000000  00000000  00028668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000343a0  00000000  00000000  00029494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000197b6  00000000  00000000  0005d834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015077c  00000000  00000000  00076fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c7766  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d64  00000000  00000000  001c77ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004b  00000000  00000000  001cd510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001ec 	.word	0x240001ec
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b4e4 	.word	0x0800b4e4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001f0 	.word	0x240001f0
 800030c:	0800b4e4 	.word	0x0800b4e4

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <__aeabi_drsub>:
 80003d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003d4:	e002      	b.n	80003dc <__adddf3>
 80003d6:	bf00      	nop

080003d8 <__aeabi_dsub>:
 80003d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003dc <__adddf3>:
 80003dc:	b530      	push	{r4, r5, lr}
 80003de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	bf1f      	itttt	ne
 80003f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000402:	f000 80e2 	beq.w	80005ca <__adddf3+0x1ee>
 8000406:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800040a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800040e:	bfb8      	it	lt
 8000410:	426d      	neglt	r5, r5
 8000412:	dd0c      	ble.n	800042e <__adddf3+0x52>
 8000414:	442c      	add	r4, r5
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	ea82 0000 	eor.w	r0, r2, r0
 8000422:	ea83 0101 	eor.w	r1, r3, r1
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	2d36      	cmp	r5, #54	@ 0x36
 8000430:	bf88      	it	hi
 8000432:	bd30      	pophi	{r4, r5, pc}
 8000434:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000438:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800043c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000440:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000444:	d002      	beq.n	800044c <__adddf3+0x70>
 8000446:	4240      	negs	r0, r0
 8000448:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800044c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000450:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000454:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000458:	d002      	beq.n	8000460 <__adddf3+0x84>
 800045a:	4252      	negs	r2, r2
 800045c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000460:	ea94 0f05 	teq	r4, r5
 8000464:	f000 80a7 	beq.w	80005b6 <__adddf3+0x1da>
 8000468:	f1a4 0401 	sub.w	r4, r4, #1
 800046c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000470:	db0d      	blt.n	800048e <__adddf3+0xb2>
 8000472:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000476:	fa22 f205 	lsr.w	r2, r2, r5
 800047a:	1880      	adds	r0, r0, r2
 800047c:	f141 0100 	adc.w	r1, r1, #0
 8000480:	fa03 f20e 	lsl.w	r2, r3, lr
 8000484:	1880      	adds	r0, r0, r2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	4159      	adcs	r1, r3
 800048c:	e00e      	b.n	80004ac <__adddf3+0xd0>
 800048e:	f1a5 0520 	sub.w	r5, r5, #32
 8000492:	f10e 0e20 	add.w	lr, lr, #32
 8000496:	2a01      	cmp	r2, #1
 8000498:	fa03 fc0e 	lsl.w	ip, r3, lr
 800049c:	bf28      	it	cs
 800049e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004a2:	fa43 f305 	asr.w	r3, r3, r5
 80004a6:	18c0      	adds	r0, r0, r3
 80004a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004b0:	d507      	bpl.n	80004c2 <__adddf3+0xe6>
 80004b2:	f04f 0e00 	mov.w	lr, #0
 80004b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004be:	eb6e 0101 	sbc.w	r1, lr, r1
 80004c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004c6:	d31b      	bcc.n	8000500 <__adddf3+0x124>
 80004c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004cc:	d30c      	bcc.n	80004e8 <__adddf3+0x10c>
 80004ce:	0849      	lsrs	r1, r1, #1
 80004d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004d8:	f104 0401 	add.w	r4, r4, #1
 80004dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004e4:	f080 809a 	bcs.w	800061c <__adddf3+0x240>
 80004e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ec:	bf08      	it	eq
 80004ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004f2:	f150 0000 	adcs.w	r0, r0, #0
 80004f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004fa:	ea41 0105 	orr.w	r1, r1, r5
 80004fe:	bd30      	pop	{r4, r5, pc}
 8000500:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000504:	4140      	adcs	r0, r0
 8000506:	eb41 0101 	adc.w	r1, r1, r1
 800050a:	3c01      	subs	r4, #1
 800050c:	bf28      	it	cs
 800050e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000512:	d2e9      	bcs.n	80004e8 <__adddf3+0x10c>
 8000514:	f091 0f00 	teq	r1, #0
 8000518:	bf04      	itt	eq
 800051a:	4601      	moveq	r1, r0
 800051c:	2000      	moveq	r0, #0
 800051e:	fab1 f381 	clz	r3, r1
 8000522:	bf08      	it	eq
 8000524:	3320      	addeq	r3, #32
 8000526:	f1a3 030b 	sub.w	r3, r3, #11
 800052a:	f1b3 0220 	subs.w	r2, r3, #32
 800052e:	da0c      	bge.n	800054a <__adddf3+0x16e>
 8000530:	320c      	adds	r2, #12
 8000532:	dd08      	ble.n	8000546 <__adddf3+0x16a>
 8000534:	f102 0c14 	add.w	ip, r2, #20
 8000538:	f1c2 020c 	rsb	r2, r2, #12
 800053c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000540:	fa21 f102 	lsr.w	r1, r1, r2
 8000544:	e00c      	b.n	8000560 <__adddf3+0x184>
 8000546:	f102 0214 	add.w	r2, r2, #20
 800054a:	bfd8      	it	le
 800054c:	f1c2 0c20 	rsble	ip, r2, #32
 8000550:	fa01 f102 	lsl.w	r1, r1, r2
 8000554:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000558:	bfdc      	itt	le
 800055a:	ea41 010c 	orrle.w	r1, r1, ip
 800055e:	4090      	lslle	r0, r2
 8000560:	1ae4      	subs	r4, r4, r3
 8000562:	bfa2      	ittt	ge
 8000564:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000568:	4329      	orrge	r1, r5
 800056a:	bd30      	popge	{r4, r5, pc}
 800056c:	ea6f 0404 	mvn.w	r4, r4
 8000570:	3c1f      	subs	r4, #31
 8000572:	da1c      	bge.n	80005ae <__adddf3+0x1d2>
 8000574:	340c      	adds	r4, #12
 8000576:	dc0e      	bgt.n	8000596 <__adddf3+0x1ba>
 8000578:	f104 0414 	add.w	r4, r4, #20
 800057c:	f1c4 0220 	rsb	r2, r4, #32
 8000580:	fa20 f004 	lsr.w	r0, r0, r4
 8000584:	fa01 f302 	lsl.w	r3, r1, r2
 8000588:	ea40 0003 	orr.w	r0, r0, r3
 800058c:	fa21 f304 	lsr.w	r3, r1, r4
 8000590:	ea45 0103 	orr.w	r1, r5, r3
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f1c4 040c 	rsb	r4, r4, #12
 800059a:	f1c4 0220 	rsb	r2, r4, #32
 800059e:	fa20 f002 	lsr.w	r0, r0, r2
 80005a2:	fa01 f304 	lsl.w	r3, r1, r4
 80005a6:	ea40 0003 	orr.w	r0, r0, r3
 80005aa:	4629      	mov	r1, r5
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	fa21 f004 	lsr.w	r0, r1, r4
 80005b2:	4629      	mov	r1, r5
 80005b4:	bd30      	pop	{r4, r5, pc}
 80005b6:	f094 0f00 	teq	r4, #0
 80005ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005be:	bf06      	itte	eq
 80005c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005c4:	3401      	addeq	r4, #1
 80005c6:	3d01      	subne	r5, #1
 80005c8:	e74e      	b.n	8000468 <__adddf3+0x8c>
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf18      	it	ne
 80005d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005d4:	d029      	beq.n	800062a <__adddf3+0x24e>
 80005d6:	ea94 0f05 	teq	r4, r5
 80005da:	bf08      	it	eq
 80005dc:	ea90 0f02 	teqeq	r0, r2
 80005e0:	d005      	beq.n	80005ee <__adddf3+0x212>
 80005e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005e6:	bf04      	itt	eq
 80005e8:	4619      	moveq	r1, r3
 80005ea:	4610      	moveq	r0, r2
 80005ec:	bd30      	pop	{r4, r5, pc}
 80005ee:	ea91 0f03 	teq	r1, r3
 80005f2:	bf1e      	ittt	ne
 80005f4:	2100      	movne	r1, #0
 80005f6:	2000      	movne	r0, #0
 80005f8:	bd30      	popne	{r4, r5, pc}
 80005fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005fe:	d105      	bne.n	800060c <__adddf3+0x230>
 8000600:	0040      	lsls	r0, r0, #1
 8000602:	4149      	adcs	r1, r1
 8000604:	bf28      	it	cs
 8000606:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800060a:	bd30      	pop	{r4, r5, pc}
 800060c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000610:	bf3c      	itt	cc
 8000612:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000616:	bd30      	popcc	{r4, r5, pc}
 8000618:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800061c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000620:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062e:	bf1a      	itte	ne
 8000630:	4619      	movne	r1, r3
 8000632:	4610      	movne	r0, r2
 8000634:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000638:	bf1c      	itt	ne
 800063a:	460b      	movne	r3, r1
 800063c:	4602      	movne	r2, r0
 800063e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000642:	bf06      	itte	eq
 8000644:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000648:	ea91 0f03 	teqeq	r1, r3
 800064c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	bf00      	nop

08000654 <__aeabi_ui2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f04f 0500 	mov.w	r5, #0
 800066c:	f04f 0100 	mov.w	r1, #0
 8000670:	e750      	b.n	8000514 <__adddf3+0x138>
 8000672:	bf00      	nop

08000674 <__aeabi_i2d>:
 8000674:	f090 0f00 	teq	r0, #0
 8000678:	bf04      	itt	eq
 800067a:	2100      	moveq	r1, #0
 800067c:	4770      	bxeq	lr
 800067e:	b530      	push	{r4, r5, lr}
 8000680:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000684:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000688:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800068c:	bf48      	it	mi
 800068e:	4240      	negmi	r0, r0
 8000690:	f04f 0100 	mov.w	r1, #0
 8000694:	e73e      	b.n	8000514 <__adddf3+0x138>
 8000696:	bf00      	nop

08000698 <__aeabi_f2d>:
 8000698:	0042      	lsls	r2, r0, #1
 800069a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800069e:	ea4f 0131 	mov.w	r1, r1, rrx
 80006a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006a6:	bf1f      	itttt	ne
 80006a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006b4:	4770      	bxne	lr
 80006b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ba:	bf08      	it	eq
 80006bc:	4770      	bxeq	lr
 80006be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006c2:	bf04      	itt	eq
 80006c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	e71c      	b.n	8000514 <__adddf3+0x138>
 80006da:	bf00      	nop

080006dc <__aeabi_ul2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f04f 0500 	mov.w	r5, #0
 80006ea:	e00a      	b.n	8000702 <__aeabi_l2d+0x16>

080006ec <__aeabi_l2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006fa:	d502      	bpl.n	8000702 <__aeabi_l2d+0x16>
 80006fc:	4240      	negs	r0, r0
 80006fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000702:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000706:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800070a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800070e:	f43f aed8 	beq.w	80004c2 <__adddf3+0xe6>
 8000712:	f04f 0203 	mov.w	r2, #3
 8000716:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071a:	bf18      	it	ne
 800071c:	3203      	addne	r2, #3
 800071e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000722:	bf18      	it	ne
 8000724:	3203      	addne	r2, #3
 8000726:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800072a:	f1c2 0320 	rsb	r3, r2, #32
 800072e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000732:	fa20 f002 	lsr.w	r0, r0, r2
 8000736:	fa01 fe03 	lsl.w	lr, r1, r3
 800073a:	ea40 000e 	orr.w	r0, r0, lr
 800073e:	fa21 f102 	lsr.w	r1, r1, r2
 8000742:	4414      	add	r4, r2
 8000744:	e6bd      	b.n	80004c2 <__adddf3+0xe6>
 8000746:	bf00      	nop

08000748 <__aeabi_uldivmod>:
 8000748:	b953      	cbnz	r3, 8000760 <__aeabi_uldivmod+0x18>
 800074a:	b94a      	cbnz	r2, 8000760 <__aeabi_uldivmod+0x18>
 800074c:	2900      	cmp	r1, #0
 800074e:	bf08      	it	eq
 8000750:	2800      	cmpeq	r0, #0
 8000752:	bf1c      	itt	ne
 8000754:	f04f 31ff 	movne.w	r1, #4294967295
 8000758:	f04f 30ff 	movne.w	r0, #4294967295
 800075c:	f000 b9c0 	b.w	8000ae0 <__aeabi_idiv0>
 8000760:	f1ad 0c08 	sub.w	ip, sp, #8
 8000764:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000768:	f000 f83e 	bl	80007e8 <__udivmoddi4>
 800076c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000774:	b004      	add	sp, #16
 8000776:	4770      	bx	lr

08000778 <__aeabi_d2lz>:
 8000778:	b508      	push	{r3, lr}
 800077a:	4602      	mov	r2, r0
 800077c:	460b      	mov	r3, r1
 800077e:	ec43 2b17 	vmov	d7, r2, r3
 8000782:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078a:	d403      	bmi.n	8000794 <__aeabi_d2lz+0x1c>
 800078c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000790:	f000 b80a 	b.w	80007a8 <__aeabi_d2ulz>
 8000794:	eeb1 7b47 	vneg.f64	d7, d7
 8000798:	ec51 0b17 	vmov	r0, r1, d7
 800079c:	f000 f804 	bl	80007a8 <__aeabi_d2ulz>
 80007a0:	4240      	negs	r0, r0
 80007a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a6:	bd08      	pop	{r3, pc}

080007a8 <__aeabi_d2ulz>:
 80007a8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007d8 <__aeabi_d2ulz+0x30>
 80007ac:	ec41 0b17 	vmov	d7, r0, r1
 80007b0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007e0 <__aeabi_d2ulz+0x38>
 80007b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007b8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007bc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007c0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007c4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007c8:	ee16 1a10 	vmov	r1, s12
 80007cc:	ee17 0a90 	vmov	r0, s15
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	f3af 8000 	nop.w
 80007d8:	00000000 	.word	0x00000000
 80007dc:	3df00000 	.word	0x3df00000
 80007e0:	00000000 	.word	0x00000000
 80007e4:	41f00000 	.word	0x41f00000

080007e8 <__udivmoddi4>:
 80007e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ec:	9d08      	ldr	r5, [sp, #32]
 80007ee:	468e      	mov	lr, r1
 80007f0:	4604      	mov	r4, r0
 80007f2:	4688      	mov	r8, r1
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d14a      	bne.n	800088e <__udivmoddi4+0xa6>
 80007f8:	428a      	cmp	r2, r1
 80007fa:	4617      	mov	r7, r2
 80007fc:	d962      	bls.n	80008c4 <__udivmoddi4+0xdc>
 80007fe:	fab2 f682 	clz	r6, r2
 8000802:	b14e      	cbz	r6, 8000818 <__udivmoddi4+0x30>
 8000804:	f1c6 0320 	rsb	r3, r6, #32
 8000808:	fa01 f806 	lsl.w	r8, r1, r6
 800080c:	fa20 f303 	lsr.w	r3, r0, r3
 8000810:	40b7      	lsls	r7, r6
 8000812:	ea43 0808 	orr.w	r8, r3, r8
 8000816:	40b4      	lsls	r4, r6
 8000818:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800081c:	fa1f fc87 	uxth.w	ip, r7
 8000820:	fbb8 f1fe 	udiv	r1, r8, lr
 8000824:	0c23      	lsrs	r3, r4, #16
 8000826:	fb0e 8811 	mls	r8, lr, r1, r8
 800082a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800082e:	fb01 f20c 	mul.w	r2, r1, ip
 8000832:	429a      	cmp	r2, r3
 8000834:	d909      	bls.n	800084a <__udivmoddi4+0x62>
 8000836:	18fb      	adds	r3, r7, r3
 8000838:	f101 30ff 	add.w	r0, r1, #4294967295
 800083c:	f080 80ea 	bcs.w	8000a14 <__udivmoddi4+0x22c>
 8000840:	429a      	cmp	r2, r3
 8000842:	f240 80e7 	bls.w	8000a14 <__udivmoddi4+0x22c>
 8000846:	3902      	subs	r1, #2
 8000848:	443b      	add	r3, r7
 800084a:	1a9a      	subs	r2, r3, r2
 800084c:	b2a3      	uxth	r3, r4
 800084e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000852:	fb0e 2210 	mls	r2, lr, r0, r2
 8000856:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800085a:	fb00 fc0c 	mul.w	ip, r0, ip
 800085e:	459c      	cmp	ip, r3
 8000860:	d909      	bls.n	8000876 <__udivmoddi4+0x8e>
 8000862:	18fb      	adds	r3, r7, r3
 8000864:	f100 32ff 	add.w	r2, r0, #4294967295
 8000868:	f080 80d6 	bcs.w	8000a18 <__udivmoddi4+0x230>
 800086c:	459c      	cmp	ip, r3
 800086e:	f240 80d3 	bls.w	8000a18 <__udivmoddi4+0x230>
 8000872:	443b      	add	r3, r7
 8000874:	3802      	subs	r0, #2
 8000876:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800087a:	eba3 030c 	sub.w	r3, r3, ip
 800087e:	2100      	movs	r1, #0
 8000880:	b11d      	cbz	r5, 800088a <__udivmoddi4+0xa2>
 8000882:	40f3      	lsrs	r3, r6
 8000884:	2200      	movs	r2, #0
 8000886:	e9c5 3200 	strd	r3, r2, [r5]
 800088a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088e:	428b      	cmp	r3, r1
 8000890:	d905      	bls.n	800089e <__udivmoddi4+0xb6>
 8000892:	b10d      	cbz	r5, 8000898 <__udivmoddi4+0xb0>
 8000894:	e9c5 0100 	strd	r0, r1, [r5]
 8000898:	2100      	movs	r1, #0
 800089a:	4608      	mov	r0, r1
 800089c:	e7f5      	b.n	800088a <__udivmoddi4+0xa2>
 800089e:	fab3 f183 	clz	r1, r3
 80008a2:	2900      	cmp	r1, #0
 80008a4:	d146      	bne.n	8000934 <__udivmoddi4+0x14c>
 80008a6:	4573      	cmp	r3, lr
 80008a8:	d302      	bcc.n	80008b0 <__udivmoddi4+0xc8>
 80008aa:	4282      	cmp	r2, r0
 80008ac:	f200 8105 	bhi.w	8000aba <__udivmoddi4+0x2d2>
 80008b0:	1a84      	subs	r4, r0, r2
 80008b2:	eb6e 0203 	sbc.w	r2, lr, r3
 80008b6:	2001      	movs	r0, #1
 80008b8:	4690      	mov	r8, r2
 80008ba:	2d00      	cmp	r5, #0
 80008bc:	d0e5      	beq.n	800088a <__udivmoddi4+0xa2>
 80008be:	e9c5 4800 	strd	r4, r8, [r5]
 80008c2:	e7e2      	b.n	800088a <__udivmoddi4+0xa2>
 80008c4:	2a00      	cmp	r2, #0
 80008c6:	f000 8090 	beq.w	80009ea <__udivmoddi4+0x202>
 80008ca:	fab2 f682 	clz	r6, r2
 80008ce:	2e00      	cmp	r6, #0
 80008d0:	f040 80a4 	bne.w	8000a1c <__udivmoddi4+0x234>
 80008d4:	1a8a      	subs	r2, r1, r2
 80008d6:	0c03      	lsrs	r3, r0, #16
 80008d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008dc:	b280      	uxth	r0, r0
 80008de:	b2bc      	uxth	r4, r7
 80008e0:	2101      	movs	r1, #1
 80008e2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008e6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ee:	fb04 f20c 	mul.w	r2, r4, ip
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d907      	bls.n	8000906 <__udivmoddi4+0x11e>
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008fc:	d202      	bcs.n	8000904 <__udivmoddi4+0x11c>
 80008fe:	429a      	cmp	r2, r3
 8000900:	f200 80e0 	bhi.w	8000ac4 <__udivmoddi4+0x2dc>
 8000904:	46c4      	mov	ip, r8
 8000906:	1a9b      	subs	r3, r3, r2
 8000908:	fbb3 f2fe 	udiv	r2, r3, lr
 800090c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000910:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000914:	fb02 f404 	mul.w	r4, r2, r4
 8000918:	429c      	cmp	r4, r3
 800091a:	d907      	bls.n	800092c <__udivmoddi4+0x144>
 800091c:	18fb      	adds	r3, r7, r3
 800091e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000922:	d202      	bcs.n	800092a <__udivmoddi4+0x142>
 8000924:	429c      	cmp	r4, r3
 8000926:	f200 80ca 	bhi.w	8000abe <__udivmoddi4+0x2d6>
 800092a:	4602      	mov	r2, r0
 800092c:	1b1b      	subs	r3, r3, r4
 800092e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000932:	e7a5      	b.n	8000880 <__udivmoddi4+0x98>
 8000934:	f1c1 0620 	rsb	r6, r1, #32
 8000938:	408b      	lsls	r3, r1
 800093a:	fa22 f706 	lsr.w	r7, r2, r6
 800093e:	431f      	orrs	r7, r3
 8000940:	fa0e f401 	lsl.w	r4, lr, r1
 8000944:	fa20 f306 	lsr.w	r3, r0, r6
 8000948:	fa2e fe06 	lsr.w	lr, lr, r6
 800094c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000950:	4323      	orrs	r3, r4
 8000952:	fa00 f801 	lsl.w	r8, r0, r1
 8000956:	fa1f fc87 	uxth.w	ip, r7
 800095a:	fbbe f0f9 	udiv	r0, lr, r9
 800095e:	0c1c      	lsrs	r4, r3, #16
 8000960:	fb09 ee10 	mls	lr, r9, r0, lr
 8000964:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000968:	fb00 fe0c 	mul.w	lr, r0, ip
 800096c:	45a6      	cmp	lr, r4
 800096e:	fa02 f201 	lsl.w	r2, r2, r1
 8000972:	d909      	bls.n	8000988 <__udivmoddi4+0x1a0>
 8000974:	193c      	adds	r4, r7, r4
 8000976:	f100 3aff 	add.w	sl, r0, #4294967295
 800097a:	f080 809c 	bcs.w	8000ab6 <__udivmoddi4+0x2ce>
 800097e:	45a6      	cmp	lr, r4
 8000980:	f240 8099 	bls.w	8000ab6 <__udivmoddi4+0x2ce>
 8000984:	3802      	subs	r0, #2
 8000986:	443c      	add	r4, r7
 8000988:	eba4 040e 	sub.w	r4, r4, lr
 800098c:	fa1f fe83 	uxth.w	lr, r3
 8000990:	fbb4 f3f9 	udiv	r3, r4, r9
 8000994:	fb09 4413 	mls	r4, r9, r3, r4
 8000998:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800099c:	fb03 fc0c 	mul.w	ip, r3, ip
 80009a0:	45a4      	cmp	ip, r4
 80009a2:	d908      	bls.n	80009b6 <__udivmoddi4+0x1ce>
 80009a4:	193c      	adds	r4, r7, r4
 80009a6:	f103 3eff 	add.w	lr, r3, #4294967295
 80009aa:	f080 8082 	bcs.w	8000ab2 <__udivmoddi4+0x2ca>
 80009ae:	45a4      	cmp	ip, r4
 80009b0:	d97f      	bls.n	8000ab2 <__udivmoddi4+0x2ca>
 80009b2:	3b02      	subs	r3, #2
 80009b4:	443c      	add	r4, r7
 80009b6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009ba:	eba4 040c 	sub.w	r4, r4, ip
 80009be:	fba0 ec02 	umull	lr, ip, r0, r2
 80009c2:	4564      	cmp	r4, ip
 80009c4:	4673      	mov	r3, lr
 80009c6:	46e1      	mov	r9, ip
 80009c8:	d362      	bcc.n	8000a90 <__udivmoddi4+0x2a8>
 80009ca:	d05f      	beq.n	8000a8c <__udivmoddi4+0x2a4>
 80009cc:	b15d      	cbz	r5, 80009e6 <__udivmoddi4+0x1fe>
 80009ce:	ebb8 0203 	subs.w	r2, r8, r3
 80009d2:	eb64 0409 	sbc.w	r4, r4, r9
 80009d6:	fa04 f606 	lsl.w	r6, r4, r6
 80009da:	fa22 f301 	lsr.w	r3, r2, r1
 80009de:	431e      	orrs	r6, r3
 80009e0:	40cc      	lsrs	r4, r1
 80009e2:	e9c5 6400 	strd	r6, r4, [r5]
 80009e6:	2100      	movs	r1, #0
 80009e8:	e74f      	b.n	800088a <__udivmoddi4+0xa2>
 80009ea:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ee:	0c01      	lsrs	r1, r0, #16
 80009f0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009f4:	b280      	uxth	r0, r0
 80009f6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009fa:	463b      	mov	r3, r7
 80009fc:	4638      	mov	r0, r7
 80009fe:	463c      	mov	r4, r7
 8000a00:	46b8      	mov	r8, r7
 8000a02:	46be      	mov	lr, r7
 8000a04:	2620      	movs	r6, #32
 8000a06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a0a:	eba2 0208 	sub.w	r2, r2, r8
 8000a0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a12:	e766      	b.n	80008e2 <__udivmoddi4+0xfa>
 8000a14:	4601      	mov	r1, r0
 8000a16:	e718      	b.n	800084a <__udivmoddi4+0x62>
 8000a18:	4610      	mov	r0, r2
 8000a1a:	e72c      	b.n	8000876 <__udivmoddi4+0x8e>
 8000a1c:	f1c6 0220 	rsb	r2, r6, #32
 8000a20:	fa2e f302 	lsr.w	r3, lr, r2
 8000a24:	40b7      	lsls	r7, r6
 8000a26:	40b1      	lsls	r1, r6
 8000a28:	fa20 f202 	lsr.w	r2, r0, r2
 8000a2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a30:	430a      	orrs	r2, r1
 8000a32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a36:	b2bc      	uxth	r4, r7
 8000a38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a3c:	0c11      	lsrs	r1, r2, #16
 8000a3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a42:	fb08 f904 	mul.w	r9, r8, r4
 8000a46:	40b0      	lsls	r0, r6
 8000a48:	4589      	cmp	r9, r1
 8000a4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a4e:	b280      	uxth	r0, r0
 8000a50:	d93e      	bls.n	8000ad0 <__udivmoddi4+0x2e8>
 8000a52:	1879      	adds	r1, r7, r1
 8000a54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a58:	d201      	bcs.n	8000a5e <__udivmoddi4+0x276>
 8000a5a:	4589      	cmp	r9, r1
 8000a5c:	d81f      	bhi.n	8000a9e <__udivmoddi4+0x2b6>
 8000a5e:	eba1 0109 	sub.w	r1, r1, r9
 8000a62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a66:	fb09 f804 	mul.w	r8, r9, r4
 8000a6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a6e:	b292      	uxth	r2, r2
 8000a70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a74:	4542      	cmp	r2, r8
 8000a76:	d229      	bcs.n	8000acc <__udivmoddi4+0x2e4>
 8000a78:	18ba      	adds	r2, r7, r2
 8000a7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a7e:	d2c4      	bcs.n	8000a0a <__udivmoddi4+0x222>
 8000a80:	4542      	cmp	r2, r8
 8000a82:	d2c2      	bcs.n	8000a0a <__udivmoddi4+0x222>
 8000a84:	f1a9 0102 	sub.w	r1, r9, #2
 8000a88:	443a      	add	r2, r7
 8000a8a:	e7be      	b.n	8000a0a <__udivmoddi4+0x222>
 8000a8c:	45f0      	cmp	r8, lr
 8000a8e:	d29d      	bcs.n	80009cc <__udivmoddi4+0x1e4>
 8000a90:	ebbe 0302 	subs.w	r3, lr, r2
 8000a94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a98:	3801      	subs	r0, #1
 8000a9a:	46e1      	mov	r9, ip
 8000a9c:	e796      	b.n	80009cc <__udivmoddi4+0x1e4>
 8000a9e:	eba7 0909 	sub.w	r9, r7, r9
 8000aa2:	4449      	add	r1, r9
 8000aa4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000aa8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aac:	fb09 f804 	mul.w	r8, r9, r4
 8000ab0:	e7db      	b.n	8000a6a <__udivmoddi4+0x282>
 8000ab2:	4673      	mov	r3, lr
 8000ab4:	e77f      	b.n	80009b6 <__udivmoddi4+0x1ce>
 8000ab6:	4650      	mov	r0, sl
 8000ab8:	e766      	b.n	8000988 <__udivmoddi4+0x1a0>
 8000aba:	4608      	mov	r0, r1
 8000abc:	e6fd      	b.n	80008ba <__udivmoddi4+0xd2>
 8000abe:	443b      	add	r3, r7
 8000ac0:	3a02      	subs	r2, #2
 8000ac2:	e733      	b.n	800092c <__udivmoddi4+0x144>
 8000ac4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ac8:	443b      	add	r3, r7
 8000aca:	e71c      	b.n	8000906 <__udivmoddi4+0x11e>
 8000acc:	4649      	mov	r1, r9
 8000ace:	e79c      	b.n	8000a0a <__udivmoddi4+0x222>
 8000ad0:	eba1 0109 	sub.w	r1, r1, r9
 8000ad4:	46c4      	mov	ip, r8
 8000ad6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ada:	fb09 f804 	mul.w	r8, r9, r4
 8000ade:	e7c4      	b.n	8000a6a <__udivmoddi4+0x282>

08000ae0 <__aeabi_idiv0>:
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ae8:	f000 fc00 	bl	80012ec <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aec:	f001 f826 	bl	8001b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af0:	f000 f860 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af4:	f000 f99c 	bl	8000e30 <MX_GPIO_Init>
  MX_UART4_Init();
 8000af8:	f000 f902 	bl	8000d00 <MX_UART4_Init>
  MX_TIM6_Init();
 8000afc:	f000 f8ca 	bl	8000c94 <MX_TIM6_Init>
  MX_UART9_Init();
 8000b00:	f000 f94a 	bl	8000d98 <MX_UART9_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart9, &rx_byte, 1);
 8000b04:	2201      	movs	r2, #1
 8000b06:	4924      	ldr	r1, [pc, #144]	@ (8000b98 <main+0xb4>)
 8000b08:	4824      	ldr	r0, [pc, #144]	@ (8000b9c <main+0xb8>)
 8000b0a:	f005 fa01 	bl	8005f10 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 fee4 	bl	80018dc <BSP_LED_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000b14:	4b22      	ldr	r3, [pc, #136]	@ (8000ba0 <main+0xbc>)
 8000b16:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b1a:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000b1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ba0 <main+0xbc>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000b22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <main+0xbc>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000b28:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba0 <main+0xbc>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <main+0xbc>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000b34:	491a      	ldr	r1, [pc, #104]	@ (8000ba0 <main+0xbc>)
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 ff46 	bl	80019c8 <BSP_COM_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <main+0x62>
  {
    Error_Handler();
 8000b42:	f000 fbff 	bl	8001344 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (rotation_mode == 1)
 8000b46:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <main+0xc0>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d106      	bne.n	8000b5c <main+0x78>
	  {
		  StepMotor_OnePulse(60, direction);  // 60RPM으로 지속 회전
 8000b4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <main+0xc4>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4619      	mov	r1, r3
 8000b54:	203c      	movs	r0, #60	@ 0x3c
 8000b56:	f000 fa51 	bl	8000ffc <StepMotor_OnePulse>
 8000b5a:	e019      	b.n	8000b90 <main+0xac>
	  }
	  else
	  {
		  if ((direction == 1 && current_pulse_count < target_pulse_count) ||
 8000b5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <main+0xc4>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d105      	bne.n	8000b70 <main+0x8c>
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <main+0xc8>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <main+0xcc>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	db09      	blt.n	8000b84 <main+0xa0>
			  (direction == 0 && current_pulse_count > target_pulse_count))
 8000b70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <main+0xc4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
		  if ((direction == 1 && current_pulse_count < target_pulse_count) ||
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d10b      	bne.n	8000b90 <main+0xac>
			  (direction == 0 && current_pulse_count > target_pulse_count))
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <main+0xc8>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <main+0xcc>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	dd05      	ble.n	8000b90 <main+0xac>
		  {
			  StepMotor_OnePulse(60, direction);  // 목표까지 이동
 8000b84:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <main+0xc4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	203c      	movs	r0, #60	@ 0x3c
 8000b8c:	f000 fa36 	bl	8000ffc <StepMotor_OnePulse>
		  {
			  // 목표 위치 도달 후 정지 → 아무 것도 하지 않음
		  }
	  }

	  HAL_Delay(5);
 8000b90:	2005      	movs	r0, #5
 8000b92:	f001 f865 	bl	8001c60 <HAL_Delay>
	  if (rotation_mode == 1)
 8000b96:	e7d6      	b.n	8000b46 <main+0x62>
 8000b98:	2400038c 	.word	0x2400038c
 8000b9c:	240002f8 	.word	0x240002f8
 8000ba0:	24000208 	.word	0x24000208
 8000ba4:	240003d8 	.word	0x240003d8
 8000ba8:	24000000 	.word	0x24000000
 8000bac:	240003e0 	.word	0x240003e0
 8000bb0:	240003dc 	.word	0x240003dc

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b09c      	sub	sp, #112	@ 0x70
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bbe:	224c      	movs	r2, #76	@ 0x4c
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f008 fd17 	bl	80095f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2220      	movs	r2, #32
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f008 fd11 	bl	80095f6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bd4:	2002      	movs	r0, #2
 8000bd6:	f002 f915 	bl	8002e04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b2c      	ldr	r3, [pc, #176]	@ (8000c90 <SystemClock_Config+0xdc>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000be6:	4a2a      	ldr	r2, [pc, #168]	@ (8000c90 <SystemClock_Config+0xdc>)
 8000be8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bec:	6193      	str	r3, [r2, #24]
 8000bee:	4b28      	ldr	r3, [pc, #160]	@ (8000c90 <SystemClock_Config+0xdc>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bfa:	bf00      	nop
 8000bfc:	4b24      	ldr	r3, [pc, #144]	@ (8000c90 <SystemClock_Config+0xdc>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c08:	d1f8      	bne.n	8000bfc <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000c12:	2340      	movs	r3, #64	@ 0x40
 8000c14:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c16:	2302      	movs	r3, #2
 8000c18:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000c22:	230c      	movs	r3, #12
 8000c24:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c32:	230c      	movs	r3, #12
 8000c34:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c42:	4618      	mov	r0, r3
 8000c44:	f002 f918 	bl	8002e78 <HAL_RCC_OscConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c4e:	f000 fb79 	bl	8001344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c52:	233f      	movs	r3, #63	@ 0x3f
 8000c54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c56:	2303      	movs	r3, #3
 8000c58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c5e:	2308      	movs	r3, #8
 8000c60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c62:	2340      	movs	r3, #64	@ 0x40
 8000c64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c66:	2340      	movs	r3, #64	@ 0x40
 8000c68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c6e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c70:	2340      	movs	r3, #64	@ 0x40
 8000c72:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2101      	movs	r1, #1
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f002 fcd7 	bl	800362c <HAL_RCC_ClockConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c84:	f000 fb5e 	bl	8001344 <Error_Handler>
  }
}
 8000c88:	bf00      	nop
 8000c8a:	3770      	adds	r7, #112	@ 0x70
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	58024800 	.word	0x58024800

08000c94 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <MX_TIM6_Init+0x64>)
 8000ca6:	4a15      	ldr	r2, [pc, #84]	@ (8000cfc <MX_TIM6_Init+0x68>)
 8000ca8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 95;
 8000caa:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <MX_TIM6_Init+0x64>)
 8000cac:	225f      	movs	r2, #95	@ 0x5f
 8000cae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <MX_TIM6_Init+0x64>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff;
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <MX_TIM6_Init+0x64>)
 8000cb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cbc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <MX_TIM6_Init+0x64>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cc4:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <MX_TIM6_Init+0x64>)
 8000cc6:	f004 fdff 	bl	80058c8 <HAL_TIM_Base_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000cd0:	f000 fb38 	bl	8001344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <MX_TIM6_Init+0x64>)
 8000ce2:	f004 ff9b 	bl	8005c1c <HAL_TIMEx_MasterConfigSynchronization>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000cec:	f000 fb2a 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	24000218 	.word	0x24000218
 8000cfc:	40001000 	.word	0x40001000

08000d00 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d04:	4b22      	ldr	r3, [pc, #136]	@ (8000d90 <MX_UART4_Init+0x90>)
 8000d06:	4a23      	ldr	r2, [pc, #140]	@ (8000d94 <MX_UART4_Init+0x94>)
 8000d08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	@ (8000d90 <MX_UART4_Init+0x90>)
 8000d0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d10:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d12:	4b1f      	ldr	r3, [pc, #124]	@ (8000d90 <MX_UART4_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d18:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <MX_UART4_Init+0x90>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d90 <MX_UART4_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <MX_UART4_Init+0x90>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2a:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <MX_UART4_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d30:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <MX_UART4_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d36:	4b16      	ldr	r3, [pc, #88]	@ (8000d90 <MX_UART4_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <MX_UART4_Init+0x90>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d42:	4b13      	ldr	r3, [pc, #76]	@ (8000d90 <MX_UART4_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d48:	4811      	ldr	r0, [pc, #68]	@ (8000d90 <MX_UART4_Init+0x90>)
 8000d4a:	f005 f803 	bl	8005d54 <HAL_UART_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000d54:	f000 faf6 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d58:	2100      	movs	r1, #0
 8000d5a:	480d      	ldr	r0, [pc, #52]	@ (8000d90 <MX_UART4_Init+0x90>)
 8000d5c:	f007 fcb8 	bl	80086d0 <HAL_UARTEx_SetTxFifoThreshold>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000d66:	f000 faed 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4808      	ldr	r0, [pc, #32]	@ (8000d90 <MX_UART4_Init+0x90>)
 8000d6e:	f007 fced 	bl	800874c <HAL_UARTEx_SetRxFifoThreshold>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000d78:	f000 fae4 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000d7c:	4804      	ldr	r0, [pc, #16]	@ (8000d90 <MX_UART4_Init+0x90>)
 8000d7e:	f007 fc6e 	bl	800865e <HAL_UARTEx_DisableFifoMode>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000d88:	f000 fadc 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	24000264 	.word	0x24000264
 8000d94:	40004c00 	.word	0x40004c00

08000d98 <MX_UART9_Init>:
  * @brief UART9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART9_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART9_Init 0 */

  /* USER CODE BEGIN UART9_Init 1 */

  /* USER CODE END UART9_Init 1 */
  huart9.Instance = UART9;
 8000d9c:	4b22      	ldr	r3, [pc, #136]	@ (8000e28 <MX_UART9_Init+0x90>)
 8000d9e:	4a23      	ldr	r2, [pc, #140]	@ (8000e2c <MX_UART9_Init+0x94>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart9.Init.BaudRate = 115200;
 8000da2:	4b21      	ldr	r3, [pc, #132]	@ (8000e28 <MX_UART9_Init+0x90>)
 8000da4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000da8:	605a      	str	r2, [r3, #4]
  huart9.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b1f      	ldr	r3, [pc, #124]	@ (8000e28 <MX_UART9_Init+0x90>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart9.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <MX_UART9_Init+0x90>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart9.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e28 <MX_UART9_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart9.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <MX_UART9_Init+0x90>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart9.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b19      	ldr	r3, [pc, #100]	@ (8000e28 <MX_UART9_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart9.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <MX_UART9_Init+0x90>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  huart9.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dce:	4b16      	ldr	r3, [pc, #88]	@ (8000e28 <MX_UART9_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
  huart9.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dd4:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <MX_UART9_Init+0x90>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart9.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dda:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <MX_UART9_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart9) != HAL_OK)
 8000de0:	4811      	ldr	r0, [pc, #68]	@ (8000e28 <MX_UART9_Init+0x90>)
 8000de2:	f004 ffb7 	bl	8005d54 <HAL_UART_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_UART9_Init+0x58>
  {
    Error_Handler();
 8000dec:	f000 faaa 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart9, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df0:	2100      	movs	r1, #0
 8000df2:	480d      	ldr	r0, [pc, #52]	@ (8000e28 <MX_UART9_Init+0x90>)
 8000df4:	f007 fc6c 	bl	80086d0 <HAL_UARTEx_SetTxFifoThreshold>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_UART9_Init+0x6a>
  {
    Error_Handler();
 8000dfe:	f000 faa1 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart9, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4808      	ldr	r0, [pc, #32]	@ (8000e28 <MX_UART9_Init+0x90>)
 8000e06:	f007 fca1 	bl	800874c <HAL_UARTEx_SetRxFifoThreshold>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_UART9_Init+0x7c>
  {
    Error_Handler();
 8000e10:	f000 fa98 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart9) != HAL_OK)
 8000e14:	4804      	ldr	r0, [pc, #16]	@ (8000e28 <MX_UART9_Init+0x90>)
 8000e16:	f007 fbe7 	bl	80085e8 <HAL_UARTEx_EnableFifoMode>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_UART9_Init+0x8c>
  {
    Error_Handler();
 8000e20:	f000 fa90 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN UART9_Init 2 */

  /* USER CODE END UART9_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	240002f8 	.word	0x240002f8
 8000e2c:	40011800 	.word	0x40011800

08000e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	@ 0x30
 8000e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	4b5c      	ldr	r3, [pc, #368]	@ (8000fb8 <MX_GPIO_Init+0x188>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4c:	4a5a      	ldr	r2, [pc, #360]	@ (8000fb8 <MX_GPIO_Init+0x188>)
 8000e4e:	f043 0304 	orr.w	r3, r3, #4
 8000e52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e56:	4b58      	ldr	r3, [pc, #352]	@ (8000fb8 <MX_GPIO_Init+0x188>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5c:	f003 0304 	and.w	r3, r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
 8000e62:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	4b54      	ldr	r3, [pc, #336]	@ (8000fb8 <MX_GPIO_Init+0x188>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6a:	4a53      	ldr	r2, [pc, #332]	@ (8000fb8 <MX_GPIO_Init+0x188>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e74:	4b50      	ldr	r3, [pc, #320]	@ (8000fb8 <MX_GPIO_Init+0x188>)
 8000e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e82:	4b4d      	ldr	r3, [pc, #308]	@ (8000fb8 <MX_GPIO_Init+0x188>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e88:	4a4b      	ldr	r2, [pc, #300]	@ (8000fb8 <MX_GPIO_Init+0x188>)
 8000e8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e92:	4b49      	ldr	r3, [pc, #292]	@ (8000fb8 <MX_GPIO_Init+0x188>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea0:	4b45      	ldr	r3, [pc, #276]	@ (8000fb8 <MX_GPIO_Init+0x188>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea6:	4a44      	ldr	r2, [pc, #272]	@ (8000fb8 <MX_GPIO_Init+0x188>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eb0:	4b41      	ldr	r3, [pc, #260]	@ (8000fb8 <MX_GPIO_Init+0x188>)
 8000eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8000fb8 <MX_GPIO_Init+0x188>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec4:	4a3c      	ldr	r2, [pc, #240]	@ (8000fb8 <MX_GPIO_Init+0x188>)
 8000ec6:	f043 0308 	orr.w	r3, r3, #8
 8000eca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ece:	4b3a      	ldr	r3, [pc, #232]	@ (8000fb8 <MX_GPIO_Init+0x188>)
 8000ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000edc:	4b36      	ldr	r3, [pc, #216]	@ (8000fb8 <MX_GPIO_Init+0x188>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee2:	4a35      	ldr	r2, [pc, #212]	@ (8000fb8 <MX_GPIO_Init+0x188>)
 8000ee4:	f043 0310 	orr.w	r3, r3, #16
 8000ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eec:	4b32      	ldr	r3, [pc, #200]	@ (8000fb8 <MX_GPIO_Init+0x188>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Step_Pin|Dir_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2160      	movs	r1, #96	@ 0x60
 8000efe:	482f      	ldr	r0, [pc, #188]	@ (8000fbc <MX_GPIO_Init+0x18c>)
 8000f00:	f001 ff66 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f0a:	482d      	ldr	r0, [pc, #180]	@ (8000fc0 <MX_GPIO_Init+0x190>)
 8000f0c:	f001 ff60 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2102      	movs	r1, #2
 8000f14:	482b      	ldr	r0, [pc, #172]	@ (8000fc4 <MX_GPIO_Init+0x194>)
 8000f16:	f001 ff5b 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	482a      	ldr	r0, [pc, #168]	@ (8000fc8 <MX_GPIO_Init+0x198>)
 8000f20:	f001 ff56 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4619      	mov	r1, r3
 8000f38:	4824      	ldr	r0, [pc, #144]	@ (8000fcc <MX_GPIO_Init+0x19c>)
 8000f3a:	f001 fda1 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : Step_Pin Dir_Pin */
  GPIO_InitStruct.Pin = Step_Pin|Dir_Pin;
 8000f3e:	2360      	movs	r3, #96	@ 0x60
 8000f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4619      	mov	r1, r3
 8000f54:	4819      	ldr	r0, [pc, #100]	@ (8000fbc <MX_GPIO_Init+0x18c>)
 8000f56:	f001 fd93 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000f5a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4813      	ldr	r0, [pc, #76]	@ (8000fc0 <MX_GPIO_Init+0x190>)
 8000f74:	f001 fd84 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480d      	ldr	r0, [pc, #52]	@ (8000fc4 <MX_GPIO_Init+0x194>)
 8000f90:	f001 fd76 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4807      	ldr	r0, [pc, #28]	@ (8000fc8 <MX_GPIO_Init+0x198>)
 8000fac:	f001 fd68 	bl	8002a80 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fb0:	bf00      	nop
 8000fb2:	3730      	adds	r7, #48	@ 0x30
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	58024400 	.word	0x58024400
 8000fbc:	58020000 	.word	0x58020000
 8000fc0:	58020400 	.word	0x58020400
 8000fc4:	58020c00 	.word	0x58020c00
 8000fc8:	58021000 	.word	0x58021000
 8000fcc:	58020800 	.word	0x58020800

08000fd0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <_write+0x28>)
 8000fe8:	f004 ff04 	bl	8005df4 <HAL_UART_Transmit>
	return len;
 8000fec:	687b      	ldr	r3, [r7, #4]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	24000264 	.word	0x24000264

08000ffc <StepMotor_OnePulse>:

void StepMotor_OnePulse(int rpm, int direction)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
	if (rpm <= 0) return;  // 0RPM은 실행하지 않음
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	dd59      	ble.n	80010c0 <StepMotor_OnePulse+0xc4>

	float pulse_freq = (rpm / 60.0f) * STEP_PER_REV;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001016:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 80010c8 <StepMotor_OnePulse+0xcc>
 800101a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800101e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80010cc <StepMotor_OnePulse+0xd0>
 8001022:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001026:	edc7 7a03 	vstr	s15, [r7, #12]
	float delay_us = 1e6f / pulse_freq / 2.0f;
 800102a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80010d0 <StepMotor_OnePulse+0xd4>
 800102e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001036:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800103a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103e:	edc7 7a02 	vstr	s15, [r7, #8]

	HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2120      	movs	r1, #32
 8001046:	4823      	ldr	r0, [pc, #140]	@ (80010d4 <StepMotor_OnePulse+0xd8>)
 8001048:	f001 fec2 	bl	8002dd0 <HAL_GPIO_WritePin>
	HAL_Delay_us((uint32_t)delay_us);
 800104c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001054:	ee17 0a90 	vmov	r0, s15
 8001058:	f000 f92c 	bl	80012b4 <HAL_Delay_us>
	HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	2120      	movs	r1, #32
 8001060:	481c      	ldr	r0, [pc, #112]	@ (80010d4 <StepMotor_OnePulse+0xd8>)
 8001062:	f001 feb5 	bl	8002dd0 <HAL_GPIO_WritePin>
	HAL_Delay_us((uint32_t)delay_us);
 8001066:	edd7 7a02 	vldr	s15, [r7, #8]
 800106a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800106e:	ee17 0a90 	vmov	r0, s15
 8001072:	f000 f91f 	bl	80012b4 <HAL_Delay_us>

	if (direction == 1) current_pulse_count++;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d105      	bne.n	8001088 <StepMotor_OnePulse+0x8c>
 800107c:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <StepMotor_OnePulse+0xdc>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	3301      	adds	r3, #1
 8001082:	4a15      	ldr	r2, [pc, #84]	@ (80010d8 <StepMotor_OnePulse+0xdc>)
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e004      	b.n	8001092 <StepMotor_OnePulse+0x96>
	else current_pulse_count--;
 8001088:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <StepMotor_OnePulse+0xdc>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	3b01      	subs	r3, #1
 800108e:	4a12      	ldr	r2, [pc, #72]	@ (80010d8 <StepMotor_OnePulse+0xdc>)
 8001090:	6013      	str	r3, [r2, #0]

	if (current_pulse_count >= STEP_PER_REV) current_pulse_count -= STEP_PER_REV;
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <StepMotor_OnePulse+0xdc>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f5b3 5fe1 	cmp.w	r3, #7200	@ 0x1c20
 800109a:	db06      	blt.n	80010aa <StepMotor_OnePulse+0xae>
 800109c:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <StepMotor_OnePulse+0xdc>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f5a3 53e1 	sub.w	r3, r3, #7200	@ 0x1c20
 80010a4:	4a0c      	ldr	r2, [pc, #48]	@ (80010d8 <StepMotor_OnePulse+0xdc>)
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	e00b      	b.n	80010c2 <StepMotor_OnePulse+0xc6>
	else if ((int32_t)current_pulse_count < 0) current_pulse_count += STEP_PER_REV;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <StepMotor_OnePulse+0xdc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	da07      	bge.n	80010c2 <StepMotor_OnePulse+0xc6>
 80010b2:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <StepMotor_OnePulse+0xdc>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f503 53e1 	add.w	r3, r3, #7200	@ 0x1c20
 80010ba:	4a07      	ldr	r2, [pc, #28]	@ (80010d8 <StepMotor_OnePulse+0xdc>)
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	e000      	b.n	80010c2 <StepMotor_OnePulse+0xc6>
	if (rpm <= 0) return;  // 0RPM은 실행하지 않음
 80010c0:	bf00      	nop
}
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	42700000 	.word	0x42700000
 80010cc:	45e10000 	.word	0x45e10000
 80010d0:	49742400 	.word	0x49742400
 80010d4:	58020000 	.word	0x58020000
 80010d8:	240003e0 	.word	0x240003e0

080010dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART9)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a62      	ldr	r2, [pc, #392]	@ (8001274 <HAL_UART_RxCpltCallback+0x198>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	f040 80be 	bne.w	800126c <HAL_UART_RxCpltCallback+0x190>
	{
		if (rx_byte == '\n' || rx_byte == '\r')
 80010f0:	4b61      	ldr	r3, [pc, #388]	@ (8001278 <HAL_UART_RxCpltCallback+0x19c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b0a      	cmp	r3, #10
 80010f6:	d004      	beq.n	8001102 <HAL_UART_RxCpltCallback+0x26>
 80010f8:	4b5f      	ldr	r3, [pc, #380]	@ (8001278 <HAL_UART_RxCpltCallback+0x19c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b0d      	cmp	r3, #13
 80010fe:	f040 80a1 	bne.w	8001244 <HAL_UART_RxCpltCallback+0x168>
		{
			rx_buffer[rx_index] = '\0';  // 문자열 종료
 8001102:	4b5e      	ldr	r3, [pc, #376]	@ (800127c <HAL_UART_RxCpltCallback+0x1a0>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	4b5d      	ldr	r3, [pc, #372]	@ (8001280 <HAL_UART_RxCpltCallback+0x1a4>)
 800110a:	2100      	movs	r1, #0
 800110c:	5499      	strb	r1, [r3, r2]

			if (strcmp((char*)rx_buffer, "ROTATION_MODE") == 0)
 800110e:	495d      	ldr	r1, [pc, #372]	@ (8001284 <HAL_UART_RxCpltCallback+0x1a8>)
 8001110:	485b      	ldr	r0, [pc, #364]	@ (8001280 <HAL_UART_RxCpltCallback+0x1a4>)
 8001112:	f7ff f8fd 	bl	8000310 <strcmp>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d103      	bne.n	8001124 <HAL_UART_RxCpltCallback+0x48>
			{
				rotation_mode = 1;
 800111c:	4b5a      	ldr	r3, [pc, #360]	@ (8001288 <HAL_UART_RxCpltCallback+0x1ac>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	e086      	b.n	8001232 <HAL_UART_RxCpltCallback+0x156>
			}

			else if (strncmp((char*)rx_buffer, "STOP_MODE:", 10) == 0)
 8001124:	220a      	movs	r2, #10
 8001126:	4959      	ldr	r1, [pc, #356]	@ (800128c <HAL_UART_RxCpltCallback+0x1b0>)
 8001128:	4855      	ldr	r0, [pc, #340]	@ (8001280 <HAL_UART_RxCpltCallback+0x1a4>)
 800112a:	f008 fa6c 	bl	8009606 <strncmp>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d17e      	bne.n	8001232 <HAL_UART_RxCpltCallback+0x156>
			{
				rotation_mode = 0;
 8001134:	4b54      	ldr	r3, [pc, #336]	@ (8001288 <HAL_UART_RxCpltCallback+0x1ac>)
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
				target_angle = atof(&rx_buffer[10]);  // 정수든 소수든 안전하게 파싱
 800113a:	4855      	ldr	r0, [pc, #340]	@ (8001290 <HAL_UART_RxCpltCallback+0x1b4>)
 800113c:	f007 fb92 	bl	8008864 <atof>
 8001140:	eeb0 7b40 	vmov.f64	d7, d0
 8001144:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001148:	4b52      	ldr	r3, [pc, #328]	@ (8001294 <HAL_UART_RxCpltCallback+0x1b8>)
 800114a:	edc3 7a00 	vstr	s15, [r3]

				float current_angle = fmodf(current_pulse_count * DEG_PER_STEP, 360.0f);
 800114e:	4b52      	ldr	r3, [pc, #328]	@ (8001298 <HAL_UART_RxCpltCallback+0x1bc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115a:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800129c <HAL_UART_RxCpltCallback+0x1c0>
 800115e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001162:	eddf 0a4f 	vldr	s1, [pc, #316]	@ 80012a0 <HAL_UART_RxCpltCallback+0x1c4>
 8001166:	eeb0 0a67 	vmov.f32	s0, s15
 800116a:	f00a f919 	bl	800b3a0 <fmodf>
 800116e:	ed87 0a05 	vstr	s0, [r7, #20]
				float cw_diff  = fmodf((target_angle - current_angle + 360.0f), 360.0f);
 8001172:	4b48      	ldr	r3, [pc, #288]	@ (8001294 <HAL_UART_RxCpltCallback+0x1b8>)
 8001174:	ed93 7a00 	vldr	s14, [r3]
 8001178:	edd7 7a05 	vldr	s15, [r7, #20]
 800117c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001180:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80012a0 <HAL_UART_RxCpltCallback+0x1c4>
 8001184:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001188:	eddf 0a45 	vldr	s1, [pc, #276]	@ 80012a0 <HAL_UART_RxCpltCallback+0x1c4>
 800118c:	eeb0 0a67 	vmov.f32	s0, s15
 8001190:	f00a f906 	bl	800b3a0 <fmodf>
 8001194:	ed87 0a04 	vstr	s0, [r7, #16]
				float ccw_diff = fmodf((current_angle - target_angle + 360.0f), 360.0f);
 8001198:	4b3e      	ldr	r3, [pc, #248]	@ (8001294 <HAL_UART_RxCpltCallback+0x1b8>)
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	ed97 7a05 	vldr	s14, [r7, #20]
 80011a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011a6:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80012a0 <HAL_UART_RxCpltCallback+0x1c4>
 80011aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ae:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 80012a0 <HAL_UART_RxCpltCallback+0x1c4>
 80011b2:	eeb0 0a67 	vmov.f32	s0, s15
 80011b6:	f00a f8f3 	bl	800b3a0 <fmodf>
 80011ba:	ed87 0a03 	vstr	s0, [r7, #12]

				if (cw_diff <= ccw_diff)
 80011be:	ed97 7a04 	vldr	s14, [r7, #16]
 80011c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ce:	d818      	bhi.n	8001202 <HAL_UART_RxCpltCallback+0x126>
				{
					direction = 1;
 80011d0:	4b34      	ldr	r3, [pc, #208]	@ (80012a4 <HAL_UART_RxCpltCallback+0x1c8>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2140      	movs	r1, #64	@ 0x40
 80011da:	4833      	ldr	r0, [pc, #204]	@ (80012a8 <HAL_UART_RxCpltCallback+0x1cc>)
 80011dc:	f001 fdf8 	bl	8002dd0 <HAL_GPIO_WritePin>
					target_pulse_count = current_pulse_count + (uint32_t)(cw_diff / DEG_PER_STEP);
 80011e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80011e4:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 800129c <HAL_UART_RxCpltCallback+0x1c0>
 80011e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011f0:	ee17 2a90 	vmov	r2, s15
 80011f4:	4b28      	ldr	r3, [pc, #160]	@ (8001298 <HAL_UART_RxCpltCallback+0x1bc>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4413      	add	r3, r2
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b2b      	ldr	r3, [pc, #172]	@ (80012ac <HAL_UART_RxCpltCallback+0x1d0>)
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	e017      	b.n	8001232 <HAL_UART_RxCpltCallback+0x156>
				}
				else
				{
					direction = 0;
 8001202:	4b28      	ldr	r3, [pc, #160]	@ (80012a4 <HAL_UART_RxCpltCallback+0x1c8>)
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	2140      	movs	r1, #64	@ 0x40
 800120c:	4826      	ldr	r0, [pc, #152]	@ (80012a8 <HAL_UART_RxCpltCallback+0x1cc>)
 800120e:	f001 fddf 	bl	8002dd0 <HAL_GPIO_WritePin>
					target_pulse_count = current_pulse_count - (uint32_t)(ccw_diff / DEG_PER_STEP);
 8001212:	4b21      	ldr	r3, [pc, #132]	@ (8001298 <HAL_UART_RxCpltCallback+0x1bc>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	ed97 7a03 	vldr	s14, [r7, #12]
 800121a:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800129c <HAL_UART_RxCpltCallback+0x1c0>
 800121e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001226:	ee17 2a90 	vmov	r2, s15
 800122a:	1a9b      	subs	r3, r3, r2
 800122c:	461a      	mov	r2, r3
 800122e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <HAL_UART_RxCpltCallback+0x1d0>)
 8001230:	601a      	str	r2, [r3, #0]
				}
			}

			rx_index = 0;
 8001232:	4b12      	ldr	r3, [pc, #72]	@ (800127c <HAL_UART_RxCpltCallback+0x1a0>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, RX_BUFFER_SIZE);
 8001238:	2240      	movs	r2, #64	@ 0x40
 800123a:	2100      	movs	r1, #0
 800123c:	4810      	ldr	r0, [pc, #64]	@ (8001280 <HAL_UART_RxCpltCallback+0x1a4>)
 800123e:	f008 f9da 	bl	80095f6 <memset>
		{
 8001242:	e00e      	b.n	8001262 <HAL_UART_RxCpltCallback+0x186>
		}

		else
		{
			// 버퍼에 수신 문자 저장
			if (rx_index < RX_BUFFER_SIZE - 1)
 8001244:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <HAL_UART_RxCpltCallback+0x1a0>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b3e      	cmp	r3, #62	@ 0x3e
 800124a:	d80a      	bhi.n	8001262 <HAL_UART_RxCpltCallback+0x186>
			{
				rx_buffer[rx_index++] = rx_byte;
 800124c:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <HAL_UART_RxCpltCallback+0x1a0>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	b2d1      	uxtb	r1, r2
 8001254:	4a09      	ldr	r2, [pc, #36]	@ (800127c <HAL_UART_RxCpltCallback+0x1a0>)
 8001256:	7011      	strb	r1, [r2, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <HAL_UART_RxCpltCallback+0x19c>)
 800125c:	7819      	ldrb	r1, [r3, #0]
 800125e:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <HAL_UART_RxCpltCallback+0x1a4>)
 8001260:	5499      	strb	r1, [r3, r2]
			}
		}

	    HAL_UART_Receive_IT(&huart9, &rx_byte, 1);
 8001262:	2201      	movs	r2, #1
 8001264:	4904      	ldr	r1, [pc, #16]	@ (8001278 <HAL_UART_RxCpltCallback+0x19c>)
 8001266:	4812      	ldr	r0, [pc, #72]	@ (80012b0 <HAL_UART_RxCpltCallback+0x1d4>)
 8001268:	f004 fe52 	bl	8005f10 <HAL_UART_Receive_IT>
	}
}
 800126c:	bf00      	nop
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40011800 	.word	0x40011800
 8001278:	2400038c 	.word	0x2400038c
 800127c:	240003d0 	.word	0x240003d0
 8001280:	24000390 	.word	0x24000390
 8001284:	0800b500 	.word	0x0800b500
 8001288:	240003d8 	.word	0x240003d8
 800128c:	0800b510 	.word	0x0800b510
 8001290:	2400039a 	.word	0x2400039a
 8001294:	240003d4 	.word	0x240003d4
 8001298:	240003e0 	.word	0x240003e0
 800129c:	3d4ccccd 	.word	0x3d4ccccd
 80012a0:	43b40000 	.word	0x43b40000
 80012a4:	24000000 	.word	0x24000000
 80012a8:	58020000 	.word	0x58020000
 80012ac:	240003dc 	.word	0x240003dc
 80012b0:	240002f8 	.word	0x240002f8

080012b4 <HAL_Delay_us>:
{
    HAL_UART_Transmit(&huart4, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
}

void HAL_Delay_us(uint32_t us)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim6, 0);
 80012bc:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <HAL_Delay_us+0x34>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2200      	movs	r2, #0
 80012c2:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim6);
 80012c4:	4808      	ldr	r0, [pc, #32]	@ (80012e8 <HAL_Delay_us+0x34>)
 80012c6:	f004 fb57 	bl	8005978 <HAL_TIM_Base_Start>
    while (__HAL_TIM_GET_COUNTER(&htim6) < us);
 80012ca:	bf00      	nop
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_Delay_us+0x34>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d8f9      	bhi.n	80012cc <HAL_Delay_us+0x18>
    HAL_TIM_Base_Stop(&htim6);
 80012d8:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <HAL_Delay_us+0x34>)
 80012da:	f004 fbcb 	bl	8005a74 <HAL_TIM_Base_Stop>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	24000218 	.word	0x24000218

080012ec <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80012f2:	463b      	mov	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80012fe:	f000 fde3 	bl	8001ec8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001302:	2301      	movs	r3, #1
 8001304:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001306:	2300      	movs	r3, #0
 8001308:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800130e:	231f      	movs	r3, #31
 8001310:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001312:	2387      	movs	r3, #135	@ 0x87
 8001314:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001316:	2300      	movs	r3, #0
 8001318:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800131a:	2300      	movs	r3, #0
 800131c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800131e:	2301      	movs	r3, #1
 8001320:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001322:	2301      	movs	r3, #1
 8001324:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800132e:	463b      	mov	r3, r7
 8001330:	4618      	mov	r0, r3
 8001332:	f000 fe01 	bl	8001f38 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001336:	2004      	movs	r0, #4
 8001338:	f000 fdde 	bl	8001ef8 <HAL_MPU_Enable>

}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001348:	b672      	cpsid	i
}
 800134a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <Error_Handler+0x8>

08001350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <HAL_MspInit+0x30>)
 8001358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800135c:	4a08      	ldr	r2, [pc, #32]	@ (8001380 <HAL_MspInit+0x30>)
 800135e:	f043 0302 	orr.w	r3, r3, #2
 8001362:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <HAL_MspInit+0x30>)
 8001368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	58024400 	.word	0x58024400

08001384 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0b      	ldr	r2, [pc, #44]	@ (80013c0 <HAL_TIM_Base_MspInit+0x3c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d10e      	bne.n	80013b4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001396:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <HAL_TIM_Base_MspInit+0x40>)
 8001398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800139c:	4a09      	ldr	r2, [pc, #36]	@ (80013c4 <HAL_TIM_Base_MspInit+0x40>)
 800139e:	f043 0310 	orr.w	r3, r3, #16
 80013a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013a6:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <HAL_TIM_Base_MspInit+0x40>)
 80013a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	40001000 	.word	0x40001000
 80013c4:	58024400 	.word	0x58024400

080013c8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b0ba      	sub	sp, #232	@ 0xe8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e0:	f107 0318 	add.w	r3, r7, #24
 80013e4:	22b8      	movs	r2, #184	@ 0xb8
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f008 f904 	bl	80095f6 <memset>
  if(huart->Instance==UART4)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a54      	ldr	r2, [pc, #336]	@ (8001544 <HAL_UART_MspInit+0x17c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d14e      	bne.n	8001496 <HAL_UART_MspInit+0xce>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80013f8:	f04f 0202 	mov.w	r2, #2
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800140a:	f107 0318 	add.w	r3, r7, #24
 800140e:	4618      	mov	r0, r3
 8001410:	f002 fc98 	bl	8003d44 <HAL_RCCEx_PeriphCLKConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800141a:	f7ff ff93 	bl	8001344 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800141e:	4b4a      	ldr	r3, [pc, #296]	@ (8001548 <HAL_UART_MspInit+0x180>)
 8001420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001424:	4a48      	ldr	r2, [pc, #288]	@ (8001548 <HAL_UART_MspInit+0x180>)
 8001426:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800142a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800142e:	4b46      	ldr	r3, [pc, #280]	@ (8001548 <HAL_UART_MspInit+0x180>)
 8001430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001434:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143c:	4b42      	ldr	r3, [pc, #264]	@ (8001548 <HAL_UART_MspInit+0x180>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001442:	4a41      	ldr	r2, [pc, #260]	@ (8001548 <HAL_UART_MspInit+0x180>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800144c:	4b3e      	ldr	r3, [pc, #248]	@ (8001548 <HAL_UART_MspInit+0x180>)
 800144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800145a:	2303      	movs	r3, #3
 800145c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001472:	2308      	movs	r3, #8
 8001474:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800147c:	4619      	mov	r1, r3
 800147e:	4833      	ldr	r0, [pc, #204]	@ (800154c <HAL_UART_MspInit+0x184>)
 8001480:	f001 fafe 	bl	8002a80 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	2034      	movs	r0, #52	@ 0x34
 800148a:	f000 fce8 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800148e:	2034      	movs	r0, #52	@ 0x34
 8001490:	f000 fcff 	bl	8001e92 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN UART9_MspInit 1 */

    /* USER CODE END UART9_MspInit 1 */
  }

}
 8001494:	e052      	b.n	800153c <HAL_UART_MspInit+0x174>
  else if(huart->Instance==UART9)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a2d      	ldr	r2, [pc, #180]	@ (8001550 <HAL_UART_MspInit+0x188>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d14d      	bne.n	800153c <HAL_UART_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART9;
 80014a0:	f04f 0201 	mov.w	r2, #1
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b2:	f107 0318 	add.w	r3, r7, #24
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 fc44 	bl	8003d44 <HAL_RCCEx_PeriphCLKConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 80014c2:	f7ff ff3f 	bl	8001344 <Error_Handler>
    __HAL_RCC_UART9_CLK_ENABLE();
 80014c6:	4b20      	ldr	r3, [pc, #128]	@ (8001548 <HAL_UART_MspInit+0x180>)
 80014c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001548 <HAL_UART_MspInit+0x180>)
 80014ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80014d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <HAL_UART_MspInit+0x180>)
 80014d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014e4:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <HAL_UART_MspInit+0x180>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ea:	4a17      	ldr	r2, [pc, #92]	@ (8001548 <HAL_UART_MspInit+0x180>)
 80014ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014f4:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <HAL_UART_MspInit+0x180>)
 80014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001502:	2303      	movs	r3, #3
 8001504:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_UART9;
 800151a:	230b      	movs	r3, #11
 800151c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001520:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001524:	4619      	mov	r1, r3
 8001526:	480b      	ldr	r0, [pc, #44]	@ (8001554 <HAL_UART_MspInit+0x18c>)
 8001528:	f001 faaa 	bl	8002a80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART9_IRQn, 0, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2100      	movs	r1, #0
 8001530:	209b      	movs	r0, #155	@ 0x9b
 8001532:	f000 fc94 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART9_IRQn);
 8001536:	209b      	movs	r0, #155	@ 0x9b
 8001538:	f000 fcab 	bl	8001e92 <HAL_NVIC_EnableIRQ>
}
 800153c:	bf00      	nop
 800153e:	37e8      	adds	r7, #232	@ 0xe8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40004c00 	.word	0x40004c00
 8001548:	58024400 	.word	0x58024400
 800154c:	58020000 	.word	0x58020000
 8001550:	40011800 	.word	0x40011800
 8001554:	58021800 	.word	0x58021800

08001558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <NMI_Handler+0x4>

08001560 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <HardFault_Handler+0x4>

08001568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <MemManage_Handler+0x4>

08001570 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <BusFault_Handler+0x4>

08001578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <UsageFault_Handler+0x4>

08001580 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ae:	f000 fb37 	bl	8001c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80015bc:	4802      	ldr	r0, [pc, #8]	@ (80015c8 <UART4_IRQHandler+0x10>)
 80015be:	f004 fcf3 	bl	8005fa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	24000264 	.word	0x24000264

080015cc <UART9_IRQHandler>:

/**
  * @brief This function handles UART9 global interrupt.
  */
void UART9_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART9_IRQn 0 */

  /* USER CODE END UART9_IRQn 0 */
  HAL_UART_IRQHandler(&huart9);
 80015d0:	4802      	ldr	r0, [pc, #8]	@ (80015dc <UART9_IRQHandler+0x10>)
 80015d2:	f004 fce9 	bl	8005fa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART9_IRQn 1 */

  /* USER CODE END UART9_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	240002f8 	.word	0x240002f8

080015e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return 1;
 80015e4:	2301      	movs	r3, #1
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <_kill>:

int _kill(int pid, int sig)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015fa:	f008 f85d 	bl	80096b8 <__errno>
 80015fe:	4603      	mov	r3, r0
 8001600:	2216      	movs	r2, #22
 8001602:	601a      	str	r2, [r3, #0]
  return -1;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_exit>:

void _exit (int status)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ffe7 	bl	80015f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001622:	bf00      	nop
 8001624:	e7fd      	b.n	8001622 <_exit+0x12>

08001626 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	e00a      	b.n	800164e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001638:	f3af 8000 	nop.w
 800163c:	4601      	mov	r1, r0
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	60ba      	str	r2, [r7, #8]
 8001644:	b2ca      	uxtb	r2, r1
 8001646:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3301      	adds	r3, #1
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	429a      	cmp	r2, r3
 8001654:	dbf0      	blt.n	8001638 <_read+0x12>
  }

  return len;
 8001656:	687b      	ldr	r3, [r7, #4]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001688:	605a      	str	r2, [r3, #4]
  return 0;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <_isatty>:

int _isatty(int file)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016a0:	2301      	movs	r3, #1
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b085      	sub	sp, #20
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d0:	4a14      	ldr	r2, [pc, #80]	@ (8001724 <_sbrk+0x5c>)
 80016d2:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <_sbrk+0x60>)
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016dc:	4b13      	ldr	r3, [pc, #76]	@ (800172c <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <_sbrk+0x64>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	@ (8001730 <_sbrk+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d207      	bcs.n	8001708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f8:	f007 ffde 	bl	80096b8 <__errno>
 80016fc:	4603      	mov	r3, r0
 80016fe:	220c      	movs	r2, #12
 8001700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e009      	b.n	800171c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001708:	4b08      	ldr	r3, [pc, #32]	@ (800172c <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170e:	4b07      	ldr	r3, [pc, #28]	@ (800172c <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	4a05      	ldr	r2, [pc, #20]	@ (800172c <_sbrk+0x64>)
 8001718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	24050000 	.word	0x24050000
 8001728:	00000400 	.word	0x00000400
 800172c:	240003e4 	.word	0x240003e4
 8001730:	240005d0 	.word	0x240005d0

08001734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001738:	4b3e      	ldr	r3, [pc, #248]	@ (8001834 <SystemInit+0x100>)
 800173a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800173e:	4a3d      	ldr	r2, [pc, #244]	@ (8001834 <SystemInit+0x100>)
 8001740:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001744:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001748:	4b3b      	ldr	r3, [pc, #236]	@ (8001838 <SystemInit+0x104>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 030f 	and.w	r3, r3, #15
 8001750:	2b06      	cmp	r3, #6
 8001752:	d807      	bhi.n	8001764 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001754:	4b38      	ldr	r3, [pc, #224]	@ (8001838 <SystemInit+0x104>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f023 030f 	bic.w	r3, r3, #15
 800175c:	4a36      	ldr	r2, [pc, #216]	@ (8001838 <SystemInit+0x104>)
 800175e:	f043 0307 	orr.w	r3, r3, #7
 8001762:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001764:	4b35      	ldr	r3, [pc, #212]	@ (800183c <SystemInit+0x108>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a34      	ldr	r2, [pc, #208]	@ (800183c <SystemInit+0x108>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001770:	4b32      	ldr	r3, [pc, #200]	@ (800183c <SystemInit+0x108>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001776:	4b31      	ldr	r3, [pc, #196]	@ (800183c <SystemInit+0x108>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4930      	ldr	r1, [pc, #192]	@ (800183c <SystemInit+0x108>)
 800177c:	4b30      	ldr	r3, [pc, #192]	@ (8001840 <SystemInit+0x10c>)
 800177e:	4013      	ands	r3, r2
 8001780:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001782:	4b2d      	ldr	r3, [pc, #180]	@ (8001838 <SystemInit+0x104>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b00      	cmp	r3, #0
 800178c:	d007      	beq.n	800179e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800178e:	4b2a      	ldr	r3, [pc, #168]	@ (8001838 <SystemInit+0x104>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 030f 	bic.w	r3, r3, #15
 8001796:	4a28      	ldr	r2, [pc, #160]	@ (8001838 <SystemInit+0x104>)
 8001798:	f043 0307 	orr.w	r3, r3, #7
 800179c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800179e:	4b27      	ldr	r3, [pc, #156]	@ (800183c <SystemInit+0x108>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80017a4:	4b25      	ldr	r3, [pc, #148]	@ (800183c <SystemInit+0x108>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80017aa:	4b24      	ldr	r3, [pc, #144]	@ (800183c <SystemInit+0x108>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017b0:	4b22      	ldr	r3, [pc, #136]	@ (800183c <SystemInit+0x108>)
 80017b2:	4a24      	ldr	r2, [pc, #144]	@ (8001844 <SystemInit+0x110>)
 80017b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017b6:	4b21      	ldr	r3, [pc, #132]	@ (800183c <SystemInit+0x108>)
 80017b8:	4a23      	ldr	r2, [pc, #140]	@ (8001848 <SystemInit+0x114>)
 80017ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017bc:	4b1f      	ldr	r3, [pc, #124]	@ (800183c <SystemInit+0x108>)
 80017be:	4a23      	ldr	r2, [pc, #140]	@ (800184c <SystemInit+0x118>)
 80017c0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017c2:	4b1e      	ldr	r3, [pc, #120]	@ (800183c <SystemInit+0x108>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017c8:	4b1c      	ldr	r3, [pc, #112]	@ (800183c <SystemInit+0x108>)
 80017ca:	4a20      	ldr	r2, [pc, #128]	@ (800184c <SystemInit+0x118>)
 80017cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017ce:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <SystemInit+0x108>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017d4:	4b19      	ldr	r3, [pc, #100]	@ (800183c <SystemInit+0x108>)
 80017d6:	4a1d      	ldr	r2, [pc, #116]	@ (800184c <SystemInit+0x118>)
 80017d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017da:	4b18      	ldr	r3, [pc, #96]	@ (800183c <SystemInit+0x108>)
 80017dc:	2200      	movs	r2, #0
 80017de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017e0:	4b16      	ldr	r3, [pc, #88]	@ (800183c <SystemInit+0x108>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a15      	ldr	r2, [pc, #84]	@ (800183c <SystemInit+0x108>)
 80017e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017ec:	4b13      	ldr	r3, [pc, #76]	@ (800183c <SystemInit+0x108>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80017f2:	4b12      	ldr	r3, [pc, #72]	@ (800183c <SystemInit+0x108>)
 80017f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d113      	bne.n	8001828 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001800:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <SystemInit+0x108>)
 8001802:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001806:	4a0d      	ldr	r2, [pc, #52]	@ (800183c <SystemInit+0x108>)
 8001808:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800180c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001810:	4b0f      	ldr	r3, [pc, #60]	@ (8001850 <SystemInit+0x11c>)
 8001812:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001816:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001818:	4b08      	ldr	r3, [pc, #32]	@ (800183c <SystemInit+0x108>)
 800181a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800181e:	4a07      	ldr	r2, [pc, #28]	@ (800183c <SystemInit+0x108>)
 8001820:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001824:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000ed00 	.word	0xe000ed00
 8001838:	52002000 	.word	0x52002000
 800183c:	58024400 	.word	0x58024400
 8001840:	eaf6ed7f 	.word	0xeaf6ed7f
 8001844:	02020200 	.word	0x02020200
 8001848:	01ff0000 	.word	0x01ff0000
 800184c:	01010280 	.word	0x01010280
 8001850:	52004000 	.word	0x52004000

08001854 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001858:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <ExitRun0Mode+0x2c>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	4a08      	ldr	r2, [pc, #32]	@ (8001880 <ExitRun0Mode+0x2c>)
 800185e:	f043 0302 	orr.w	r3, r3, #2
 8001862:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001864:	bf00      	nop
 8001866:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <ExitRun0Mode+0x2c>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f9      	beq.n	8001866 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001872:	bf00      	nop
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	58024800 	.word	0x58024800

08001884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001884:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80018c0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001888:	f7ff ffe4 	bl	8001854 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800188c:	f7ff ff52 	bl	8001734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001890:	480c      	ldr	r0, [pc, #48]	@ (80018c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001892:	490d      	ldr	r1, [pc, #52]	@ (80018c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001894:	4a0d      	ldr	r2, [pc, #52]	@ (80018cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001898:	e002      	b.n	80018a0 <LoopCopyDataInit>

0800189a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800189c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189e:	3304      	adds	r3, #4

080018a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a4:	d3f9      	bcc.n	800189a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a6:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018a8:	4c0a      	ldr	r4, [pc, #40]	@ (80018d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ac:	e001      	b.n	80018b2 <LoopFillZerobss>

080018ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b0:	3204      	adds	r2, #4

080018b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b4:	d3fb      	bcc.n	80018ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b6:	f007 ff05 	bl	80096c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ba:	f7ff f913 	bl	8000ae4 <main>
  bx  lr
 80018be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018c0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80018c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018c8:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 80018cc:	0800b934 	.word	0x0800b934
  ldr r2, =_sbss
 80018d0:	240001ec 	.word	0x240001ec
  ldr r4, =_ebss
 80018d4:	240005cc 	.word	0x240005cc

080018d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC3_IRQHandler>
	...

080018dc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	@ 0x30
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d009      	beq.n	8001904 <BSP_LED_Init+0x28>
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d006      	beq.n	8001904 <BSP_LED_Init+0x28>
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d003      	beq.n	8001904 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018fc:	f06f 0301 	mvn.w	r3, #1
 8001900:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001902:	e055      	b.n	80019b0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10f      	bne.n	800192a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800190a:	4b2c      	ldr	r3, [pc, #176]	@ (80019bc <BSP_LED_Init+0xe0>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001910:	4a2a      	ldr	r2, [pc, #168]	@ (80019bc <BSP_LED_Init+0xe0>)
 8001912:	f043 0302 	orr.w	r3, r3, #2
 8001916:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800191a:	4b28      	ldr	r3, [pc, #160]	@ (80019bc <BSP_LED_Init+0xe0>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	e021      	b.n	800196e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d10f      	bne.n	8001950 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001930:	4b22      	ldr	r3, [pc, #136]	@ (80019bc <BSP_LED_Init+0xe0>)
 8001932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001936:	4a21      	ldr	r2, [pc, #132]	@ (80019bc <BSP_LED_Init+0xe0>)
 8001938:	f043 0310 	orr.w	r3, r3, #16
 800193c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001940:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <BSP_LED_Init+0xe0>)
 8001942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001946:	f003 0310 	and.w	r3, r3, #16
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	e00e      	b.n	800196e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001950:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <BSP_LED_Init+0xe0>)
 8001952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001956:	4a19      	ldr	r2, [pc, #100]	@ (80019bc <BSP_LED_Init+0xe0>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001960:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <BSP_LED_Init+0xe0>)
 8001962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	4a13      	ldr	r2, [pc, #76]	@ (80019c0 <BSP_LED_Init+0xe4>)
 8001972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001976:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001978:	2301      	movs	r3, #1
 800197a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	4a0f      	ldr	r2, [pc, #60]	@ (80019c4 <BSP_LED_Init+0xe8>)
 8001988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198c:	f107 0218 	add.w	r2, r7, #24
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f001 f874 	bl	8002a80 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <BSP_LED_Init+0xe8>)
 800199c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	4a07      	ldr	r2, [pc, #28]	@ (80019c0 <BSP_LED_Init+0xe4>)
 80019a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019a8:	2200      	movs	r2, #0
 80019aa:	4619      	mov	r1, r3
 80019ac:	f001 fa10 	bl	8002dd0 <HAL_GPIO_WritePin>
  }

  return ret;
 80019b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3730      	adds	r7, #48	@ 0x30
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	58024400 	.word	0x58024400
 80019c0:	0800b52c 	.word	0x0800b52c
 80019c4:	24000010 	.word	0x24000010

080019c8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019de:	f06f 0301 	mvn.w	r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	e018      	b.n	8001a18 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	2294      	movs	r2, #148	@ 0x94
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001a24 <BSP_COM_Init+0x5c>)
 80019f0:	4413      	add	r3, r2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f84a 	bl	8001a8c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	2294      	movs	r2, #148	@ 0x94
 80019fc:	fb02 f303 	mul.w	r3, r2, r3
 8001a00:	4a08      	ldr	r2, [pc, #32]	@ (8001a24 <BSP_COM_Init+0x5c>)
 8001a02:	4413      	add	r3, r2
 8001a04:	6839      	ldr	r1, [r7, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f80e 	bl	8001a28 <MX_USART3_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001a12:	f06f 0303 	mvn.w	r3, #3
 8001a16:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001a18:	68fb      	ldr	r3, [r7, #12]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	240003e8 	.word	0x240003e8

08001a28 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <MX_USART3_Init+0x60>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	220c      	movs	r2, #12
 8001a46:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	895b      	ldrh	r3, [r3, #10]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	891b      	ldrh	r3, [r3, #8]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	899b      	ldrh	r3, [r3, #12]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a74:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f004 f96c 	bl	8005d54 <HAL_UART_Init>
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2400000c 	.word	0x2400000c

08001a8c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	@ 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001a94:	4b27      	ldr	r3, [pc, #156]	@ (8001b34 <COM1_MspInit+0xa8>)
 8001a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a9a:	4a26      	ldr	r2, [pc, #152]	@ (8001b34 <COM1_MspInit+0xa8>)
 8001a9c:	f043 0308 	orr.w	r3, r3, #8
 8001aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aa4:	4b23      	ldr	r3, [pc, #140]	@ (8001b34 <COM1_MspInit+0xa8>)
 8001aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001ab2:	4b20      	ldr	r3, [pc, #128]	@ (8001b34 <COM1_MspInit+0xa8>)
 8001ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b34 <COM1_MspInit+0xa8>)
 8001aba:	f043 0308 	orr.w	r3, r3, #8
 8001abe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b34 <COM1_MspInit+0xa8>)
 8001ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001ad0:	4b18      	ldr	r3, [pc, #96]	@ (8001b34 <COM1_MspInit+0xa8>)
 8001ad2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ad6:	4a17      	ldr	r2, [pc, #92]	@ (8001b34 <COM1_MspInit+0xa8>)
 8001ad8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001adc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ae0:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <COM1_MspInit+0xa8>)
 8001ae2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ae6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001aee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001af2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af8:	2302      	movs	r3, #2
 8001afa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001afc:	2301      	movs	r3, #1
 8001afe:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001b00:	2307      	movs	r3, #7
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	480b      	ldr	r0, [pc, #44]	@ (8001b38 <COM1_MspInit+0xac>)
 8001b0c:	f000 ffb8 	bl	8002a80 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001b10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b14:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4804      	ldr	r0, [pc, #16]	@ (8001b38 <COM1_MspInit+0xac>)
 8001b26:	f000 ffab 	bl	8002a80 <HAL_GPIO_Init>
}
 8001b2a:	bf00      	nop
 8001b2c:	3728      	adds	r7, #40	@ 0x28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	58024400 	.word	0x58024400
 8001b38:	58020c00 	.word	0x58020c00

08001b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b42:	2003      	movs	r0, #3
 8001b44:	f000 f980 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b48:	f001 ff26 	bl	8003998 <HAL_RCC_GetSysClockFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ba4 <HAL_Init+0x68>)
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	0a1b      	lsrs	r3, r3, #8
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	4913      	ldr	r1, [pc, #76]	@ (8001ba8 <HAL_Init+0x6c>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
 8001b64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba4 <HAL_Init+0x68>)
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba8 <HAL_Init+0x6c>)
 8001b70:	5cd3      	ldrb	r3, [r2, r3]
 8001b72:	f003 031f 	and.w	r3, r3, #31
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bac <HAL_Init+0x70>)
 8001b7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b80:	4a0b      	ldr	r2, [pc, #44]	@ (8001bb0 <HAL_Init+0x74>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b86:	2000      	movs	r0, #0
 8001b88:	f000 f814 	bl	8001bb4 <HAL_InitTick>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e002      	b.n	8001b9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b96:	f7ff fbdb 	bl	8001350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	58024400 	.word	0x58024400
 8001ba8:	0800b51c 	.word	0x0800b51c
 8001bac:	24000008 	.word	0x24000008
 8001bb0:	24000004 	.word	0x24000004

08001bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bbc:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <HAL_InitTick+0x60>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e021      	b.n	8001c0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <HAL_InitTick+0x64>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <HAL_InitTick+0x60>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f965 	bl	8001eae <HAL_SYSTICK_Config>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00e      	b.n	8001c0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	d80a      	bhi.n	8001c0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f000 f92f 	bl	8001e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c00:	4a06      	ldr	r2, [pc, #24]	@ (8001c1c <HAL_InitTick+0x68>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e000      	b.n	8001c0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	24000020 	.word	0x24000020
 8001c18:	24000004 	.word	0x24000004
 8001c1c:	2400001c 	.word	0x2400001c

08001c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_IncTick+0x20>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <HAL_IncTick+0x24>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <HAL_IncTick+0x24>)
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	24000020 	.word	0x24000020
 8001c44:	2400047c 	.word	0x2400047c

08001c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	@ (8001c5c <HAL_GetTick+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	2400047c 	.word	0x2400047c

08001c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c68:	f7ff ffee 	bl	8001c48 <HAL_GetTick>
 8001c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c78:	d005      	beq.n	8001c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca4 <HAL_Delay+0x44>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4413      	add	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c86:	bf00      	nop
 8001c88:	f7ff ffde 	bl	8001c48 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d8f7      	bhi.n	8001c88 <HAL_Delay+0x28>
  {
  }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	24000020 	.word	0x24000020

08001ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00
 8001cec:	05fa0000 	.word	0x05fa0000

08001cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b04      	ldr	r3, [pc, #16]	@ (8001d08 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 0307 	and.w	r3, r3, #7
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0b      	blt.n	8001d36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4907      	ldr	r1, [pc, #28]	@ (8001d44 <__NVIC_EnableIRQ+0x38>)
 8001d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	@ (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	@ (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	@ 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	@ 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e14:	d301      	bcc.n	8001e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00f      	b.n	8001e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <SysTick_Config+0x40>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e22:	210f      	movs	r1, #15
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f7ff ff8e 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e2c:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <SysTick_Config+0x40>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e32:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <SysTick_Config+0x40>)
 8001e34:	2207      	movs	r2, #7
 8001e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	e000e010 	.word	0xe000e010

08001e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff29 	bl	8001ca8 <__NVIC_SetPriorityGrouping>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff40 	bl	8001cf0 <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff90 	bl	8001d9c <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5f 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff33 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffa4 	bl	8001e04 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ecc:	f3bf 8f5f 	dmb	sy
}
 8001ed0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	@ (8001ef0 <HAL_MPU_Disable+0x28>)
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed6:	4a06      	ldr	r2, [pc, #24]	@ (8001ef0 <HAL_MPU_Disable+0x28>)
 8001ed8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001edc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001ede:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <HAL_MPU_Disable+0x2c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	605a      	str	r2, [r3, #4]
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed00 	.word	0xe000ed00
 8001ef4:	e000ed90 	.word	0xe000ed90

08001ef8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f00:	4a0b      	ldr	r2, [pc, #44]	@ (8001f30 <HAL_MPU_Enable+0x38>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <HAL_MPU_Enable+0x3c>)
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0e:	4a09      	ldr	r2, [pc, #36]	@ (8001f34 <HAL_MPU_Enable+0x3c>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f14:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f16:	f3bf 8f4f 	dsb	sy
}
 8001f1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f1c:	f3bf 8f6f 	isb	sy
}
 8001f20:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed90 	.word	0xe000ed90
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	785a      	ldrb	r2, [r3, #1]
 8001f44:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb4 <HAL_MPU_ConfigRegion+0x7c>)
 8001f46:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001f48:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb4 <HAL_MPU_ConfigRegion+0x7c>)
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	4a19      	ldr	r2, [pc, #100]	@ (8001fb4 <HAL_MPU_ConfigRegion+0x7c>)
 8001f4e:	f023 0301 	bic.w	r3, r3, #1
 8001f52:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001f54:	4a17      	ldr	r2, [pc, #92]	@ (8001fb4 <HAL_MPU_ConfigRegion+0x7c>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7b1b      	ldrb	r3, [r3, #12]
 8001f60:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	7adb      	ldrb	r3, [r3, #11]
 8001f66:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7a9b      	ldrb	r3, [r3, #10]
 8001f6e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7b5b      	ldrb	r3, [r3, #13]
 8001f76:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7b9b      	ldrb	r3, [r3, #14]
 8001f7e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7bdb      	ldrb	r3, [r3, #15]
 8001f86:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	7a5b      	ldrb	r3, [r3, #9]
 8001f8e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7a1b      	ldrb	r3, [r3, #8]
 8001f96:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f98:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	7812      	ldrb	r2, [r2, #0]
 8001f9e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fa0:	4a04      	ldr	r2, [pc, #16]	@ (8001fb4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fa2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fa4:	6113      	str	r3, [r2, #16]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed90 	.word	0xe000ed90

08001fb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001fc0:	f7ff fe42 	bl	8001c48 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e2dc      	b.n	800258a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d008      	beq.n	8001fee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2280      	movs	r2, #128	@ 0x80
 8001fe0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e2cd      	b.n	800258a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a76      	ldr	r2, [pc, #472]	@ (80021cc <HAL_DMA_Abort+0x214>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d04a      	beq.n	800208e <HAL_DMA_Abort+0xd6>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a74      	ldr	r2, [pc, #464]	@ (80021d0 <HAL_DMA_Abort+0x218>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d045      	beq.n	800208e <HAL_DMA_Abort+0xd6>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a73      	ldr	r2, [pc, #460]	@ (80021d4 <HAL_DMA_Abort+0x21c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d040      	beq.n	800208e <HAL_DMA_Abort+0xd6>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a71      	ldr	r2, [pc, #452]	@ (80021d8 <HAL_DMA_Abort+0x220>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d03b      	beq.n	800208e <HAL_DMA_Abort+0xd6>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a70      	ldr	r2, [pc, #448]	@ (80021dc <HAL_DMA_Abort+0x224>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d036      	beq.n	800208e <HAL_DMA_Abort+0xd6>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a6e      	ldr	r2, [pc, #440]	@ (80021e0 <HAL_DMA_Abort+0x228>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d031      	beq.n	800208e <HAL_DMA_Abort+0xd6>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a6d      	ldr	r2, [pc, #436]	@ (80021e4 <HAL_DMA_Abort+0x22c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d02c      	beq.n	800208e <HAL_DMA_Abort+0xd6>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a6b      	ldr	r2, [pc, #428]	@ (80021e8 <HAL_DMA_Abort+0x230>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d027      	beq.n	800208e <HAL_DMA_Abort+0xd6>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a6a      	ldr	r2, [pc, #424]	@ (80021ec <HAL_DMA_Abort+0x234>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d022      	beq.n	800208e <HAL_DMA_Abort+0xd6>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a68      	ldr	r2, [pc, #416]	@ (80021f0 <HAL_DMA_Abort+0x238>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01d      	beq.n	800208e <HAL_DMA_Abort+0xd6>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a67      	ldr	r2, [pc, #412]	@ (80021f4 <HAL_DMA_Abort+0x23c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d018      	beq.n	800208e <HAL_DMA_Abort+0xd6>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a65      	ldr	r2, [pc, #404]	@ (80021f8 <HAL_DMA_Abort+0x240>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <HAL_DMA_Abort+0xd6>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a64      	ldr	r2, [pc, #400]	@ (80021fc <HAL_DMA_Abort+0x244>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d00e      	beq.n	800208e <HAL_DMA_Abort+0xd6>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a62      	ldr	r2, [pc, #392]	@ (8002200 <HAL_DMA_Abort+0x248>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d009      	beq.n	800208e <HAL_DMA_Abort+0xd6>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a61      	ldr	r2, [pc, #388]	@ (8002204 <HAL_DMA_Abort+0x24c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d004      	beq.n	800208e <HAL_DMA_Abort+0xd6>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a5f      	ldr	r2, [pc, #380]	@ (8002208 <HAL_DMA_Abort+0x250>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d101      	bne.n	8002092 <HAL_DMA_Abort+0xda>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_DMA_Abort+0xdc>
 8002092:	2300      	movs	r3, #0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d013      	beq.n	80020c0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 021e 	bic.w	r2, r2, #30
 80020a6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695a      	ldr	r2, [r3, #20]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020b6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	e00a      	b.n	80020d6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 020e 	bic.w	r2, r2, #14
 80020ce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a3c      	ldr	r2, [pc, #240]	@ (80021cc <HAL_DMA_Abort+0x214>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d072      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a3a      	ldr	r2, [pc, #232]	@ (80021d0 <HAL_DMA_Abort+0x218>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d06d      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a39      	ldr	r2, [pc, #228]	@ (80021d4 <HAL_DMA_Abort+0x21c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d068      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a37      	ldr	r2, [pc, #220]	@ (80021d8 <HAL_DMA_Abort+0x220>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d063      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a36      	ldr	r2, [pc, #216]	@ (80021dc <HAL_DMA_Abort+0x224>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d05e      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a34      	ldr	r2, [pc, #208]	@ (80021e0 <HAL_DMA_Abort+0x228>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d059      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a33      	ldr	r2, [pc, #204]	@ (80021e4 <HAL_DMA_Abort+0x22c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d054      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a31      	ldr	r2, [pc, #196]	@ (80021e8 <HAL_DMA_Abort+0x230>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d04f      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a30      	ldr	r2, [pc, #192]	@ (80021ec <HAL_DMA_Abort+0x234>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d04a      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a2e      	ldr	r2, [pc, #184]	@ (80021f0 <HAL_DMA_Abort+0x238>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d045      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a2d      	ldr	r2, [pc, #180]	@ (80021f4 <HAL_DMA_Abort+0x23c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d040      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a2b      	ldr	r2, [pc, #172]	@ (80021f8 <HAL_DMA_Abort+0x240>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d03b      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a2a      	ldr	r2, [pc, #168]	@ (80021fc <HAL_DMA_Abort+0x244>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d036      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a28      	ldr	r2, [pc, #160]	@ (8002200 <HAL_DMA_Abort+0x248>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d031      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a27      	ldr	r2, [pc, #156]	@ (8002204 <HAL_DMA_Abort+0x24c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d02c      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a25      	ldr	r2, [pc, #148]	@ (8002208 <HAL_DMA_Abort+0x250>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d027      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a24      	ldr	r2, [pc, #144]	@ (800220c <HAL_DMA_Abort+0x254>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d022      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a22      	ldr	r2, [pc, #136]	@ (8002210 <HAL_DMA_Abort+0x258>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d01d      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a21      	ldr	r2, [pc, #132]	@ (8002214 <HAL_DMA_Abort+0x25c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d018      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a1f      	ldr	r2, [pc, #124]	@ (8002218 <HAL_DMA_Abort+0x260>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a1e      	ldr	r2, [pc, #120]	@ (800221c <HAL_DMA_Abort+0x264>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00e      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002220 <HAL_DMA_Abort+0x268>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d009      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002224 <HAL_DMA_Abort+0x26c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d004      	beq.n	80021c6 <HAL_DMA_Abort+0x20e>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a19      	ldr	r2, [pc, #100]	@ (8002228 <HAL_DMA_Abort+0x270>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d132      	bne.n	800222c <HAL_DMA_Abort+0x274>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e031      	b.n	800222e <HAL_DMA_Abort+0x276>
 80021ca:	bf00      	nop
 80021cc:	40020010 	.word	0x40020010
 80021d0:	40020028 	.word	0x40020028
 80021d4:	40020040 	.word	0x40020040
 80021d8:	40020058 	.word	0x40020058
 80021dc:	40020070 	.word	0x40020070
 80021e0:	40020088 	.word	0x40020088
 80021e4:	400200a0 	.word	0x400200a0
 80021e8:	400200b8 	.word	0x400200b8
 80021ec:	40020410 	.word	0x40020410
 80021f0:	40020428 	.word	0x40020428
 80021f4:	40020440 	.word	0x40020440
 80021f8:	40020458 	.word	0x40020458
 80021fc:	40020470 	.word	0x40020470
 8002200:	40020488 	.word	0x40020488
 8002204:	400204a0 	.word	0x400204a0
 8002208:	400204b8 	.word	0x400204b8
 800220c:	58025408 	.word	0x58025408
 8002210:	5802541c 	.word	0x5802541c
 8002214:	58025430 	.word	0x58025430
 8002218:	58025444 	.word	0x58025444
 800221c:	58025458 	.word	0x58025458
 8002220:	5802546c 	.word	0x5802546c
 8002224:	58025480 	.word	0x58025480
 8002228:	58025494 	.word	0x58025494
 800222c:	2300      	movs	r3, #0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800223c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002240:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a6d      	ldr	r2, [pc, #436]	@ (80023fc <HAL_DMA_Abort+0x444>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d04a      	beq.n	80022e2 <HAL_DMA_Abort+0x32a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a6b      	ldr	r2, [pc, #428]	@ (8002400 <HAL_DMA_Abort+0x448>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d045      	beq.n	80022e2 <HAL_DMA_Abort+0x32a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a6a      	ldr	r2, [pc, #424]	@ (8002404 <HAL_DMA_Abort+0x44c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d040      	beq.n	80022e2 <HAL_DMA_Abort+0x32a>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a68      	ldr	r2, [pc, #416]	@ (8002408 <HAL_DMA_Abort+0x450>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d03b      	beq.n	80022e2 <HAL_DMA_Abort+0x32a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a67      	ldr	r2, [pc, #412]	@ (800240c <HAL_DMA_Abort+0x454>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d036      	beq.n	80022e2 <HAL_DMA_Abort+0x32a>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a65      	ldr	r2, [pc, #404]	@ (8002410 <HAL_DMA_Abort+0x458>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d031      	beq.n	80022e2 <HAL_DMA_Abort+0x32a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a64      	ldr	r2, [pc, #400]	@ (8002414 <HAL_DMA_Abort+0x45c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d02c      	beq.n	80022e2 <HAL_DMA_Abort+0x32a>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a62      	ldr	r2, [pc, #392]	@ (8002418 <HAL_DMA_Abort+0x460>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d027      	beq.n	80022e2 <HAL_DMA_Abort+0x32a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a61      	ldr	r2, [pc, #388]	@ (800241c <HAL_DMA_Abort+0x464>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d022      	beq.n	80022e2 <HAL_DMA_Abort+0x32a>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a5f      	ldr	r2, [pc, #380]	@ (8002420 <HAL_DMA_Abort+0x468>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d01d      	beq.n	80022e2 <HAL_DMA_Abort+0x32a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a5e      	ldr	r2, [pc, #376]	@ (8002424 <HAL_DMA_Abort+0x46c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d018      	beq.n	80022e2 <HAL_DMA_Abort+0x32a>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a5c      	ldr	r2, [pc, #368]	@ (8002428 <HAL_DMA_Abort+0x470>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_DMA_Abort+0x32a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a5b      	ldr	r2, [pc, #364]	@ (800242c <HAL_DMA_Abort+0x474>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d00e      	beq.n	80022e2 <HAL_DMA_Abort+0x32a>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a59      	ldr	r2, [pc, #356]	@ (8002430 <HAL_DMA_Abort+0x478>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d009      	beq.n	80022e2 <HAL_DMA_Abort+0x32a>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a58      	ldr	r2, [pc, #352]	@ (8002434 <HAL_DMA_Abort+0x47c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d004      	beq.n	80022e2 <HAL_DMA_Abort+0x32a>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a56      	ldr	r2, [pc, #344]	@ (8002438 <HAL_DMA_Abort+0x480>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d108      	bne.n	80022f4 <HAL_DMA_Abort+0x33c>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0201 	bic.w	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	e007      	b.n	8002304 <HAL_DMA_Abort+0x34c>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002304:	e013      	b.n	800232e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002306:	f7ff fc9f 	bl	8001c48 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b05      	cmp	r3, #5
 8002312:	d90c      	bls.n	800232e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2220      	movs	r2, #32
 8002318:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2203      	movs	r2, #3
 800231e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e12d      	b.n	800258a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1e5      	bne.n	8002306 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a2f      	ldr	r2, [pc, #188]	@ (80023fc <HAL_DMA_Abort+0x444>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d04a      	beq.n	80023da <HAL_DMA_Abort+0x422>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a2d      	ldr	r2, [pc, #180]	@ (8002400 <HAL_DMA_Abort+0x448>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d045      	beq.n	80023da <HAL_DMA_Abort+0x422>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a2c      	ldr	r2, [pc, #176]	@ (8002404 <HAL_DMA_Abort+0x44c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d040      	beq.n	80023da <HAL_DMA_Abort+0x422>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a2a      	ldr	r2, [pc, #168]	@ (8002408 <HAL_DMA_Abort+0x450>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d03b      	beq.n	80023da <HAL_DMA_Abort+0x422>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a29      	ldr	r2, [pc, #164]	@ (800240c <HAL_DMA_Abort+0x454>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d036      	beq.n	80023da <HAL_DMA_Abort+0x422>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a27      	ldr	r2, [pc, #156]	@ (8002410 <HAL_DMA_Abort+0x458>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d031      	beq.n	80023da <HAL_DMA_Abort+0x422>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a26      	ldr	r2, [pc, #152]	@ (8002414 <HAL_DMA_Abort+0x45c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d02c      	beq.n	80023da <HAL_DMA_Abort+0x422>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a24      	ldr	r2, [pc, #144]	@ (8002418 <HAL_DMA_Abort+0x460>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d027      	beq.n	80023da <HAL_DMA_Abort+0x422>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a23      	ldr	r2, [pc, #140]	@ (800241c <HAL_DMA_Abort+0x464>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d022      	beq.n	80023da <HAL_DMA_Abort+0x422>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a21      	ldr	r2, [pc, #132]	@ (8002420 <HAL_DMA_Abort+0x468>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d01d      	beq.n	80023da <HAL_DMA_Abort+0x422>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a20      	ldr	r2, [pc, #128]	@ (8002424 <HAL_DMA_Abort+0x46c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d018      	beq.n	80023da <HAL_DMA_Abort+0x422>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002428 <HAL_DMA_Abort+0x470>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d013      	beq.n	80023da <HAL_DMA_Abort+0x422>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1d      	ldr	r2, [pc, #116]	@ (800242c <HAL_DMA_Abort+0x474>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d00e      	beq.n	80023da <HAL_DMA_Abort+0x422>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002430 <HAL_DMA_Abort+0x478>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d009      	beq.n	80023da <HAL_DMA_Abort+0x422>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002434 <HAL_DMA_Abort+0x47c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d004      	beq.n	80023da <HAL_DMA_Abort+0x422>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a18      	ldr	r2, [pc, #96]	@ (8002438 <HAL_DMA_Abort+0x480>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d101      	bne.n	80023de <HAL_DMA_Abort+0x426>
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_DMA_Abort+0x428>
 80023de:	2300      	movs	r3, #0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d02b      	beq.n	800243c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ee:	f003 031f 	and.w	r3, r3, #31
 80023f2:	223f      	movs	r2, #63	@ 0x3f
 80023f4:	409a      	lsls	r2, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	e02a      	b.n	8002452 <HAL_DMA_Abort+0x49a>
 80023fc:	40020010 	.word	0x40020010
 8002400:	40020028 	.word	0x40020028
 8002404:	40020040 	.word	0x40020040
 8002408:	40020058 	.word	0x40020058
 800240c:	40020070 	.word	0x40020070
 8002410:	40020088 	.word	0x40020088
 8002414:	400200a0 	.word	0x400200a0
 8002418:	400200b8 	.word	0x400200b8
 800241c:	40020410 	.word	0x40020410
 8002420:	40020428 	.word	0x40020428
 8002424:	40020440 	.word	0x40020440
 8002428:	40020458 	.word	0x40020458
 800242c:	40020470 	.word	0x40020470
 8002430:	40020488 	.word	0x40020488
 8002434:	400204a0 	.word	0x400204a0
 8002438:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002440:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	2201      	movs	r2, #1
 800244c:	409a      	lsls	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a4f      	ldr	r2, [pc, #316]	@ (8002594 <HAL_DMA_Abort+0x5dc>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d072      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a4d      	ldr	r2, [pc, #308]	@ (8002598 <HAL_DMA_Abort+0x5e0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d06d      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a4c      	ldr	r2, [pc, #304]	@ (800259c <HAL_DMA_Abort+0x5e4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d068      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a4a      	ldr	r2, [pc, #296]	@ (80025a0 <HAL_DMA_Abort+0x5e8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d063      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a49      	ldr	r2, [pc, #292]	@ (80025a4 <HAL_DMA_Abort+0x5ec>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d05e      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a47      	ldr	r2, [pc, #284]	@ (80025a8 <HAL_DMA_Abort+0x5f0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d059      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a46      	ldr	r2, [pc, #280]	@ (80025ac <HAL_DMA_Abort+0x5f4>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d054      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a44      	ldr	r2, [pc, #272]	@ (80025b0 <HAL_DMA_Abort+0x5f8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d04f      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a43      	ldr	r2, [pc, #268]	@ (80025b4 <HAL_DMA_Abort+0x5fc>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d04a      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a41      	ldr	r2, [pc, #260]	@ (80025b8 <HAL_DMA_Abort+0x600>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d045      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a40      	ldr	r2, [pc, #256]	@ (80025bc <HAL_DMA_Abort+0x604>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d040      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a3e      	ldr	r2, [pc, #248]	@ (80025c0 <HAL_DMA_Abort+0x608>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d03b      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a3d      	ldr	r2, [pc, #244]	@ (80025c4 <HAL_DMA_Abort+0x60c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d036      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a3b      	ldr	r2, [pc, #236]	@ (80025c8 <HAL_DMA_Abort+0x610>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d031      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a3a      	ldr	r2, [pc, #232]	@ (80025cc <HAL_DMA_Abort+0x614>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d02c      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a38      	ldr	r2, [pc, #224]	@ (80025d0 <HAL_DMA_Abort+0x618>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d027      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a37      	ldr	r2, [pc, #220]	@ (80025d4 <HAL_DMA_Abort+0x61c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d022      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a35      	ldr	r2, [pc, #212]	@ (80025d8 <HAL_DMA_Abort+0x620>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d01d      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a34      	ldr	r2, [pc, #208]	@ (80025dc <HAL_DMA_Abort+0x624>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d018      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a32      	ldr	r2, [pc, #200]	@ (80025e0 <HAL_DMA_Abort+0x628>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d013      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a31      	ldr	r2, [pc, #196]	@ (80025e4 <HAL_DMA_Abort+0x62c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d00e      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a2f      	ldr	r2, [pc, #188]	@ (80025e8 <HAL_DMA_Abort+0x630>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d009      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a2e      	ldr	r2, [pc, #184]	@ (80025ec <HAL_DMA_Abort+0x634>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d004      	beq.n	8002542 <HAL_DMA_Abort+0x58a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a2c      	ldr	r2, [pc, #176]	@ (80025f0 <HAL_DMA_Abort+0x638>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d101      	bne.n	8002546 <HAL_DMA_Abort+0x58e>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <HAL_DMA_Abort+0x590>
 8002546:	2300      	movs	r3, #0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d015      	beq.n	8002578 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002554:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00c      	beq.n	8002578 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002568:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800256c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002576:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40020010 	.word	0x40020010
 8002598:	40020028 	.word	0x40020028
 800259c:	40020040 	.word	0x40020040
 80025a0:	40020058 	.word	0x40020058
 80025a4:	40020070 	.word	0x40020070
 80025a8:	40020088 	.word	0x40020088
 80025ac:	400200a0 	.word	0x400200a0
 80025b0:	400200b8 	.word	0x400200b8
 80025b4:	40020410 	.word	0x40020410
 80025b8:	40020428 	.word	0x40020428
 80025bc:	40020440 	.word	0x40020440
 80025c0:	40020458 	.word	0x40020458
 80025c4:	40020470 	.word	0x40020470
 80025c8:	40020488 	.word	0x40020488
 80025cc:	400204a0 	.word	0x400204a0
 80025d0:	400204b8 	.word	0x400204b8
 80025d4:	58025408 	.word	0x58025408
 80025d8:	5802541c 	.word	0x5802541c
 80025dc:	58025430 	.word	0x58025430
 80025e0:	58025444 	.word	0x58025444
 80025e4:	58025458 	.word	0x58025458
 80025e8:	5802546c 	.word	0x5802546c
 80025ec:	58025480 	.word	0x58025480
 80025f0:	58025494 	.word	0x58025494

080025f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e237      	b.n	8002a76 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d004      	beq.n	800261c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2280      	movs	r2, #128	@ 0x80
 8002616:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e22c      	b.n	8002a76 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a5c      	ldr	r2, [pc, #368]	@ (8002794 <HAL_DMA_Abort_IT+0x1a0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d04a      	beq.n	80026bc <HAL_DMA_Abort_IT+0xc8>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a5b      	ldr	r2, [pc, #364]	@ (8002798 <HAL_DMA_Abort_IT+0x1a4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d045      	beq.n	80026bc <HAL_DMA_Abort_IT+0xc8>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a59      	ldr	r2, [pc, #356]	@ (800279c <HAL_DMA_Abort_IT+0x1a8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d040      	beq.n	80026bc <HAL_DMA_Abort_IT+0xc8>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a58      	ldr	r2, [pc, #352]	@ (80027a0 <HAL_DMA_Abort_IT+0x1ac>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d03b      	beq.n	80026bc <HAL_DMA_Abort_IT+0xc8>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a56      	ldr	r2, [pc, #344]	@ (80027a4 <HAL_DMA_Abort_IT+0x1b0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d036      	beq.n	80026bc <HAL_DMA_Abort_IT+0xc8>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a55      	ldr	r2, [pc, #340]	@ (80027a8 <HAL_DMA_Abort_IT+0x1b4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d031      	beq.n	80026bc <HAL_DMA_Abort_IT+0xc8>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a53      	ldr	r2, [pc, #332]	@ (80027ac <HAL_DMA_Abort_IT+0x1b8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d02c      	beq.n	80026bc <HAL_DMA_Abort_IT+0xc8>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a52      	ldr	r2, [pc, #328]	@ (80027b0 <HAL_DMA_Abort_IT+0x1bc>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d027      	beq.n	80026bc <HAL_DMA_Abort_IT+0xc8>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a50      	ldr	r2, [pc, #320]	@ (80027b4 <HAL_DMA_Abort_IT+0x1c0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d022      	beq.n	80026bc <HAL_DMA_Abort_IT+0xc8>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a4f      	ldr	r2, [pc, #316]	@ (80027b8 <HAL_DMA_Abort_IT+0x1c4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d01d      	beq.n	80026bc <HAL_DMA_Abort_IT+0xc8>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a4d      	ldr	r2, [pc, #308]	@ (80027bc <HAL_DMA_Abort_IT+0x1c8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d018      	beq.n	80026bc <HAL_DMA_Abort_IT+0xc8>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a4c      	ldr	r2, [pc, #304]	@ (80027c0 <HAL_DMA_Abort_IT+0x1cc>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d013      	beq.n	80026bc <HAL_DMA_Abort_IT+0xc8>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a4a      	ldr	r2, [pc, #296]	@ (80027c4 <HAL_DMA_Abort_IT+0x1d0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00e      	beq.n	80026bc <HAL_DMA_Abort_IT+0xc8>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a49      	ldr	r2, [pc, #292]	@ (80027c8 <HAL_DMA_Abort_IT+0x1d4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d009      	beq.n	80026bc <HAL_DMA_Abort_IT+0xc8>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a47      	ldr	r2, [pc, #284]	@ (80027cc <HAL_DMA_Abort_IT+0x1d8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d004      	beq.n	80026bc <HAL_DMA_Abort_IT+0xc8>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a46      	ldr	r2, [pc, #280]	@ (80027d0 <HAL_DMA_Abort_IT+0x1dc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d101      	bne.n	80026c0 <HAL_DMA_Abort_IT+0xcc>
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <HAL_DMA_Abort_IT+0xce>
 80026c0:	2300      	movs	r3, #0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 8086 	beq.w	80027d4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2204      	movs	r2, #4
 80026cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002794 <HAL_DMA_Abort_IT+0x1a0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d04a      	beq.n	8002770 <HAL_DMA_Abort_IT+0x17c>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a2e      	ldr	r2, [pc, #184]	@ (8002798 <HAL_DMA_Abort_IT+0x1a4>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d045      	beq.n	8002770 <HAL_DMA_Abort_IT+0x17c>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a2c      	ldr	r2, [pc, #176]	@ (800279c <HAL_DMA_Abort_IT+0x1a8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d040      	beq.n	8002770 <HAL_DMA_Abort_IT+0x17c>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a2b      	ldr	r2, [pc, #172]	@ (80027a0 <HAL_DMA_Abort_IT+0x1ac>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d03b      	beq.n	8002770 <HAL_DMA_Abort_IT+0x17c>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a29      	ldr	r2, [pc, #164]	@ (80027a4 <HAL_DMA_Abort_IT+0x1b0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d036      	beq.n	8002770 <HAL_DMA_Abort_IT+0x17c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a28      	ldr	r2, [pc, #160]	@ (80027a8 <HAL_DMA_Abort_IT+0x1b4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d031      	beq.n	8002770 <HAL_DMA_Abort_IT+0x17c>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a26      	ldr	r2, [pc, #152]	@ (80027ac <HAL_DMA_Abort_IT+0x1b8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d02c      	beq.n	8002770 <HAL_DMA_Abort_IT+0x17c>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a25      	ldr	r2, [pc, #148]	@ (80027b0 <HAL_DMA_Abort_IT+0x1bc>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d027      	beq.n	8002770 <HAL_DMA_Abort_IT+0x17c>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a23      	ldr	r2, [pc, #140]	@ (80027b4 <HAL_DMA_Abort_IT+0x1c0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d022      	beq.n	8002770 <HAL_DMA_Abort_IT+0x17c>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a22      	ldr	r2, [pc, #136]	@ (80027b8 <HAL_DMA_Abort_IT+0x1c4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d01d      	beq.n	8002770 <HAL_DMA_Abort_IT+0x17c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a20      	ldr	r2, [pc, #128]	@ (80027bc <HAL_DMA_Abort_IT+0x1c8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d018      	beq.n	8002770 <HAL_DMA_Abort_IT+0x17c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1f      	ldr	r2, [pc, #124]	@ (80027c0 <HAL_DMA_Abort_IT+0x1cc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d013      	beq.n	8002770 <HAL_DMA_Abort_IT+0x17c>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1d      	ldr	r2, [pc, #116]	@ (80027c4 <HAL_DMA_Abort_IT+0x1d0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00e      	beq.n	8002770 <HAL_DMA_Abort_IT+0x17c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1c      	ldr	r2, [pc, #112]	@ (80027c8 <HAL_DMA_Abort_IT+0x1d4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d009      	beq.n	8002770 <HAL_DMA_Abort_IT+0x17c>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1a      	ldr	r2, [pc, #104]	@ (80027cc <HAL_DMA_Abort_IT+0x1d8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d004      	beq.n	8002770 <HAL_DMA_Abort_IT+0x17c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a19      	ldr	r2, [pc, #100]	@ (80027d0 <HAL_DMA_Abort_IT+0x1dc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d108      	bne.n	8002782 <HAL_DMA_Abort_IT+0x18e>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e178      	b.n	8002a74 <HAL_DMA_Abort_IT+0x480>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	e16f      	b.n	8002a74 <HAL_DMA_Abort_IT+0x480>
 8002794:	40020010 	.word	0x40020010
 8002798:	40020028 	.word	0x40020028
 800279c:	40020040 	.word	0x40020040
 80027a0:	40020058 	.word	0x40020058
 80027a4:	40020070 	.word	0x40020070
 80027a8:	40020088 	.word	0x40020088
 80027ac:	400200a0 	.word	0x400200a0
 80027b0:	400200b8 	.word	0x400200b8
 80027b4:	40020410 	.word	0x40020410
 80027b8:	40020428 	.word	0x40020428
 80027bc:	40020440 	.word	0x40020440
 80027c0:	40020458 	.word	0x40020458
 80027c4:	40020470 	.word	0x40020470
 80027c8:	40020488 	.word	0x40020488
 80027cc:	400204a0 	.word	0x400204a0
 80027d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 020e 	bic.w	r2, r2, #14
 80027e2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a6c      	ldr	r2, [pc, #432]	@ (800299c <HAL_DMA_Abort_IT+0x3a8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d04a      	beq.n	8002884 <HAL_DMA_Abort_IT+0x290>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a6b      	ldr	r2, [pc, #428]	@ (80029a0 <HAL_DMA_Abort_IT+0x3ac>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d045      	beq.n	8002884 <HAL_DMA_Abort_IT+0x290>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a69      	ldr	r2, [pc, #420]	@ (80029a4 <HAL_DMA_Abort_IT+0x3b0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d040      	beq.n	8002884 <HAL_DMA_Abort_IT+0x290>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a68      	ldr	r2, [pc, #416]	@ (80029a8 <HAL_DMA_Abort_IT+0x3b4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d03b      	beq.n	8002884 <HAL_DMA_Abort_IT+0x290>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a66      	ldr	r2, [pc, #408]	@ (80029ac <HAL_DMA_Abort_IT+0x3b8>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d036      	beq.n	8002884 <HAL_DMA_Abort_IT+0x290>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a65      	ldr	r2, [pc, #404]	@ (80029b0 <HAL_DMA_Abort_IT+0x3bc>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d031      	beq.n	8002884 <HAL_DMA_Abort_IT+0x290>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a63      	ldr	r2, [pc, #396]	@ (80029b4 <HAL_DMA_Abort_IT+0x3c0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d02c      	beq.n	8002884 <HAL_DMA_Abort_IT+0x290>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a62      	ldr	r2, [pc, #392]	@ (80029b8 <HAL_DMA_Abort_IT+0x3c4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d027      	beq.n	8002884 <HAL_DMA_Abort_IT+0x290>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a60      	ldr	r2, [pc, #384]	@ (80029bc <HAL_DMA_Abort_IT+0x3c8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d022      	beq.n	8002884 <HAL_DMA_Abort_IT+0x290>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a5f      	ldr	r2, [pc, #380]	@ (80029c0 <HAL_DMA_Abort_IT+0x3cc>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d01d      	beq.n	8002884 <HAL_DMA_Abort_IT+0x290>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a5d      	ldr	r2, [pc, #372]	@ (80029c4 <HAL_DMA_Abort_IT+0x3d0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d018      	beq.n	8002884 <HAL_DMA_Abort_IT+0x290>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a5c      	ldr	r2, [pc, #368]	@ (80029c8 <HAL_DMA_Abort_IT+0x3d4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d013      	beq.n	8002884 <HAL_DMA_Abort_IT+0x290>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a5a      	ldr	r2, [pc, #360]	@ (80029cc <HAL_DMA_Abort_IT+0x3d8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00e      	beq.n	8002884 <HAL_DMA_Abort_IT+0x290>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a59      	ldr	r2, [pc, #356]	@ (80029d0 <HAL_DMA_Abort_IT+0x3dc>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d009      	beq.n	8002884 <HAL_DMA_Abort_IT+0x290>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a57      	ldr	r2, [pc, #348]	@ (80029d4 <HAL_DMA_Abort_IT+0x3e0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d004      	beq.n	8002884 <HAL_DMA_Abort_IT+0x290>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a56      	ldr	r2, [pc, #344]	@ (80029d8 <HAL_DMA_Abort_IT+0x3e4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d108      	bne.n	8002896 <HAL_DMA_Abort_IT+0x2a2>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	e007      	b.n	80028a6 <HAL_DMA_Abort_IT+0x2b2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0201 	bic.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a3c      	ldr	r2, [pc, #240]	@ (800299c <HAL_DMA_Abort_IT+0x3a8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d072      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a3a      	ldr	r2, [pc, #232]	@ (80029a0 <HAL_DMA_Abort_IT+0x3ac>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d06d      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a39      	ldr	r2, [pc, #228]	@ (80029a4 <HAL_DMA_Abort_IT+0x3b0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d068      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a37      	ldr	r2, [pc, #220]	@ (80029a8 <HAL_DMA_Abort_IT+0x3b4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d063      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a36      	ldr	r2, [pc, #216]	@ (80029ac <HAL_DMA_Abort_IT+0x3b8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d05e      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a34      	ldr	r2, [pc, #208]	@ (80029b0 <HAL_DMA_Abort_IT+0x3bc>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d059      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a33      	ldr	r2, [pc, #204]	@ (80029b4 <HAL_DMA_Abort_IT+0x3c0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d054      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a31      	ldr	r2, [pc, #196]	@ (80029b8 <HAL_DMA_Abort_IT+0x3c4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d04f      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a30      	ldr	r2, [pc, #192]	@ (80029bc <HAL_DMA_Abort_IT+0x3c8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d04a      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a2e      	ldr	r2, [pc, #184]	@ (80029c0 <HAL_DMA_Abort_IT+0x3cc>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d045      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a2d      	ldr	r2, [pc, #180]	@ (80029c4 <HAL_DMA_Abort_IT+0x3d0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d040      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a2b      	ldr	r2, [pc, #172]	@ (80029c8 <HAL_DMA_Abort_IT+0x3d4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d03b      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a2a      	ldr	r2, [pc, #168]	@ (80029cc <HAL_DMA_Abort_IT+0x3d8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d036      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a28      	ldr	r2, [pc, #160]	@ (80029d0 <HAL_DMA_Abort_IT+0x3dc>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d031      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a27      	ldr	r2, [pc, #156]	@ (80029d4 <HAL_DMA_Abort_IT+0x3e0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d02c      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a25      	ldr	r2, [pc, #148]	@ (80029d8 <HAL_DMA_Abort_IT+0x3e4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d027      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a24      	ldr	r2, [pc, #144]	@ (80029dc <HAL_DMA_Abort_IT+0x3e8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d022      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a22      	ldr	r2, [pc, #136]	@ (80029e0 <HAL_DMA_Abort_IT+0x3ec>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d01d      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a21      	ldr	r2, [pc, #132]	@ (80029e4 <HAL_DMA_Abort_IT+0x3f0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d018      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a1f      	ldr	r2, [pc, #124]	@ (80029e8 <HAL_DMA_Abort_IT+0x3f4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d013      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1e      	ldr	r2, [pc, #120]	@ (80029ec <HAL_DMA_Abort_IT+0x3f8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d00e      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1c      	ldr	r2, [pc, #112]	@ (80029f0 <HAL_DMA_Abort_IT+0x3fc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d009      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1b      	ldr	r2, [pc, #108]	@ (80029f4 <HAL_DMA_Abort_IT+0x400>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d004      	beq.n	8002996 <HAL_DMA_Abort_IT+0x3a2>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a19      	ldr	r2, [pc, #100]	@ (80029f8 <HAL_DMA_Abort_IT+0x404>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d132      	bne.n	80029fc <HAL_DMA_Abort_IT+0x408>
 8002996:	2301      	movs	r3, #1
 8002998:	e031      	b.n	80029fe <HAL_DMA_Abort_IT+0x40a>
 800299a:	bf00      	nop
 800299c:	40020010 	.word	0x40020010
 80029a0:	40020028 	.word	0x40020028
 80029a4:	40020040 	.word	0x40020040
 80029a8:	40020058 	.word	0x40020058
 80029ac:	40020070 	.word	0x40020070
 80029b0:	40020088 	.word	0x40020088
 80029b4:	400200a0 	.word	0x400200a0
 80029b8:	400200b8 	.word	0x400200b8
 80029bc:	40020410 	.word	0x40020410
 80029c0:	40020428 	.word	0x40020428
 80029c4:	40020440 	.word	0x40020440
 80029c8:	40020458 	.word	0x40020458
 80029cc:	40020470 	.word	0x40020470
 80029d0:	40020488 	.word	0x40020488
 80029d4:	400204a0 	.word	0x400204a0
 80029d8:	400204b8 	.word	0x400204b8
 80029dc:	58025408 	.word	0x58025408
 80029e0:	5802541c 	.word	0x5802541c
 80029e4:	58025430 	.word	0x58025430
 80029e8:	58025444 	.word	0x58025444
 80029ec:	58025458 	.word	0x58025458
 80029f0:	5802546c 	.word	0x5802546c
 80029f4:	58025480 	.word	0x58025480
 80029f8:	58025494 	.word	0x58025494
 80029fc:	2300      	movs	r3, #0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d028      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a10:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a16:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	2201      	movs	r2, #1
 8002a22:	409a      	lsls	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a30:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a48:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a52:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop

08002a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b089      	sub	sp, #36	@ 0x24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a8e:	4b86      	ldr	r3, [pc, #536]	@ (8002ca8 <HAL_GPIO_Init+0x228>)
 8002a90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a92:	e18c      	b.n	8002dae <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	2101      	movs	r1, #1
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 817e 	beq.w	8002da8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d005      	beq.n	8002ac4 <HAL_GPIO_Init+0x44>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d130      	bne.n	8002b26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	2203      	movs	r2, #3
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002afa:	2201      	movs	r2, #1
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	f003 0201 	and.w	r2, r3, #1
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d017      	beq.n	8002b62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d123      	bne.n	8002bb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	08da      	lsrs	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3208      	adds	r2, #8
 8002b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	220f      	movs	r2, #15
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	691a      	ldr	r2, [r3, #16]
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	08da      	lsrs	r2, r3, #3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3208      	adds	r2, #8
 8002bb0:	69b9      	ldr	r1, [r7, #24]
 8002bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 0203 	and.w	r2, r3, #3
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80d8 	beq.w	8002da8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8002cac <HAL_GPIO_Init+0x22c>)
 8002bfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002bfe:	4a2b      	ldr	r2, [pc, #172]	@ (8002cac <HAL_GPIO_Init+0x22c>)
 8002c00:	f043 0302 	orr.w	r3, r3, #2
 8002c04:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002c08:	4b28      	ldr	r3, [pc, #160]	@ (8002cac <HAL_GPIO_Init+0x22c>)
 8002c0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c16:	4a26      	ldr	r2, [pc, #152]	@ (8002cb0 <HAL_GPIO_Init+0x230>)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	220f      	movs	r2, #15
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb4 <HAL_GPIO_Init+0x234>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d04a      	beq.n	8002cd8 <HAL_GPIO_Init+0x258>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb8 <HAL_GPIO_Init+0x238>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d02b      	beq.n	8002ca2 <HAL_GPIO_Init+0x222>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8002cbc <HAL_GPIO_Init+0x23c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d025      	beq.n	8002c9e <HAL_GPIO_Init+0x21e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a1a      	ldr	r2, [pc, #104]	@ (8002cc0 <HAL_GPIO_Init+0x240>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d01f      	beq.n	8002c9a <HAL_GPIO_Init+0x21a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a19      	ldr	r2, [pc, #100]	@ (8002cc4 <HAL_GPIO_Init+0x244>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d019      	beq.n	8002c96 <HAL_GPIO_Init+0x216>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a18      	ldr	r2, [pc, #96]	@ (8002cc8 <HAL_GPIO_Init+0x248>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_GPIO_Init+0x212>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a17      	ldr	r2, [pc, #92]	@ (8002ccc <HAL_GPIO_Init+0x24c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d00d      	beq.n	8002c8e <HAL_GPIO_Init+0x20e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a16      	ldr	r2, [pc, #88]	@ (8002cd0 <HAL_GPIO_Init+0x250>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d007      	beq.n	8002c8a <HAL_GPIO_Init+0x20a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a15      	ldr	r2, [pc, #84]	@ (8002cd4 <HAL_GPIO_Init+0x254>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d101      	bne.n	8002c86 <HAL_GPIO_Init+0x206>
 8002c82:	2309      	movs	r3, #9
 8002c84:	e029      	b.n	8002cda <HAL_GPIO_Init+0x25a>
 8002c86:	230a      	movs	r3, #10
 8002c88:	e027      	b.n	8002cda <HAL_GPIO_Init+0x25a>
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	e025      	b.n	8002cda <HAL_GPIO_Init+0x25a>
 8002c8e:	2306      	movs	r3, #6
 8002c90:	e023      	b.n	8002cda <HAL_GPIO_Init+0x25a>
 8002c92:	2305      	movs	r3, #5
 8002c94:	e021      	b.n	8002cda <HAL_GPIO_Init+0x25a>
 8002c96:	2304      	movs	r3, #4
 8002c98:	e01f      	b.n	8002cda <HAL_GPIO_Init+0x25a>
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e01d      	b.n	8002cda <HAL_GPIO_Init+0x25a>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e01b      	b.n	8002cda <HAL_GPIO_Init+0x25a>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e019      	b.n	8002cda <HAL_GPIO_Init+0x25a>
 8002ca6:	bf00      	nop
 8002ca8:	58000080 	.word	0x58000080
 8002cac:	58024400 	.word	0x58024400
 8002cb0:	58000400 	.word	0x58000400
 8002cb4:	58020000 	.word	0x58020000
 8002cb8:	58020400 	.word	0x58020400
 8002cbc:	58020800 	.word	0x58020800
 8002cc0:	58020c00 	.word	0x58020c00
 8002cc4:	58021000 	.word	0x58021000
 8002cc8:	58021400 	.word	0x58021400
 8002ccc:	58021800 	.word	0x58021800
 8002cd0:	58021c00 	.word	0x58021c00
 8002cd4:	58022400 	.word	0x58022400
 8002cd8:	2300      	movs	r3, #0
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	f002 0203 	and.w	r2, r2, #3
 8002ce0:	0092      	lsls	r2, r2, #2
 8002ce2:	4093      	lsls	r3, r2
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cea:	4938      	ldr	r1, [pc, #224]	@ (8002dcc <HAL_GPIO_Init+0x34c>)
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	089b      	lsrs	r3, r3, #2
 8002cf0:	3302      	adds	r3, #2
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4013      	ands	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	3301      	adds	r3, #1
 8002dac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f47f ae6b 	bne.w	8002a94 <HAL_GPIO_Init+0x14>
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	bf00      	nop
 8002dc2:	3724      	adds	r7, #36	@ 0x24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	58000400 	.word	0x58000400

08002dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	807b      	strh	r3, [r7, #2]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002de0:	787b      	ldrb	r3, [r7, #1]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002dec:	e003      	b.n	8002df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002dee:	887b      	ldrh	r3, [r7, #2]
 8002df0:	041a      	lsls	r2, r3, #16
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	619a      	str	r2, [r3, #24]
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002e0c:	4b19      	ldr	r3, [pc, #100]	@ (8002e74 <HAL_PWREx_ConfigSupply+0x70>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d00a      	beq.n	8002e2e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e18:	4b16      	ldr	r3, [pc, #88]	@ (8002e74 <HAL_PWREx_ConfigSupply+0x70>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d001      	beq.n	8002e2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e01f      	b.n	8002e6a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e01d      	b.n	8002e6a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e2e:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <HAL_PWREx_ConfigSupply+0x70>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f023 0207 	bic.w	r2, r3, #7
 8002e36:	490f      	ldr	r1, [pc, #60]	@ (8002e74 <HAL_PWREx_ConfigSupply+0x70>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002e3e:	f7fe ff03 	bl	8001c48 <HAL_GetTick>
 8002e42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e44:	e009      	b.n	8002e5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e46:	f7fe feff 	bl	8001c48 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e54:	d901      	bls.n	8002e5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e007      	b.n	8002e6a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <HAL_PWREx_ConfigSupply+0x70>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e66:	d1ee      	bne.n	8002e46 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	58024800 	.word	0x58024800

08002e78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08c      	sub	sp, #48	@ 0x30
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e3c8      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 8087 	beq.w	8002fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e98:	4b88      	ldr	r3, [pc, #544]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ea2:	4b86      	ldr	r3, [pc, #536]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eaa:	2b10      	cmp	r3, #16
 8002eac:	d007      	beq.n	8002ebe <HAL_RCC_OscConfig+0x46>
 8002eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb0:	2b18      	cmp	r3, #24
 8002eb2:	d110      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x5e>
 8002eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d10b      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ebe:	4b7f      	ldr	r3, [pc, #508]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d06c      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x12c>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d168      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e3a2      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ede:	d106      	bne.n	8002eee <HAL_RCC_OscConfig+0x76>
 8002ee0:	4b76      	ldr	r3, [pc, #472]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a75      	ldr	r2, [pc, #468]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	e02e      	b.n	8002f4c <HAL_RCC_OscConfig+0xd4>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x98>
 8002ef6:	4b71      	ldr	r3, [pc, #452]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a70      	ldr	r2, [pc, #448]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002efc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	4b6e      	ldr	r3, [pc, #440]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a6d      	ldr	r2, [pc, #436]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002f08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	e01d      	b.n	8002f4c <HAL_RCC_OscConfig+0xd4>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0xbc>
 8002f1a:	4b68      	ldr	r3, [pc, #416]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a67      	ldr	r2, [pc, #412]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002f20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	4b65      	ldr	r3, [pc, #404]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a64      	ldr	r2, [pc, #400]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	e00b      	b.n	8002f4c <HAL_RCC_OscConfig+0xd4>
 8002f34:	4b61      	ldr	r3, [pc, #388]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a60      	ldr	r2, [pc, #384]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002f3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	4b5e      	ldr	r3, [pc, #376]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a5d      	ldr	r2, [pc, #372]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002f46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d013      	beq.n	8002f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f54:	f7fe fe78 	bl	8001c48 <HAL_GetTick>
 8002f58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f5c:	f7fe fe74 	bl	8001c48 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b64      	cmp	r3, #100	@ 0x64
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e356      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f6e:	4b53      	ldr	r3, [pc, #332]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0xe4>
 8002f7a:	e014      	b.n	8002fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7fe fe64 	bl	8001c48 <HAL_GetTick>
 8002f80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f84:	f7fe fe60 	bl	8001c48 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	@ 0x64
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e342      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f96:	4b49      	ldr	r3, [pc, #292]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x10c>
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 808c 	beq.w	80030cc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb4:	4b41      	ldr	r3, [pc, #260]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fbc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <HAL_RCC_OscConfig+0x162>
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	2b18      	cmp	r3, #24
 8002fce:	d137      	bne.n	8003040 <HAL_RCC_OscConfig+0x1c8>
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d132      	bne.n	8003040 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fda:	4b38      	ldr	r3, [pc, #224]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d005      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x17a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e314      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ff2:	4b32      	ldr	r3, [pc, #200]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 0219 	bic.w	r2, r3, #25
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	492f      	ldr	r1, [pc, #188]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8003000:	4313      	orrs	r3, r2
 8003002:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fe fe20 	bl	8001c48 <HAL_GetTick>
 8003008:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800300c:	f7fe fe1c 	bl	8001c48 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e2fe      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800301e:	4b27      	ldr	r3, [pc, #156]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302a:	4b24      	ldr	r3, [pc, #144]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	061b      	lsls	r3, r3, #24
 8003038:	4920      	ldr	r1, [pc, #128]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800303e:	e045      	b.n	80030cc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d026      	beq.n	8003096 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003048:	4b1c      	ldr	r3, [pc, #112]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 0219 	bic.w	r2, r3, #25
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4919      	ldr	r1, [pc, #100]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305a:	f7fe fdf5 	bl	8001c48 <HAL_GetTick>
 800305e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003062:	f7fe fdf1 	bl	8001c48 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e2d3      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003074:	4b11      	ldr	r3, [pc, #68]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003080:	4b0e      	ldr	r3, [pc, #56]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	061b      	lsls	r3, r3, #24
 800308e:	490b      	ldr	r1, [pc, #44]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
 8003094:	e01a      	b.n	80030cc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003096:	4b09      	ldr	r3, [pc, #36]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a08      	ldr	r2, [pc, #32]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 800309c:	f023 0301 	bic.w	r3, r3, #1
 80030a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a2:	f7fe fdd1 	bl	8001c48 <HAL_GetTick>
 80030a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030a8:	e00a      	b.n	80030c0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030aa:	f7fe fdcd 	bl	8001c48 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d903      	bls.n	80030c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e2af      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
 80030bc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030c0:	4b96      	ldr	r3, [pc, #600]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1ee      	bne.n	80030aa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d06a      	beq.n	80031ae <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030d8:	4b90      	ldr	r3, [pc, #576]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030e0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030e2:	4b8e      	ldr	r3, [pc, #568]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 80030e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d007      	beq.n	80030fe <HAL_RCC_OscConfig+0x286>
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	2b18      	cmp	r3, #24
 80030f2:	d11b      	bne.n	800312c <HAL_RCC_OscConfig+0x2b4>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d116      	bne.n	800312c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030fe:	4b87      	ldr	r3, [pc, #540]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <HAL_RCC_OscConfig+0x29e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	2b80      	cmp	r3, #128	@ 0x80
 8003110:	d001      	beq.n	8003116 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e282      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003116:	4b81      	ldr	r3, [pc, #516]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	061b      	lsls	r3, r3, #24
 8003124:	497d      	ldr	r1, [pc, #500]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 8003126:	4313      	orrs	r3, r2
 8003128:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800312a:	e040      	b.n	80031ae <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d023      	beq.n	800317c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003134:	4b79      	ldr	r3, [pc, #484]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a78      	ldr	r2, [pc, #480]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 800313a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800313e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fe fd82 	bl	8001c48 <HAL_GetTick>
 8003144:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003148:	f7fe fd7e 	bl	8001c48 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e260      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800315a:	4b70      	ldr	r3, [pc, #448]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003166:	4b6d      	ldr	r3, [pc, #436]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	061b      	lsls	r3, r3, #24
 8003174:	4969      	ldr	r1, [pc, #420]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 8003176:	4313      	orrs	r3, r2
 8003178:	60cb      	str	r3, [r1, #12]
 800317a:	e018      	b.n	80031ae <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800317c:	4b67      	ldr	r3, [pc, #412]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a66      	ldr	r2, [pc, #408]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 8003182:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fe fd5e 	bl	8001c48 <HAL_GetTick>
 800318c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003190:	f7fe fd5a 	bl	8001c48 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e23c      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031a2:	4b5e      	ldr	r3, [pc, #376]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d036      	beq.n	8003228 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d019      	beq.n	80031f6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c2:	4b56      	ldr	r3, [pc, #344]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 80031c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031c6:	4a55      	ldr	r2, [pc, #340]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ce:	f7fe fd3b 	bl	8001c48 <HAL_GetTick>
 80031d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d6:	f7fe fd37 	bl	8001c48 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e219      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031e8:	4b4c      	ldr	r3, [pc, #304]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 80031ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x35e>
 80031f4:	e018      	b.n	8003228 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f6:	4b49      	ldr	r3, [pc, #292]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 80031f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031fa:	4a48      	ldr	r2, [pc, #288]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 80031fc:	f023 0301 	bic.w	r3, r3, #1
 8003200:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003202:	f7fe fd21 	bl	8001c48 <HAL_GetTick>
 8003206:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800320a:	f7fe fd1d 	bl	8001c48 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e1ff      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800321c:	4b3f      	ldr	r3, [pc, #252]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 800321e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f0      	bne.n	800320a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d036      	beq.n	80032a2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d019      	beq.n	8003270 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800323c:	4b37      	ldr	r3, [pc, #220]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a36      	ldr	r2, [pc, #216]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 8003242:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003246:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003248:	f7fe fcfe 	bl	8001c48 <HAL_GetTick>
 800324c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003250:	f7fe fcfa 	bl	8001c48 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e1dc      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003262:	4b2e      	ldr	r3, [pc, #184]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x3d8>
 800326e:	e018      	b.n	80032a2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003270:	4b2a      	ldr	r3, [pc, #168]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a29      	ldr	r2, [pc, #164]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 8003276:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800327a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800327c:	f7fe fce4 	bl	8001c48 <HAL_GetTick>
 8003280:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003284:	f7fe fce0 	bl	8001c48 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e1c2      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003296:	4b21      	ldr	r3, [pc, #132]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 8086 	beq.w	80033bc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003320 <HAL_RCC_OscConfig+0x4a8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a1a      	ldr	r2, [pc, #104]	@ (8003320 <HAL_RCC_OscConfig+0x4a8>)
 80032b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032bc:	f7fe fcc4 	bl	8001c48 <HAL_GetTick>
 80032c0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c4:	f7fe fcc0 	bl	8001c48 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	@ 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e1a2      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032d6:	4b12      	ldr	r3, [pc, #72]	@ (8003320 <HAL_RCC_OscConfig+0x4a8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d106      	bne.n	80032f8 <HAL_RCC_OscConfig+0x480>
 80032ea:	4b0c      	ldr	r3, [pc, #48]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 80032ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ee:	4a0b      	ldr	r2, [pc, #44]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f6:	e032      	b.n	800335e <HAL_RCC_OscConfig+0x4e6>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d111      	bne.n	8003324 <HAL_RCC_OscConfig+0x4ac>
 8003300:	4b06      	ldr	r3, [pc, #24]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 8003302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003304:	4a05      	ldr	r2, [pc, #20]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 8003306:	f023 0301 	bic.w	r3, r3, #1
 800330a:	6713      	str	r3, [r2, #112]	@ 0x70
 800330c:	4b03      	ldr	r3, [pc, #12]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003310:	4a02      	ldr	r2, [pc, #8]	@ (800331c <HAL_RCC_OscConfig+0x4a4>)
 8003312:	f023 0304 	bic.w	r3, r3, #4
 8003316:	6713      	str	r3, [r2, #112]	@ 0x70
 8003318:	e021      	b.n	800335e <HAL_RCC_OscConfig+0x4e6>
 800331a:	bf00      	nop
 800331c:	58024400 	.word	0x58024400
 8003320:	58024800 	.word	0x58024800
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b05      	cmp	r3, #5
 800332a:	d10c      	bne.n	8003346 <HAL_RCC_OscConfig+0x4ce>
 800332c:	4b83      	ldr	r3, [pc, #524]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003330:	4a82      	ldr	r2, [pc, #520]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 8003332:	f043 0304 	orr.w	r3, r3, #4
 8003336:	6713      	str	r3, [r2, #112]	@ 0x70
 8003338:	4b80      	ldr	r3, [pc, #512]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333c:	4a7f      	ldr	r2, [pc, #508]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	6713      	str	r3, [r2, #112]	@ 0x70
 8003344:	e00b      	b.n	800335e <HAL_RCC_OscConfig+0x4e6>
 8003346:	4b7d      	ldr	r3, [pc, #500]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 8003348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334a:	4a7c      	ldr	r2, [pc, #496]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 800334c:	f023 0301 	bic.w	r3, r3, #1
 8003350:	6713      	str	r3, [r2, #112]	@ 0x70
 8003352:	4b7a      	ldr	r3, [pc, #488]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003356:	4a79      	ldr	r2, [pc, #484]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 8003358:	f023 0304 	bic.w	r3, r3, #4
 800335c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d015      	beq.n	8003392 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003366:	f7fe fc6f 	bl	8001c48 <HAL_GetTick>
 800336a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800336c:	e00a      	b.n	8003384 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7fe fc6b 	bl	8001c48 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e14b      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003384:	4b6d      	ldr	r3, [pc, #436]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0ee      	beq.n	800336e <HAL_RCC_OscConfig+0x4f6>
 8003390:	e014      	b.n	80033bc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003392:	f7fe fc59 	bl	8001c48 <HAL_GetTick>
 8003396:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003398:	e00a      	b.n	80033b0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339a:	f7fe fc55 	bl	8001c48 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e135      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033b0:	4b62      	ldr	r3, [pc, #392]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1ee      	bne.n	800339a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 812a 	beq.w	800361a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80033c6:	4b5d      	ldr	r3, [pc, #372]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033ce:	2b18      	cmp	r3, #24
 80033d0:	f000 80ba 	beq.w	8003548 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	2b02      	cmp	r3, #2
 80033da:	f040 8095 	bne.w	8003508 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033de:	4b57      	ldr	r3, [pc, #348]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a56      	ldr	r2, [pc, #344]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 80033e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7fe fc2d 	bl	8001c48 <HAL_GetTick>
 80033ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f2:	f7fe fc29 	bl	8001c48 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e10b      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003404:	4b4d      	ldr	r3, [pc, #308]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f0      	bne.n	80033f2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003410:	4b4a      	ldr	r3, [pc, #296]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 8003412:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003414:	4b4a      	ldr	r3, [pc, #296]	@ (8003540 <HAL_RCC_OscConfig+0x6c8>)
 8003416:	4013      	ands	r3, r2
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003420:	0112      	lsls	r2, r2, #4
 8003422:	430a      	orrs	r2, r1
 8003424:	4945      	ldr	r1, [pc, #276]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 8003426:	4313      	orrs	r3, r2
 8003428:	628b      	str	r3, [r1, #40]	@ 0x28
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342e:	3b01      	subs	r3, #1
 8003430:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003438:	3b01      	subs	r3, #1
 800343a:	025b      	lsls	r3, r3, #9
 800343c:	b29b      	uxth	r3, r3
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003444:	3b01      	subs	r3, #1
 8003446:	041b      	lsls	r3, r3, #16
 8003448:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003452:	3b01      	subs	r3, #1
 8003454:	061b      	lsls	r3, r3, #24
 8003456:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800345a:	4938      	ldr	r1, [pc, #224]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 800345c:	4313      	orrs	r3, r2
 800345e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003460:	4b36      	ldr	r3, [pc, #216]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	4a35      	ldr	r2, [pc, #212]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 8003466:	f023 0301 	bic.w	r3, r3, #1
 800346a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800346c:	4b33      	ldr	r3, [pc, #204]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 800346e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003470:	4b34      	ldr	r3, [pc, #208]	@ (8003544 <HAL_RCC_OscConfig+0x6cc>)
 8003472:	4013      	ands	r3, r2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003478:	00d2      	lsls	r2, r2, #3
 800347a:	4930      	ldr	r1, [pc, #192]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 800347c:	4313      	orrs	r3, r2
 800347e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003480:	4b2e      	ldr	r3, [pc, #184]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 8003482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003484:	f023 020c 	bic.w	r2, r3, #12
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348c:	492b      	ldr	r1, [pc, #172]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 800348e:	4313      	orrs	r3, r2
 8003490:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003492:	4b2a      	ldr	r3, [pc, #168]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 8003494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003496:	f023 0202 	bic.w	r2, r3, #2
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349e:	4927      	ldr	r1, [pc, #156]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034a4:	4b25      	ldr	r3, [pc, #148]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 80034a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a8:	4a24      	ldr	r2, [pc, #144]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 80034aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b0:	4b22      	ldr	r3, [pc, #136]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 80034b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b4:	4a21      	ldr	r2, [pc, #132]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 80034b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80034bc:	4b1f      	ldr	r3, [pc, #124]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 80034be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c0:	4a1e      	ldr	r2, [pc, #120]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 80034c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80034c8:	4b1c      	ldr	r3, [pc, #112]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 80034ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034cc:	4a1b      	ldr	r2, [pc, #108]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d4:	4b19      	ldr	r3, [pc, #100]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a18      	ldr	r2, [pc, #96]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 80034da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fe fbb2 	bl	8001c48 <HAL_GetTick>
 80034e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fe fbae 	bl	8001c48 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e090      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034fa:	4b10      	ldr	r3, [pc, #64]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0x670>
 8003506:	e088      	b.n	800361a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003508:	4b0c      	ldr	r3, [pc, #48]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a0b      	ldr	r2, [pc, #44]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 800350e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fe fb98 	bl	8001c48 <HAL_GetTick>
 8003518:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351c:	f7fe fb94 	bl	8001c48 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e076      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800352e:	4b03      	ldr	r3, [pc, #12]	@ (800353c <HAL_RCC_OscConfig+0x6c4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x6a4>
 800353a:	e06e      	b.n	800361a <HAL_RCC_OscConfig+0x7a2>
 800353c:	58024400 	.word	0x58024400
 8003540:	fffffc0c 	.word	0xfffffc0c
 8003544:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003548:	4b36      	ldr	r3, [pc, #216]	@ (8003624 <HAL_RCC_OscConfig+0x7ac>)
 800354a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800354e:	4b35      	ldr	r3, [pc, #212]	@ (8003624 <HAL_RCC_OscConfig+0x7ac>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003552:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003558:	2b01      	cmp	r3, #1
 800355a:	d031      	beq.n	80035c0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f003 0203 	and.w	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d12a      	bne.n	80035c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d122      	bne.n	80035c0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003584:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003586:	429a      	cmp	r2, r3
 8003588:	d11a      	bne.n	80035c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	0a5b      	lsrs	r3, r3, #9
 800358e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003596:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003598:	429a      	cmp	r2, r3
 800359a:	d111      	bne.n	80035c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	0c1b      	lsrs	r3, r3, #16
 80035a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d108      	bne.n	80035c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	0e1b      	lsrs	r3, r3, #24
 80035b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e02b      	b.n	800361c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80035c4:	4b17      	ldr	r3, [pc, #92]	@ (8003624 <HAL_RCC_OscConfig+0x7ac>)
 80035c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035c8:	08db      	lsrs	r3, r3, #3
 80035ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d01f      	beq.n	800361a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80035da:	4b12      	ldr	r3, [pc, #72]	@ (8003624 <HAL_RCC_OscConfig+0x7ac>)
 80035dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035de:	4a11      	ldr	r2, [pc, #68]	@ (8003624 <HAL_RCC_OscConfig+0x7ac>)
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035e6:	f7fe fb2f 	bl	8001c48 <HAL_GetTick>
 80035ea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80035ec:	bf00      	nop
 80035ee:	f7fe fb2b 	bl	8001c48 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d0f9      	beq.n	80035ee <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80035fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003624 <HAL_RCC_OscConfig+0x7ac>)
 80035fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003628 <HAL_RCC_OscConfig+0x7b0>)
 8003600:	4013      	ands	r3, r2
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003606:	00d2      	lsls	r2, r2, #3
 8003608:	4906      	ldr	r1, [pc, #24]	@ (8003624 <HAL_RCC_OscConfig+0x7ac>)
 800360a:	4313      	orrs	r3, r2
 800360c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800360e:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <HAL_RCC_OscConfig+0x7ac>)
 8003610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003612:	4a04      	ldr	r2, [pc, #16]	@ (8003624 <HAL_RCC_OscConfig+0x7ac>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3730      	adds	r7, #48	@ 0x30
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	58024400 	.word	0x58024400
 8003628:	ffff0007 	.word	0xffff0007

0800362c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e19c      	b.n	800397a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003640:	4b8a      	ldr	r3, [pc, #552]	@ (800386c <HAL_RCC_ClockConfig+0x240>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d910      	bls.n	8003670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364e:	4b87      	ldr	r3, [pc, #540]	@ (800386c <HAL_RCC_ClockConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 020f 	bic.w	r2, r3, #15
 8003656:	4985      	ldr	r1, [pc, #532]	@ (800386c <HAL_RCC_ClockConfig+0x240>)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b83      	ldr	r3, [pc, #524]	@ (800386c <HAL_RCC_ClockConfig+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e184      	b.n	800397a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	4b7b      	ldr	r3, [pc, #492]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003688:	429a      	cmp	r2, r3
 800368a:	d908      	bls.n	800369e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800368c:	4b78      	ldr	r3, [pc, #480]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	4975      	ldr	r1, [pc, #468]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 800369a:	4313      	orrs	r3, r2
 800369c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d010      	beq.n	80036cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	4b70      	ldr	r3, [pc, #448]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d908      	bls.n	80036cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	496a      	ldr	r1, [pc, #424]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d010      	beq.n	80036fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699a      	ldr	r2, [r3, #24]
 80036dc:	4b64      	ldr	r3, [pc, #400]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d908      	bls.n	80036fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036e8:	4b61      	ldr	r3, [pc, #388]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	495e      	ldr	r1, [pc, #376]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d010      	beq.n	8003728 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	4b59      	ldr	r3, [pc, #356]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003712:	429a      	cmp	r2, r3
 8003714:	d908      	bls.n	8003728 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003716:	4b56      	ldr	r3, [pc, #344]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	4953      	ldr	r1, [pc, #332]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 8003724:	4313      	orrs	r3, r2
 8003726:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d010      	beq.n	8003756 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	4b4d      	ldr	r3, [pc, #308]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	429a      	cmp	r2, r3
 8003742:	d908      	bls.n	8003756 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003744:	4b4a      	ldr	r3, [pc, #296]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f023 020f 	bic.w	r2, r3, #15
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4947      	ldr	r1, [pc, #284]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 8003752:	4313      	orrs	r3, r2
 8003754:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d055      	beq.n	800380e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003762:	4b43      	ldr	r3, [pc, #268]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	4940      	ldr	r1, [pc, #256]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 8003770:	4313      	orrs	r3, r2
 8003772:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b02      	cmp	r3, #2
 800377a:	d107      	bne.n	800378c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800377c:	4b3c      	ldr	r3, [pc, #240]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d121      	bne.n	80037cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e0f6      	b.n	800397a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b03      	cmp	r3, #3
 8003792:	d107      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003794:	4b36      	ldr	r3, [pc, #216]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d115      	bne.n	80037cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0ea      	b.n	800397a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d107      	bne.n	80037bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037ac:	4b30      	ldr	r3, [pc, #192]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d109      	bne.n	80037cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0de      	b.n	800397a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037bc:	4b2c      	ldr	r3, [pc, #176]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0d6      	b.n	800397a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037cc:	4b28      	ldr	r3, [pc, #160]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f023 0207 	bic.w	r2, r3, #7
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	4925      	ldr	r1, [pc, #148]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037de:	f7fe fa33 	bl	8001c48 <HAL_GetTick>
 80037e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e4:	e00a      	b.n	80037fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e6:	f7fe fa2f 	bl	8001c48 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e0be      	b.n	800397a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	429a      	cmp	r2, r3
 800380c:	d1eb      	bne.n	80037e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d010      	beq.n	800383c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	4b14      	ldr	r3, [pc, #80]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	429a      	cmp	r2, r3
 8003828:	d208      	bcs.n	800383c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382a:	4b11      	ldr	r3, [pc, #68]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f023 020f 	bic.w	r2, r3, #15
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	490e      	ldr	r1, [pc, #56]	@ (8003870 <HAL_RCC_ClockConfig+0x244>)
 8003838:	4313      	orrs	r3, r2
 800383a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800383c:	4b0b      	ldr	r3, [pc, #44]	@ (800386c <HAL_RCC_ClockConfig+0x240>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d214      	bcs.n	8003874 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384a:	4b08      	ldr	r3, [pc, #32]	@ (800386c <HAL_RCC_ClockConfig+0x240>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 020f 	bic.w	r2, r3, #15
 8003852:	4906      	ldr	r1, [pc, #24]	@ (800386c <HAL_RCC_ClockConfig+0x240>)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	4313      	orrs	r3, r2
 8003858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800385a:	4b04      	ldr	r3, [pc, #16]	@ (800386c <HAL_RCC_ClockConfig+0x240>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d005      	beq.n	8003874 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e086      	b.n	800397a <HAL_RCC_ClockConfig+0x34e>
 800386c:	52002000 	.word	0x52002000
 8003870:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d010      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	4b3f      	ldr	r3, [pc, #252]	@ (8003984 <HAL_RCC_ClockConfig+0x358>)
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800388c:	429a      	cmp	r2, r3
 800388e:	d208      	bcs.n	80038a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003890:	4b3c      	ldr	r3, [pc, #240]	@ (8003984 <HAL_RCC_ClockConfig+0x358>)
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	4939      	ldr	r1, [pc, #228]	@ (8003984 <HAL_RCC_ClockConfig+0x358>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d010      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	4b34      	ldr	r3, [pc, #208]	@ (8003984 <HAL_RCC_ClockConfig+0x358>)
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d208      	bcs.n	80038d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038be:	4b31      	ldr	r3, [pc, #196]	@ (8003984 <HAL_RCC_ClockConfig+0x358>)
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	492e      	ldr	r1, [pc, #184]	@ (8003984 <HAL_RCC_ClockConfig+0x358>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d010      	beq.n	80038fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699a      	ldr	r2, [r3, #24]
 80038e0:	4b28      	ldr	r3, [pc, #160]	@ (8003984 <HAL_RCC_ClockConfig+0x358>)
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d208      	bcs.n	80038fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038ec:	4b25      	ldr	r3, [pc, #148]	@ (8003984 <HAL_RCC_ClockConfig+0x358>)
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	4922      	ldr	r1, [pc, #136]	@ (8003984 <HAL_RCC_ClockConfig+0x358>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d010      	beq.n	800392c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69da      	ldr	r2, [r3, #28]
 800390e:	4b1d      	ldr	r3, [pc, #116]	@ (8003984 <HAL_RCC_ClockConfig+0x358>)
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003916:	429a      	cmp	r2, r3
 8003918:	d208      	bcs.n	800392c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800391a:	4b1a      	ldr	r3, [pc, #104]	@ (8003984 <HAL_RCC_ClockConfig+0x358>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	4917      	ldr	r1, [pc, #92]	@ (8003984 <HAL_RCC_ClockConfig+0x358>)
 8003928:	4313      	orrs	r3, r2
 800392a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800392c:	f000 f834 	bl	8003998 <HAL_RCC_GetSysClockFreq>
 8003930:	4602      	mov	r2, r0
 8003932:	4b14      	ldr	r3, [pc, #80]	@ (8003984 <HAL_RCC_ClockConfig+0x358>)
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	0a1b      	lsrs	r3, r3, #8
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	4912      	ldr	r1, [pc, #72]	@ (8003988 <HAL_RCC_ClockConfig+0x35c>)
 800393e:	5ccb      	ldrb	r3, [r1, r3]
 8003940:	f003 031f 	and.w	r3, r3, #31
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
 8003948:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800394a:	4b0e      	ldr	r3, [pc, #56]	@ (8003984 <HAL_RCC_ClockConfig+0x358>)
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	4a0d      	ldr	r2, [pc, #52]	@ (8003988 <HAL_RCC_ClockConfig+0x35c>)
 8003954:	5cd3      	ldrb	r3, [r2, r3]
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
 8003960:	4a0a      	ldr	r2, [pc, #40]	@ (800398c <HAL_RCC_ClockConfig+0x360>)
 8003962:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003964:	4a0a      	ldr	r2, [pc, #40]	@ (8003990 <HAL_RCC_ClockConfig+0x364>)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800396a:	4b0a      	ldr	r3, [pc, #40]	@ (8003994 <HAL_RCC_ClockConfig+0x368>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe f920 	bl	8001bb4 <HAL_InitTick>
 8003974:	4603      	mov	r3, r0
 8003976:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003978:	7bfb      	ldrb	r3, [r7, #15]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	58024400 	.word	0x58024400
 8003988:	0800b51c 	.word	0x0800b51c
 800398c:	24000008 	.word	0x24000008
 8003990:	24000004 	.word	0x24000004
 8003994:	2400001c 	.word	0x2400001c

08003998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003998:	b480      	push	{r7}
 800399a:	b089      	sub	sp, #36	@ 0x24
 800399c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800399e:	4bb3      	ldr	r3, [pc, #716]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039a6:	2b18      	cmp	r3, #24
 80039a8:	f200 8155 	bhi.w	8003c56 <HAL_RCC_GetSysClockFreq+0x2be>
 80039ac:	a201      	add	r2, pc, #4	@ (adr r2, 80039b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	08003a19 	.word	0x08003a19
 80039b8:	08003c57 	.word	0x08003c57
 80039bc:	08003c57 	.word	0x08003c57
 80039c0:	08003c57 	.word	0x08003c57
 80039c4:	08003c57 	.word	0x08003c57
 80039c8:	08003c57 	.word	0x08003c57
 80039cc:	08003c57 	.word	0x08003c57
 80039d0:	08003c57 	.word	0x08003c57
 80039d4:	08003a3f 	.word	0x08003a3f
 80039d8:	08003c57 	.word	0x08003c57
 80039dc:	08003c57 	.word	0x08003c57
 80039e0:	08003c57 	.word	0x08003c57
 80039e4:	08003c57 	.word	0x08003c57
 80039e8:	08003c57 	.word	0x08003c57
 80039ec:	08003c57 	.word	0x08003c57
 80039f0:	08003c57 	.word	0x08003c57
 80039f4:	08003a45 	.word	0x08003a45
 80039f8:	08003c57 	.word	0x08003c57
 80039fc:	08003c57 	.word	0x08003c57
 8003a00:	08003c57 	.word	0x08003c57
 8003a04:	08003c57 	.word	0x08003c57
 8003a08:	08003c57 	.word	0x08003c57
 8003a0c:	08003c57 	.word	0x08003c57
 8003a10:	08003c57 	.word	0x08003c57
 8003a14:	08003a4b 	.word	0x08003a4b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a18:	4b94      	ldr	r3, [pc, #592]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a24:	4b91      	ldr	r3, [pc, #580]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	08db      	lsrs	r3, r3, #3
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	4a90      	ldr	r2, [pc, #576]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
 8003a34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003a36:	e111      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a38:	4b8d      	ldr	r3, [pc, #564]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a3a:	61bb      	str	r3, [r7, #24]
      break;
 8003a3c:	e10e      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003a3e:	4b8d      	ldr	r3, [pc, #564]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a40:	61bb      	str	r3, [r7, #24]
      break;
 8003a42:	e10b      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003a44:	4b8c      	ldr	r3, [pc, #560]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a46:	61bb      	str	r3, [r7, #24]
      break;
 8003a48:	e108      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a4a:	4b88      	ldr	r3, [pc, #544]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003a54:	4b85      	ldr	r3, [pc, #532]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a5e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a60:	4b82      	ldr	r3, [pc, #520]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003a6a:	4b80      	ldr	r3, [pc, #512]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a6e:	08db      	lsrs	r3, r3, #3
 8003a70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	fb02 f303 	mul.w	r3, r2, r3
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a82:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80e1 	beq.w	8003c50 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	f000 8083 	beq.w	8003b9c <HAL_RCC_GetSysClockFreq+0x204>
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	f200 80a1 	bhi.w	8003be0 <HAL_RCC_GetSysClockFreq+0x248>
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_RCC_GetSysClockFreq+0x114>
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d056      	beq.n	8003b58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003aaa:	e099      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003aac:	4b6f      	ldr	r3, [pc, #444]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d02d      	beq.n	8003b14 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ab8:	4b6c      	ldr	r3, [pc, #432]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	08db      	lsrs	r3, r3, #3
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	4a6b      	ldr	r2, [pc, #428]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	ee07 3a90 	vmov	s15, r3
 8003ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ae2:	4b62      	ldr	r3, [pc, #392]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003af2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003af6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003b12:	e087      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003c80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b26:	4b51      	ldr	r3, [pc, #324]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b2e:	ee07 3a90 	vmov	s15, r3
 8003b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b3a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b56:	e065      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	ee07 3a90 	vmov	s15, r3
 8003b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b62:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003c84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b6a:	4b40      	ldr	r3, [pc, #256]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b72:	ee07 3a90 	vmov	s15, r3
 8003b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b7e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b9a:	e043      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	ee07 3a90 	vmov	s15, r3
 8003ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003c88 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bae:	4b2f      	ldr	r3, [pc, #188]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bc2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bde:	e021      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003c84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c06:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c22:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003c24:	4b11      	ldr	r3, [pc, #68]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c28:	0a5b      	lsrs	r3, r3, #9
 8003c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c2e:	3301      	adds	r3, #1
 8003c30:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	ee07 3a90 	vmov	s15, r3
 8003c38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c48:	ee17 3a90 	vmov	r3, s15
 8003c4c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003c4e:	e005      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61bb      	str	r3, [r7, #24]
      break;
 8003c54:	e002      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003c56:	4b07      	ldr	r3, [pc, #28]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c58:	61bb      	str	r3, [r7, #24]
      break;
 8003c5a:	bf00      	nop
  }

  return sysclockfreq;
 8003c5c:	69bb      	ldr	r3, [r7, #24]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3724      	adds	r7, #36	@ 0x24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	58024400 	.word	0x58024400
 8003c70:	03d09000 	.word	0x03d09000
 8003c74:	003d0900 	.word	0x003d0900
 8003c78:	007a1200 	.word	0x007a1200
 8003c7c:	46000000 	.word	0x46000000
 8003c80:	4c742400 	.word	0x4c742400
 8003c84:	4a742400 	.word	0x4a742400
 8003c88:	4af42400 	.word	0x4af42400

08003c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003c92:	f7ff fe81 	bl	8003998 <HAL_RCC_GetSysClockFreq>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b10      	ldr	r3, [pc, #64]	@ (8003cdc <HAL_RCC_GetHCLKFreq+0x50>)
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	0a1b      	lsrs	r3, r3, #8
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	490f      	ldr	r1, [pc, #60]	@ (8003ce0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ca4:	5ccb      	ldrb	r3, [r1, r3]
 8003ca6:	f003 031f 	and.w	r3, r3, #31
 8003caa:	fa22 f303 	lsr.w	r3, r2, r3
 8003cae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003cdc <HAL_RCC_GetHCLKFreq+0x50>)
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	4a09      	ldr	r2, [pc, #36]	@ (8003ce0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003cba:	5cd3      	ldrb	r3, [r2, r3]
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc6:	4a07      	ldr	r2, [pc, #28]	@ (8003ce4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cc8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cca:	4a07      	ldr	r2, [pc, #28]	@ (8003ce8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003cd0:	4b04      	ldr	r3, [pc, #16]	@ (8003ce4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	58024400 	.word	0x58024400
 8003ce0:	0800b51c 	.word	0x0800b51c
 8003ce4:	24000008 	.word	0x24000008
 8003ce8:	24000004 	.word	0x24000004

08003cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003cf0:	f7ff ffcc 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4904      	ldr	r1, [pc, #16]	@ (8003d14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	58024400 	.word	0x58024400
 8003d14:	0800b51c 	.word	0x0800b51c

08003d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003d1c:	f7ff ffb6 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	0a1b      	lsrs	r3, r3, #8
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	4904      	ldr	r1, [pc, #16]	@ (8003d40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d2e:	5ccb      	ldrb	r3, [r1, r3]
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	58024400 	.word	0x58024400
 8003d40:	0800b51c 	.word	0x0800b51c

08003d44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d48:	b0c6      	sub	sp, #280	@ 0x118
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d56:	2300      	movs	r3, #0
 8003d58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003d68:	2500      	movs	r5, #0
 8003d6a:	ea54 0305 	orrs.w	r3, r4, r5
 8003d6e:	d049      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d7a:	d02f      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003d7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d80:	d828      	bhi.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d86:	d01a      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d8c:	d822      	bhi.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d96:	d007      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d98:	e01c      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9a:	4bab      	ldr	r3, [pc, #684]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9e:	4aaa      	ldr	r2, [pc, #680]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003da4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003da6:	e01a      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dac:	3308      	adds	r3, #8
 8003dae:	2102      	movs	r1, #2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f001 fc25 	bl	8005600 <RCCEx_PLL2_Config>
 8003db6:	4603      	mov	r3, r0
 8003db8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003dbc:	e00f      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dc2:	3328      	adds	r3, #40	@ 0x28
 8003dc4:	2102      	movs	r1, #2
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f001 fccc 	bl	8005764 <RCCEx_PLL3_Config>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003dd2:	e004      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003dda:	e000      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10a      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003de6:	4b98      	ldr	r3, [pc, #608]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003df4:	4a94      	ldr	r2, [pc, #592]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003df6:	430b      	orrs	r3, r1
 8003df8:	6513      	str	r3, [r2, #80]	@ 0x50
 8003dfa:	e003      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003e10:	f04f 0900 	mov.w	r9, #0
 8003e14:	ea58 0309 	orrs.w	r3, r8, r9
 8003e18:	d047      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d82a      	bhi.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003e24:	a201      	add	r2, pc, #4	@ (adr r2, 8003e2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2a:	bf00      	nop
 8003e2c:	08003e41 	.word	0x08003e41
 8003e30:	08003e4f 	.word	0x08003e4f
 8003e34:	08003e65 	.word	0x08003e65
 8003e38:	08003e83 	.word	0x08003e83
 8003e3c:	08003e83 	.word	0x08003e83
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e40:	4b81      	ldr	r3, [pc, #516]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	4a80      	ldr	r2, [pc, #512]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e4c:	e01a      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e52:	3308      	adds	r3, #8
 8003e54:	2100      	movs	r1, #0
 8003e56:	4618      	mov	r0, r3
 8003e58:	f001 fbd2 	bl	8005600 <RCCEx_PLL2_Config>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e62:	e00f      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e68:	3328      	adds	r3, #40	@ 0x28
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f001 fc79 	bl	8005764 <RCCEx_PLL3_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e78:	e004      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e80:	e000      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10a      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e8c:	4b6e      	ldr	r3, [pc, #440]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e90:	f023 0107 	bic.w	r1, r3, #7
 8003e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e9a:	4a6b      	ldr	r2, [pc, #428]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ea0:	e003      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ea6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8003eb6:	f04f 0b00 	mov.w	fp, #0
 8003eba:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ebe:	d05b      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ec8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003ecc:	d03b      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003ece:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003ed2:	d834      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003ed4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ed8:	d037      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003eda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ede:	d82e      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003ee0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003ee4:	d033      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003ee6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003eea:	d828      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003eec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ef0:	d01a      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003ef2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ef6:	d822      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003efc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f00:	d007      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003f02:	e01c      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f04:	4b50      	ldr	r3, [pc, #320]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f08:	4a4f      	ldr	r2, [pc, #316]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f10:	e01e      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f16:	3308      	adds	r3, #8
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f001 fb70 	bl	8005600 <RCCEx_PLL2_Config>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003f26:	e013      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f2c:	3328      	adds	r3, #40	@ 0x28
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f001 fc17 	bl	8005764 <RCCEx_PLL3_Config>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f3c:	e008      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f44:	e004      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003f46:	bf00      	nop
 8003f48:	e002      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003f4a:	bf00      	nop
 8003f4c:	e000      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10b      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003f58:	4b3b      	ldr	r3, [pc, #236]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f68:	4a37      	ldr	r2, [pc, #220]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f6a:	430b      	orrs	r3, r1
 8003f6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f6e:	e003      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003f84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003f8e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003f92:	460b      	mov	r3, r1
 8003f94:	4313      	orrs	r3, r2
 8003f96:	d05d      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003fa0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003fa4:	d03b      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003fa6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003faa:	d834      	bhi.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003fac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fb0:	d037      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003fb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fb6:	d82e      	bhi.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003fb8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fbc:	d033      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003fbe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fc2:	d828      	bhi.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003fc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fc8:	d01a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003fca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fce:	d822      	bhi.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fd8:	d007      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003fda:	e01c      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	4a19      	ldr	r2, [pc, #100]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fe8:	e01e      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fee:	3308      	adds	r3, #8
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f001 fb04 	bl	8005600 <RCCEx_PLL2_Config>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ffe:	e013      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004004:	3328      	adds	r3, #40	@ 0x28
 8004006:	2100      	movs	r1, #0
 8004008:	4618      	mov	r0, r3
 800400a:	f001 fbab 	bl	8005764 <RCCEx_PLL3_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004014:	e008      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800401c:	e004      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800401e:	bf00      	nop
 8004020:	e002      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004022:	bf00      	nop
 8004024:	e000      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004026:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10d      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004030:	4b05      	ldr	r3, [pc, #20]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004034:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800403c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004040:	4a01      	ldr	r2, [pc, #4]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004042:	430b      	orrs	r3, r1
 8004044:	6593      	str	r3, [r2, #88]	@ 0x58
 8004046:	e005      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004048:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004050:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004060:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004064:	2300      	movs	r3, #0
 8004066:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800406a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800406e:	460b      	mov	r3, r1
 8004070:	4313      	orrs	r3, r2
 8004072:	d03a      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800407a:	2b30      	cmp	r3, #48	@ 0x30
 800407c:	d01f      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800407e:	2b30      	cmp	r3, #48	@ 0x30
 8004080:	d819      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004082:	2b20      	cmp	r3, #32
 8004084:	d00c      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004086:	2b20      	cmp	r3, #32
 8004088:	d815      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d019      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800408e:	2b10      	cmp	r3, #16
 8004090:	d111      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004092:	4baa      	ldr	r3, [pc, #680]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004096:	4aa9      	ldr	r2, [pc, #676]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800409c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800409e:	e011      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a4:	3308      	adds	r3, #8
 80040a6:	2102      	movs	r1, #2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f001 faa9 	bl	8005600 <RCCEx_PLL2_Config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80040b4:	e006      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040bc:	e002      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80040be:	bf00      	nop
 80040c0:	e000      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80040c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80040cc:	4b9b      	ldr	r3, [pc, #620]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80040d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040da:	4a98      	ldr	r2, [pc, #608]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040dc:	430b      	orrs	r3, r1
 80040de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040e0:	e003      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80040ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80040f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004100:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004104:	460b      	mov	r3, r1
 8004106:	4313      	orrs	r3, r2
 8004108:	d051      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800410a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800410e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004110:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004114:	d035      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004116:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800411a:	d82e      	bhi.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800411c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004120:	d031      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004122:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004126:	d828      	bhi.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004128:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800412c:	d01a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800412e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004132:	d822      	bhi.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800413c:	d007      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800413e:	e01c      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004140:	4b7e      	ldr	r3, [pc, #504]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	4a7d      	ldr	r2, [pc, #500]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800414a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800414c:	e01c      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800414e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004152:	3308      	adds	r3, #8
 8004154:	2100      	movs	r1, #0
 8004156:	4618      	mov	r0, r3
 8004158:	f001 fa52 	bl	8005600 <RCCEx_PLL2_Config>
 800415c:	4603      	mov	r3, r0
 800415e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004162:	e011      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004168:	3328      	adds	r3, #40	@ 0x28
 800416a:	2100      	movs	r1, #0
 800416c:	4618      	mov	r0, r3
 800416e:	f001 faf9 	bl	8005764 <RCCEx_PLL3_Config>
 8004172:	4603      	mov	r3, r0
 8004174:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004178:	e006      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004180:	e002      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004182:	bf00      	nop
 8004184:	e000      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004186:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004188:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004190:	4b6a      	ldr	r3, [pc, #424]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004194:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800419c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800419e:	4a67      	ldr	r2, [pc, #412]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041a0:	430b      	orrs	r3, r1
 80041a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80041a4:	e003      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80041ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80041ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041be:	2300      	movs	r3, #0
 80041c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041c4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80041c8:	460b      	mov	r3, r1
 80041ca:	4313      	orrs	r3, r2
 80041cc:	d053      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80041ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041d8:	d033      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80041da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041de:	d82c      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80041e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041e4:	d02f      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80041e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041ea:	d826      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80041ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80041f0:	d02b      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80041f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80041f6:	d820      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80041f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041fc:	d012      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80041fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004202:	d81a      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004204:	2b00      	cmp	r3, #0
 8004206:	d022      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800420c:	d115      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800420e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004212:	3308      	adds	r3, #8
 8004214:	2101      	movs	r1, #1
 8004216:	4618      	mov	r0, r3
 8004218:	f001 f9f2 	bl	8005600 <RCCEx_PLL2_Config>
 800421c:	4603      	mov	r3, r0
 800421e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004222:	e015      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004228:	3328      	adds	r3, #40	@ 0x28
 800422a:	2101      	movs	r1, #1
 800422c:	4618      	mov	r0, r3
 800422e:	f001 fa99 	bl	8005764 <RCCEx_PLL3_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004238:	e00a      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004240:	e006      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004242:	bf00      	nop
 8004244:	e004      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004246:	bf00      	nop
 8004248:	e002      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800424a:	bf00      	nop
 800424c:	e000      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800424e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004250:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10a      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004258:	4b38      	ldr	r3, [pc, #224]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800425a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800425c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004266:	4a35      	ldr	r2, [pc, #212]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004268:	430b      	orrs	r3, r1
 800426a:	6513      	str	r3, [r2, #80]	@ 0x50
 800426c:	e003      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004272:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004282:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004286:	2300      	movs	r3, #0
 8004288:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800428c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004290:	460b      	mov	r3, r1
 8004292:	4313      	orrs	r3, r2
 8004294:	d058      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800429a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800429e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042a2:	d033      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80042a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042a8:	d82c      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80042aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ae:	d02f      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80042b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b4:	d826      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80042b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042ba:	d02b      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80042bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042c0:	d820      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80042c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042c6:	d012      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80042c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042cc:	d81a      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d022      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80042d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042d6:	d115      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042dc:	3308      	adds	r3, #8
 80042de:	2101      	movs	r1, #1
 80042e0:	4618      	mov	r0, r3
 80042e2:	f001 f98d 	bl	8005600 <RCCEx_PLL2_Config>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80042ec:	e015      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f2:	3328      	adds	r3, #40	@ 0x28
 80042f4:	2101      	movs	r1, #1
 80042f6:	4618      	mov	r0, r3
 80042f8:	f001 fa34 	bl	8005764 <RCCEx_PLL3_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004302:	e00a      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800430a:	e006      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800430c:	bf00      	nop
 800430e:	e004      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004310:	bf00      	nop
 8004312:	e002      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004314:	bf00      	nop
 8004316:	e000      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800431a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10e      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004322:	4b06      	ldr	r3, [pc, #24]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004326:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800432a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800432e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004332:	4a02      	ldr	r2, [pc, #8]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004334:	430b      	orrs	r3, r1
 8004336:	6593      	str	r3, [r2, #88]	@ 0x58
 8004338:	e006      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800433a:	bf00      	nop
 800433c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004344:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800434c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004350:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004358:	2300      	movs	r3, #0
 800435a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800435e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004362:	460b      	mov	r3, r1
 8004364:	4313      	orrs	r3, r2
 8004366:	d037      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800436c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800436e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004372:	d00e      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004374:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004378:	d816      	bhi.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d018      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800437e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004382:	d111      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004384:	4bc4      	ldr	r3, [pc, #784]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004388:	4ac3      	ldr	r2, [pc, #780]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800438a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800438e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004390:	e00f      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004396:	3308      	adds	r3, #8
 8004398:	2101      	movs	r1, #1
 800439a:	4618      	mov	r0, r3
 800439c:	f001 f930 	bl	8005600 <RCCEx_PLL2_Config>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80043a6:	e004      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80043ae:	e000      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80043b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10a      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043ba:	4bb7      	ldr	r3, [pc, #732]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80043c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043c8:	4ab3      	ldr	r2, [pc, #716]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043ca:	430b      	orrs	r3, r1
 80043cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80043ce:	e003      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80043d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80043e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043e8:	2300      	movs	r3, #0
 80043ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80043f2:	460b      	mov	r3, r1
 80043f4:	4313      	orrs	r3, r2
 80043f6:	d039      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80043f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d81c      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004402:	a201      	add	r2, pc, #4	@ (adr r2, 8004408 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	08004445 	.word	0x08004445
 800440c:	08004419 	.word	0x08004419
 8004410:	08004427 	.word	0x08004427
 8004414:	08004445 	.word	0x08004445
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004418:	4b9f      	ldr	r3, [pc, #636]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800441a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441c:	4a9e      	ldr	r2, [pc, #632]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800441e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004424:	e00f      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800442a:	3308      	adds	r3, #8
 800442c:	2102      	movs	r1, #2
 800442e:	4618      	mov	r0, r3
 8004430:	f001 f8e6 	bl	8005600 <RCCEx_PLL2_Config>
 8004434:	4603      	mov	r3, r0
 8004436:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800443a:	e004      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004442:	e000      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004446:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10a      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800444e:	4b92      	ldr	r3, [pc, #584]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004452:	f023 0103 	bic.w	r1, r3, #3
 8004456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800445a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800445c:	4a8e      	ldr	r2, [pc, #568]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800445e:	430b      	orrs	r3, r1
 8004460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004462:	e003      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004464:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004468:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800446c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004478:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800447c:	2300      	movs	r3, #0
 800447e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004482:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004486:	460b      	mov	r3, r1
 8004488:	4313      	orrs	r3, r2
 800448a:	f000 8099 	beq.w	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800448e:	4b83      	ldr	r3, [pc, #524]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a82      	ldr	r2, [pc, #520]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004498:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800449a:	f7fd fbd5 	bl	8001c48 <HAL_GetTick>
 800449e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044a2:	e00b      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a4:	f7fd fbd0 	bl	8001c48 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b64      	cmp	r3, #100	@ 0x64
 80044b2:	d903      	bls.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80044ba:	e005      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044bc:	4b77      	ldr	r3, [pc, #476]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0ed      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80044c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d173      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80044d0:	4b71      	ldr	r3, [pc, #452]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80044d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80044dc:	4053      	eors	r3, r2
 80044de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d015      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044e6:	4b6c      	ldr	r3, [pc, #432]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044ee:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044f2:	4b69      	ldr	r3, [pc, #420]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f6:	4a68      	ldr	r2, [pc, #416]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044fc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044fe:	4b66      	ldr	r3, [pc, #408]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004502:	4a65      	ldr	r2, [pc, #404]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004508:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800450a:	4a63      	ldr	r2, [pc, #396]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800450c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004510:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004516:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800451a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800451e:	d118      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fd fb92 	bl	8001c48 <HAL_GetTick>
 8004524:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004528:	e00d      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452a:	f7fd fb8d 	bl	8001c48 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004534:	1ad2      	subs	r2, r2, r3
 8004536:	f241 3388 	movw	r3, #5000	@ 0x1388
 800453a:	429a      	cmp	r2, r3
 800453c:	d903      	bls.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004544:	e005      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004546:	4b54      	ldr	r3, [pc, #336]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0eb      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004552:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004556:	2b00      	cmp	r3, #0
 8004558:	d129      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800455a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800455e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004566:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800456a:	d10e      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800456c:	4b4a      	ldr	r3, [pc, #296]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004578:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800457c:	091a      	lsrs	r2, r3, #4
 800457e:	4b48      	ldr	r3, [pc, #288]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004580:	4013      	ands	r3, r2
 8004582:	4a45      	ldr	r2, [pc, #276]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004584:	430b      	orrs	r3, r1
 8004586:	6113      	str	r3, [r2, #16]
 8004588:	e005      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800458a:	4b43      	ldr	r3, [pc, #268]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	4a42      	ldr	r2, [pc, #264]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004590:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004594:	6113      	str	r3, [r2, #16]
 8004596:	4b40      	ldr	r3, [pc, #256]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004598:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800459a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800459e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80045a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a6:	4a3c      	ldr	r2, [pc, #240]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ac:	e008      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80045b6:	e003      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80045c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	f002 0301 	and.w	r3, r2, #1
 80045cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045d0:	2300      	movs	r3, #0
 80045d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80045d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80045da:	460b      	mov	r3, r1
 80045dc:	4313      	orrs	r3, r2
 80045de:	f000 808f 	beq.w	8004700 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80045e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045e8:	2b28      	cmp	r3, #40	@ 0x28
 80045ea:	d871      	bhi.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80045ec:	a201      	add	r2, pc, #4	@ (adr r2, 80045f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80045ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f2:	bf00      	nop
 80045f4:	080046d9 	.word	0x080046d9
 80045f8:	080046d1 	.word	0x080046d1
 80045fc:	080046d1 	.word	0x080046d1
 8004600:	080046d1 	.word	0x080046d1
 8004604:	080046d1 	.word	0x080046d1
 8004608:	080046d1 	.word	0x080046d1
 800460c:	080046d1 	.word	0x080046d1
 8004610:	080046d1 	.word	0x080046d1
 8004614:	080046a5 	.word	0x080046a5
 8004618:	080046d1 	.word	0x080046d1
 800461c:	080046d1 	.word	0x080046d1
 8004620:	080046d1 	.word	0x080046d1
 8004624:	080046d1 	.word	0x080046d1
 8004628:	080046d1 	.word	0x080046d1
 800462c:	080046d1 	.word	0x080046d1
 8004630:	080046d1 	.word	0x080046d1
 8004634:	080046bb 	.word	0x080046bb
 8004638:	080046d1 	.word	0x080046d1
 800463c:	080046d1 	.word	0x080046d1
 8004640:	080046d1 	.word	0x080046d1
 8004644:	080046d1 	.word	0x080046d1
 8004648:	080046d1 	.word	0x080046d1
 800464c:	080046d1 	.word	0x080046d1
 8004650:	080046d1 	.word	0x080046d1
 8004654:	080046d9 	.word	0x080046d9
 8004658:	080046d1 	.word	0x080046d1
 800465c:	080046d1 	.word	0x080046d1
 8004660:	080046d1 	.word	0x080046d1
 8004664:	080046d1 	.word	0x080046d1
 8004668:	080046d1 	.word	0x080046d1
 800466c:	080046d1 	.word	0x080046d1
 8004670:	080046d1 	.word	0x080046d1
 8004674:	080046d9 	.word	0x080046d9
 8004678:	080046d1 	.word	0x080046d1
 800467c:	080046d1 	.word	0x080046d1
 8004680:	080046d1 	.word	0x080046d1
 8004684:	080046d1 	.word	0x080046d1
 8004688:	080046d1 	.word	0x080046d1
 800468c:	080046d1 	.word	0x080046d1
 8004690:	080046d1 	.word	0x080046d1
 8004694:	080046d9 	.word	0x080046d9
 8004698:	58024400 	.word	0x58024400
 800469c:	58024800 	.word	0x58024800
 80046a0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046a8:	3308      	adds	r3, #8
 80046aa:	2101      	movs	r1, #1
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 ffa7 	bl	8005600 <RCCEx_PLL2_Config>
 80046b2:	4603      	mov	r3, r0
 80046b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80046b8:	e00f      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046be:	3328      	adds	r3, #40	@ 0x28
 80046c0:	2101      	movs	r1, #1
 80046c2:	4618      	mov	r0, r3
 80046c4:	f001 f84e 	bl	8005764 <RCCEx_PLL3_Config>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80046ce:	e004      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80046d6:	e000      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80046d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10a      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80046e2:	4bbf      	ldr	r3, [pc, #764]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80046e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80046ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046f0:	4abb      	ldr	r2, [pc, #748]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80046f2:	430b      	orrs	r3, r1
 80046f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80046f6:	e003      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	f002 0302 	and.w	r3, r2, #2
 800470c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004710:	2300      	movs	r3, #0
 8004712:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004716:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800471a:	460b      	mov	r3, r1
 800471c:	4313      	orrs	r3, r2
 800471e:	d041      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004726:	2b05      	cmp	r3, #5
 8004728:	d824      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800472a:	a201      	add	r2, pc, #4	@ (adr r2, 8004730 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004730:	0800477d 	.word	0x0800477d
 8004734:	08004749 	.word	0x08004749
 8004738:	0800475f 	.word	0x0800475f
 800473c:	0800477d 	.word	0x0800477d
 8004740:	0800477d 	.word	0x0800477d
 8004744:	0800477d 	.word	0x0800477d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800474c:	3308      	adds	r3, #8
 800474e:	2101      	movs	r1, #1
 8004750:	4618      	mov	r0, r3
 8004752:	f000 ff55 	bl	8005600 <RCCEx_PLL2_Config>
 8004756:	4603      	mov	r3, r0
 8004758:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800475c:	e00f      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800475e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004762:	3328      	adds	r3, #40	@ 0x28
 8004764:	2101      	movs	r1, #1
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fffc 	bl	8005764 <RCCEx_PLL3_Config>
 800476c:	4603      	mov	r3, r0
 800476e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004772:	e004      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800477a:	e000      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800477c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800477e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004786:	4b96      	ldr	r3, [pc, #600]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800478a:	f023 0107 	bic.w	r1, r3, #7
 800478e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004794:	4a92      	ldr	r2, [pc, #584]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004796:	430b      	orrs	r3, r1
 8004798:	6553      	str	r3, [r2, #84]	@ 0x54
 800479a:	e003      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ac:	f002 0304 	and.w	r3, r2, #4
 80047b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047b4:	2300      	movs	r3, #0
 80047b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047ba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047be:	460b      	mov	r3, r1
 80047c0:	4313      	orrs	r3, r2
 80047c2:	d044      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80047c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047cc:	2b05      	cmp	r3, #5
 80047ce:	d825      	bhi.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80047d0:	a201      	add	r2, pc, #4	@ (adr r2, 80047d8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80047d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d6:	bf00      	nop
 80047d8:	08004825 	.word	0x08004825
 80047dc:	080047f1 	.word	0x080047f1
 80047e0:	08004807 	.word	0x08004807
 80047e4:	08004825 	.word	0x08004825
 80047e8:	08004825 	.word	0x08004825
 80047ec:	08004825 	.word	0x08004825
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047f4:	3308      	adds	r3, #8
 80047f6:	2101      	movs	r1, #1
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 ff01 	bl	8005600 <RCCEx_PLL2_Config>
 80047fe:	4603      	mov	r3, r0
 8004800:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004804:	e00f      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800480a:	3328      	adds	r3, #40	@ 0x28
 800480c:	2101      	movs	r1, #1
 800480e:	4618      	mov	r0, r3
 8004810:	f000 ffa8 	bl	8005764 <RCCEx_PLL3_Config>
 8004814:	4603      	mov	r3, r0
 8004816:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800481a:	e004      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004822:	e000      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004826:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10b      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800482e:	4b6c      	ldr	r3, [pc, #432]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004832:	f023 0107 	bic.w	r1, r3, #7
 8004836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483e:	4a68      	ldr	r2, [pc, #416]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004840:	430b      	orrs	r3, r1
 8004842:	6593      	str	r3, [r2, #88]	@ 0x58
 8004844:	e003      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004846:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800484a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800484e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004856:	f002 0320 	and.w	r3, r2, #32
 800485a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800485e:	2300      	movs	r3, #0
 8004860:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004864:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004868:	460b      	mov	r3, r1
 800486a:	4313      	orrs	r3, r2
 800486c:	d055      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800486e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004872:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004876:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800487a:	d033      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800487c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004880:	d82c      	bhi.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004886:	d02f      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800488c:	d826      	bhi.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800488e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004892:	d02b      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004894:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004898:	d820      	bhi.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800489a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800489e:	d012      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80048a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048a4:	d81a      	bhi.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d022      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80048aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048ae:	d115      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048b4:	3308      	adds	r3, #8
 80048b6:	2100      	movs	r1, #0
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fea1 	bl	8005600 <RCCEx_PLL2_Config>
 80048be:	4603      	mov	r3, r0
 80048c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80048c4:	e015      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ca:	3328      	adds	r3, #40	@ 0x28
 80048cc:	2102      	movs	r1, #2
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 ff48 	bl	8005764 <RCCEx_PLL3_Config>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80048da:	e00a      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80048e2:	e006      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80048e4:	bf00      	nop
 80048e6:	e004      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80048e8:	bf00      	nop
 80048ea:	e002      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80048ec:	bf00      	nop
 80048ee:	e000      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80048f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10b      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048fa:	4b39      	ldr	r3, [pc, #228]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80048fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004906:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800490a:	4a35      	ldr	r2, [pc, #212]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800490c:	430b      	orrs	r3, r1
 800490e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004910:	e003      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004912:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004916:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800491a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800491e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004922:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004926:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800492a:	2300      	movs	r3, #0
 800492c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004930:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004934:	460b      	mov	r3, r1
 8004936:	4313      	orrs	r3, r2
 8004938:	d058      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800493a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800493e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004942:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004946:	d033      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004948:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800494c:	d82c      	bhi.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800494e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004952:	d02f      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004958:	d826      	bhi.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800495a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800495e:	d02b      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004960:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004964:	d820      	bhi.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004966:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800496a:	d012      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800496c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004970:	d81a      	bhi.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d022      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800497a:	d115      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800497c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004980:	3308      	adds	r3, #8
 8004982:	2100      	movs	r1, #0
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fe3b 	bl	8005600 <RCCEx_PLL2_Config>
 800498a:	4603      	mov	r3, r0
 800498c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004990:	e015      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004996:	3328      	adds	r3, #40	@ 0x28
 8004998:	2102      	movs	r1, #2
 800499a:	4618      	mov	r0, r3
 800499c:	f000 fee2 	bl	8005764 <RCCEx_PLL3_Config>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80049a6:	e00a      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049ae:	e006      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80049b0:	bf00      	nop
 80049b2:	e004      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80049b4:	bf00      	nop
 80049b6:	e002      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80049b8:	bf00      	nop
 80049ba:	e000      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80049bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10e      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049c6:	4b06      	ldr	r3, [pc, #24]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80049c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80049ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049d6:	4a02      	ldr	r2, [pc, #8]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80049d8:	430b      	orrs	r3, r1
 80049da:	6593      	str	r3, [r2, #88]	@ 0x58
 80049dc:	e006      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80049de:	bf00      	nop
 80049e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80049ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80049f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049fc:	2300      	movs	r3, #0
 80049fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a02:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004a06:	460b      	mov	r3, r1
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	d055      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a14:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004a18:	d033      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004a1a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004a1e:	d82c      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004a20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a24:	d02f      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a2a:	d826      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004a2c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004a30:	d02b      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004a32:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004a36:	d820      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004a38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a3c:	d012      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004a3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a42:	d81a      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d022      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004a48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a4c:	d115      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a52:	3308      	adds	r3, #8
 8004a54:	2100      	movs	r1, #0
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fdd2 	bl	8005600 <RCCEx_PLL2_Config>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004a62:	e015      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a68:	3328      	adds	r3, #40	@ 0x28
 8004a6a:	2102      	movs	r1, #2
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 fe79 	bl	8005764 <RCCEx_PLL3_Config>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004a78:	e00a      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a80:	e006      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004a82:	bf00      	nop
 8004a84:	e004      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004a86:	bf00      	nop
 8004a88:	e002      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004a8a:	bf00      	nop
 8004a8c:	e000      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10b      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004a98:	4ba0      	ldr	r3, [pc, #640]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a9c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004aa8:	4a9c      	ldr	r2, [pc, #624]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004aaa:	430b      	orrs	r3, r1
 8004aac:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aae:	e003      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ab4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	f002 0308 	and.w	r3, r2, #8
 8004ac4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ace:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	d01e      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ae4:	d10c      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aea:	3328      	adds	r3, #40	@ 0x28
 8004aec:	2102      	movs	r1, #2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fe38 	bl	8005764 <RCCEx_PLL3_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004b00:	4b86      	ldr	r3, [pc, #536]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b04:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b10:	4a82      	ldr	r2, [pc, #520]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b12:	430b      	orrs	r3, r1
 8004b14:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1e:	f002 0310 	and.w	r3, r2, #16
 8004b22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b26:	2300      	movs	r3, #0
 8004b28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b2c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004b30:	460b      	mov	r3, r1
 8004b32:	4313      	orrs	r3, r2
 8004b34:	d01e      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b42:	d10c      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b48:	3328      	adds	r3, #40	@ 0x28
 8004b4a:	2102      	movs	r1, #2
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fe09 	bl	8005764 <RCCEx_PLL3_Config>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b5e:	4b6f      	ldr	r3, [pc, #444]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b6e:	4a6b      	ldr	r2, [pc, #428]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b70:	430b      	orrs	r3, r1
 8004b72:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004b80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b82:	2300      	movs	r3, #0
 8004b84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b86:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	d03e      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004b98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b9c:	d022      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004b9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ba2:	d81b      	bhi.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bac:	d00b      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004bae:	e015      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bb4:	3308      	adds	r3, #8
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fd21 	bl	8005600 <RCCEx_PLL2_Config>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004bc4:	e00f      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bca:	3328      	adds	r3, #40	@ 0x28
 8004bcc:	2102      	movs	r1, #2
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fdc8 	bl	8005764 <RCCEx_PLL3_Config>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004bda:	e004      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004be2:	e000      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10b      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bee:	4b4b      	ldr	r3, [pc, #300]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004bfe:	4a47      	ldr	r2, [pc, #284]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c00:	430b      	orrs	r3, r1
 8004c02:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c04:	e003      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c16:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004c1a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c20:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004c24:	460b      	mov	r3, r1
 8004c26:	4313      	orrs	r3, r2
 8004c28:	d03b      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c36:	d01f      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004c38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c3c:	d818      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004c3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c42:	d003      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004c44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c48:	d007      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004c4a:	e011      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c4c:	4b33      	ldr	r3, [pc, #204]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c50:	4a32      	ldr	r2, [pc, #200]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004c58:	e00f      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c5e:	3328      	adds	r3, #40	@ 0x28
 8004c60:	2101      	movs	r1, #1
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fd7e 	bl	8005764 <RCCEx_PLL3_Config>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004c6e:	e004      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c76:	e000      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10b      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c82:	4b26      	ldr	r3, [pc, #152]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c86:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c92:	4a22      	ldr	r2, [pc, #136]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c94:	430b      	orrs	r3, r1
 8004c96:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c98:	e003      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004caa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004cae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004cb4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	d034      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ccc:	d007      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004cce:	e011      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cd0:	4b12      	ldr	r3, [pc, #72]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd4:	4a11      	ldr	r2, [pc, #68]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004cd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004cdc:	e00e      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	2102      	movs	r1, #2
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fc8a 	bl	8005600 <RCCEx_PLL2_Config>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004cf2:	e003      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10d      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d04:	4b05      	ldr	r3, [pc, #20]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d08:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d12:	4a02      	ldr	r2, [pc, #8]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d14:	430b      	orrs	r3, r1
 8004d16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d18:	e006      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004d1a:	bf00      	nop
 8004d1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d30:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004d34:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d36:	2300      	movs	r3, #0
 8004d38:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d3a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4313      	orrs	r3, r2
 8004d42:	d00c      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d48:	3328      	adds	r3, #40	@ 0x28
 8004d4a:	2102      	movs	r1, #2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 fd09 	bl	8005764 <RCCEx_PLL3_Config>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004d6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d70:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004d74:	460b      	mov	r3, r1
 8004d76:	4313      	orrs	r3, r2
 8004d78:	d036      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d84:	d018      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004d86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d8a:	d811      	bhi.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d90:	d014      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004d92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d96:	d80b      	bhi.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d011      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004d9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004da0:	d106      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004da2:	4bb7      	ldr	r3, [pc, #732]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da6:	4ab6      	ldr	r2, [pc, #728]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004dae:	e008      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004db6:	e004      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004db8:	bf00      	nop
 8004dba:	e002      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004dbc:	bf00      	nop
 8004dbe:	e000      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10a      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004dca:	4bad      	ldr	r3, [pc, #692]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dd8:	4aa9      	ldr	r2, [pc, #676]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	6553      	str	r3, [r2, #84]	@ 0x54
 8004dde:	e003      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004de4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004df4:	653b      	str	r3, [r7, #80]	@ 0x50
 8004df6:	2300      	movs	r3, #0
 8004df8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004dfa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4313      	orrs	r3, r2
 8004e02:	d009      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e04:	4b9e      	ldr	r3, [pc, #632]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e12:	4a9b      	ldr	r2, [pc, #620]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e14:	430b      	orrs	r3, r1
 8004e16:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004e24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e26:	2300      	movs	r3, #0
 8004e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e2a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4313      	orrs	r3, r2
 8004e32:	d009      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e34:	4b92      	ldr	r3, [pc, #584]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e38:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e42:	4a8f      	ldr	r2, [pc, #572]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e44:	430b      	orrs	r3, r1
 8004e46:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004e54:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e56:	2300      	movs	r3, #0
 8004e58:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e5a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004e5e:	460b      	mov	r3, r1
 8004e60:	4313      	orrs	r3, r2
 8004e62:	d00e      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e64:	4b86      	ldr	r3, [pc, #536]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	4a85      	ldr	r2, [pc, #532]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004e6e:	6113      	str	r3, [r2, #16]
 8004e70:	4b83      	ldr	r3, [pc, #524]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e72:	6919      	ldr	r1, [r3, #16]
 8004e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e7c:	4a80      	ldr	r2, [pc, #512]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e90:	2300      	movs	r3, #0
 8004e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e94:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	d009      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004e9e:	4b78      	ldr	r3, [pc, #480]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ea2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eac:	4a74      	ldr	r2, [pc, #464]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004eae:	430b      	orrs	r3, r1
 8004eb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eba:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004ebe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ec4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	d00a      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ece:	4b6c      	ldr	r3, [pc, #432]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ede:	4a68      	ldr	r2, [pc, #416]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	2100      	movs	r1, #0
 8004eee:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ef6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004efa:	460b      	mov	r3, r1
 8004efc:	4313      	orrs	r3, r2
 8004efe:	d011      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f04:	3308      	adds	r3, #8
 8004f06:	2100      	movs	r1, #0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fb79 	bl	8005600 <RCCEx_PLL2_Config>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004f14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	6239      	str	r1, [r7, #32]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f36:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	d011      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f44:	3308      	adds	r3, #8
 8004f46:	2101      	movs	r1, #1
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fb59 	bl	8005600 <RCCEx_PLL2_Config>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004f54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	61b9      	str	r1, [r7, #24]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	61fb      	str	r3, [r7, #28]
 8004f76:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	d011      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f84:	3308      	adds	r3, #8
 8004f86:	2102      	movs	r1, #2
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 fb39 	bl	8005600 <RCCEx_PLL2_Config>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004f94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fa0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fac:	2100      	movs	r1, #0
 8004fae:	6139      	str	r1, [r7, #16]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	d011      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fc4:	3328      	adds	r3, #40	@ 0x28
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fbcb 	bl	8005764 <RCCEx_PLL3_Config>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004fd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fe0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fec:	2100      	movs	r1, #0
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	f003 0310 	and.w	r3, r3, #16
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	d011      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005004:	3328      	adds	r3, #40	@ 0x28
 8005006:	2101      	movs	r1, #1
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fbab 	bl	8005764 <RCCEx_PLL3_Config>
 800500e:	4603      	mov	r3, r0
 8005010:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005014:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800501c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005020:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	2100      	movs	r1, #0
 800502e:	6039      	str	r1, [r7, #0]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	607b      	str	r3, [r7, #4]
 8005036:	e9d7 1200 	ldrd	r1, r2, [r7]
 800503a:	460b      	mov	r3, r1
 800503c:	4313      	orrs	r3, r2
 800503e:	d011      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005044:	3328      	adds	r3, #40	@ 0x28
 8005046:	2102      	movs	r1, #2
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fb8b 	bl	8005764 <RCCEx_PLL3_Config>
 800504e:	4603      	mov	r3, r0
 8005050:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005054:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005060:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005064:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	e000      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
}
 8005072:	4618      	mov	r0, r3
 8005074:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005078:	46bd      	mov	sp, r7
 800507a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800507e:	bf00      	nop
 8005080:	58024400 	.word	0x58024400

08005084 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005088:	f7fe fe00 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 800508c:	4602      	mov	r2, r0
 800508e:	4b06      	ldr	r3, [pc, #24]	@ (80050a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	091b      	lsrs	r3, r3, #4
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	4904      	ldr	r1, [pc, #16]	@ (80050ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800509a:	5ccb      	ldrb	r3, [r1, r3]
 800509c:	f003 031f 	and.w	r3, r3, #31
 80050a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	58024400 	.word	0x58024400
 80050ac:	0800b51c 	.word	0x0800b51c

080050b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b089      	sub	sp, #36	@ 0x24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050b8:	4ba1      	ldr	r3, [pc, #644]	@ (8005340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050bc:	f003 0303 	and.w	r3, r3, #3
 80050c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80050c2:	4b9f      	ldr	r3, [pc, #636]	@ (8005340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c6:	0b1b      	lsrs	r3, r3, #12
 80050c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80050ce:	4b9c      	ldr	r3, [pc, #624]	@ (8005340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	091b      	lsrs	r3, r3, #4
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80050da:	4b99      	ldr	r3, [pc, #612]	@ (8005340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050de:	08db      	lsrs	r3, r3, #3
 80050e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	fb02 f303 	mul.w	r3, r2, r3
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 8111 	beq.w	8005320 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	2b02      	cmp	r3, #2
 8005102:	f000 8083 	beq.w	800520c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b02      	cmp	r3, #2
 800510a:	f200 80a1 	bhi.w	8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d056      	beq.n	80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800511a:	e099      	b.n	8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800511c:	4b88      	ldr	r3, [pc, #544]	@ (8005340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d02d      	beq.n	8005184 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005128:	4b85      	ldr	r3, [pc, #532]	@ (8005340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	08db      	lsrs	r3, r3, #3
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	4a84      	ldr	r2, [pc, #528]	@ (8005344 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005134:	fa22 f303 	lsr.w	r3, r2, r3
 8005138:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	ee07 3a90 	vmov	s15, r3
 8005140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005152:	4b7b      	ldr	r3, [pc, #492]	@ (8005340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515a:	ee07 3a90 	vmov	s15, r3
 800515e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005162:	ed97 6a03 	vldr	s12, [r7, #12]
 8005166:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800516a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800516e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005182:	e087      	b.n	8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800534c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005196:	4b6a      	ldr	r3, [pc, #424]	@ (8005340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800519a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519e:	ee07 3a90 	vmov	s15, r3
 80051a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051c6:	e065      	b.n	8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	ee07 3a90 	vmov	s15, r3
 80051ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051da:	4b59      	ldr	r3, [pc, #356]	@ (8005340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800520a:	e043      	b.n	8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005216:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005354 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800521a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800521e:	4b48      	ldr	r3, [pc, #288]	@ (8005340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800522e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005232:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800523a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800523e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800524e:	e021      	b.n	8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800525e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005262:	4b37      	ldr	r3, [pc, #220]	@ (8005340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005272:	ed97 6a03 	vldr	s12, [r7, #12]
 8005276:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800527a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800527e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800528a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800528e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005292:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005294:	4b2a      	ldr	r3, [pc, #168]	@ (8005340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005298:	0a5b      	lsrs	r3, r3, #9
 800529a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80052b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ba:	ee17 2a90 	vmov	r2, s15
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80052c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c6:	0c1b      	lsrs	r3, r3, #16
 80052c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052cc:	ee07 3a90 	vmov	s15, r3
 80052d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80052e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052e8:	ee17 2a90 	vmov	r2, s15
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80052f0:	4b13      	ldr	r3, [pc, #76]	@ (8005340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f4:	0e1b      	lsrs	r3, r3, #24
 80052f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005302:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005306:	ee37 7a87 	vadd.f32	s14, s15, s14
 800530a:	edd7 6a07 	vldr	s13, [r7, #28]
 800530e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005316:	ee17 2a90 	vmov	r2, s15
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800531e:	e008      	b.n	8005332 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	609a      	str	r2, [r3, #8]
}
 8005332:	bf00      	nop
 8005334:	3724      	adds	r7, #36	@ 0x24
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	58024400 	.word	0x58024400
 8005344:	03d09000 	.word	0x03d09000
 8005348:	46000000 	.word	0x46000000
 800534c:	4c742400 	.word	0x4c742400
 8005350:	4a742400 	.word	0x4a742400
 8005354:	4af42400 	.word	0x4af42400

08005358 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005358:	b480      	push	{r7}
 800535a:	b089      	sub	sp, #36	@ 0x24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005360:	4ba1      	ldr	r3, [pc, #644]	@ (80055e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005364:	f003 0303 	and.w	r3, r3, #3
 8005368:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800536a:	4b9f      	ldr	r3, [pc, #636]	@ (80055e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800536c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536e:	0d1b      	lsrs	r3, r3, #20
 8005370:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005374:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005376:	4b9c      	ldr	r3, [pc, #624]	@ (80055e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537a:	0a1b      	lsrs	r3, r3, #8
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005382:	4b99      	ldr	r3, [pc, #612]	@ (80055e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005386:	08db      	lsrs	r3, r3, #3
 8005388:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	fb02 f303 	mul.w	r3, r2, r3
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 8111 	beq.w	80055c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	f000 8083 	beq.w	80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	f200 80a1 	bhi.w	80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d056      	beq.n	8005470 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80053c2:	e099      	b.n	80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053c4:	4b88      	ldr	r3, [pc, #544]	@ (80055e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d02d      	beq.n	800542c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053d0:	4b85      	ldr	r3, [pc, #532]	@ (80055e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	08db      	lsrs	r3, r3, #3
 80053d6:	f003 0303 	and.w	r3, r3, #3
 80053da:	4a84      	ldr	r2, [pc, #528]	@ (80055ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80053dc:	fa22 f303 	lsr.w	r3, r2, r3
 80053e0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	ee07 3a90 	vmov	s15, r3
 80053e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fa:	4b7b      	ldr	r3, [pc, #492]	@ (80055e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800540a:	ed97 6a03 	vldr	s12, [r7, #12]
 800540e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800541e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005426:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800542a:	e087      	b.n	800553c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005436:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80055f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800543a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800543e:	4b6a      	ldr	r3, [pc, #424]	@ (80055e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800544e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005452:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800545a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800545e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800546e:	e065      	b.n	800553c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800547e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005482:	4b59      	ldr	r3, [pc, #356]	@ (80055e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005492:	ed97 6a03 	vldr	s12, [r7, #12]
 8005496:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800549a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800549e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054b2:	e043      	b.n	800553c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	ee07 3a90 	vmov	s15, r3
 80054ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80055fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80054c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054c6:	4b48      	ldr	r3, [pc, #288]	@ (80055e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80054da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054f6:	e021      	b.n	800553c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	ee07 3a90 	vmov	s15, r3
 80054fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005502:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800550a:	4b37      	ldr	r3, [pc, #220]	@ (80055e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800550c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800551a:	ed97 6a03 	vldr	s12, [r7, #12]
 800551e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800552a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800552e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800553a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800553c:	4b2a      	ldr	r3, [pc, #168]	@ (80055e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800553e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005540:	0a5b      	lsrs	r3, r3, #9
 8005542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005546:	ee07 3a90 	vmov	s15, r3
 800554a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005552:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005556:	edd7 6a07 	vldr	s13, [r7, #28]
 800555a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800555e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005562:	ee17 2a90 	vmov	r2, s15
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800556a:	4b1f      	ldr	r3, [pc, #124]	@ (80055e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800556c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556e:	0c1b      	lsrs	r3, r3, #16
 8005570:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005574:	ee07 3a90 	vmov	s15, r3
 8005578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005580:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005584:	edd7 6a07 	vldr	s13, [r7, #28]
 8005588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800558c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005590:	ee17 2a90 	vmov	r2, s15
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005598:	4b13      	ldr	r3, [pc, #76]	@ (80055e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800559a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559c:	0e1b      	lsrs	r3, r3, #24
 800559e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80055b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055be:	ee17 2a90 	vmov	r2, s15
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80055c6:	e008      	b.n	80055da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	609a      	str	r2, [r3, #8]
}
 80055da:	bf00      	nop
 80055dc:	3724      	adds	r7, #36	@ 0x24
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	58024400 	.word	0x58024400
 80055ec:	03d09000 	.word	0x03d09000
 80055f0:	46000000 	.word	0x46000000
 80055f4:	4c742400 	.word	0x4c742400
 80055f8:	4a742400 	.word	0x4a742400
 80055fc:	4af42400 	.word	0x4af42400

08005600 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800560e:	4b53      	ldr	r3, [pc, #332]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 8005610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	2b03      	cmp	r3, #3
 8005618:	d101      	bne.n	800561e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e099      	b.n	8005752 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800561e:	4b4f      	ldr	r3, [pc, #316]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a4e      	ldr	r2, [pc, #312]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 8005624:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800562a:	f7fc fb0d 	bl	8001c48 <HAL_GetTick>
 800562e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005630:	e008      	b.n	8005644 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005632:	f7fc fb09 	bl	8001c48 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e086      	b.n	8005752 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005644:	4b45      	ldr	r3, [pc, #276]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1f0      	bne.n	8005632 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005650:	4b42      	ldr	r3, [pc, #264]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 8005652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005654:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	031b      	lsls	r3, r3, #12
 800565e:	493f      	ldr	r1, [pc, #252]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 8005660:	4313      	orrs	r3, r2
 8005662:	628b      	str	r3, [r1, #40]	@ 0x28
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	3b01      	subs	r3, #1
 800566a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	3b01      	subs	r3, #1
 8005674:	025b      	lsls	r3, r3, #9
 8005676:	b29b      	uxth	r3, r3
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	3b01      	subs	r3, #1
 8005680:	041b      	lsls	r3, r3, #16
 8005682:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	3b01      	subs	r3, #1
 800568e:	061b      	lsls	r3, r3, #24
 8005690:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005694:	4931      	ldr	r1, [pc, #196]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 8005696:	4313      	orrs	r3, r2
 8005698:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800569a:	4b30      	ldr	r3, [pc, #192]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 800569c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	492d      	ldr	r1, [pc, #180]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80056ac:	4b2b      	ldr	r3, [pc, #172]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 80056ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b0:	f023 0220 	bic.w	r2, r3, #32
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	4928      	ldr	r1, [pc, #160]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80056be:	4b27      	ldr	r3, [pc, #156]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 80056c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c2:	4a26      	ldr	r2, [pc, #152]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 80056c4:	f023 0310 	bic.w	r3, r3, #16
 80056c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80056ca:	4b24      	ldr	r3, [pc, #144]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 80056cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056ce:	4b24      	ldr	r3, [pc, #144]	@ (8005760 <RCCEx_PLL2_Config+0x160>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	69d2      	ldr	r2, [r2, #28]
 80056d6:	00d2      	lsls	r2, r2, #3
 80056d8:	4920      	ldr	r1, [pc, #128]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80056de:	4b1f      	ldr	r3, [pc, #124]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 80056e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e2:	4a1e      	ldr	r2, [pc, #120]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 80056e4:	f043 0310 	orr.w	r3, r3, #16
 80056e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d106      	bne.n	80056fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80056f0:	4b1a      	ldr	r3, [pc, #104]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 80056f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f4:	4a19      	ldr	r2, [pc, #100]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 80056f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80056fc:	e00f      	b.n	800571e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d106      	bne.n	8005712 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005704:	4b15      	ldr	r3, [pc, #84]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 8005706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005708:	4a14      	ldr	r2, [pc, #80]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 800570a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800570e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005710:	e005      	b.n	800571e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005712:	4b12      	ldr	r3, [pc, #72]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 8005714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005716:	4a11      	ldr	r2, [pc, #68]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 8005718:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800571c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800571e:	4b0f      	ldr	r3, [pc, #60]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a0e      	ldr	r2, [pc, #56]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 8005724:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800572a:	f7fc fa8d 	bl	8001c48 <HAL_GetTick>
 800572e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005730:	e008      	b.n	8005744 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005732:	f7fc fa89 	bl	8001c48 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e006      	b.n	8005752 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005744:	4b05      	ldr	r3, [pc, #20]	@ (800575c <RCCEx_PLL2_Config+0x15c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f0      	beq.n	8005732 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005750:	7bfb      	ldrb	r3, [r7, #15]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	58024400 	.word	0x58024400
 8005760:	ffff0007 	.word	0xffff0007

08005764 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005772:	4b53      	ldr	r3, [pc, #332]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 8005774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	2b03      	cmp	r3, #3
 800577c:	d101      	bne.n	8005782 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e099      	b.n	80058b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005782:	4b4f      	ldr	r3, [pc, #316]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a4e      	ldr	r2, [pc, #312]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 8005788:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800578c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800578e:	f7fc fa5b 	bl	8001c48 <HAL_GetTick>
 8005792:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005794:	e008      	b.n	80057a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005796:	f7fc fa57 	bl	8001c48 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e086      	b.n	80058b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80057a8:	4b45      	ldr	r3, [pc, #276]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1f0      	bne.n	8005796 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80057b4:	4b42      	ldr	r3, [pc, #264]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 80057b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	051b      	lsls	r3, r3, #20
 80057c2:	493f      	ldr	r1, [pc, #252]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	3b01      	subs	r3, #1
 80057ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	025b      	lsls	r3, r3, #9
 80057da:	b29b      	uxth	r3, r3
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	3b01      	subs	r3, #1
 80057e4:	041b      	lsls	r3, r3, #16
 80057e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	061b      	lsls	r3, r3, #24
 80057f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80057f8:	4931      	ldr	r1, [pc, #196]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80057fe:	4b30      	ldr	r3, [pc, #192]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 8005800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005802:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	492d      	ldr	r1, [pc, #180]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 800580c:	4313      	orrs	r3, r2
 800580e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005810:	4b2b      	ldr	r3, [pc, #172]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 8005812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005814:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	4928      	ldr	r1, [pc, #160]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 800581e:	4313      	orrs	r3, r2
 8005820:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005822:	4b27      	ldr	r3, [pc, #156]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 8005824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005826:	4a26      	ldr	r2, [pc, #152]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 8005828:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800582c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800582e:	4b24      	ldr	r3, [pc, #144]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 8005830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005832:	4b24      	ldr	r3, [pc, #144]	@ (80058c4 <RCCEx_PLL3_Config+0x160>)
 8005834:	4013      	ands	r3, r2
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	69d2      	ldr	r2, [r2, #28]
 800583a:	00d2      	lsls	r2, r2, #3
 800583c:	4920      	ldr	r1, [pc, #128]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 800583e:	4313      	orrs	r3, r2
 8005840:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005842:	4b1f      	ldr	r3, [pc, #124]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 8005844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005846:	4a1e      	ldr	r2, [pc, #120]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 8005848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800584c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d106      	bne.n	8005862 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005854:	4b1a      	ldr	r3, [pc, #104]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 8005856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005858:	4a19      	ldr	r2, [pc, #100]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 800585a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800585e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005860:	e00f      	b.n	8005882 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d106      	bne.n	8005876 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005868:	4b15      	ldr	r3, [pc, #84]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 800586a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586c:	4a14      	ldr	r2, [pc, #80]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 800586e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005872:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005874:	e005      	b.n	8005882 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005876:	4b12      	ldr	r3, [pc, #72]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 8005878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587a:	4a11      	ldr	r2, [pc, #68]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 800587c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005880:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005882:	4b0f      	ldr	r3, [pc, #60]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a0e      	ldr	r2, [pc, #56]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 8005888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800588c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800588e:	f7fc f9db 	bl	8001c48 <HAL_GetTick>
 8005892:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005894:	e008      	b.n	80058a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005896:	f7fc f9d7 	bl	8001c48 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d901      	bls.n	80058a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e006      	b.n	80058b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80058a8:	4b05      	ldr	r3, [pc, #20]	@ (80058c0 <RCCEx_PLL3_Config+0x15c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0f0      	beq.n	8005896 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	58024400 	.word	0x58024400
 80058c4:	ffff0007 	.word	0xffff0007

080058c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e049      	b.n	800596e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d106      	bne.n	80058f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fb fd48 	bl	8001384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3304      	adds	r3, #4
 8005904:	4619      	mov	r1, r3
 8005906:	4610      	mov	r0, r2
 8005908:	f000 f8dc 	bl	8005ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b01      	cmp	r3, #1
 800598a:	d001      	beq.n	8005990 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e056      	b.n	8005a3e <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a2b      	ldr	r2, [pc, #172]	@ (8005a4c <HAL_TIM_Base_Start+0xd4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d02c      	beq.n	80059fc <HAL_TIM_Base_Start+0x84>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059aa:	d027      	beq.n	80059fc <HAL_TIM_Base_Start+0x84>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a27      	ldr	r2, [pc, #156]	@ (8005a50 <HAL_TIM_Base_Start+0xd8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d022      	beq.n	80059fc <HAL_TIM_Base_Start+0x84>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a26      	ldr	r2, [pc, #152]	@ (8005a54 <HAL_TIM_Base_Start+0xdc>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d01d      	beq.n	80059fc <HAL_TIM_Base_Start+0x84>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a24      	ldr	r2, [pc, #144]	@ (8005a58 <HAL_TIM_Base_Start+0xe0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d018      	beq.n	80059fc <HAL_TIM_Base_Start+0x84>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a23      	ldr	r2, [pc, #140]	@ (8005a5c <HAL_TIM_Base_Start+0xe4>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d013      	beq.n	80059fc <HAL_TIM_Base_Start+0x84>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a21      	ldr	r2, [pc, #132]	@ (8005a60 <HAL_TIM_Base_Start+0xe8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00e      	beq.n	80059fc <HAL_TIM_Base_Start+0x84>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a20      	ldr	r2, [pc, #128]	@ (8005a64 <HAL_TIM_Base_Start+0xec>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d009      	beq.n	80059fc <HAL_TIM_Base_Start+0x84>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005a68 <HAL_TIM_Base_Start+0xf0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d004      	beq.n	80059fc <HAL_TIM_Base_Start+0x84>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a1d      	ldr	r2, [pc, #116]	@ (8005a6c <HAL_TIM_Base_Start+0xf4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d115      	bne.n	8005a28 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	4b1b      	ldr	r3, [pc, #108]	@ (8005a70 <HAL_TIM_Base_Start+0xf8>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b06      	cmp	r3, #6
 8005a0c:	d015      	beq.n	8005a3a <HAL_TIM_Base_Start+0xc2>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a14:	d011      	beq.n	8005a3a <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 0201 	orr.w	r2, r2, #1
 8005a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a26:	e008      	b.n	8005a3a <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0201 	orr.w	r2, r2, #1
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	e000      	b.n	8005a3c <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40010000 	.word	0x40010000
 8005a50:	40000400 	.word	0x40000400
 8005a54:	40000800 	.word	0x40000800
 8005a58:	40000c00 	.word	0x40000c00
 8005a5c:	40010400 	.word	0x40010400
 8005a60:	40001800 	.word	0x40001800
 8005a64:	40014000 	.word	0x40014000
 8005a68:	4000e000 	.word	0x4000e000
 8005a6c:	4000e400 	.word	0x4000e400
 8005a70:	00010007 	.word	0x00010007

08005a74 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6a1a      	ldr	r2, [r3, #32]
 8005a82:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a86:	4013      	ands	r3, r2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10f      	bne.n	8005aac <HAL_TIM_Base_Stop+0x38>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6a1a      	ldr	r2, [r3, #32]
 8005a92:	f240 4344 	movw	r3, #1092	@ 0x444
 8005a96:	4013      	ands	r3, r2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d107      	bne.n	8005aac <HAL_TIM_Base_Stop+0x38>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0201 	bic.w	r2, r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
	...

08005ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a47      	ldr	r2, [pc, #284]	@ (8005bf4 <TIM_Base_SetConfig+0x130>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d013      	beq.n	8005b04 <TIM_Base_SetConfig+0x40>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ae2:	d00f      	beq.n	8005b04 <TIM_Base_SetConfig+0x40>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a44      	ldr	r2, [pc, #272]	@ (8005bf8 <TIM_Base_SetConfig+0x134>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00b      	beq.n	8005b04 <TIM_Base_SetConfig+0x40>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a43      	ldr	r2, [pc, #268]	@ (8005bfc <TIM_Base_SetConfig+0x138>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d007      	beq.n	8005b04 <TIM_Base_SetConfig+0x40>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a42      	ldr	r2, [pc, #264]	@ (8005c00 <TIM_Base_SetConfig+0x13c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d003      	beq.n	8005b04 <TIM_Base_SetConfig+0x40>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a41      	ldr	r2, [pc, #260]	@ (8005c04 <TIM_Base_SetConfig+0x140>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d108      	bne.n	8005b16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a36      	ldr	r2, [pc, #216]	@ (8005bf4 <TIM_Base_SetConfig+0x130>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d027      	beq.n	8005b6e <TIM_Base_SetConfig+0xaa>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b24:	d023      	beq.n	8005b6e <TIM_Base_SetConfig+0xaa>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a33      	ldr	r2, [pc, #204]	@ (8005bf8 <TIM_Base_SetConfig+0x134>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d01f      	beq.n	8005b6e <TIM_Base_SetConfig+0xaa>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a32      	ldr	r2, [pc, #200]	@ (8005bfc <TIM_Base_SetConfig+0x138>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d01b      	beq.n	8005b6e <TIM_Base_SetConfig+0xaa>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a31      	ldr	r2, [pc, #196]	@ (8005c00 <TIM_Base_SetConfig+0x13c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d017      	beq.n	8005b6e <TIM_Base_SetConfig+0xaa>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a30      	ldr	r2, [pc, #192]	@ (8005c04 <TIM_Base_SetConfig+0x140>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d013      	beq.n	8005b6e <TIM_Base_SetConfig+0xaa>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a2f      	ldr	r2, [pc, #188]	@ (8005c08 <TIM_Base_SetConfig+0x144>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00f      	beq.n	8005b6e <TIM_Base_SetConfig+0xaa>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a2e      	ldr	r2, [pc, #184]	@ (8005c0c <TIM_Base_SetConfig+0x148>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00b      	beq.n	8005b6e <TIM_Base_SetConfig+0xaa>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a2d      	ldr	r2, [pc, #180]	@ (8005c10 <TIM_Base_SetConfig+0x14c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d007      	beq.n	8005b6e <TIM_Base_SetConfig+0xaa>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a2c      	ldr	r2, [pc, #176]	@ (8005c14 <TIM_Base_SetConfig+0x150>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d003      	beq.n	8005b6e <TIM_Base_SetConfig+0xaa>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a2b      	ldr	r2, [pc, #172]	@ (8005c18 <TIM_Base_SetConfig+0x154>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d108      	bne.n	8005b80 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a14      	ldr	r2, [pc, #80]	@ (8005bf4 <TIM_Base_SetConfig+0x130>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00f      	beq.n	8005bc6 <TIM_Base_SetConfig+0x102>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a16      	ldr	r2, [pc, #88]	@ (8005c04 <TIM_Base_SetConfig+0x140>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00b      	beq.n	8005bc6 <TIM_Base_SetConfig+0x102>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a15      	ldr	r2, [pc, #84]	@ (8005c08 <TIM_Base_SetConfig+0x144>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d007      	beq.n	8005bc6 <TIM_Base_SetConfig+0x102>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a14      	ldr	r2, [pc, #80]	@ (8005c0c <TIM_Base_SetConfig+0x148>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d003      	beq.n	8005bc6 <TIM_Base_SetConfig+0x102>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a13      	ldr	r2, [pc, #76]	@ (8005c10 <TIM_Base_SetConfig+0x14c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d103      	bne.n	8005bce <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	691a      	ldr	r2, [r3, #16]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f043 0204 	orr.w	r2, r3, #4
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	601a      	str	r2, [r3, #0]
}
 8005be6:	bf00      	nop
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40010000 	.word	0x40010000
 8005bf8:	40000400 	.word	0x40000400
 8005bfc:	40000800 	.word	0x40000800
 8005c00:	40000c00 	.word	0x40000c00
 8005c04:	40010400 	.word	0x40010400
 8005c08:	40014000 	.word	0x40014000
 8005c0c:	40014400 	.word	0x40014400
 8005c10:	40014800 	.word	0x40014800
 8005c14:	4000e000 	.word	0x4000e000
 8005c18:	4000e400 	.word	0x4000e400

08005c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e077      	b.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a35      	ldr	r2, [pc, #212]	@ (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d004      	beq.n	8005c68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a34      	ldr	r2, [pc, #208]	@ (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d108      	bne.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005c6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a25      	ldr	r2, [pc, #148]	@ (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d02c      	beq.n	8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ca6:	d027      	beq.n	8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a22      	ldr	r2, [pc, #136]	@ (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d022      	beq.n	8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a21      	ldr	r2, [pc, #132]	@ (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d01d      	beq.n	8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d018      	beq.n	8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1a      	ldr	r2, [pc, #104]	@ (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d013      	beq.n	8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8005d44 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00e      	beq.n	8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1a      	ldr	r2, [pc, #104]	@ (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d009      	beq.n	8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a18      	ldr	r2, [pc, #96]	@ (8005d4c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d004      	beq.n	8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a17      	ldr	r2, [pc, #92]	@ (8005d50 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d10c      	bne.n	8005d12 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cfe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40010400 	.word	0x40010400
 8005d38:	40000400 	.word	0x40000400
 8005d3c:	40000800 	.word	0x40000800
 8005d40:	40000c00 	.word	0x40000c00
 8005d44:	40001800 	.word	0x40001800
 8005d48:	40014000 	.word	0x40014000
 8005d4c:	4000e000 	.word	0x4000e000
 8005d50:	4000e400 	.word	0x4000e400

08005d54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e042      	b.n	8005dec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d106      	bne.n	8005d7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7fb fb25 	bl	80013c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2224      	movs	r2, #36	@ 0x24
 8005d82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0201 	bic.w	r2, r2, #1
 8005d94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f001 fb64 	bl	800746c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fcf5 	bl	8006794 <UART_SetConfig>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e01b      	b.n	8005dec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005dc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005dd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0201 	orr.w	r2, r2, #1
 8005de2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f001 fbe3 	bl	80075b0 <UART_CheckIdleState>
 8005dea:	4603      	mov	r3, r0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08a      	sub	sp, #40	@ 0x28
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	603b      	str	r3, [r7, #0]
 8005e00:	4613      	mov	r3, r2
 8005e02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0a:	2b20      	cmp	r3, #32
 8005e0c:	d17b      	bne.n	8005f06 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <HAL_UART_Transmit+0x26>
 8005e14:	88fb      	ldrh	r3, [r7, #6]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e074      	b.n	8005f08 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2221      	movs	r2, #33	@ 0x21
 8005e2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e2e:	f7fb ff0b 	bl	8001c48 <HAL_GetTick>
 8005e32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	88fa      	ldrh	r2, [r7, #6]
 8005e38:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	88fa      	ldrh	r2, [r7, #6]
 8005e40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e4c:	d108      	bne.n	8005e60 <HAL_UART_Transmit+0x6c>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d104      	bne.n	8005e60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	61bb      	str	r3, [r7, #24]
 8005e5e:	e003      	b.n	8005e68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e64:	2300      	movs	r3, #0
 8005e66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e68:	e030      	b.n	8005ecc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2200      	movs	r2, #0
 8005e72:	2180      	movs	r1, #128	@ 0x80
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f001 fc45 	bl	8007704 <UART_WaitOnFlagUntilTimeout>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d005      	beq.n	8005e8c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e03d      	b.n	8005f08 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10b      	bne.n	8005eaa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ea0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	3302      	adds	r3, #2
 8005ea6:	61bb      	str	r3, [r7, #24]
 8005ea8:	e007      	b.n	8005eba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	781a      	ldrb	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1c8      	bne.n	8005e6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	2140      	movs	r1, #64	@ 0x40
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f001 fc0e 	bl	8007704 <UART_WaitOnFlagUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d005      	beq.n	8005efa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e006      	b.n	8005f08 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2220      	movs	r2, #32
 8005efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	e000      	b.n	8005f08 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005f06:	2302      	movs	r3, #2
  }
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3720      	adds	r7, #32
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08a      	sub	sp, #40	@ 0x28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f24:	2b20      	cmp	r3, #32
 8005f26:	d137      	bne.n	8005f98 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <HAL_UART_Receive_IT+0x24>
 8005f2e:	88fb      	ldrh	r3, [r7, #6]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e030      	b.n	8005f9a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a18      	ldr	r2, [pc, #96]	@ (8005fa4 <HAL_UART_Receive_IT+0x94>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d01f      	beq.n	8005f88 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d018      	beq.n	8005f88 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	e853 3f00 	ldrex	r3, [r3]
 8005f62:	613b      	str	r3, [r7, #16]
   return(result);
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	461a      	mov	r2, r3
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	623b      	str	r3, [r7, #32]
 8005f76:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f78:	69f9      	ldr	r1, [r7, #28]
 8005f7a:	6a3a      	ldr	r2, [r7, #32]
 8005f7c:	e841 2300 	strex	r3, r2, [r1]
 8005f80:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e6      	bne.n	8005f56 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f88:	88fb      	ldrh	r3, [r7, #6]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f001 fc26 	bl	80077e0 <UART_Start_Receive_IT>
 8005f94:	4603      	mov	r3, r0
 8005f96:	e000      	b.n	8005f9a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f98:	2302      	movs	r3, #2
  }
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3728      	adds	r7, #40	@ 0x28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	58000c00 	.word	0x58000c00

08005fa8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b0ba      	sub	sp, #232	@ 0xe8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005fce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005fd2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005fdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d11b      	bne.n	800601c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fe8:	f003 0320 	and.w	r3, r3, #32
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d015      	beq.n	800601c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ff4:	f003 0320 	and.w	r3, r3, #32
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d105      	bne.n	8006008 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d009      	beq.n	800601c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 8393 	beq.w	8006738 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	4798      	blx	r3
      }
      return;
 800601a:	e38d      	b.n	8006738 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800601c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 8123 	beq.w	800626c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006026:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800602a:	4b8d      	ldr	r3, [pc, #564]	@ (8006260 <HAL_UART_IRQHandler+0x2b8>)
 800602c:	4013      	ands	r3, r2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d106      	bne.n	8006040 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006032:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006036:	4b8b      	ldr	r3, [pc, #556]	@ (8006264 <HAL_UART_IRQHandler+0x2bc>)
 8006038:	4013      	ands	r3, r2
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 8116 	beq.w	800626c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	d011      	beq.n	8006070 <HAL_UART_IRQHandler+0xc8>
 800604c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00b      	beq.n	8006070 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2201      	movs	r2, #1
 800605e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006066:	f043 0201 	orr.w	r2, r3, #1
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d011      	beq.n	80060a0 <HAL_UART_IRQHandler+0xf8>
 800607c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2202      	movs	r2, #2
 800608e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006096:	f043 0204 	orr.w	r2, r3, #4
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a4:	f003 0304 	and.w	r3, r3, #4
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d011      	beq.n	80060d0 <HAL_UART_IRQHandler+0x128>
 80060ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00b      	beq.n	80060d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2204      	movs	r2, #4
 80060be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060c6:	f043 0202 	orr.w	r2, r3, #2
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d017      	beq.n	800610c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80060dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060e0:	f003 0320 	and.w	r3, r3, #32
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d105      	bne.n	80060f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80060e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80060ec:	4b5c      	ldr	r3, [pc, #368]	@ (8006260 <HAL_UART_IRQHandler+0x2b8>)
 80060ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00b      	beq.n	800610c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2208      	movs	r2, #8
 80060fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006102:	f043 0208 	orr.w	r2, r3, #8
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800610c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006110:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006114:	2b00      	cmp	r3, #0
 8006116:	d012      	beq.n	800613e <HAL_UART_IRQHandler+0x196>
 8006118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800611c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00c      	beq.n	800613e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800612c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006134:	f043 0220 	orr.w	r2, r3, #32
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 82f9 	beq.w	800673c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800614a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800614e:	f003 0320 	and.w	r3, r3, #32
 8006152:	2b00      	cmp	r3, #0
 8006154:	d013      	beq.n	800617e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b00      	cmp	r3, #0
 8006160:	d105      	bne.n	800616e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d007      	beq.n	800617e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006184:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006192:	2b40      	cmp	r3, #64	@ 0x40
 8006194:	d005      	beq.n	80061a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800619a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d054      	beq.n	800624c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f001 fc3e 	bl	8007a24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b2:	2b40      	cmp	r3, #64	@ 0x40
 80061b4:	d146      	bne.n	8006244 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3308      	adds	r3, #8
 80061bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061c4:	e853 3f00 	ldrex	r3, [r3]
 80061c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80061cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3308      	adds	r3, #8
 80061de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80061e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80061e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80061ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80061fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1d9      	bne.n	80061b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006208:	2b00      	cmp	r3, #0
 800620a:	d017      	beq.n	800623c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006212:	4a15      	ldr	r2, [pc, #84]	@ (8006268 <HAL_UART_IRQHandler+0x2c0>)
 8006214:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800621c:	4618      	mov	r0, r3
 800621e:	f7fc f9e9 	bl	80025f4 <HAL_DMA_Abort_IT>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d019      	beq.n	800625c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800622e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006236:	4610      	mov	r0, r2
 8006238:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800623a:	e00f      	b.n	800625c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fa93 	bl	8006768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006242:	e00b      	b.n	800625c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fa8f 	bl	8006768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800624a:	e007      	b.n	800625c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fa8b 	bl	8006768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800625a:	e26f      	b.n	800673c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800625c:	bf00      	nop
    return;
 800625e:	e26d      	b.n	800673c <HAL_UART_IRQHandler+0x794>
 8006260:	10000001 	.word	0x10000001
 8006264:	04000120 	.word	0x04000120
 8006268:	08007af1 	.word	0x08007af1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006270:	2b01      	cmp	r3, #1
 8006272:	f040 8203 	bne.w	800667c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800627a:	f003 0310 	and.w	r3, r3, #16
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 81fc 	beq.w	800667c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006288:	f003 0310 	and.w	r3, r3, #16
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 81f5 	beq.w	800667c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2210      	movs	r2, #16
 8006298:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a4:	2b40      	cmp	r3, #64	@ 0x40
 80062a6:	f040 816d 	bne.w	8006584 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4aa4      	ldr	r2, [pc, #656]	@ (8006544 <HAL_UART_IRQHandler+0x59c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d068      	beq.n	800638a <HAL_UART_IRQHandler+0x3e2>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4aa1      	ldr	r2, [pc, #644]	@ (8006548 <HAL_UART_IRQHandler+0x5a0>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d061      	beq.n	800638a <HAL_UART_IRQHandler+0x3e2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a9f      	ldr	r2, [pc, #636]	@ (800654c <HAL_UART_IRQHandler+0x5a4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d05a      	beq.n	800638a <HAL_UART_IRQHandler+0x3e2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a9c      	ldr	r2, [pc, #624]	@ (8006550 <HAL_UART_IRQHandler+0x5a8>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d053      	beq.n	800638a <HAL_UART_IRQHandler+0x3e2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a9a      	ldr	r2, [pc, #616]	@ (8006554 <HAL_UART_IRQHandler+0x5ac>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d04c      	beq.n	800638a <HAL_UART_IRQHandler+0x3e2>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a97      	ldr	r2, [pc, #604]	@ (8006558 <HAL_UART_IRQHandler+0x5b0>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d045      	beq.n	800638a <HAL_UART_IRQHandler+0x3e2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a95      	ldr	r2, [pc, #596]	@ (800655c <HAL_UART_IRQHandler+0x5b4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d03e      	beq.n	800638a <HAL_UART_IRQHandler+0x3e2>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a92      	ldr	r2, [pc, #584]	@ (8006560 <HAL_UART_IRQHandler+0x5b8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d037      	beq.n	800638a <HAL_UART_IRQHandler+0x3e2>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a90      	ldr	r2, [pc, #576]	@ (8006564 <HAL_UART_IRQHandler+0x5bc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d030      	beq.n	800638a <HAL_UART_IRQHandler+0x3e2>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a8d      	ldr	r2, [pc, #564]	@ (8006568 <HAL_UART_IRQHandler+0x5c0>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d029      	beq.n	800638a <HAL_UART_IRQHandler+0x3e2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a8b      	ldr	r2, [pc, #556]	@ (800656c <HAL_UART_IRQHandler+0x5c4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d022      	beq.n	800638a <HAL_UART_IRQHandler+0x3e2>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a88      	ldr	r2, [pc, #544]	@ (8006570 <HAL_UART_IRQHandler+0x5c8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d01b      	beq.n	800638a <HAL_UART_IRQHandler+0x3e2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a86      	ldr	r2, [pc, #536]	@ (8006574 <HAL_UART_IRQHandler+0x5cc>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d014      	beq.n	800638a <HAL_UART_IRQHandler+0x3e2>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a83      	ldr	r2, [pc, #524]	@ (8006578 <HAL_UART_IRQHandler+0x5d0>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d00d      	beq.n	800638a <HAL_UART_IRQHandler+0x3e2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a81      	ldr	r2, [pc, #516]	@ (800657c <HAL_UART_IRQHandler+0x5d4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d006      	beq.n	800638a <HAL_UART_IRQHandler+0x3e2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a7e      	ldr	r2, [pc, #504]	@ (8006580 <HAL_UART_IRQHandler+0x5d8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d106      	bne.n	8006398 <HAL_UART_IRQHandler+0x3f0>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	b29b      	uxth	r3, r3
 8006396:	e005      	b.n	80063a4 <HAL_UART_IRQHandler+0x3fc>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 80ad 	beq.w	800650c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80063b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063bc:	429a      	cmp	r2, r3
 80063be:	f080 80a5 	bcs.w	800650c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063d8:	f000 8087 	beq.w	80064ea <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80063e8:	e853 3f00 	ldrex	r3, [r3]
 80063ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80063f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	461a      	mov	r2, r3
 8006402:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006406:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800640a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006412:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800641e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1da      	bne.n	80063dc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3308      	adds	r3, #8
 800642c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006436:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006438:	f023 0301 	bic.w	r3, r3, #1
 800643c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3308      	adds	r3, #8
 8006446:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800644a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800644e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006452:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800645c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e1      	bne.n	8006426 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3308      	adds	r3, #8
 8006468:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006472:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006478:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3308      	adds	r3, #8
 8006482:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006486:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006488:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800648c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006494:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e3      	bne.n	8006462 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2220      	movs	r2, #32
 800649e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80064b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064b8:	f023 0310 	bic.w	r3, r3, #16
 80064bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	461a      	mov	r2, r3
 80064c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80064d2:	e841 2300 	strex	r3, r2, [r1]
 80064d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80064d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e4      	bne.n	80064a8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fb fd67 	bl	8001fb8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2202      	movs	r2, #2
 80064ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	b29b      	uxth	r3, r3
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f939 	bl	800677c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800650a:	e119      	b.n	8006740 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006516:	429a      	cmp	r2, r3
 8006518:	f040 8112 	bne.w	8006740 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006528:	f040 810a 	bne.w	8006740 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2202      	movs	r2, #2
 8006530:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f91e 	bl	800677c <HAL_UARTEx_RxEventCallback>
      return;
 8006540:	e0fe      	b.n	8006740 <HAL_UART_IRQHandler+0x798>
 8006542:	bf00      	nop
 8006544:	40020010 	.word	0x40020010
 8006548:	40020028 	.word	0x40020028
 800654c:	40020040 	.word	0x40020040
 8006550:	40020058 	.word	0x40020058
 8006554:	40020070 	.word	0x40020070
 8006558:	40020088 	.word	0x40020088
 800655c:	400200a0 	.word	0x400200a0
 8006560:	400200b8 	.word	0x400200b8
 8006564:	40020410 	.word	0x40020410
 8006568:	40020428 	.word	0x40020428
 800656c:	40020440 	.word	0x40020440
 8006570:	40020458 	.word	0x40020458
 8006574:	40020470 	.word	0x40020470
 8006578:	40020488 	.word	0x40020488
 800657c:	400204a0 	.word	0x400204a0
 8006580:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006590:	b29b      	uxth	r3, r3
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800659e:	b29b      	uxth	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 80cf 	beq.w	8006744 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80065a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 80ca 	beq.w	8006744 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b8:	e853 3f00 	ldrex	r3, [r3]
 80065bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80065d4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e4      	bne.n	80065b0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3308      	adds	r3, #8
 80065ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	623b      	str	r3, [r7, #32]
   return(result);
 80065f6:	6a3a      	ldr	r2, [r7, #32]
 80065f8:	4b55      	ldr	r3, [pc, #340]	@ (8006750 <HAL_UART_IRQHandler+0x7a8>)
 80065fa:	4013      	ands	r3, r2
 80065fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3308      	adds	r3, #8
 8006606:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800660a:	633a      	str	r2, [r7, #48]	@ 0x30
 800660c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006610:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e3      	bne.n	80065e6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2220      	movs	r2, #32
 8006622:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	e853 3f00 	ldrex	r3, [r3]
 800663e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f023 0310 	bic.w	r3, r3, #16
 8006646:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006654:	61fb      	str	r3, [r7, #28]
 8006656:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006658:	69b9      	ldr	r1, [r7, #24]
 800665a:	69fa      	ldr	r2, [r7, #28]
 800665c:	e841 2300 	strex	r3, r2, [r1]
 8006660:	617b      	str	r3, [r7, #20]
   return(result);
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1e4      	bne.n	8006632 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2202      	movs	r2, #2
 800666c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800666e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006672:	4619      	mov	r1, r3
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f881 	bl	800677c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800667a:	e063      	b.n	8006744 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800667c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006680:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00e      	beq.n	80066a6 <HAL_UART_IRQHandler+0x6fe>
 8006688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800668c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d008      	beq.n	80066a6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800669c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f001 ff84 	bl	80085ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066a4:	e051      	b.n	800674a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80066a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d014      	beq.n	80066dc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80066b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d105      	bne.n	80066ca <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80066be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d008      	beq.n	80066dc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d03a      	beq.n	8006748 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	4798      	blx	r3
    }
    return;
 80066da:	e035      	b.n	8006748 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d009      	beq.n	80066fc <HAL_UART_IRQHandler+0x754>
 80066e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f001 fa0d 	bl	8007b14 <UART_EndTransmit_IT>
    return;
 80066fa:	e026      	b.n	800674a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80066fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006700:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d009      	beq.n	800671c <HAL_UART_IRQHandler+0x774>
 8006708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800670c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 ff5d 	bl	80085d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800671a:	e016      	b.n	800674a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800671c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006720:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d010      	beq.n	800674a <HAL_UART_IRQHandler+0x7a2>
 8006728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800672c:	2b00      	cmp	r3, #0
 800672e:	da0c      	bge.n	800674a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 ff45 	bl	80085c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006736:	e008      	b.n	800674a <HAL_UART_IRQHandler+0x7a2>
      return;
 8006738:	bf00      	nop
 800673a:	e006      	b.n	800674a <HAL_UART_IRQHandler+0x7a2>
    return;
 800673c:	bf00      	nop
 800673e:	e004      	b.n	800674a <HAL_UART_IRQHandler+0x7a2>
      return;
 8006740:	bf00      	nop
 8006742:	e002      	b.n	800674a <HAL_UART_IRQHandler+0x7a2>
      return;
 8006744:	bf00      	nop
 8006746:	e000      	b.n	800674a <HAL_UART_IRQHandler+0x7a2>
    return;
 8006748:	bf00      	nop
  }
}
 800674a:	37e8      	adds	r7, #232	@ 0xe8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	effffffe 	.word	0xeffffffe

08006754 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006798:	b092      	sub	sp, #72	@ 0x48
 800679a:	af00      	add	r7, sp, #0
 800679c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	431a      	orrs	r2, r3
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	431a      	orrs	r2, r3
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4bbe      	ldr	r3, [pc, #760]	@ (8006abc <UART_SetConfig+0x328>)
 80067c4:	4013      	ands	r3, r2
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	6812      	ldr	r2, [r2, #0]
 80067ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80067cc:	430b      	orrs	r3, r1
 80067ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4ab3      	ldr	r2, [pc, #716]	@ (8006ac0 <UART_SetConfig+0x32c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d004      	beq.n	8006800 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067fc:	4313      	orrs	r3, r2
 80067fe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	4baf      	ldr	r3, [pc, #700]	@ (8006ac4 <UART_SetConfig+0x330>)
 8006808:	4013      	ands	r3, r2
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	6812      	ldr	r2, [r2, #0]
 800680e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006810:	430b      	orrs	r3, r1
 8006812:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681a:	f023 010f 	bic.w	r1, r3, #15
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4aa6      	ldr	r2, [pc, #664]	@ (8006ac8 <UART_SetConfig+0x334>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d177      	bne.n	8006924 <UART_SetConfig+0x190>
 8006834:	4ba5      	ldr	r3, [pc, #660]	@ (8006acc <UART_SetConfig+0x338>)
 8006836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006838:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800683c:	2b28      	cmp	r3, #40	@ 0x28
 800683e:	d86d      	bhi.n	800691c <UART_SetConfig+0x188>
 8006840:	a201      	add	r2, pc, #4	@ (adr r2, 8006848 <UART_SetConfig+0xb4>)
 8006842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006846:	bf00      	nop
 8006848:	080068ed 	.word	0x080068ed
 800684c:	0800691d 	.word	0x0800691d
 8006850:	0800691d 	.word	0x0800691d
 8006854:	0800691d 	.word	0x0800691d
 8006858:	0800691d 	.word	0x0800691d
 800685c:	0800691d 	.word	0x0800691d
 8006860:	0800691d 	.word	0x0800691d
 8006864:	0800691d 	.word	0x0800691d
 8006868:	080068f5 	.word	0x080068f5
 800686c:	0800691d 	.word	0x0800691d
 8006870:	0800691d 	.word	0x0800691d
 8006874:	0800691d 	.word	0x0800691d
 8006878:	0800691d 	.word	0x0800691d
 800687c:	0800691d 	.word	0x0800691d
 8006880:	0800691d 	.word	0x0800691d
 8006884:	0800691d 	.word	0x0800691d
 8006888:	080068fd 	.word	0x080068fd
 800688c:	0800691d 	.word	0x0800691d
 8006890:	0800691d 	.word	0x0800691d
 8006894:	0800691d 	.word	0x0800691d
 8006898:	0800691d 	.word	0x0800691d
 800689c:	0800691d 	.word	0x0800691d
 80068a0:	0800691d 	.word	0x0800691d
 80068a4:	0800691d 	.word	0x0800691d
 80068a8:	08006905 	.word	0x08006905
 80068ac:	0800691d 	.word	0x0800691d
 80068b0:	0800691d 	.word	0x0800691d
 80068b4:	0800691d 	.word	0x0800691d
 80068b8:	0800691d 	.word	0x0800691d
 80068bc:	0800691d 	.word	0x0800691d
 80068c0:	0800691d 	.word	0x0800691d
 80068c4:	0800691d 	.word	0x0800691d
 80068c8:	0800690d 	.word	0x0800690d
 80068cc:	0800691d 	.word	0x0800691d
 80068d0:	0800691d 	.word	0x0800691d
 80068d4:	0800691d 	.word	0x0800691d
 80068d8:	0800691d 	.word	0x0800691d
 80068dc:	0800691d 	.word	0x0800691d
 80068e0:	0800691d 	.word	0x0800691d
 80068e4:	0800691d 	.word	0x0800691d
 80068e8:	08006915 	.word	0x08006915
 80068ec:	2301      	movs	r3, #1
 80068ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068f2:	e326      	b.n	8006f42 <UART_SetConfig+0x7ae>
 80068f4:	2304      	movs	r3, #4
 80068f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068fa:	e322      	b.n	8006f42 <UART_SetConfig+0x7ae>
 80068fc:	2308      	movs	r3, #8
 80068fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006902:	e31e      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006904:	2310      	movs	r3, #16
 8006906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800690a:	e31a      	b.n	8006f42 <UART_SetConfig+0x7ae>
 800690c:	2320      	movs	r3, #32
 800690e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006912:	e316      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006914:	2340      	movs	r3, #64	@ 0x40
 8006916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800691a:	e312      	b.n	8006f42 <UART_SetConfig+0x7ae>
 800691c:	2380      	movs	r3, #128	@ 0x80
 800691e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006922:	e30e      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a69      	ldr	r2, [pc, #420]	@ (8006ad0 <UART_SetConfig+0x33c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d130      	bne.n	8006990 <UART_SetConfig+0x1fc>
 800692e:	4b67      	ldr	r3, [pc, #412]	@ (8006acc <UART_SetConfig+0x338>)
 8006930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006932:	f003 0307 	and.w	r3, r3, #7
 8006936:	2b05      	cmp	r3, #5
 8006938:	d826      	bhi.n	8006988 <UART_SetConfig+0x1f4>
 800693a:	a201      	add	r2, pc, #4	@ (adr r2, 8006940 <UART_SetConfig+0x1ac>)
 800693c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006940:	08006959 	.word	0x08006959
 8006944:	08006961 	.word	0x08006961
 8006948:	08006969 	.word	0x08006969
 800694c:	08006971 	.word	0x08006971
 8006950:	08006979 	.word	0x08006979
 8006954:	08006981 	.word	0x08006981
 8006958:	2300      	movs	r3, #0
 800695a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800695e:	e2f0      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006960:	2304      	movs	r3, #4
 8006962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006966:	e2ec      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006968:	2308      	movs	r3, #8
 800696a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800696e:	e2e8      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006970:	2310      	movs	r3, #16
 8006972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006976:	e2e4      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006978:	2320      	movs	r3, #32
 800697a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800697e:	e2e0      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006980:	2340      	movs	r3, #64	@ 0x40
 8006982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006986:	e2dc      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006988:	2380      	movs	r3, #128	@ 0x80
 800698a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800698e:	e2d8      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a4f      	ldr	r2, [pc, #316]	@ (8006ad4 <UART_SetConfig+0x340>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d130      	bne.n	80069fc <UART_SetConfig+0x268>
 800699a:	4b4c      	ldr	r3, [pc, #304]	@ (8006acc <UART_SetConfig+0x338>)
 800699c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699e:	f003 0307 	and.w	r3, r3, #7
 80069a2:	2b05      	cmp	r3, #5
 80069a4:	d826      	bhi.n	80069f4 <UART_SetConfig+0x260>
 80069a6:	a201      	add	r2, pc, #4	@ (adr r2, 80069ac <UART_SetConfig+0x218>)
 80069a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ac:	080069c5 	.word	0x080069c5
 80069b0:	080069cd 	.word	0x080069cd
 80069b4:	080069d5 	.word	0x080069d5
 80069b8:	080069dd 	.word	0x080069dd
 80069bc:	080069e5 	.word	0x080069e5
 80069c0:	080069ed 	.word	0x080069ed
 80069c4:	2300      	movs	r3, #0
 80069c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ca:	e2ba      	b.n	8006f42 <UART_SetConfig+0x7ae>
 80069cc:	2304      	movs	r3, #4
 80069ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069d2:	e2b6      	b.n	8006f42 <UART_SetConfig+0x7ae>
 80069d4:	2308      	movs	r3, #8
 80069d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069da:	e2b2      	b.n	8006f42 <UART_SetConfig+0x7ae>
 80069dc:	2310      	movs	r3, #16
 80069de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069e2:	e2ae      	b.n	8006f42 <UART_SetConfig+0x7ae>
 80069e4:	2320      	movs	r3, #32
 80069e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ea:	e2aa      	b.n	8006f42 <UART_SetConfig+0x7ae>
 80069ec:	2340      	movs	r3, #64	@ 0x40
 80069ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069f2:	e2a6      	b.n	8006f42 <UART_SetConfig+0x7ae>
 80069f4:	2380      	movs	r3, #128	@ 0x80
 80069f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069fa:	e2a2      	b.n	8006f42 <UART_SetConfig+0x7ae>
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a35      	ldr	r2, [pc, #212]	@ (8006ad8 <UART_SetConfig+0x344>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d130      	bne.n	8006a68 <UART_SetConfig+0x2d4>
 8006a06:	4b31      	ldr	r3, [pc, #196]	@ (8006acc <UART_SetConfig+0x338>)
 8006a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	2b05      	cmp	r3, #5
 8006a10:	d826      	bhi.n	8006a60 <UART_SetConfig+0x2cc>
 8006a12:	a201      	add	r2, pc, #4	@ (adr r2, 8006a18 <UART_SetConfig+0x284>)
 8006a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a18:	08006a31 	.word	0x08006a31
 8006a1c:	08006a39 	.word	0x08006a39
 8006a20:	08006a41 	.word	0x08006a41
 8006a24:	08006a49 	.word	0x08006a49
 8006a28:	08006a51 	.word	0x08006a51
 8006a2c:	08006a59 	.word	0x08006a59
 8006a30:	2300      	movs	r3, #0
 8006a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a36:	e284      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006a38:	2304      	movs	r3, #4
 8006a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a3e:	e280      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006a40:	2308      	movs	r3, #8
 8006a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a46:	e27c      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006a48:	2310      	movs	r3, #16
 8006a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a4e:	e278      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006a50:	2320      	movs	r3, #32
 8006a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a56:	e274      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006a58:	2340      	movs	r3, #64	@ 0x40
 8006a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a5e:	e270      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006a60:	2380      	movs	r3, #128	@ 0x80
 8006a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a66:	e26c      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8006adc <UART_SetConfig+0x348>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d142      	bne.n	8006af8 <UART_SetConfig+0x364>
 8006a72:	4b16      	ldr	r3, [pc, #88]	@ (8006acc <UART_SetConfig+0x338>)
 8006a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	2b05      	cmp	r3, #5
 8006a7c:	d838      	bhi.n	8006af0 <UART_SetConfig+0x35c>
 8006a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a84 <UART_SetConfig+0x2f0>)
 8006a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a84:	08006a9d 	.word	0x08006a9d
 8006a88:	08006aa5 	.word	0x08006aa5
 8006a8c:	08006aad 	.word	0x08006aad
 8006a90:	08006ab5 	.word	0x08006ab5
 8006a94:	08006ae1 	.word	0x08006ae1
 8006a98:	08006ae9 	.word	0x08006ae9
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aa2:	e24e      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aaa:	e24a      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006aac:	2308      	movs	r3, #8
 8006aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ab2:	e246      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006ab4:	2310      	movs	r3, #16
 8006ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aba:	e242      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006abc:	cfff69f3 	.word	0xcfff69f3
 8006ac0:	58000c00 	.word	0x58000c00
 8006ac4:	11fff4ff 	.word	0x11fff4ff
 8006ac8:	40011000 	.word	0x40011000
 8006acc:	58024400 	.word	0x58024400
 8006ad0:	40004400 	.word	0x40004400
 8006ad4:	40004800 	.word	0x40004800
 8006ad8:	40004c00 	.word	0x40004c00
 8006adc:	40005000 	.word	0x40005000
 8006ae0:	2320      	movs	r3, #32
 8006ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ae6:	e22c      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006ae8:	2340      	movs	r3, #64	@ 0x40
 8006aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aee:	e228      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006af0:	2380      	movs	r3, #128	@ 0x80
 8006af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006af6:	e224      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4ab1      	ldr	r2, [pc, #708]	@ (8006dc4 <UART_SetConfig+0x630>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d176      	bne.n	8006bf0 <UART_SetConfig+0x45c>
 8006b02:	4bb1      	ldr	r3, [pc, #708]	@ (8006dc8 <UART_SetConfig+0x634>)
 8006b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b0a:	2b28      	cmp	r3, #40	@ 0x28
 8006b0c:	d86c      	bhi.n	8006be8 <UART_SetConfig+0x454>
 8006b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b14 <UART_SetConfig+0x380>)
 8006b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b14:	08006bb9 	.word	0x08006bb9
 8006b18:	08006be9 	.word	0x08006be9
 8006b1c:	08006be9 	.word	0x08006be9
 8006b20:	08006be9 	.word	0x08006be9
 8006b24:	08006be9 	.word	0x08006be9
 8006b28:	08006be9 	.word	0x08006be9
 8006b2c:	08006be9 	.word	0x08006be9
 8006b30:	08006be9 	.word	0x08006be9
 8006b34:	08006bc1 	.word	0x08006bc1
 8006b38:	08006be9 	.word	0x08006be9
 8006b3c:	08006be9 	.word	0x08006be9
 8006b40:	08006be9 	.word	0x08006be9
 8006b44:	08006be9 	.word	0x08006be9
 8006b48:	08006be9 	.word	0x08006be9
 8006b4c:	08006be9 	.word	0x08006be9
 8006b50:	08006be9 	.word	0x08006be9
 8006b54:	08006bc9 	.word	0x08006bc9
 8006b58:	08006be9 	.word	0x08006be9
 8006b5c:	08006be9 	.word	0x08006be9
 8006b60:	08006be9 	.word	0x08006be9
 8006b64:	08006be9 	.word	0x08006be9
 8006b68:	08006be9 	.word	0x08006be9
 8006b6c:	08006be9 	.word	0x08006be9
 8006b70:	08006be9 	.word	0x08006be9
 8006b74:	08006bd1 	.word	0x08006bd1
 8006b78:	08006be9 	.word	0x08006be9
 8006b7c:	08006be9 	.word	0x08006be9
 8006b80:	08006be9 	.word	0x08006be9
 8006b84:	08006be9 	.word	0x08006be9
 8006b88:	08006be9 	.word	0x08006be9
 8006b8c:	08006be9 	.word	0x08006be9
 8006b90:	08006be9 	.word	0x08006be9
 8006b94:	08006bd9 	.word	0x08006bd9
 8006b98:	08006be9 	.word	0x08006be9
 8006b9c:	08006be9 	.word	0x08006be9
 8006ba0:	08006be9 	.word	0x08006be9
 8006ba4:	08006be9 	.word	0x08006be9
 8006ba8:	08006be9 	.word	0x08006be9
 8006bac:	08006be9 	.word	0x08006be9
 8006bb0:	08006be9 	.word	0x08006be9
 8006bb4:	08006be1 	.word	0x08006be1
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bbe:	e1c0      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006bc0:	2304      	movs	r3, #4
 8006bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bc6:	e1bc      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006bc8:	2308      	movs	r3, #8
 8006bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bce:	e1b8      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006bd0:	2310      	movs	r3, #16
 8006bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bd6:	e1b4      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006bd8:	2320      	movs	r3, #32
 8006bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bde:	e1b0      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006be0:	2340      	movs	r3, #64	@ 0x40
 8006be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006be6:	e1ac      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006be8:	2380      	movs	r3, #128	@ 0x80
 8006bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bee:	e1a8      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a75      	ldr	r2, [pc, #468]	@ (8006dcc <UART_SetConfig+0x638>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d130      	bne.n	8006c5c <UART_SetConfig+0x4c8>
 8006bfa:	4b73      	ldr	r3, [pc, #460]	@ (8006dc8 <UART_SetConfig+0x634>)
 8006bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bfe:	f003 0307 	and.w	r3, r3, #7
 8006c02:	2b05      	cmp	r3, #5
 8006c04:	d826      	bhi.n	8006c54 <UART_SetConfig+0x4c0>
 8006c06:	a201      	add	r2, pc, #4	@ (adr r2, 8006c0c <UART_SetConfig+0x478>)
 8006c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0c:	08006c25 	.word	0x08006c25
 8006c10:	08006c2d 	.word	0x08006c2d
 8006c14:	08006c35 	.word	0x08006c35
 8006c18:	08006c3d 	.word	0x08006c3d
 8006c1c:	08006c45 	.word	0x08006c45
 8006c20:	08006c4d 	.word	0x08006c4d
 8006c24:	2300      	movs	r3, #0
 8006c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c2a:	e18a      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006c2c:	2304      	movs	r3, #4
 8006c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c32:	e186      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006c34:	2308      	movs	r3, #8
 8006c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c3a:	e182      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006c3c:	2310      	movs	r3, #16
 8006c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c42:	e17e      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006c44:	2320      	movs	r3, #32
 8006c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c4a:	e17a      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006c4c:	2340      	movs	r3, #64	@ 0x40
 8006c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c52:	e176      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006c54:	2380      	movs	r3, #128	@ 0x80
 8006c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c5a:	e172      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a5b      	ldr	r2, [pc, #364]	@ (8006dd0 <UART_SetConfig+0x63c>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d130      	bne.n	8006cc8 <UART_SetConfig+0x534>
 8006c66:	4b58      	ldr	r3, [pc, #352]	@ (8006dc8 <UART_SetConfig+0x634>)
 8006c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c6a:	f003 0307 	and.w	r3, r3, #7
 8006c6e:	2b05      	cmp	r3, #5
 8006c70:	d826      	bhi.n	8006cc0 <UART_SetConfig+0x52c>
 8006c72:	a201      	add	r2, pc, #4	@ (adr r2, 8006c78 <UART_SetConfig+0x4e4>)
 8006c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c78:	08006c91 	.word	0x08006c91
 8006c7c:	08006c99 	.word	0x08006c99
 8006c80:	08006ca1 	.word	0x08006ca1
 8006c84:	08006ca9 	.word	0x08006ca9
 8006c88:	08006cb1 	.word	0x08006cb1
 8006c8c:	08006cb9 	.word	0x08006cb9
 8006c90:	2300      	movs	r3, #0
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c96:	e154      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006c98:	2304      	movs	r3, #4
 8006c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c9e:	e150      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006ca0:	2308      	movs	r3, #8
 8006ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ca6:	e14c      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006ca8:	2310      	movs	r3, #16
 8006caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cae:	e148      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006cb0:	2320      	movs	r3, #32
 8006cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cb6:	e144      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006cb8:	2340      	movs	r3, #64	@ 0x40
 8006cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cbe:	e140      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006cc0:	2380      	movs	r3, #128	@ 0x80
 8006cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cc6:	e13c      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a41      	ldr	r2, [pc, #260]	@ (8006dd4 <UART_SetConfig+0x640>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	f040 8082 	bne.w	8006dd8 <UART_SetConfig+0x644>
 8006cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8006dc8 <UART_SetConfig+0x634>)
 8006cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cdc:	2b28      	cmp	r3, #40	@ 0x28
 8006cde:	d86d      	bhi.n	8006dbc <UART_SetConfig+0x628>
 8006ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce8 <UART_SetConfig+0x554>)
 8006ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce6:	bf00      	nop
 8006ce8:	08006d8d 	.word	0x08006d8d
 8006cec:	08006dbd 	.word	0x08006dbd
 8006cf0:	08006dbd 	.word	0x08006dbd
 8006cf4:	08006dbd 	.word	0x08006dbd
 8006cf8:	08006dbd 	.word	0x08006dbd
 8006cfc:	08006dbd 	.word	0x08006dbd
 8006d00:	08006dbd 	.word	0x08006dbd
 8006d04:	08006dbd 	.word	0x08006dbd
 8006d08:	08006d95 	.word	0x08006d95
 8006d0c:	08006dbd 	.word	0x08006dbd
 8006d10:	08006dbd 	.word	0x08006dbd
 8006d14:	08006dbd 	.word	0x08006dbd
 8006d18:	08006dbd 	.word	0x08006dbd
 8006d1c:	08006dbd 	.word	0x08006dbd
 8006d20:	08006dbd 	.word	0x08006dbd
 8006d24:	08006dbd 	.word	0x08006dbd
 8006d28:	08006d9d 	.word	0x08006d9d
 8006d2c:	08006dbd 	.word	0x08006dbd
 8006d30:	08006dbd 	.word	0x08006dbd
 8006d34:	08006dbd 	.word	0x08006dbd
 8006d38:	08006dbd 	.word	0x08006dbd
 8006d3c:	08006dbd 	.word	0x08006dbd
 8006d40:	08006dbd 	.word	0x08006dbd
 8006d44:	08006dbd 	.word	0x08006dbd
 8006d48:	08006da5 	.word	0x08006da5
 8006d4c:	08006dbd 	.word	0x08006dbd
 8006d50:	08006dbd 	.word	0x08006dbd
 8006d54:	08006dbd 	.word	0x08006dbd
 8006d58:	08006dbd 	.word	0x08006dbd
 8006d5c:	08006dbd 	.word	0x08006dbd
 8006d60:	08006dbd 	.word	0x08006dbd
 8006d64:	08006dbd 	.word	0x08006dbd
 8006d68:	08006dad 	.word	0x08006dad
 8006d6c:	08006dbd 	.word	0x08006dbd
 8006d70:	08006dbd 	.word	0x08006dbd
 8006d74:	08006dbd 	.word	0x08006dbd
 8006d78:	08006dbd 	.word	0x08006dbd
 8006d7c:	08006dbd 	.word	0x08006dbd
 8006d80:	08006dbd 	.word	0x08006dbd
 8006d84:	08006dbd 	.word	0x08006dbd
 8006d88:	08006db5 	.word	0x08006db5
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d92:	e0d6      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006d94:	2304      	movs	r3, #4
 8006d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d9a:	e0d2      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006d9c:	2308      	movs	r3, #8
 8006d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006da2:	e0ce      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006da4:	2310      	movs	r3, #16
 8006da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006daa:	e0ca      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006dac:	2320      	movs	r3, #32
 8006dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006db2:	e0c6      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006db4:	2340      	movs	r3, #64	@ 0x40
 8006db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dba:	e0c2      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006dbc:	2380      	movs	r3, #128	@ 0x80
 8006dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dc2:	e0be      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006dc4:	40011400 	.word	0x40011400
 8006dc8:	58024400 	.word	0x58024400
 8006dcc:	40007800 	.word	0x40007800
 8006dd0:	40007c00 	.word	0x40007c00
 8006dd4:	40011800 	.word	0x40011800
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4aad      	ldr	r2, [pc, #692]	@ (8007094 <UART_SetConfig+0x900>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d176      	bne.n	8006ed0 <UART_SetConfig+0x73c>
 8006de2:	4bad      	ldr	r3, [pc, #692]	@ (8007098 <UART_SetConfig+0x904>)
 8006de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006de6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dea:	2b28      	cmp	r3, #40	@ 0x28
 8006dec:	d86c      	bhi.n	8006ec8 <UART_SetConfig+0x734>
 8006dee:	a201      	add	r2, pc, #4	@ (adr r2, 8006df4 <UART_SetConfig+0x660>)
 8006df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df4:	08006e99 	.word	0x08006e99
 8006df8:	08006ec9 	.word	0x08006ec9
 8006dfc:	08006ec9 	.word	0x08006ec9
 8006e00:	08006ec9 	.word	0x08006ec9
 8006e04:	08006ec9 	.word	0x08006ec9
 8006e08:	08006ec9 	.word	0x08006ec9
 8006e0c:	08006ec9 	.word	0x08006ec9
 8006e10:	08006ec9 	.word	0x08006ec9
 8006e14:	08006ea1 	.word	0x08006ea1
 8006e18:	08006ec9 	.word	0x08006ec9
 8006e1c:	08006ec9 	.word	0x08006ec9
 8006e20:	08006ec9 	.word	0x08006ec9
 8006e24:	08006ec9 	.word	0x08006ec9
 8006e28:	08006ec9 	.word	0x08006ec9
 8006e2c:	08006ec9 	.word	0x08006ec9
 8006e30:	08006ec9 	.word	0x08006ec9
 8006e34:	08006ea9 	.word	0x08006ea9
 8006e38:	08006ec9 	.word	0x08006ec9
 8006e3c:	08006ec9 	.word	0x08006ec9
 8006e40:	08006ec9 	.word	0x08006ec9
 8006e44:	08006ec9 	.word	0x08006ec9
 8006e48:	08006ec9 	.word	0x08006ec9
 8006e4c:	08006ec9 	.word	0x08006ec9
 8006e50:	08006ec9 	.word	0x08006ec9
 8006e54:	08006eb1 	.word	0x08006eb1
 8006e58:	08006ec9 	.word	0x08006ec9
 8006e5c:	08006ec9 	.word	0x08006ec9
 8006e60:	08006ec9 	.word	0x08006ec9
 8006e64:	08006ec9 	.word	0x08006ec9
 8006e68:	08006ec9 	.word	0x08006ec9
 8006e6c:	08006ec9 	.word	0x08006ec9
 8006e70:	08006ec9 	.word	0x08006ec9
 8006e74:	08006eb9 	.word	0x08006eb9
 8006e78:	08006ec9 	.word	0x08006ec9
 8006e7c:	08006ec9 	.word	0x08006ec9
 8006e80:	08006ec9 	.word	0x08006ec9
 8006e84:	08006ec9 	.word	0x08006ec9
 8006e88:	08006ec9 	.word	0x08006ec9
 8006e8c:	08006ec9 	.word	0x08006ec9
 8006e90:	08006ec9 	.word	0x08006ec9
 8006e94:	08006ec1 	.word	0x08006ec1
 8006e98:	2301      	movs	r3, #1
 8006e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e9e:	e050      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006ea0:	2304      	movs	r3, #4
 8006ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ea6:	e04c      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eae:	e048      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eb6:	e044      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006eb8:	2320      	movs	r3, #32
 8006eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ebe:	e040      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006ec0:	2340      	movs	r3, #64	@ 0x40
 8006ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ec6:	e03c      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006ec8:	2380      	movs	r3, #128	@ 0x80
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ece:	e038      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a71      	ldr	r2, [pc, #452]	@ (800709c <UART_SetConfig+0x908>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d130      	bne.n	8006f3c <UART_SetConfig+0x7a8>
 8006eda:	4b6f      	ldr	r3, [pc, #444]	@ (8007098 <UART_SetConfig+0x904>)
 8006edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	2b05      	cmp	r3, #5
 8006ee4:	d826      	bhi.n	8006f34 <UART_SetConfig+0x7a0>
 8006ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8006eec <UART_SetConfig+0x758>)
 8006ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eec:	08006f05 	.word	0x08006f05
 8006ef0:	08006f0d 	.word	0x08006f0d
 8006ef4:	08006f15 	.word	0x08006f15
 8006ef8:	08006f1d 	.word	0x08006f1d
 8006efc:	08006f25 	.word	0x08006f25
 8006f00:	08006f2d 	.word	0x08006f2d
 8006f04:	2302      	movs	r3, #2
 8006f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f0a:	e01a      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006f0c:	2304      	movs	r3, #4
 8006f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f12:	e016      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006f14:	2308      	movs	r3, #8
 8006f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f1a:	e012      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f22:	e00e      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006f24:	2320      	movs	r3, #32
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f2a:	e00a      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006f2c:	2340      	movs	r3, #64	@ 0x40
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f32:	e006      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006f34:	2380      	movs	r3, #128	@ 0x80
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f3a:	e002      	b.n	8006f42 <UART_SetConfig+0x7ae>
 8006f3c:	2380      	movs	r3, #128	@ 0x80
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a55      	ldr	r2, [pc, #340]	@ (800709c <UART_SetConfig+0x908>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	f040 80f8 	bne.w	800713e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f4e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f52:	2b20      	cmp	r3, #32
 8006f54:	dc46      	bgt.n	8006fe4 <UART_SetConfig+0x850>
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	db75      	blt.n	8007046 <UART_SetConfig+0x8b2>
 8006f5a:	3b02      	subs	r3, #2
 8006f5c:	2b1e      	cmp	r3, #30
 8006f5e:	d872      	bhi.n	8007046 <UART_SetConfig+0x8b2>
 8006f60:	a201      	add	r2, pc, #4	@ (adr r2, 8006f68 <UART_SetConfig+0x7d4>)
 8006f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f66:	bf00      	nop
 8006f68:	08006feb 	.word	0x08006feb
 8006f6c:	08007047 	.word	0x08007047
 8006f70:	08006ff3 	.word	0x08006ff3
 8006f74:	08007047 	.word	0x08007047
 8006f78:	08007047 	.word	0x08007047
 8006f7c:	08007047 	.word	0x08007047
 8006f80:	08007003 	.word	0x08007003
 8006f84:	08007047 	.word	0x08007047
 8006f88:	08007047 	.word	0x08007047
 8006f8c:	08007047 	.word	0x08007047
 8006f90:	08007047 	.word	0x08007047
 8006f94:	08007047 	.word	0x08007047
 8006f98:	08007047 	.word	0x08007047
 8006f9c:	08007047 	.word	0x08007047
 8006fa0:	08007013 	.word	0x08007013
 8006fa4:	08007047 	.word	0x08007047
 8006fa8:	08007047 	.word	0x08007047
 8006fac:	08007047 	.word	0x08007047
 8006fb0:	08007047 	.word	0x08007047
 8006fb4:	08007047 	.word	0x08007047
 8006fb8:	08007047 	.word	0x08007047
 8006fbc:	08007047 	.word	0x08007047
 8006fc0:	08007047 	.word	0x08007047
 8006fc4:	08007047 	.word	0x08007047
 8006fc8:	08007047 	.word	0x08007047
 8006fcc:	08007047 	.word	0x08007047
 8006fd0:	08007047 	.word	0x08007047
 8006fd4:	08007047 	.word	0x08007047
 8006fd8:	08007047 	.word	0x08007047
 8006fdc:	08007047 	.word	0x08007047
 8006fe0:	08007039 	.word	0x08007039
 8006fe4:	2b40      	cmp	r3, #64	@ 0x40
 8006fe6:	d02a      	beq.n	800703e <UART_SetConfig+0x8aa>
 8006fe8:	e02d      	b.n	8007046 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006fea:	f7fe f84b 	bl	8005084 <HAL_RCCEx_GetD3PCLK1Freq>
 8006fee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ff0:	e02f      	b.n	8007052 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe f85a 	bl	80050b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007000:	e027      	b.n	8007052 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007002:	f107 0318 	add.w	r3, r7, #24
 8007006:	4618      	mov	r0, r3
 8007008:	f7fe f9a6 	bl	8005358 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007010:	e01f      	b.n	8007052 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007012:	4b21      	ldr	r3, [pc, #132]	@ (8007098 <UART_SetConfig+0x904>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	2b00      	cmp	r3, #0
 800701c:	d009      	beq.n	8007032 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800701e:	4b1e      	ldr	r3, [pc, #120]	@ (8007098 <UART_SetConfig+0x904>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	08db      	lsrs	r3, r3, #3
 8007024:	f003 0303 	and.w	r3, r3, #3
 8007028:	4a1d      	ldr	r2, [pc, #116]	@ (80070a0 <UART_SetConfig+0x90c>)
 800702a:	fa22 f303 	lsr.w	r3, r2, r3
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007030:	e00f      	b.n	8007052 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007032:	4b1b      	ldr	r3, [pc, #108]	@ (80070a0 <UART_SetConfig+0x90c>)
 8007034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007036:	e00c      	b.n	8007052 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007038:	4b1a      	ldr	r3, [pc, #104]	@ (80070a4 <UART_SetConfig+0x910>)
 800703a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800703c:	e009      	b.n	8007052 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800703e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007044:	e005      	b.n	8007052 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007050:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 81ee 	beq.w	8007436 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705e:	4a12      	ldr	r2, [pc, #72]	@ (80070a8 <UART_SetConfig+0x914>)
 8007060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007064:	461a      	mov	r2, r3
 8007066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007068:	fbb3 f3f2 	udiv	r3, r3, r2
 800706c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	4613      	mov	r3, r2
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	4413      	add	r3, r2
 8007078:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800707a:	429a      	cmp	r2, r3
 800707c:	d305      	bcc.n	800708a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007086:	429a      	cmp	r2, r3
 8007088:	d910      	bls.n	80070ac <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007090:	e1d1      	b.n	8007436 <UART_SetConfig+0xca2>
 8007092:	bf00      	nop
 8007094:	40011c00 	.word	0x40011c00
 8007098:	58024400 	.word	0x58024400
 800709c:	58000c00 	.word	0x58000c00
 80070a0:	03d09000 	.word	0x03d09000
 80070a4:	003d0900 	.word	0x003d0900
 80070a8:	0800b534 	.word	0x0800b534
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ae:	2200      	movs	r2, #0
 80070b0:	60bb      	str	r3, [r7, #8]
 80070b2:	60fa      	str	r2, [r7, #12]
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b8:	4ac0      	ldr	r2, [pc, #768]	@ (80073bc <UART_SetConfig+0xc28>)
 80070ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070be:	b29b      	uxth	r3, r3
 80070c0:	2200      	movs	r2, #0
 80070c2:	603b      	str	r3, [r7, #0]
 80070c4:	607a      	str	r2, [r7, #4]
 80070c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070ce:	f7f9 fb3b 	bl	8000748 <__aeabi_uldivmod>
 80070d2:	4602      	mov	r2, r0
 80070d4:	460b      	mov	r3, r1
 80070d6:	4610      	mov	r0, r2
 80070d8:	4619      	mov	r1, r3
 80070da:	f04f 0200 	mov.w	r2, #0
 80070de:	f04f 0300 	mov.w	r3, #0
 80070e2:	020b      	lsls	r3, r1, #8
 80070e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070e8:	0202      	lsls	r2, r0, #8
 80070ea:	6979      	ldr	r1, [r7, #20]
 80070ec:	6849      	ldr	r1, [r1, #4]
 80070ee:	0849      	lsrs	r1, r1, #1
 80070f0:	2000      	movs	r0, #0
 80070f2:	460c      	mov	r4, r1
 80070f4:	4605      	mov	r5, r0
 80070f6:	eb12 0804 	adds.w	r8, r2, r4
 80070fa:	eb43 0905 	adc.w	r9, r3, r5
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	469a      	mov	sl, r3
 8007106:	4693      	mov	fp, r2
 8007108:	4652      	mov	r2, sl
 800710a:	465b      	mov	r3, fp
 800710c:	4640      	mov	r0, r8
 800710e:	4649      	mov	r1, r9
 8007110:	f7f9 fb1a 	bl	8000748 <__aeabi_uldivmod>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	4613      	mov	r3, r2
 800711a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800711c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007122:	d308      	bcc.n	8007136 <UART_SetConfig+0x9a2>
 8007124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007126:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800712a:	d204      	bcs.n	8007136 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007132:	60da      	str	r2, [r3, #12]
 8007134:	e17f      	b.n	8007436 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800713c:	e17b      	b.n	8007436 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007146:	f040 80bd 	bne.w	80072c4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800714a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800714e:	2b20      	cmp	r3, #32
 8007150:	dc48      	bgt.n	80071e4 <UART_SetConfig+0xa50>
 8007152:	2b00      	cmp	r3, #0
 8007154:	db7b      	blt.n	800724e <UART_SetConfig+0xaba>
 8007156:	2b20      	cmp	r3, #32
 8007158:	d879      	bhi.n	800724e <UART_SetConfig+0xaba>
 800715a:	a201      	add	r2, pc, #4	@ (adr r2, 8007160 <UART_SetConfig+0x9cc>)
 800715c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007160:	080071eb 	.word	0x080071eb
 8007164:	080071f3 	.word	0x080071f3
 8007168:	0800724f 	.word	0x0800724f
 800716c:	0800724f 	.word	0x0800724f
 8007170:	080071fb 	.word	0x080071fb
 8007174:	0800724f 	.word	0x0800724f
 8007178:	0800724f 	.word	0x0800724f
 800717c:	0800724f 	.word	0x0800724f
 8007180:	0800720b 	.word	0x0800720b
 8007184:	0800724f 	.word	0x0800724f
 8007188:	0800724f 	.word	0x0800724f
 800718c:	0800724f 	.word	0x0800724f
 8007190:	0800724f 	.word	0x0800724f
 8007194:	0800724f 	.word	0x0800724f
 8007198:	0800724f 	.word	0x0800724f
 800719c:	0800724f 	.word	0x0800724f
 80071a0:	0800721b 	.word	0x0800721b
 80071a4:	0800724f 	.word	0x0800724f
 80071a8:	0800724f 	.word	0x0800724f
 80071ac:	0800724f 	.word	0x0800724f
 80071b0:	0800724f 	.word	0x0800724f
 80071b4:	0800724f 	.word	0x0800724f
 80071b8:	0800724f 	.word	0x0800724f
 80071bc:	0800724f 	.word	0x0800724f
 80071c0:	0800724f 	.word	0x0800724f
 80071c4:	0800724f 	.word	0x0800724f
 80071c8:	0800724f 	.word	0x0800724f
 80071cc:	0800724f 	.word	0x0800724f
 80071d0:	0800724f 	.word	0x0800724f
 80071d4:	0800724f 	.word	0x0800724f
 80071d8:	0800724f 	.word	0x0800724f
 80071dc:	0800724f 	.word	0x0800724f
 80071e0:	08007241 	.word	0x08007241
 80071e4:	2b40      	cmp	r3, #64	@ 0x40
 80071e6:	d02e      	beq.n	8007246 <UART_SetConfig+0xab2>
 80071e8:	e031      	b.n	800724e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071ea:	f7fc fd7f 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 80071ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80071f0:	e033      	b.n	800725a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071f2:	f7fc fd91 	bl	8003d18 <HAL_RCC_GetPCLK2Freq>
 80071f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80071f8:	e02f      	b.n	800725a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fd ff56 	bl	80050b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007208:	e027      	b.n	800725a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800720a:	f107 0318 	add.w	r3, r7, #24
 800720e:	4618      	mov	r0, r3
 8007210:	f7fe f8a2 	bl	8005358 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007218:	e01f      	b.n	800725a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800721a:	4b69      	ldr	r3, [pc, #420]	@ (80073c0 <UART_SetConfig+0xc2c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b00      	cmp	r3, #0
 8007224:	d009      	beq.n	800723a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007226:	4b66      	ldr	r3, [pc, #408]	@ (80073c0 <UART_SetConfig+0xc2c>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	08db      	lsrs	r3, r3, #3
 800722c:	f003 0303 	and.w	r3, r3, #3
 8007230:	4a64      	ldr	r2, [pc, #400]	@ (80073c4 <UART_SetConfig+0xc30>)
 8007232:	fa22 f303 	lsr.w	r3, r2, r3
 8007236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007238:	e00f      	b.n	800725a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800723a:	4b62      	ldr	r3, [pc, #392]	@ (80073c4 <UART_SetConfig+0xc30>)
 800723c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800723e:	e00c      	b.n	800725a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007240:	4b61      	ldr	r3, [pc, #388]	@ (80073c8 <UART_SetConfig+0xc34>)
 8007242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007244:	e009      	b.n	800725a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800724a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800724c:	e005      	b.n	800725a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800724e:	2300      	movs	r3, #0
 8007250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007258:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800725a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800725c:	2b00      	cmp	r3, #0
 800725e:	f000 80ea 	beq.w	8007436 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007266:	4a55      	ldr	r2, [pc, #340]	@ (80073bc <UART_SetConfig+0xc28>)
 8007268:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800726c:	461a      	mov	r2, r3
 800726e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007270:	fbb3 f3f2 	udiv	r3, r3, r2
 8007274:	005a      	lsls	r2, r3, #1
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	085b      	lsrs	r3, r3, #1
 800727c:	441a      	add	r2, r3
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	fbb2 f3f3 	udiv	r3, r2, r3
 8007286:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728a:	2b0f      	cmp	r3, #15
 800728c:	d916      	bls.n	80072bc <UART_SetConfig+0xb28>
 800728e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007294:	d212      	bcs.n	80072bc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007298:	b29b      	uxth	r3, r3
 800729a:	f023 030f 	bic.w	r3, r3, #15
 800729e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a2:	085b      	lsrs	r3, r3, #1
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	f003 0307 	and.w	r3, r3, #7
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80072ae:	4313      	orrs	r3, r2
 80072b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80072b8:	60da      	str	r2, [r3, #12]
 80072ba:	e0bc      	b.n	8007436 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80072c2:	e0b8      	b.n	8007436 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072c4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80072c8:	2b20      	cmp	r3, #32
 80072ca:	dc4b      	bgt.n	8007364 <UART_SetConfig+0xbd0>
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f2c0 8087 	blt.w	80073e0 <UART_SetConfig+0xc4c>
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	f200 8084 	bhi.w	80073e0 <UART_SetConfig+0xc4c>
 80072d8:	a201      	add	r2, pc, #4	@ (adr r2, 80072e0 <UART_SetConfig+0xb4c>)
 80072da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072de:	bf00      	nop
 80072e0:	0800736b 	.word	0x0800736b
 80072e4:	08007373 	.word	0x08007373
 80072e8:	080073e1 	.word	0x080073e1
 80072ec:	080073e1 	.word	0x080073e1
 80072f0:	0800737b 	.word	0x0800737b
 80072f4:	080073e1 	.word	0x080073e1
 80072f8:	080073e1 	.word	0x080073e1
 80072fc:	080073e1 	.word	0x080073e1
 8007300:	0800738b 	.word	0x0800738b
 8007304:	080073e1 	.word	0x080073e1
 8007308:	080073e1 	.word	0x080073e1
 800730c:	080073e1 	.word	0x080073e1
 8007310:	080073e1 	.word	0x080073e1
 8007314:	080073e1 	.word	0x080073e1
 8007318:	080073e1 	.word	0x080073e1
 800731c:	080073e1 	.word	0x080073e1
 8007320:	0800739b 	.word	0x0800739b
 8007324:	080073e1 	.word	0x080073e1
 8007328:	080073e1 	.word	0x080073e1
 800732c:	080073e1 	.word	0x080073e1
 8007330:	080073e1 	.word	0x080073e1
 8007334:	080073e1 	.word	0x080073e1
 8007338:	080073e1 	.word	0x080073e1
 800733c:	080073e1 	.word	0x080073e1
 8007340:	080073e1 	.word	0x080073e1
 8007344:	080073e1 	.word	0x080073e1
 8007348:	080073e1 	.word	0x080073e1
 800734c:	080073e1 	.word	0x080073e1
 8007350:	080073e1 	.word	0x080073e1
 8007354:	080073e1 	.word	0x080073e1
 8007358:	080073e1 	.word	0x080073e1
 800735c:	080073e1 	.word	0x080073e1
 8007360:	080073d3 	.word	0x080073d3
 8007364:	2b40      	cmp	r3, #64	@ 0x40
 8007366:	d037      	beq.n	80073d8 <UART_SetConfig+0xc44>
 8007368:	e03a      	b.n	80073e0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800736a:	f7fc fcbf 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 800736e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007370:	e03c      	b.n	80073ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007372:	f7fc fcd1 	bl	8003d18 <HAL_RCC_GetPCLK2Freq>
 8007376:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007378:	e038      	b.n	80073ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800737a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800737e:	4618      	mov	r0, r3
 8007380:	f7fd fe96 	bl	80050b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007388:	e030      	b.n	80073ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800738a:	f107 0318 	add.w	r3, r7, #24
 800738e:	4618      	mov	r0, r3
 8007390:	f7fd ffe2 	bl	8005358 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007398:	e028      	b.n	80073ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800739a:	4b09      	ldr	r3, [pc, #36]	@ (80073c0 <UART_SetConfig+0xc2c>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0320 	and.w	r3, r3, #32
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d012      	beq.n	80073cc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073a6:	4b06      	ldr	r3, [pc, #24]	@ (80073c0 <UART_SetConfig+0xc2c>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	08db      	lsrs	r3, r3, #3
 80073ac:	f003 0303 	and.w	r3, r3, #3
 80073b0:	4a04      	ldr	r2, [pc, #16]	@ (80073c4 <UART_SetConfig+0xc30>)
 80073b2:	fa22 f303 	lsr.w	r3, r2, r3
 80073b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073b8:	e018      	b.n	80073ec <UART_SetConfig+0xc58>
 80073ba:	bf00      	nop
 80073bc:	0800b534 	.word	0x0800b534
 80073c0:	58024400 	.word	0x58024400
 80073c4:	03d09000 	.word	0x03d09000
 80073c8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80073cc:	4b24      	ldr	r3, [pc, #144]	@ (8007460 <UART_SetConfig+0xccc>)
 80073ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073d0:	e00c      	b.n	80073ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073d2:	4b24      	ldr	r3, [pc, #144]	@ (8007464 <UART_SetConfig+0xcd0>)
 80073d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073d6:	e009      	b.n	80073ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073de:	e005      	b.n	80073ec <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80073ea:	bf00      	nop
    }

    if (pclk != 0U)
 80073ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d021      	beq.n	8007436 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f6:	4a1c      	ldr	r2, [pc, #112]	@ (8007468 <UART_SetConfig+0xcd4>)
 80073f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073fc:	461a      	mov	r2, r3
 80073fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007400:	fbb3 f2f2 	udiv	r2, r3, r2
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	085b      	lsrs	r3, r3, #1
 800740a:	441a      	add	r2, r3
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	fbb2 f3f3 	udiv	r3, r2, r3
 8007414:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007418:	2b0f      	cmp	r3, #15
 800741a:	d909      	bls.n	8007430 <UART_SetConfig+0xc9c>
 800741c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007422:	d205      	bcs.n	8007430 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007426:	b29a      	uxth	r2, r3
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	60da      	str	r2, [r3, #12]
 800742e:	e002      	b.n	8007436 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	2201      	movs	r2, #1
 800743a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2201      	movs	r2, #1
 8007442:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2200      	movs	r2, #0
 800744a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	2200      	movs	r2, #0
 8007450:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007452:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007456:	4618      	mov	r0, r3
 8007458:	3748      	adds	r7, #72	@ 0x48
 800745a:	46bd      	mov	sp, r7
 800745c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007460:	03d09000 	.word	0x03d09000
 8007464:	003d0900 	.word	0x003d0900
 8007468:	0800b534 	.word	0x0800b534

0800746c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007478:	f003 0308 	and.w	r3, r3, #8
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00a      	beq.n	8007496 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00a      	beq.n	80074b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00a      	beq.n	80074da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074de:	f003 0304 	and.w	r3, r3, #4
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007500:	f003 0310 	and.w	r3, r3, #16
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00a      	beq.n	800751e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007522:	f003 0320 	and.w	r3, r3, #32
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00a      	beq.n	8007540 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007548:	2b00      	cmp	r3, #0
 800754a:	d01a      	beq.n	8007582 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800756a:	d10a      	bne.n	8007582 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00a      	beq.n	80075a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	605a      	str	r2, [r3, #4]
  }
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b098      	sub	sp, #96	@ 0x60
 80075b4:	af02      	add	r7, sp, #8
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075c0:	f7fa fb42 	bl	8001c48 <HAL_GetTick>
 80075c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0308 	and.w	r3, r3, #8
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d12f      	bne.n	8007634 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075dc:	2200      	movs	r2, #0
 80075de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f88e 	bl	8007704 <UART_WaitOnFlagUntilTimeout>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d022      	beq.n	8007634 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f6:	e853 3f00 	ldrex	r3, [r3]
 80075fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007602:	653b      	str	r3, [r7, #80]	@ 0x50
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	461a      	mov	r2, r3
 800760a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800760c:	647b      	str	r3, [r7, #68]	@ 0x44
 800760e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007612:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800761a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e6      	bne.n	80075ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2220      	movs	r2, #32
 8007624:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e063      	b.n	80076fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0304 	and.w	r3, r3, #4
 800763e:	2b04      	cmp	r3, #4
 8007640:	d149      	bne.n	80076d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007642:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800764a:	2200      	movs	r2, #0
 800764c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f857 	bl	8007704 <UART_WaitOnFlagUntilTimeout>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d03c      	beq.n	80076d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	623b      	str	r3, [r7, #32]
   return(result);
 800766a:	6a3b      	ldr	r3, [r7, #32]
 800766c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007670:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800767a:	633b      	str	r3, [r7, #48]	@ 0x30
 800767c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007680:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e6      	bne.n	800765c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3308      	adds	r3, #8
 8007694:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	60fb      	str	r3, [r7, #12]
   return(result);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f023 0301 	bic.w	r3, r3, #1
 80076a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3308      	adds	r3, #8
 80076ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076ae:	61fa      	str	r2, [r7, #28]
 80076b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	69b9      	ldr	r1, [r7, #24]
 80076b4:	69fa      	ldr	r2, [r7, #28]
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	617b      	str	r3, [r7, #20]
   return(result);
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e5      	bne.n	800768e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e012      	b.n	80076fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2220      	movs	r2, #32
 80076da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3758      	adds	r7, #88	@ 0x58
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	603b      	str	r3, [r7, #0]
 8007710:	4613      	mov	r3, r2
 8007712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007714:	e04f      	b.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771c:	d04b      	beq.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800771e:	f7fa fa93 	bl	8001c48 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	429a      	cmp	r2, r3
 800772c:	d302      	bcc.n	8007734 <UART_WaitOnFlagUntilTimeout+0x30>
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e04e      	b.n	80077d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0304 	and.w	r3, r3, #4
 8007742:	2b00      	cmp	r3, #0
 8007744:	d037      	beq.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b80      	cmp	r3, #128	@ 0x80
 800774a:	d034      	beq.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2b40      	cmp	r3, #64	@ 0x40
 8007750:	d031      	beq.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	69db      	ldr	r3, [r3, #28]
 8007758:	f003 0308 	and.w	r3, r3, #8
 800775c:	2b08      	cmp	r3, #8
 800775e:	d110      	bne.n	8007782 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2208      	movs	r2, #8
 8007766:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 f95b 	bl	8007a24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2208      	movs	r2, #8
 8007772:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e029      	b.n	80077d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800778c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007790:	d111      	bne.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800779a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 f941 	bl	8007a24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2220      	movs	r2, #32
 80077a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e00f      	b.n	80077d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	69da      	ldr	r2, [r3, #28]
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	4013      	ands	r3, r2
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	bf0c      	ite	eq
 80077c6:	2301      	moveq	r3, #1
 80077c8:	2300      	movne	r3, #0
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	461a      	mov	r2, r3
 80077ce:	79fb      	ldrb	r3, [r7, #7]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d0a0      	beq.n	8007716 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
	...

080077e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b0a3      	sub	sp, #140	@ 0x8c
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	4613      	mov	r3, r2
 80077ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	88fa      	ldrh	r2, [r7, #6]
 80077f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	88fa      	ldrh	r2, [r7, #6]
 8007800:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007812:	d10e      	bne.n	8007832 <UART_Start_Receive_IT+0x52>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d105      	bne.n	8007828 <UART_Start_Receive_IT+0x48>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007822:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007826:	e02d      	b.n	8007884 <UART_Start_Receive_IT+0xa4>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	22ff      	movs	r2, #255	@ 0xff
 800782c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007830:	e028      	b.n	8007884 <UART_Start_Receive_IT+0xa4>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10d      	bne.n	8007856 <UART_Start_Receive_IT+0x76>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d104      	bne.n	800784c <UART_Start_Receive_IT+0x6c>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	22ff      	movs	r2, #255	@ 0xff
 8007846:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800784a:	e01b      	b.n	8007884 <UART_Start_Receive_IT+0xa4>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	227f      	movs	r2, #127	@ 0x7f
 8007850:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007854:	e016      	b.n	8007884 <UART_Start_Receive_IT+0xa4>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800785e:	d10d      	bne.n	800787c <UART_Start_Receive_IT+0x9c>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d104      	bne.n	8007872 <UART_Start_Receive_IT+0x92>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	227f      	movs	r2, #127	@ 0x7f
 800786c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007870:	e008      	b.n	8007884 <UART_Start_Receive_IT+0xa4>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	223f      	movs	r2, #63	@ 0x3f
 8007876:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800787a:	e003      	b.n	8007884 <UART_Start_Receive_IT+0xa4>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2222      	movs	r2, #34	@ 0x22
 8007890:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3308      	adds	r3, #8
 800789a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800789e:	e853 3f00 	ldrex	r3, [r3]
 80078a2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80078a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078a6:	f043 0301 	orr.w	r3, r3, #1
 80078aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3308      	adds	r3, #8
 80078b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80078b8:	673a      	str	r2, [r7, #112]	@ 0x70
 80078ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078bc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80078be:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80078c0:	e841 2300 	strex	r3, r2, [r1]
 80078c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80078c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1e3      	bne.n	8007894 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078d4:	d14f      	bne.n	8007976 <UART_Start_Receive_IT+0x196>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80078dc:	88fa      	ldrh	r2, [r7, #6]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d349      	bcc.n	8007976 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078ea:	d107      	bne.n	80078fc <UART_Start_Receive_IT+0x11c>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d103      	bne.n	80078fc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4a47      	ldr	r2, [pc, #284]	@ (8007a14 <UART_Start_Receive_IT+0x234>)
 80078f8:	675a      	str	r2, [r3, #116]	@ 0x74
 80078fa:	e002      	b.n	8007902 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4a46      	ldr	r2, [pc, #280]	@ (8007a18 <UART_Start_Receive_IT+0x238>)
 8007900:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d01a      	beq.n	8007940 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007910:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007912:	e853 3f00 	ldrex	r3, [r3]
 8007916:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800791a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800791e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	461a      	mov	r2, r3
 8007928:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800792c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800792e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007930:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007932:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007934:	e841 2300 	strex	r3, r2, [r1]
 8007938:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800793a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1e4      	bne.n	800790a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	3308      	adds	r3, #8
 8007946:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800794a:	e853 3f00 	ldrex	r3, [r3]
 800794e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007956:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3308      	adds	r3, #8
 800795e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007960:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007962:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007966:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007968:	e841 2300 	strex	r3, r2, [r1]
 800796c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800796e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1e5      	bne.n	8007940 <UART_Start_Receive_IT+0x160>
 8007974:	e046      	b.n	8007a04 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800797e:	d107      	bne.n	8007990 <UART_Start_Receive_IT+0x1b0>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d103      	bne.n	8007990 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4a24      	ldr	r2, [pc, #144]	@ (8007a1c <UART_Start_Receive_IT+0x23c>)
 800798c:	675a      	str	r2, [r3, #116]	@ 0x74
 800798e:	e002      	b.n	8007996 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4a23      	ldr	r2, [pc, #140]	@ (8007a20 <UART_Start_Receive_IT+0x240>)
 8007994:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d019      	beq.n	80079d2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a6:	e853 3f00 	ldrex	r3, [r3]
 80079aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ae:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80079b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	461a      	mov	r2, r3
 80079ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80079be:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80079c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80079ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e6      	bne.n	800799e <UART_Start_Receive_IT+0x1be>
 80079d0:	e018      	b.n	8007a04 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	e853 3f00 	ldrex	r3, [r3]
 80079de:	613b      	str	r3, [r7, #16]
   return(result);
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f043 0320 	orr.w	r3, r3, #32
 80079e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	461a      	mov	r2, r3
 80079ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079f0:	623b      	str	r3, [r7, #32]
 80079f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f4:	69f9      	ldr	r1, [r7, #28]
 80079f6:	6a3a      	ldr	r2, [r7, #32]
 80079f8:	e841 2300 	strex	r3, r2, [r1]
 80079fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1e6      	bne.n	80079d2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	378c      	adds	r7, #140	@ 0x8c
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	08008241 	.word	0x08008241
 8007a18:	08007edd 	.word	0x08007edd
 8007a1c:	08007d25 	.word	0x08007d25
 8007a20:	08007b6d 	.word	0x08007b6d

08007a24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b095      	sub	sp, #84	@ 0x54
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a34:	e853 3f00 	ldrex	r3, [r3]
 8007a38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a52:	e841 2300 	strex	r3, r2, [r1]
 8007a56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1e6      	bne.n	8007a2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3308      	adds	r3, #8
 8007a64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	e853 3f00 	ldrex	r3, [r3]
 8007a6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a6e:	69fa      	ldr	r2, [r7, #28]
 8007a70:	4b1e      	ldr	r3, [pc, #120]	@ (8007aec <UART_EndRxTransfer+0xc8>)
 8007a72:	4013      	ands	r3, r2
 8007a74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a86:	e841 2300 	strex	r3, r2, [r1]
 8007a8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1e5      	bne.n	8007a5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d118      	bne.n	8007acc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	e853 3f00 	ldrex	r3, [r3]
 8007aa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	f023 0310 	bic.w	r3, r3, #16
 8007aae:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ab8:	61bb      	str	r3, [r7, #24]
 8007aba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	6979      	ldr	r1, [r7, #20]
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e6      	bne.n	8007a9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2220      	movs	r2, #32
 8007ad0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007ae0:	bf00      	nop
 8007ae2:	3754      	adds	r7, #84	@ 0x54
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	effffffe 	.word	0xeffffffe

08007af0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007afc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f7fe fe2e 	bl	8006768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b0c:	bf00      	nop
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b088      	sub	sp, #32
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	e853 3f00 	ldrex	r3, [r3]
 8007b28:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b30:	61fb      	str	r3, [r7, #28]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	461a      	mov	r2, r3
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	61bb      	str	r3, [r7, #24]
 8007b3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	6979      	ldr	r1, [r7, #20]
 8007b40:	69ba      	ldr	r2, [r7, #24]
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	613b      	str	r3, [r7, #16]
   return(result);
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1e6      	bne.n	8007b1c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f7fe fdf9 	bl	8006754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b62:	bf00      	nop
 8007b64:	3720      	adds	r7, #32
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
	...

08007b6c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b09c      	sub	sp, #112	@ 0x70
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007b7a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b84:	2b22      	cmp	r3, #34	@ 0x22
 8007b86:	f040 80be 	bne.w	8007d06 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b90:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007b98:	b2d9      	uxtb	r1, r3
 8007b9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ba4:	400a      	ands	r2, r1
 8007ba6:	b2d2      	uxtb	r2, r2
 8007ba8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bae:	1c5a      	adds	r2, r3, #1
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f040 80a1 	bne.w	8007d16 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007be2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007be4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007be8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007bf2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007bf4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007bf8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1e6      	bne.n	8007bd4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c18:	f023 0301 	bic.w	r3, r3, #1
 8007c1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3308      	adds	r3, #8
 8007c24:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007c26:	647a      	str	r2, [r7, #68]	@ 0x44
 8007c28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e5      	bne.n	8007c06 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a33      	ldr	r2, [pc, #204]	@ (8007d20 <UART_RxISR_8BIT+0x1b4>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d01f      	beq.n	8007c98 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d018      	beq.n	8007c98 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6e:	e853 3f00 	ldrex	r3, [r3]
 8007c72:	623b      	str	r3, [r7, #32]
   return(result);
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007c7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	461a      	mov	r2, r3
 8007c82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c84:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c8c:	e841 2300 	strex	r3, r2, [r1]
 8007c90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1e6      	bne.n	8007c66 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d12e      	bne.n	8007cfe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	e853 3f00 	ldrex	r3, [r3]
 8007cb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f023 0310 	bic.w	r3, r3, #16
 8007cba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cc4:	61fb      	str	r3, [r7, #28]
 8007cc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc8:	69b9      	ldr	r1, [r7, #24]
 8007cca:	69fa      	ldr	r2, [r7, #28]
 8007ccc:	e841 2300 	strex	r3, r2, [r1]
 8007cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e6      	bne.n	8007ca6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	f003 0310 	and.w	r3, r3, #16
 8007ce2:	2b10      	cmp	r3, #16
 8007ce4:	d103      	bne.n	8007cee <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2210      	movs	r2, #16
 8007cec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7fe fd40 	bl	800677c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cfc:	e00b      	b.n	8007d16 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7f9 f9ec 	bl	80010dc <HAL_UART_RxCpltCallback>
}
 8007d04:	e007      	b.n	8007d16 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	699a      	ldr	r2, [r3, #24]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f042 0208 	orr.w	r2, r2, #8
 8007d14:	619a      	str	r2, [r3, #24]
}
 8007d16:	bf00      	nop
 8007d18:	3770      	adds	r7, #112	@ 0x70
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	58000c00 	.word	0x58000c00

08007d24 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b09c      	sub	sp, #112	@ 0x70
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007d32:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d3c:	2b22      	cmp	r3, #34	@ 0x22
 8007d3e:	f040 80be 	bne.w	8007ebe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d50:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d52:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007d56:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d60:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d66:	1c9a      	adds	r2, r3, #2
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	3b01      	subs	r3, #1
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f040 80a1 	bne.w	8007ece <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d94:	e853 3f00 	ldrex	r3, [r3]
 8007d98:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007da0:	667b      	str	r3, [r7, #100]	@ 0x64
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007daa:	657b      	str	r3, [r7, #84]	@ 0x54
 8007dac:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007db0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007db2:	e841 2300 	strex	r3, r2, [r1]
 8007db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007db8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1e6      	bne.n	8007d8c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3308      	adds	r3, #8
 8007dc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc8:	e853 3f00 	ldrex	r3, [r3]
 8007dcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd0:	f023 0301 	bic.w	r3, r3, #1
 8007dd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3308      	adds	r3, #8
 8007ddc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007dde:	643a      	str	r2, [r7, #64]	@ 0x40
 8007de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007de4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007de6:	e841 2300 	strex	r3, r2, [r1]
 8007dea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1e5      	bne.n	8007dbe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2220      	movs	r2, #32
 8007df6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a33      	ldr	r2, [pc, #204]	@ (8007ed8 <UART_RxISR_16BIT+0x1b4>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d01f      	beq.n	8007e50 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d018      	beq.n	8007e50 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	e853 3f00 	ldrex	r3, [r3]
 8007e2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e3e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e44:	e841 2300 	strex	r3, r2, [r1]
 8007e48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1e6      	bne.n	8007e1e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d12e      	bne.n	8007eb6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	e853 3f00 	ldrex	r3, [r3]
 8007e6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	f023 0310 	bic.w	r3, r3, #16
 8007e72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	461a      	mov	r2, r3
 8007e7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e7c:	61bb      	str	r3, [r7, #24]
 8007e7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e80:	6979      	ldr	r1, [r7, #20]
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	e841 2300 	strex	r3, r2, [r1]
 8007e88:	613b      	str	r3, [r7, #16]
   return(result);
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1e6      	bne.n	8007e5e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	f003 0310 	and.w	r3, r3, #16
 8007e9a:	2b10      	cmp	r3, #16
 8007e9c:	d103      	bne.n	8007ea6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2210      	movs	r2, #16
 8007ea4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7fe fc64 	bl	800677c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007eb4:	e00b      	b.n	8007ece <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7f9 f910 	bl	80010dc <HAL_UART_RxCpltCallback>
}
 8007ebc:	e007      	b.n	8007ece <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	699a      	ldr	r2, [r3, #24]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f042 0208 	orr.w	r2, r2, #8
 8007ecc:	619a      	str	r2, [r3, #24]
}
 8007ece:	bf00      	nop
 8007ed0:	3770      	adds	r7, #112	@ 0x70
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	58000c00 	.word	0x58000c00

08007edc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b0ac      	sub	sp, #176	@ 0xb0
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007eea:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	69db      	ldr	r3, [r3, #28]
 8007ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f12:	2b22      	cmp	r3, #34	@ 0x22
 8007f14:	f040 8181 	bne.w	800821a <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007f1e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f22:	e124      	b.n	800816e <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f2a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f2e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007f32:	b2d9      	uxtb	r1, r3
 8007f34:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f3e:	400a      	ands	r2, r1
 8007f40:	b2d2      	uxtb	r2, r2
 8007f42:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f48:	1c5a      	adds	r2, r3, #1
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	3b01      	subs	r3, #1
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007f6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f6e:	f003 0307 	and.w	r3, r3, #7
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d053      	beq.n	800801e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d011      	beq.n	8007fa6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007f82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00b      	beq.n	8007fa6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2201      	movs	r2, #1
 8007f94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f9c:	f043 0201 	orr.w	r2, r3, #1
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007faa:	f003 0302 	and.w	r3, r3, #2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d011      	beq.n	8007fd6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007fb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00b      	beq.n	8007fd6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fcc:	f043 0204 	orr.w	r2, r3, #4
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fda:	f003 0304 	and.w	r3, r3, #4
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d011      	beq.n	8008006 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007fe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00b      	beq.n	8008006 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2204      	movs	r2, #4
 8007ff4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ffc:	f043 0202 	orr.w	r2, r3, #2
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800800c:	2b00      	cmp	r3, #0
 800800e:	d006      	beq.n	800801e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7fe fba9 	bl	8006768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008024:	b29b      	uxth	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	f040 80a1 	bne.w	800816e <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008032:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008034:	e853 3f00 	ldrex	r3, [r3]
 8008038:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800803a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800803c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008040:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800804e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008050:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008052:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008054:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008056:	e841 2300 	strex	r3, r2, [r1]
 800805a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800805c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1e4      	bne.n	800802c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3308      	adds	r3, #8
 8008068:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800806c:	e853 3f00 	ldrex	r3, [r3]
 8008070:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008072:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008074:	4b6f      	ldr	r3, [pc, #444]	@ (8008234 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008076:	4013      	ands	r3, r2
 8008078:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	3308      	adds	r3, #8
 8008082:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008086:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008088:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800808c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800808e:	e841 2300 	strex	r3, r2, [r1]
 8008092:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008094:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e3      	bne.n	8008062 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2220      	movs	r2, #32
 800809e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a61      	ldr	r2, [pc, #388]	@ (8008238 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d021      	beq.n	80080fc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d01a      	beq.n	80080fc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080ce:	e853 3f00 	ldrex	r3, [r3]
 80080d2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80080d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80080da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80080e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80080ea:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80080ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80080f0:	e841 2300 	strex	r3, r2, [r1]
 80080f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80080f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e4      	bne.n	80080c6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008100:	2b01      	cmp	r3, #1
 8008102:	d130      	bne.n	8008166 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008112:	e853 3f00 	ldrex	r3, [r3]
 8008116:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811a:	f023 0310 	bic.w	r3, r3, #16
 800811e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800812c:	643b      	str	r3, [r7, #64]	@ 0x40
 800812e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008130:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008132:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008134:	e841 2300 	strex	r3, r2, [r1]
 8008138:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800813a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1e4      	bne.n	800810a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	f003 0310 	and.w	r3, r3, #16
 800814a:	2b10      	cmp	r3, #16
 800814c:	d103      	bne.n	8008156 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2210      	movs	r2, #16
 8008154:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7fe fb0c 	bl	800677c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8008164:	e00e      	b.n	8008184 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7f8 ffb8 	bl	80010dc <HAL_UART_RxCpltCallback>
        break;
 800816c:	e00a      	b.n	8008184 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800816e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008172:	2b00      	cmp	r3, #0
 8008174:	d006      	beq.n	8008184 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 8008176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800817a:	f003 0320 	and.w	r3, r3, #32
 800817e:	2b00      	cmp	r3, #0
 8008180:	f47f aed0 	bne.w	8007f24 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800818a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800818e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008192:	2b00      	cmp	r3, #0
 8008194:	d049      	beq.n	800822a <UART_RxISR_8BIT_FIFOEN+0x34e>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800819c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d242      	bcs.n	800822a <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3308      	adds	r3, #8
 80081aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ac:	6a3b      	ldr	r3, [r7, #32]
 80081ae:	e853 3f00 	ldrex	r3, [r3]
 80081b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3308      	adds	r3, #8
 80081c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80081c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081d0:	e841 2300 	strex	r3, r2, [r1]
 80081d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1e3      	bne.n	80081a4 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a17      	ldr	r2, [pc, #92]	@ (800823c <UART_RxISR_8BIT_FIFOEN+0x360>)
 80081e0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	e853 3f00 	ldrex	r3, [r3]
 80081ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	f043 0320 	orr.w	r3, r3, #32
 80081f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008204:	61bb      	str	r3, [r7, #24]
 8008206:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008208:	6979      	ldr	r1, [r7, #20]
 800820a:	69ba      	ldr	r2, [r7, #24]
 800820c:	e841 2300 	strex	r3, r2, [r1]
 8008210:	613b      	str	r3, [r7, #16]
   return(result);
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1e4      	bne.n	80081e2 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008218:	e007      	b.n	800822a <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	699a      	ldr	r2, [r3, #24]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f042 0208 	orr.w	r2, r2, #8
 8008228:	619a      	str	r2, [r3, #24]
}
 800822a:	bf00      	nop
 800822c:	37b0      	adds	r7, #176	@ 0xb0
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	effffffe 	.word	0xeffffffe
 8008238:	58000c00 	.word	0x58000c00
 800823c:	08007b6d 	.word	0x08007b6d

08008240 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b0ae      	sub	sp, #184	@ 0xb8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800824e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008276:	2b22      	cmp	r3, #34	@ 0x22
 8008278:	f040 8185 	bne.w	8008586 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008282:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008286:	e128      	b.n	80084da <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800828e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008296:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800829a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800829e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80082a2:	4013      	ands	r3, r2
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082b0:	1c9a      	adds	r2, r3, #2
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082bc:	b29b      	uxth	r3, r3
 80082be:	3b01      	subs	r3, #1
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80082d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80082d6:	f003 0307 	and.w	r3, r3, #7
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d053      	beq.n	8008386 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d011      	beq.n	800830e <UART_RxISR_16BIT_FIFOEN+0xce>
 80082ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00b      	beq.n	800830e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2201      	movs	r2, #1
 80082fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008304:	f043 0201 	orr.w	r2, r3, #1
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800830e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b00      	cmp	r3, #0
 8008318:	d011      	beq.n	800833e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800831a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00b      	beq.n	800833e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2202      	movs	r2, #2
 800832c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008334:	f043 0204 	orr.w	r2, r3, #4
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800833e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008342:	f003 0304 	and.w	r3, r3, #4
 8008346:	2b00      	cmp	r3, #0
 8008348:	d011      	beq.n	800836e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800834a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00b      	beq.n	800836e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2204      	movs	r2, #4
 800835c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008364:	f043 0202 	orr.w	r2, r3, #2
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008374:	2b00      	cmp	r3, #0
 8008376:	d006      	beq.n	8008386 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7fe f9f5 	bl	8006768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800838c:	b29b      	uxth	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	f040 80a3 	bne.w	80084da <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800839c:	e853 3f00 	ldrex	r3, [r3]
 80083a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80083a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80083a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	461a      	mov	r2, r3
 80083b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80083b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80083be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80083c2:	e841 2300 	strex	r3, r2, [r1]
 80083c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80083c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1e2      	bne.n	8008394 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3308      	adds	r3, #8
 80083d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80083d8:	e853 3f00 	ldrex	r3, [r3]
 80083dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80083de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80083e0:	4b6f      	ldr	r3, [pc, #444]	@ (80085a0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80083e2:	4013      	ands	r3, r2
 80083e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	3308      	adds	r3, #8
 80083ee:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80083f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80083f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80083f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80083fa:	e841 2300 	strex	r3, r2, [r1]
 80083fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008400:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1e3      	bne.n	80083ce <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2220      	movs	r2, #32
 800840a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a61      	ldr	r2, [pc, #388]	@ (80085a4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d021      	beq.n	8008468 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800842e:	2b00      	cmp	r3, #0
 8008430:	d01a      	beq.n	8008468 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008438:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800843a:	e853 3f00 	ldrex	r3, [r3]
 800843e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008440:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008442:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008446:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008454:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008456:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008458:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800845a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800845c:	e841 2300 	strex	r3, r2, [r1]
 8008460:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008462:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1e4      	bne.n	8008432 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800846c:	2b01      	cmp	r3, #1
 800846e:	d130      	bne.n	80084d2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847e:	e853 3f00 	ldrex	r3, [r3]
 8008482:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008486:	f023 0310 	bic.w	r3, r3, #16
 800848a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	461a      	mov	r2, r3
 8008494:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008498:	647b      	str	r3, [r7, #68]	@ 0x44
 800849a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800849e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084a0:	e841 2300 	strex	r3, r2, [r1]
 80084a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1e4      	bne.n	8008476 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	69db      	ldr	r3, [r3, #28]
 80084b2:	f003 0310 	and.w	r3, r3, #16
 80084b6:	2b10      	cmp	r3, #16
 80084b8:	d103      	bne.n	80084c2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2210      	movs	r2, #16
 80084c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80084c8:	4619      	mov	r1, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f7fe f956 	bl	800677c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80084d0:	e00e      	b.n	80084f0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7f8 fe02 	bl	80010dc <HAL_UART_RxCpltCallback>
        break;
 80084d8:	e00a      	b.n	80084f0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80084da:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d006      	beq.n	80084f0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 80084e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80084e6:	f003 0320 	and.w	r3, r3, #32
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f47f aecc 	bne.w	8008288 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084f6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80084fa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d049      	beq.n	8008596 <UART_RxISR_16BIT_FIFOEN+0x356>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008508:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800850c:	429a      	cmp	r2, r3
 800850e:	d242      	bcs.n	8008596 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3308      	adds	r3, #8
 8008516:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851a:	e853 3f00 	ldrex	r3, [r3]
 800851e:	623b      	str	r3, [r7, #32]
   return(result);
 8008520:	6a3b      	ldr	r3, [r7, #32]
 8008522:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008526:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3308      	adds	r3, #8
 8008530:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008534:	633a      	str	r2, [r7, #48]	@ 0x30
 8008536:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008538:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800853a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800853c:	e841 2300 	strex	r3, r2, [r1]
 8008540:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1e3      	bne.n	8008510 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a17      	ldr	r2, [pc, #92]	@ (80085a8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800854c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	e853 3f00 	ldrex	r3, [r3]
 800855a:	60fb      	str	r3, [r7, #12]
   return(result);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f043 0320 	orr.w	r3, r3, #32
 8008562:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008570:	61fb      	str	r3, [r7, #28]
 8008572:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008574:	69b9      	ldr	r1, [r7, #24]
 8008576:	69fa      	ldr	r2, [r7, #28]
 8008578:	e841 2300 	strex	r3, r2, [r1]
 800857c:	617b      	str	r3, [r7, #20]
   return(result);
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1e4      	bne.n	800854e <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008584:	e007      	b.n	8008596 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	699a      	ldr	r2, [r3, #24]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f042 0208 	orr.w	r2, r2, #8
 8008594:	619a      	str	r2, [r3, #24]
}
 8008596:	bf00      	nop
 8008598:	37b8      	adds	r7, #184	@ 0xb8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	effffffe 	.word	0xeffffffe
 80085a4:	58000c00 	.word	0x58000c00
 80085a8:	08007d25 	.word	0x08007d25

080085ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d101      	bne.n	80085fe <HAL_UARTEx_EnableFifoMode+0x16>
 80085fa:	2302      	movs	r3, #2
 80085fc:	e02b      	b.n	8008656 <HAL_UARTEx_EnableFifoMode+0x6e>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2224      	movs	r2, #36	@ 0x24
 800860a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f022 0201 	bic.w	r2, r2, #1
 8008624:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800862c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8008634:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f8c2 	bl	80087c8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2220      	movs	r2, #32
 8008648:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800865e:	b480      	push	{r7}
 8008660:	b085      	sub	sp, #20
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800866c:	2b01      	cmp	r3, #1
 800866e:	d101      	bne.n	8008674 <HAL_UARTEx_DisableFifoMode+0x16>
 8008670:	2302      	movs	r3, #2
 8008672:	e027      	b.n	80086c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2224      	movs	r2, #36	@ 0x24
 8008680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f022 0201 	bic.w	r2, r2, #1
 800869a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80086a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2220      	movs	r2, #32
 80086b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d101      	bne.n	80086e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80086e4:	2302      	movs	r3, #2
 80086e6:	e02d      	b.n	8008744 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2224      	movs	r2, #36	@ 0x24
 80086f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f022 0201 	bic.w	r2, r2, #1
 800870e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	430a      	orrs	r2, r1
 8008722:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f84f 	bl	80087c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2220      	movs	r2, #32
 8008736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800875c:	2b01      	cmp	r3, #1
 800875e:	d101      	bne.n	8008764 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008760:	2302      	movs	r3, #2
 8008762:	e02d      	b.n	80087c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2224      	movs	r2, #36	@ 0x24
 8008770:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 0201 	bic.w	r2, r2, #1
 800878a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	683a      	ldr	r2, [r7, #0]
 800879c:	430a      	orrs	r2, r1
 800879e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f811 	bl	80087c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2220      	movs	r2, #32
 80087b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d108      	bne.n	80087ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087e8:	e031      	b.n	800884e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087ea:	2310      	movs	r3, #16
 80087ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087ee:	2310      	movs	r3, #16
 80087f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	0e5b      	lsrs	r3, r3, #25
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	f003 0307 	and.w	r3, r3, #7
 8008800:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	0f5b      	lsrs	r3, r3, #29
 800880a:	b2db      	uxtb	r3, r3
 800880c:	f003 0307 	and.w	r3, r3, #7
 8008810:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	7b3a      	ldrb	r2, [r7, #12]
 8008816:	4911      	ldr	r1, [pc, #68]	@ (800885c <UARTEx_SetNbDataToProcess+0x94>)
 8008818:	5c8a      	ldrb	r2, [r1, r2]
 800881a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800881e:	7b3a      	ldrb	r2, [r7, #12]
 8008820:	490f      	ldr	r1, [pc, #60]	@ (8008860 <UARTEx_SetNbDataToProcess+0x98>)
 8008822:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008824:	fb93 f3f2 	sdiv	r3, r3, r2
 8008828:	b29a      	uxth	r2, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008830:	7bfb      	ldrb	r3, [r7, #15]
 8008832:	7b7a      	ldrb	r2, [r7, #13]
 8008834:	4909      	ldr	r1, [pc, #36]	@ (800885c <UARTEx_SetNbDataToProcess+0x94>)
 8008836:	5c8a      	ldrb	r2, [r1, r2]
 8008838:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800883c:	7b7a      	ldrb	r2, [r7, #13]
 800883e:	4908      	ldr	r1, [pc, #32]	@ (8008860 <UARTEx_SetNbDataToProcess+0x98>)
 8008840:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008842:	fb93 f3f2 	sdiv	r3, r3, r2
 8008846:	b29a      	uxth	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800884e:	bf00      	nop
 8008850:	3714      	adds	r7, #20
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	0800b54c 	.word	0x0800b54c
 8008860:	0800b554 	.word	0x0800b554

08008864 <atof>:
 8008864:	2100      	movs	r1, #0
 8008866:	f000 bdb5 	b.w	80093d4 <strtod>

0800886a <sulp>:
 800886a:	b570      	push	{r4, r5, r6, lr}
 800886c:	4604      	mov	r4, r0
 800886e:	460d      	mov	r5, r1
 8008870:	4616      	mov	r6, r2
 8008872:	ec45 4b10 	vmov	d0, r4, r5
 8008876:	f001 ff13 	bl	800a6a0 <__ulp>
 800887a:	b17e      	cbz	r6, 800889c <sulp+0x32>
 800887c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008880:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008884:	2b00      	cmp	r3, #0
 8008886:	dd09      	ble.n	800889c <sulp+0x32>
 8008888:	051b      	lsls	r3, r3, #20
 800888a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800888e:	2000      	movs	r0, #0
 8008890:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8008894:	ec41 0b17 	vmov	d7, r0, r1
 8008898:	ee20 0b07 	vmul.f64	d0, d0, d7
 800889c:	bd70      	pop	{r4, r5, r6, pc}
	...

080088a0 <_strtod_l>:
 80088a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a4:	ed2d 8b0a 	vpush	{d8-d12}
 80088a8:	b097      	sub	sp, #92	@ 0x5c
 80088aa:	4688      	mov	r8, r1
 80088ac:	920e      	str	r2, [sp, #56]	@ 0x38
 80088ae:	2200      	movs	r2, #0
 80088b0:	9212      	str	r2, [sp, #72]	@ 0x48
 80088b2:	9005      	str	r0, [sp, #20]
 80088b4:	f04f 0a00 	mov.w	sl, #0
 80088b8:	f04f 0b00 	mov.w	fp, #0
 80088bc:	460a      	mov	r2, r1
 80088be:	9211      	str	r2, [sp, #68]	@ 0x44
 80088c0:	7811      	ldrb	r1, [r2, #0]
 80088c2:	292b      	cmp	r1, #43	@ 0x2b
 80088c4:	d04c      	beq.n	8008960 <_strtod_l+0xc0>
 80088c6:	d839      	bhi.n	800893c <_strtod_l+0x9c>
 80088c8:	290d      	cmp	r1, #13
 80088ca:	d833      	bhi.n	8008934 <_strtod_l+0x94>
 80088cc:	2908      	cmp	r1, #8
 80088ce:	d833      	bhi.n	8008938 <_strtod_l+0x98>
 80088d0:	2900      	cmp	r1, #0
 80088d2:	d03c      	beq.n	800894e <_strtod_l+0xae>
 80088d4:	2200      	movs	r2, #0
 80088d6:	9208      	str	r2, [sp, #32]
 80088d8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80088da:	782a      	ldrb	r2, [r5, #0]
 80088dc:	2a30      	cmp	r2, #48	@ 0x30
 80088de:	f040 80b7 	bne.w	8008a50 <_strtod_l+0x1b0>
 80088e2:	786a      	ldrb	r2, [r5, #1]
 80088e4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80088e8:	2a58      	cmp	r2, #88	@ 0x58
 80088ea:	d170      	bne.n	80089ce <_strtod_l+0x12e>
 80088ec:	9302      	str	r3, [sp, #8]
 80088ee:	9b08      	ldr	r3, [sp, #32]
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	ab12      	add	r3, sp, #72	@ 0x48
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	4a90      	ldr	r2, [pc, #576]	@ (8008b38 <_strtod_l+0x298>)
 80088f8:	9805      	ldr	r0, [sp, #20]
 80088fa:	ab13      	add	r3, sp, #76	@ 0x4c
 80088fc:	a911      	add	r1, sp, #68	@ 0x44
 80088fe:	f000 ffd1 	bl	80098a4 <__gethex>
 8008902:	f010 060f 	ands.w	r6, r0, #15
 8008906:	4604      	mov	r4, r0
 8008908:	d005      	beq.n	8008916 <_strtod_l+0x76>
 800890a:	2e06      	cmp	r6, #6
 800890c:	d12a      	bne.n	8008964 <_strtod_l+0xc4>
 800890e:	3501      	adds	r5, #1
 8008910:	2300      	movs	r3, #0
 8008912:	9511      	str	r5, [sp, #68]	@ 0x44
 8008914:	9308      	str	r3, [sp, #32]
 8008916:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008918:	2b00      	cmp	r3, #0
 800891a:	f040 8537 	bne.w	800938c <_strtod_l+0xaec>
 800891e:	9b08      	ldr	r3, [sp, #32]
 8008920:	ec4b ab10 	vmov	d0, sl, fp
 8008924:	b1cb      	cbz	r3, 800895a <_strtod_l+0xba>
 8008926:	eeb1 0b40 	vneg.f64	d0, d0
 800892a:	b017      	add	sp, #92	@ 0x5c
 800892c:	ecbd 8b0a 	vpop	{d8-d12}
 8008930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008934:	2920      	cmp	r1, #32
 8008936:	d1cd      	bne.n	80088d4 <_strtod_l+0x34>
 8008938:	3201      	adds	r2, #1
 800893a:	e7c0      	b.n	80088be <_strtod_l+0x1e>
 800893c:	292d      	cmp	r1, #45	@ 0x2d
 800893e:	d1c9      	bne.n	80088d4 <_strtod_l+0x34>
 8008940:	2101      	movs	r1, #1
 8008942:	9108      	str	r1, [sp, #32]
 8008944:	1c51      	adds	r1, r2, #1
 8008946:	9111      	str	r1, [sp, #68]	@ 0x44
 8008948:	7852      	ldrb	r2, [r2, #1]
 800894a:	2a00      	cmp	r2, #0
 800894c:	d1c4      	bne.n	80088d8 <_strtod_l+0x38>
 800894e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008950:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8008954:	2b00      	cmp	r3, #0
 8008956:	f040 8517 	bne.w	8009388 <_strtod_l+0xae8>
 800895a:	ec4b ab10 	vmov	d0, sl, fp
 800895e:	e7e4      	b.n	800892a <_strtod_l+0x8a>
 8008960:	2100      	movs	r1, #0
 8008962:	e7ee      	b.n	8008942 <_strtod_l+0xa2>
 8008964:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008966:	b13a      	cbz	r2, 8008978 <_strtod_l+0xd8>
 8008968:	2135      	movs	r1, #53	@ 0x35
 800896a:	a814      	add	r0, sp, #80	@ 0x50
 800896c:	f001 ff8f 	bl	800a88e <__copybits>
 8008970:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008972:	9805      	ldr	r0, [sp, #20]
 8008974:	f001 fb68 	bl	800a048 <_Bfree>
 8008978:	1e73      	subs	r3, r6, #1
 800897a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800897c:	2b04      	cmp	r3, #4
 800897e:	d806      	bhi.n	800898e <_strtod_l+0xee>
 8008980:	e8df f003 	tbb	[pc, r3]
 8008984:	201d0314 	.word	0x201d0314
 8008988:	14          	.byte	0x14
 8008989:	00          	.byte	0x00
 800898a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800898e:	05e3      	lsls	r3, r4, #23
 8008990:	bf48      	it	mi
 8008992:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008996:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800899a:	0d1b      	lsrs	r3, r3, #20
 800899c:	051b      	lsls	r3, r3, #20
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1b9      	bne.n	8008916 <_strtod_l+0x76>
 80089a2:	f000 fe89 	bl	80096b8 <__errno>
 80089a6:	2322      	movs	r3, #34	@ 0x22
 80089a8:	6003      	str	r3, [r0, #0]
 80089aa:	e7b4      	b.n	8008916 <_strtod_l+0x76>
 80089ac:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80089b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80089b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80089b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80089bc:	e7e7      	b.n	800898e <_strtod_l+0xee>
 80089be:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008b40 <_strtod_l+0x2a0>
 80089c2:	e7e4      	b.n	800898e <_strtod_l+0xee>
 80089c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80089c8:	f04f 3aff 	mov.w	sl, #4294967295
 80089cc:	e7df      	b.n	800898e <_strtod_l+0xee>
 80089ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80089d0:	1c5a      	adds	r2, r3, #1
 80089d2:	9211      	str	r2, [sp, #68]	@ 0x44
 80089d4:	785b      	ldrb	r3, [r3, #1]
 80089d6:	2b30      	cmp	r3, #48	@ 0x30
 80089d8:	d0f9      	beq.n	80089ce <_strtod_l+0x12e>
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d09b      	beq.n	8008916 <_strtod_l+0x76>
 80089de:	2301      	movs	r3, #1
 80089e0:	9307      	str	r3, [sp, #28]
 80089e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80089e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80089e6:	2300      	movs	r3, #0
 80089e8:	9306      	str	r3, [sp, #24]
 80089ea:	4699      	mov	r9, r3
 80089ec:	461d      	mov	r5, r3
 80089ee:	220a      	movs	r2, #10
 80089f0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80089f2:	7804      	ldrb	r4, [r0, #0]
 80089f4:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80089f8:	b2d9      	uxtb	r1, r3
 80089fa:	2909      	cmp	r1, #9
 80089fc:	d92a      	bls.n	8008a54 <_strtod_l+0x1b4>
 80089fe:	494f      	ldr	r1, [pc, #316]	@ (8008b3c <_strtod_l+0x29c>)
 8008a00:	2201      	movs	r2, #1
 8008a02:	f000 fe00 	bl	8009606 <strncmp>
 8008a06:	b398      	cbz	r0, 8008a70 <_strtod_l+0x1d0>
 8008a08:	2000      	movs	r0, #0
 8008a0a:	4622      	mov	r2, r4
 8008a0c:	462b      	mov	r3, r5
 8008a0e:	4607      	mov	r7, r0
 8008a10:	4601      	mov	r1, r0
 8008a12:	2a65      	cmp	r2, #101	@ 0x65
 8008a14:	d001      	beq.n	8008a1a <_strtod_l+0x17a>
 8008a16:	2a45      	cmp	r2, #69	@ 0x45
 8008a18:	d118      	bne.n	8008a4c <_strtod_l+0x1ac>
 8008a1a:	b91b      	cbnz	r3, 8008a24 <_strtod_l+0x184>
 8008a1c:	9b07      	ldr	r3, [sp, #28]
 8008a1e:	4303      	orrs	r3, r0
 8008a20:	d095      	beq.n	800894e <_strtod_l+0xae>
 8008a22:	2300      	movs	r3, #0
 8008a24:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8008a28:	f108 0201 	add.w	r2, r8, #1
 8008a2c:	9211      	str	r2, [sp, #68]	@ 0x44
 8008a2e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008a32:	2a2b      	cmp	r2, #43	@ 0x2b
 8008a34:	d074      	beq.n	8008b20 <_strtod_l+0x280>
 8008a36:	2a2d      	cmp	r2, #45	@ 0x2d
 8008a38:	d07a      	beq.n	8008b30 <_strtod_l+0x290>
 8008a3a:	f04f 0e00 	mov.w	lr, #0
 8008a3e:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8008a42:	2c09      	cmp	r4, #9
 8008a44:	f240 8082 	bls.w	8008b4c <_strtod_l+0x2ac>
 8008a48:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8008a4c:	2400      	movs	r4, #0
 8008a4e:	e09d      	b.n	8008b8c <_strtod_l+0x2ec>
 8008a50:	2300      	movs	r3, #0
 8008a52:	e7c5      	b.n	80089e0 <_strtod_l+0x140>
 8008a54:	2d08      	cmp	r5, #8
 8008a56:	bfc8      	it	gt
 8008a58:	9906      	ldrgt	r1, [sp, #24]
 8008a5a:	f100 0001 	add.w	r0, r0, #1
 8008a5e:	bfca      	itet	gt
 8008a60:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008a64:	fb02 3909 	mlale	r9, r2, r9, r3
 8008a68:	9306      	strgt	r3, [sp, #24]
 8008a6a:	3501      	adds	r5, #1
 8008a6c:	9011      	str	r0, [sp, #68]	@ 0x44
 8008a6e:	e7bf      	b.n	80089f0 <_strtod_l+0x150>
 8008a70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008a72:	1c5a      	adds	r2, r3, #1
 8008a74:	9211      	str	r2, [sp, #68]	@ 0x44
 8008a76:	785a      	ldrb	r2, [r3, #1]
 8008a78:	b3bd      	cbz	r5, 8008aea <_strtod_l+0x24a>
 8008a7a:	4607      	mov	r7, r0
 8008a7c:	462b      	mov	r3, r5
 8008a7e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008a82:	2909      	cmp	r1, #9
 8008a84:	d912      	bls.n	8008aac <_strtod_l+0x20c>
 8008a86:	2101      	movs	r1, #1
 8008a88:	e7c3      	b.n	8008a12 <_strtod_l+0x172>
 8008a8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008a8c:	1c5a      	adds	r2, r3, #1
 8008a8e:	9211      	str	r2, [sp, #68]	@ 0x44
 8008a90:	785a      	ldrb	r2, [r3, #1]
 8008a92:	3001      	adds	r0, #1
 8008a94:	2a30      	cmp	r2, #48	@ 0x30
 8008a96:	d0f8      	beq.n	8008a8a <_strtod_l+0x1ea>
 8008a98:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008a9c:	2b08      	cmp	r3, #8
 8008a9e:	f200 847a 	bhi.w	8009396 <_strtod_l+0xaf6>
 8008aa2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008aa4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008aa6:	4607      	mov	r7, r0
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	3a30      	subs	r2, #48	@ 0x30
 8008aae:	f100 0101 	add.w	r1, r0, #1
 8008ab2:	d014      	beq.n	8008ade <_strtod_l+0x23e>
 8008ab4:	440f      	add	r7, r1
 8008ab6:	469c      	mov	ip, r3
 8008ab8:	f04f 0e0a 	mov.w	lr, #10
 8008abc:	f10c 0401 	add.w	r4, ip, #1
 8008ac0:	1ae6      	subs	r6, r4, r3
 8008ac2:	42b1      	cmp	r1, r6
 8008ac4:	dc13      	bgt.n	8008aee <_strtod_l+0x24e>
 8008ac6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008aca:	1819      	adds	r1, r3, r0
 8008acc:	2908      	cmp	r1, #8
 8008ace:	f103 0301 	add.w	r3, r3, #1
 8008ad2:	4403      	add	r3, r0
 8008ad4:	dc19      	bgt.n	8008b0a <_strtod_l+0x26a>
 8008ad6:	210a      	movs	r1, #10
 8008ad8:	fb01 2909 	mla	r9, r1, r9, r2
 8008adc:	2100      	movs	r1, #0
 8008ade:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008ae0:	1c50      	adds	r0, r2, #1
 8008ae2:	9011      	str	r0, [sp, #68]	@ 0x44
 8008ae4:	7852      	ldrb	r2, [r2, #1]
 8008ae6:	4608      	mov	r0, r1
 8008ae8:	e7c9      	b.n	8008a7e <_strtod_l+0x1de>
 8008aea:	4628      	mov	r0, r5
 8008aec:	e7d2      	b.n	8008a94 <_strtod_l+0x1f4>
 8008aee:	f1bc 0f08 	cmp.w	ip, #8
 8008af2:	dc03      	bgt.n	8008afc <_strtod_l+0x25c>
 8008af4:	fb0e f909 	mul.w	r9, lr, r9
 8008af8:	46a4      	mov	ip, r4
 8008afa:	e7df      	b.n	8008abc <_strtod_l+0x21c>
 8008afc:	2c10      	cmp	r4, #16
 8008afe:	bfde      	ittt	le
 8008b00:	9e06      	ldrle	r6, [sp, #24]
 8008b02:	fb0e f606 	mulle.w	r6, lr, r6
 8008b06:	9606      	strle	r6, [sp, #24]
 8008b08:	e7f6      	b.n	8008af8 <_strtod_l+0x258>
 8008b0a:	290f      	cmp	r1, #15
 8008b0c:	bfdf      	itttt	le
 8008b0e:	9806      	ldrle	r0, [sp, #24]
 8008b10:	210a      	movle	r1, #10
 8008b12:	fb01 2200 	mlale	r2, r1, r0, r2
 8008b16:	9206      	strle	r2, [sp, #24]
 8008b18:	e7e0      	b.n	8008adc <_strtod_l+0x23c>
 8008b1a:	2700      	movs	r7, #0
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	e77d      	b.n	8008a1c <_strtod_l+0x17c>
 8008b20:	f04f 0e00 	mov.w	lr, #0
 8008b24:	f108 0202 	add.w	r2, r8, #2
 8008b28:	9211      	str	r2, [sp, #68]	@ 0x44
 8008b2a:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008b2e:	e786      	b.n	8008a3e <_strtod_l+0x19e>
 8008b30:	f04f 0e01 	mov.w	lr, #1
 8008b34:	e7f6      	b.n	8008b24 <_strtod_l+0x284>
 8008b36:	bf00      	nop
 8008b38:	0800b6d8 	.word	0x0800b6d8
 8008b3c:	0800b55c 	.word	0x0800b55c
 8008b40:	7ff00000 	.word	0x7ff00000
 8008b44:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008b46:	1c54      	adds	r4, r2, #1
 8008b48:	9411      	str	r4, [sp, #68]	@ 0x44
 8008b4a:	7852      	ldrb	r2, [r2, #1]
 8008b4c:	2a30      	cmp	r2, #48	@ 0x30
 8008b4e:	d0f9      	beq.n	8008b44 <_strtod_l+0x2a4>
 8008b50:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8008b54:	2c08      	cmp	r4, #8
 8008b56:	f63f af79 	bhi.w	8008a4c <_strtod_l+0x1ac>
 8008b5a:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8008b5e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008b60:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b62:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008b64:	1c54      	adds	r4, r2, #1
 8008b66:	9411      	str	r4, [sp, #68]	@ 0x44
 8008b68:	7852      	ldrb	r2, [r2, #1]
 8008b6a:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8008b6e:	2e09      	cmp	r6, #9
 8008b70:	d937      	bls.n	8008be2 <_strtod_l+0x342>
 8008b72:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008b74:	1ba4      	subs	r4, r4, r6
 8008b76:	2c08      	cmp	r4, #8
 8008b78:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8008b7c:	dc02      	bgt.n	8008b84 <_strtod_l+0x2e4>
 8008b7e:	4564      	cmp	r4, ip
 8008b80:	bfa8      	it	ge
 8008b82:	4664      	movge	r4, ip
 8008b84:	f1be 0f00 	cmp.w	lr, #0
 8008b88:	d000      	beq.n	8008b8c <_strtod_l+0x2ec>
 8008b8a:	4264      	negs	r4, r4
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d14d      	bne.n	8008c2c <_strtod_l+0x38c>
 8008b90:	9b07      	ldr	r3, [sp, #28]
 8008b92:	4318      	orrs	r0, r3
 8008b94:	f47f aebf 	bne.w	8008916 <_strtod_l+0x76>
 8008b98:	2900      	cmp	r1, #0
 8008b9a:	f47f aed8 	bne.w	800894e <_strtod_l+0xae>
 8008b9e:	2a69      	cmp	r2, #105	@ 0x69
 8008ba0:	d027      	beq.n	8008bf2 <_strtod_l+0x352>
 8008ba2:	dc24      	bgt.n	8008bee <_strtod_l+0x34e>
 8008ba4:	2a49      	cmp	r2, #73	@ 0x49
 8008ba6:	d024      	beq.n	8008bf2 <_strtod_l+0x352>
 8008ba8:	2a4e      	cmp	r2, #78	@ 0x4e
 8008baa:	f47f aed0 	bne.w	800894e <_strtod_l+0xae>
 8008bae:	4997      	ldr	r1, [pc, #604]	@ (8008e0c <_strtod_l+0x56c>)
 8008bb0:	a811      	add	r0, sp, #68	@ 0x44
 8008bb2:	f001 f899 	bl	8009ce8 <__match>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	f43f aec9 	beq.w	800894e <_strtod_l+0xae>
 8008bbc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	2b28      	cmp	r3, #40	@ 0x28
 8008bc2:	d12d      	bne.n	8008c20 <_strtod_l+0x380>
 8008bc4:	4992      	ldr	r1, [pc, #584]	@ (8008e10 <_strtod_l+0x570>)
 8008bc6:	aa14      	add	r2, sp, #80	@ 0x50
 8008bc8:	a811      	add	r0, sp, #68	@ 0x44
 8008bca:	f001 f8a1 	bl	8009d10 <__hexnan>
 8008bce:	2805      	cmp	r0, #5
 8008bd0:	d126      	bne.n	8008c20 <_strtod_l+0x380>
 8008bd2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008bd4:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8008bd8:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008bdc:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008be0:	e699      	b.n	8008916 <_strtod_l+0x76>
 8008be2:	240a      	movs	r4, #10
 8008be4:	fb04 2c0c 	mla	ip, r4, ip, r2
 8008be8:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8008bec:	e7b9      	b.n	8008b62 <_strtod_l+0x2c2>
 8008bee:	2a6e      	cmp	r2, #110	@ 0x6e
 8008bf0:	e7db      	b.n	8008baa <_strtod_l+0x30a>
 8008bf2:	4988      	ldr	r1, [pc, #544]	@ (8008e14 <_strtod_l+0x574>)
 8008bf4:	a811      	add	r0, sp, #68	@ 0x44
 8008bf6:	f001 f877 	bl	8009ce8 <__match>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	f43f aea7 	beq.w	800894e <_strtod_l+0xae>
 8008c00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c02:	4985      	ldr	r1, [pc, #532]	@ (8008e18 <_strtod_l+0x578>)
 8008c04:	3b01      	subs	r3, #1
 8008c06:	a811      	add	r0, sp, #68	@ 0x44
 8008c08:	9311      	str	r3, [sp, #68]	@ 0x44
 8008c0a:	f001 f86d 	bl	8009ce8 <__match>
 8008c0e:	b910      	cbnz	r0, 8008c16 <_strtod_l+0x376>
 8008c10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c12:	3301      	adds	r3, #1
 8008c14:	9311      	str	r3, [sp, #68]	@ 0x44
 8008c16:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8008e2c <_strtod_l+0x58c>
 8008c1a:	f04f 0a00 	mov.w	sl, #0
 8008c1e:	e67a      	b.n	8008916 <_strtod_l+0x76>
 8008c20:	487e      	ldr	r0, [pc, #504]	@ (8008e1c <_strtod_l+0x57c>)
 8008c22:	f000 fd85 	bl	8009730 <nan>
 8008c26:	ec5b ab10 	vmov	sl, fp, d0
 8008c2a:	e674      	b.n	8008916 <_strtod_l+0x76>
 8008c2c:	ee07 9a90 	vmov	s15, r9
 8008c30:	1be2      	subs	r2, r4, r7
 8008c32:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008c36:	2d00      	cmp	r5, #0
 8008c38:	bf08      	it	eq
 8008c3a:	461d      	moveq	r5, r3
 8008c3c:	2b10      	cmp	r3, #16
 8008c3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c40:	461a      	mov	r2, r3
 8008c42:	bfa8      	it	ge
 8008c44:	2210      	movge	r2, #16
 8008c46:	2b09      	cmp	r3, #9
 8008c48:	ec5b ab17 	vmov	sl, fp, d7
 8008c4c:	dc15      	bgt.n	8008c7a <_strtod_l+0x3da>
 8008c4e:	1be1      	subs	r1, r4, r7
 8008c50:	2900      	cmp	r1, #0
 8008c52:	f43f ae60 	beq.w	8008916 <_strtod_l+0x76>
 8008c56:	eba4 0107 	sub.w	r1, r4, r7
 8008c5a:	dd72      	ble.n	8008d42 <_strtod_l+0x4a2>
 8008c5c:	2916      	cmp	r1, #22
 8008c5e:	dc59      	bgt.n	8008d14 <_strtod_l+0x474>
 8008c60:	4b6f      	ldr	r3, [pc, #444]	@ (8008e20 <_strtod_l+0x580>)
 8008c62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c68:	ed93 7b00 	vldr	d7, [r3]
 8008c6c:	ec4b ab16 	vmov	d6, sl, fp
 8008c70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008c74:	ec5b ab17 	vmov	sl, fp, d7
 8008c78:	e64d      	b.n	8008916 <_strtod_l+0x76>
 8008c7a:	4969      	ldr	r1, [pc, #420]	@ (8008e20 <_strtod_l+0x580>)
 8008c7c:	eddd 6a06 	vldr	s13, [sp, #24]
 8008c80:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008c84:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8008c88:	2b0f      	cmp	r3, #15
 8008c8a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8008c8e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008c92:	ec5b ab16 	vmov	sl, fp, d6
 8008c96:	ddda      	ble.n	8008c4e <_strtod_l+0x3ae>
 8008c98:	1a9a      	subs	r2, r3, r2
 8008c9a:	1be1      	subs	r1, r4, r7
 8008c9c:	440a      	add	r2, r1
 8008c9e:	2a00      	cmp	r2, #0
 8008ca0:	f340 8094 	ble.w	8008dcc <_strtod_l+0x52c>
 8008ca4:	f012 000f 	ands.w	r0, r2, #15
 8008ca8:	d00a      	beq.n	8008cc0 <_strtod_l+0x420>
 8008caa:	495d      	ldr	r1, [pc, #372]	@ (8008e20 <_strtod_l+0x580>)
 8008cac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008cb0:	ed91 7b00 	vldr	d7, [r1]
 8008cb4:	ec4b ab16 	vmov	d6, sl, fp
 8008cb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008cbc:	ec5b ab17 	vmov	sl, fp, d7
 8008cc0:	f032 020f 	bics.w	r2, r2, #15
 8008cc4:	d073      	beq.n	8008dae <_strtod_l+0x50e>
 8008cc6:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8008cca:	dd47      	ble.n	8008d5c <_strtod_l+0x4bc>
 8008ccc:	2400      	movs	r4, #0
 8008cce:	4625      	mov	r5, r4
 8008cd0:	9407      	str	r4, [sp, #28]
 8008cd2:	4626      	mov	r6, r4
 8008cd4:	9a05      	ldr	r2, [sp, #20]
 8008cd6:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008e2c <_strtod_l+0x58c>
 8008cda:	2322      	movs	r3, #34	@ 0x22
 8008cdc:	6013      	str	r3, [r2, #0]
 8008cde:	f04f 0a00 	mov.w	sl, #0
 8008ce2:	9b07      	ldr	r3, [sp, #28]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f43f ae16 	beq.w	8008916 <_strtod_l+0x76>
 8008cea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008cec:	9805      	ldr	r0, [sp, #20]
 8008cee:	f001 f9ab 	bl	800a048 <_Bfree>
 8008cf2:	9805      	ldr	r0, [sp, #20]
 8008cf4:	4631      	mov	r1, r6
 8008cf6:	f001 f9a7 	bl	800a048 <_Bfree>
 8008cfa:	9805      	ldr	r0, [sp, #20]
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	f001 f9a3 	bl	800a048 <_Bfree>
 8008d02:	9907      	ldr	r1, [sp, #28]
 8008d04:	9805      	ldr	r0, [sp, #20]
 8008d06:	f001 f99f 	bl	800a048 <_Bfree>
 8008d0a:	9805      	ldr	r0, [sp, #20]
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	f001 f99b 	bl	800a048 <_Bfree>
 8008d12:	e600      	b.n	8008916 <_strtod_l+0x76>
 8008d14:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8008d18:	1be0      	subs	r0, r4, r7
 8008d1a:	4281      	cmp	r1, r0
 8008d1c:	dbbc      	blt.n	8008c98 <_strtod_l+0x3f8>
 8008d1e:	4a40      	ldr	r2, [pc, #256]	@ (8008e20 <_strtod_l+0x580>)
 8008d20:	f1c3 030f 	rsb	r3, r3, #15
 8008d24:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008d28:	ed91 7b00 	vldr	d7, [r1]
 8008d2c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d2e:	ec4b ab16 	vmov	d6, sl, fp
 8008d32:	1acb      	subs	r3, r1, r3
 8008d34:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008d38:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d3c:	ed92 6b00 	vldr	d6, [r2]
 8008d40:	e796      	b.n	8008c70 <_strtod_l+0x3d0>
 8008d42:	3116      	adds	r1, #22
 8008d44:	dba8      	blt.n	8008c98 <_strtod_l+0x3f8>
 8008d46:	4b36      	ldr	r3, [pc, #216]	@ (8008e20 <_strtod_l+0x580>)
 8008d48:	1b3c      	subs	r4, r7, r4
 8008d4a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008d4e:	ed94 7b00 	vldr	d7, [r4]
 8008d52:	ec4b ab16 	vmov	d6, sl, fp
 8008d56:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008d5a:	e78b      	b.n	8008c74 <_strtod_l+0x3d4>
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	ec4b ab17 	vmov	d7, sl, fp
 8008d62:	4e30      	ldr	r6, [pc, #192]	@ (8008e24 <_strtod_l+0x584>)
 8008d64:	1112      	asrs	r2, r2, #4
 8008d66:	4601      	mov	r1, r0
 8008d68:	2a01      	cmp	r2, #1
 8008d6a:	dc23      	bgt.n	8008db4 <_strtod_l+0x514>
 8008d6c:	b108      	cbz	r0, 8008d72 <_strtod_l+0x4d2>
 8008d6e:	ec5b ab17 	vmov	sl, fp, d7
 8008d72:	4a2c      	ldr	r2, [pc, #176]	@ (8008e24 <_strtod_l+0x584>)
 8008d74:	482c      	ldr	r0, [pc, #176]	@ (8008e28 <_strtod_l+0x588>)
 8008d76:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008d7a:	ed92 7b00 	vldr	d7, [r2]
 8008d7e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008d82:	ec4b ab16 	vmov	d6, sl, fp
 8008d86:	4a29      	ldr	r2, [pc, #164]	@ (8008e2c <_strtod_l+0x58c>)
 8008d88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d8c:	ee17 1a90 	vmov	r1, s15
 8008d90:	400a      	ands	r2, r1
 8008d92:	4282      	cmp	r2, r0
 8008d94:	ec5b ab17 	vmov	sl, fp, d7
 8008d98:	d898      	bhi.n	8008ccc <_strtod_l+0x42c>
 8008d9a:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8008d9e:	4282      	cmp	r2, r0
 8008da0:	bf86      	itte	hi
 8008da2:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008e30 <_strtod_l+0x590>
 8008da6:	f04f 3aff 	movhi.w	sl, #4294967295
 8008daa:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8008dae:	2200      	movs	r2, #0
 8008db0:	9206      	str	r2, [sp, #24]
 8008db2:	e076      	b.n	8008ea2 <_strtod_l+0x602>
 8008db4:	f012 0f01 	tst.w	r2, #1
 8008db8:	d004      	beq.n	8008dc4 <_strtod_l+0x524>
 8008dba:	ed96 6b00 	vldr	d6, [r6]
 8008dbe:	2001      	movs	r0, #1
 8008dc0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008dc4:	3101      	adds	r1, #1
 8008dc6:	1052      	asrs	r2, r2, #1
 8008dc8:	3608      	adds	r6, #8
 8008dca:	e7cd      	b.n	8008d68 <_strtod_l+0x4c8>
 8008dcc:	d0ef      	beq.n	8008dae <_strtod_l+0x50e>
 8008dce:	4252      	negs	r2, r2
 8008dd0:	f012 000f 	ands.w	r0, r2, #15
 8008dd4:	d00a      	beq.n	8008dec <_strtod_l+0x54c>
 8008dd6:	4912      	ldr	r1, [pc, #72]	@ (8008e20 <_strtod_l+0x580>)
 8008dd8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008ddc:	ed91 7b00 	vldr	d7, [r1]
 8008de0:	ec4b ab16 	vmov	d6, sl, fp
 8008de4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008de8:	ec5b ab17 	vmov	sl, fp, d7
 8008dec:	1112      	asrs	r2, r2, #4
 8008dee:	d0de      	beq.n	8008dae <_strtod_l+0x50e>
 8008df0:	2a1f      	cmp	r2, #31
 8008df2:	dd1f      	ble.n	8008e34 <_strtod_l+0x594>
 8008df4:	2400      	movs	r4, #0
 8008df6:	4625      	mov	r5, r4
 8008df8:	9407      	str	r4, [sp, #28]
 8008dfa:	4626      	mov	r6, r4
 8008dfc:	9a05      	ldr	r2, [sp, #20]
 8008dfe:	2322      	movs	r3, #34	@ 0x22
 8008e00:	f04f 0a00 	mov.w	sl, #0
 8008e04:	f04f 0b00 	mov.w	fp, #0
 8008e08:	6013      	str	r3, [r2, #0]
 8008e0a:	e76a      	b.n	8008ce2 <_strtod_l+0x442>
 8008e0c:	0800b567 	.word	0x0800b567
 8008e10:	0800b6c4 	.word	0x0800b6c4
 8008e14:	0800b55e 	.word	0x0800b55e
 8008e18:	0800b561 	.word	0x0800b561
 8008e1c:	0800b68e 	.word	0x0800b68e
 8008e20:	0800b750 	.word	0x0800b750
 8008e24:	0800b728 	.word	0x0800b728
 8008e28:	7ca00000 	.word	0x7ca00000
 8008e2c:	7ff00000 	.word	0x7ff00000
 8008e30:	7fefffff 	.word	0x7fefffff
 8008e34:	f012 0110 	ands.w	r1, r2, #16
 8008e38:	bf18      	it	ne
 8008e3a:	216a      	movne	r1, #106	@ 0x6a
 8008e3c:	9106      	str	r1, [sp, #24]
 8008e3e:	ec4b ab17 	vmov	d7, sl, fp
 8008e42:	49af      	ldr	r1, [pc, #700]	@ (8009100 <_strtod_l+0x860>)
 8008e44:	2000      	movs	r0, #0
 8008e46:	07d6      	lsls	r6, r2, #31
 8008e48:	d504      	bpl.n	8008e54 <_strtod_l+0x5b4>
 8008e4a:	ed91 6b00 	vldr	d6, [r1]
 8008e4e:	2001      	movs	r0, #1
 8008e50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008e54:	1052      	asrs	r2, r2, #1
 8008e56:	f101 0108 	add.w	r1, r1, #8
 8008e5a:	d1f4      	bne.n	8008e46 <_strtod_l+0x5a6>
 8008e5c:	b108      	cbz	r0, 8008e62 <_strtod_l+0x5c2>
 8008e5e:	ec5b ab17 	vmov	sl, fp, d7
 8008e62:	9a06      	ldr	r2, [sp, #24]
 8008e64:	b1b2      	cbz	r2, 8008e94 <_strtod_l+0x5f4>
 8008e66:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8008e6a:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8008e6e:	2a00      	cmp	r2, #0
 8008e70:	4658      	mov	r0, fp
 8008e72:	dd0f      	ble.n	8008e94 <_strtod_l+0x5f4>
 8008e74:	2a1f      	cmp	r2, #31
 8008e76:	dd55      	ble.n	8008f24 <_strtod_l+0x684>
 8008e78:	2a34      	cmp	r2, #52	@ 0x34
 8008e7a:	bfde      	ittt	le
 8008e7c:	f04f 32ff 	movle.w	r2, #4294967295
 8008e80:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8008e84:	408a      	lslle	r2, r1
 8008e86:	f04f 0a00 	mov.w	sl, #0
 8008e8a:	bfcc      	ite	gt
 8008e8c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008e90:	ea02 0b00 	andle.w	fp, r2, r0
 8008e94:	ec4b ab17 	vmov	d7, sl, fp
 8008e98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea0:	d0a8      	beq.n	8008df4 <_strtod_l+0x554>
 8008ea2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ea4:	9805      	ldr	r0, [sp, #20]
 8008ea6:	f8cd 9000 	str.w	r9, [sp]
 8008eaa:	462a      	mov	r2, r5
 8008eac:	f001 f934 	bl	800a118 <__s2b>
 8008eb0:	9007      	str	r0, [sp, #28]
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	f43f af0a 	beq.w	8008ccc <_strtod_l+0x42c>
 8008eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eba:	1b3f      	subs	r7, r7, r4
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	bfb4      	ite	lt
 8008ec0:	463b      	movlt	r3, r7
 8008ec2:	2300      	movge	r3, #0
 8008ec4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec8:	ed9f bb89 	vldr	d11, [pc, #548]	@ 80090f0 <_strtod_l+0x850>
 8008ecc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008ed0:	2400      	movs	r4, #0
 8008ed2:	930d      	str	r3, [sp, #52]	@ 0x34
 8008ed4:	4625      	mov	r5, r4
 8008ed6:	9b07      	ldr	r3, [sp, #28]
 8008ed8:	9805      	ldr	r0, [sp, #20]
 8008eda:	6859      	ldr	r1, [r3, #4]
 8008edc:	f001 f874 	bl	8009fc8 <_Balloc>
 8008ee0:	4606      	mov	r6, r0
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	f43f aef6 	beq.w	8008cd4 <_strtod_l+0x434>
 8008ee8:	9b07      	ldr	r3, [sp, #28]
 8008eea:	691a      	ldr	r2, [r3, #16]
 8008eec:	ec4b ab19 	vmov	d9, sl, fp
 8008ef0:	3202      	adds	r2, #2
 8008ef2:	f103 010c 	add.w	r1, r3, #12
 8008ef6:	0092      	lsls	r2, r2, #2
 8008ef8:	300c      	adds	r0, #12
 8008efa:	f000 fc0a 	bl	8009712 <memcpy>
 8008efe:	eeb0 0b49 	vmov.f64	d0, d9
 8008f02:	9805      	ldr	r0, [sp, #20]
 8008f04:	aa14      	add	r2, sp, #80	@ 0x50
 8008f06:	a913      	add	r1, sp, #76	@ 0x4c
 8008f08:	f001 fc3a 	bl	800a780 <__d2b>
 8008f0c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	f43f aee0 	beq.w	8008cd4 <_strtod_l+0x434>
 8008f14:	9805      	ldr	r0, [sp, #20]
 8008f16:	2101      	movs	r1, #1
 8008f18:	f001 f994 	bl	800a244 <__i2b>
 8008f1c:	4605      	mov	r5, r0
 8008f1e:	b940      	cbnz	r0, 8008f32 <_strtod_l+0x692>
 8008f20:	2500      	movs	r5, #0
 8008f22:	e6d7      	b.n	8008cd4 <_strtod_l+0x434>
 8008f24:	f04f 31ff 	mov.w	r1, #4294967295
 8008f28:	fa01 f202 	lsl.w	r2, r1, r2
 8008f2c:	ea02 0a0a 	and.w	sl, r2, sl
 8008f30:	e7b0      	b.n	8008e94 <_strtod_l+0x5f4>
 8008f32:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8008f34:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008f36:	2f00      	cmp	r7, #0
 8008f38:	bfab      	itete	ge
 8008f3a:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8008f3c:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8008f3e:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8008f42:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8008f46:	bfac      	ite	ge
 8008f48:	eb07 0903 	addge.w	r9, r7, r3
 8008f4c:	eba3 0807 	sublt.w	r8, r3, r7
 8008f50:	9b06      	ldr	r3, [sp, #24]
 8008f52:	1aff      	subs	r7, r7, r3
 8008f54:	4417      	add	r7, r2
 8008f56:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8008f5a:	4a6a      	ldr	r2, [pc, #424]	@ (8009104 <_strtod_l+0x864>)
 8008f5c:	3f01      	subs	r7, #1
 8008f5e:	4297      	cmp	r7, r2
 8008f60:	da51      	bge.n	8009006 <_strtod_l+0x766>
 8008f62:	1bd1      	subs	r1, r2, r7
 8008f64:	291f      	cmp	r1, #31
 8008f66:	eba3 0301 	sub.w	r3, r3, r1
 8008f6a:	f04f 0201 	mov.w	r2, #1
 8008f6e:	dc3e      	bgt.n	8008fee <_strtod_l+0x74e>
 8008f70:	408a      	lsls	r2, r1
 8008f72:	920c      	str	r2, [sp, #48]	@ 0x30
 8008f74:	2200      	movs	r2, #0
 8008f76:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008f78:	eb09 0703 	add.w	r7, r9, r3
 8008f7c:	4498      	add	r8, r3
 8008f7e:	9b06      	ldr	r3, [sp, #24]
 8008f80:	45b9      	cmp	r9, r7
 8008f82:	4498      	add	r8, r3
 8008f84:	464b      	mov	r3, r9
 8008f86:	bfa8      	it	ge
 8008f88:	463b      	movge	r3, r7
 8008f8a:	4543      	cmp	r3, r8
 8008f8c:	bfa8      	it	ge
 8008f8e:	4643      	movge	r3, r8
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	bfc2      	ittt	gt
 8008f94:	1aff      	subgt	r7, r7, r3
 8008f96:	eba8 0803 	subgt.w	r8, r8, r3
 8008f9a:	eba9 0903 	subgt.w	r9, r9, r3
 8008f9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	dd16      	ble.n	8008fd2 <_strtod_l+0x732>
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	9805      	ldr	r0, [sp, #20]
 8008fa8:	461a      	mov	r2, r3
 8008faa:	f001 fa03 	bl	800a3b4 <__pow5mult>
 8008fae:	4605      	mov	r5, r0
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d0b5      	beq.n	8008f20 <_strtod_l+0x680>
 8008fb4:	4601      	mov	r1, r0
 8008fb6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008fb8:	9805      	ldr	r0, [sp, #20]
 8008fba:	f001 f959 	bl	800a270 <__multiply>
 8008fbe:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	f43f ae87 	beq.w	8008cd4 <_strtod_l+0x434>
 8008fc6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008fc8:	9805      	ldr	r0, [sp, #20]
 8008fca:	f001 f83d 	bl	800a048 <_Bfree>
 8008fce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fd0:	9312      	str	r3, [sp, #72]	@ 0x48
 8008fd2:	2f00      	cmp	r7, #0
 8008fd4:	dc1b      	bgt.n	800900e <_strtod_l+0x76e>
 8008fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	dd21      	ble.n	8009020 <_strtod_l+0x780>
 8008fdc:	4631      	mov	r1, r6
 8008fde:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008fe0:	9805      	ldr	r0, [sp, #20]
 8008fe2:	f001 f9e7 	bl	800a3b4 <__pow5mult>
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	b9d0      	cbnz	r0, 8009020 <_strtod_l+0x780>
 8008fea:	2600      	movs	r6, #0
 8008fec:	e672      	b.n	8008cd4 <_strtod_l+0x434>
 8008fee:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8008ff2:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8008ff6:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8008ffa:	37e2      	adds	r7, #226	@ 0xe2
 8008ffc:	fa02 f107 	lsl.w	r1, r2, r7
 8009000:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009002:	920c      	str	r2, [sp, #48]	@ 0x30
 8009004:	e7b8      	b.n	8008f78 <_strtod_l+0x6d8>
 8009006:	2200      	movs	r2, #0
 8009008:	920b      	str	r2, [sp, #44]	@ 0x2c
 800900a:	2201      	movs	r2, #1
 800900c:	e7f9      	b.n	8009002 <_strtod_l+0x762>
 800900e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009010:	9805      	ldr	r0, [sp, #20]
 8009012:	463a      	mov	r2, r7
 8009014:	f001 fa28 	bl	800a468 <__lshift>
 8009018:	9012      	str	r0, [sp, #72]	@ 0x48
 800901a:	2800      	cmp	r0, #0
 800901c:	d1db      	bne.n	8008fd6 <_strtod_l+0x736>
 800901e:	e659      	b.n	8008cd4 <_strtod_l+0x434>
 8009020:	f1b8 0f00 	cmp.w	r8, #0
 8009024:	dd07      	ble.n	8009036 <_strtod_l+0x796>
 8009026:	4631      	mov	r1, r6
 8009028:	9805      	ldr	r0, [sp, #20]
 800902a:	4642      	mov	r2, r8
 800902c:	f001 fa1c 	bl	800a468 <__lshift>
 8009030:	4606      	mov	r6, r0
 8009032:	2800      	cmp	r0, #0
 8009034:	d0d9      	beq.n	8008fea <_strtod_l+0x74a>
 8009036:	f1b9 0f00 	cmp.w	r9, #0
 800903a:	dd08      	ble.n	800904e <_strtod_l+0x7ae>
 800903c:	4629      	mov	r1, r5
 800903e:	9805      	ldr	r0, [sp, #20]
 8009040:	464a      	mov	r2, r9
 8009042:	f001 fa11 	bl	800a468 <__lshift>
 8009046:	4605      	mov	r5, r0
 8009048:	2800      	cmp	r0, #0
 800904a:	f43f ae43 	beq.w	8008cd4 <_strtod_l+0x434>
 800904e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009050:	9805      	ldr	r0, [sp, #20]
 8009052:	4632      	mov	r2, r6
 8009054:	f001 fa90 	bl	800a578 <__mdiff>
 8009058:	4604      	mov	r4, r0
 800905a:	2800      	cmp	r0, #0
 800905c:	f43f ae3a 	beq.w	8008cd4 <_strtod_l+0x434>
 8009060:	2300      	movs	r3, #0
 8009062:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8009066:	60c3      	str	r3, [r0, #12]
 8009068:	4629      	mov	r1, r5
 800906a:	f001 fa69 	bl	800a540 <__mcmp>
 800906e:	2800      	cmp	r0, #0
 8009070:	da4c      	bge.n	800910c <_strtod_l+0x86c>
 8009072:	ea58 080a 	orrs.w	r8, r8, sl
 8009076:	d172      	bne.n	800915e <_strtod_l+0x8be>
 8009078:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800907c:	2b00      	cmp	r3, #0
 800907e:	d16e      	bne.n	800915e <_strtod_l+0x8be>
 8009080:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009084:	0d1b      	lsrs	r3, r3, #20
 8009086:	051b      	lsls	r3, r3, #20
 8009088:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800908c:	d967      	bls.n	800915e <_strtod_l+0x8be>
 800908e:	6963      	ldr	r3, [r4, #20]
 8009090:	b913      	cbnz	r3, 8009098 <_strtod_l+0x7f8>
 8009092:	6923      	ldr	r3, [r4, #16]
 8009094:	2b01      	cmp	r3, #1
 8009096:	dd62      	ble.n	800915e <_strtod_l+0x8be>
 8009098:	4621      	mov	r1, r4
 800909a:	2201      	movs	r2, #1
 800909c:	9805      	ldr	r0, [sp, #20]
 800909e:	f001 f9e3 	bl	800a468 <__lshift>
 80090a2:	4629      	mov	r1, r5
 80090a4:	4604      	mov	r4, r0
 80090a6:	f001 fa4b 	bl	800a540 <__mcmp>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	dd57      	ble.n	800915e <_strtod_l+0x8be>
 80090ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80090b2:	9a06      	ldr	r2, [sp, #24]
 80090b4:	0d1b      	lsrs	r3, r3, #20
 80090b6:	051b      	lsls	r3, r3, #20
 80090b8:	2a00      	cmp	r2, #0
 80090ba:	d06e      	beq.n	800919a <_strtod_l+0x8fa>
 80090bc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80090c0:	d86b      	bhi.n	800919a <_strtod_l+0x8fa>
 80090c2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80090c6:	f67f ae99 	bls.w	8008dfc <_strtod_l+0x55c>
 80090ca:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80090f8 <_strtod_l+0x858>
 80090ce:	ec4b ab16 	vmov	d6, sl, fp
 80090d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009108 <_strtod_l+0x868>)
 80090d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80090d8:	ee17 2a90 	vmov	r2, s15
 80090dc:	4013      	ands	r3, r2
 80090de:	ec5b ab17 	vmov	sl, fp, d7
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f47f ae01 	bne.w	8008cea <_strtod_l+0x44a>
 80090e8:	9a05      	ldr	r2, [sp, #20]
 80090ea:	2322      	movs	r3, #34	@ 0x22
 80090ec:	6013      	str	r3, [r2, #0]
 80090ee:	e5fc      	b.n	8008cea <_strtod_l+0x44a>
 80090f0:	ffc00000 	.word	0xffc00000
 80090f4:	41dfffff 	.word	0x41dfffff
 80090f8:	00000000 	.word	0x00000000
 80090fc:	39500000 	.word	0x39500000
 8009100:	0800b6f0 	.word	0x0800b6f0
 8009104:	fffffc02 	.word	0xfffffc02
 8009108:	7ff00000 	.word	0x7ff00000
 800910c:	46d9      	mov	r9, fp
 800910e:	d15d      	bne.n	80091cc <_strtod_l+0x92c>
 8009110:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009114:	f1b8 0f00 	cmp.w	r8, #0
 8009118:	d02a      	beq.n	8009170 <_strtod_l+0x8d0>
 800911a:	4aa9      	ldr	r2, [pc, #676]	@ (80093c0 <_strtod_l+0xb20>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d12a      	bne.n	8009176 <_strtod_l+0x8d6>
 8009120:	9b06      	ldr	r3, [sp, #24]
 8009122:	4652      	mov	r2, sl
 8009124:	b1fb      	cbz	r3, 8009166 <_strtod_l+0x8c6>
 8009126:	4ba7      	ldr	r3, [pc, #668]	@ (80093c4 <_strtod_l+0xb24>)
 8009128:	ea0b 0303 	and.w	r3, fp, r3
 800912c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009130:	f04f 31ff 	mov.w	r1, #4294967295
 8009134:	d81a      	bhi.n	800916c <_strtod_l+0x8cc>
 8009136:	0d1b      	lsrs	r3, r3, #20
 8009138:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800913c:	fa01 f303 	lsl.w	r3, r1, r3
 8009140:	429a      	cmp	r2, r3
 8009142:	d118      	bne.n	8009176 <_strtod_l+0x8d6>
 8009144:	4ba0      	ldr	r3, [pc, #640]	@ (80093c8 <_strtod_l+0xb28>)
 8009146:	4599      	cmp	r9, r3
 8009148:	d102      	bne.n	8009150 <_strtod_l+0x8b0>
 800914a:	3201      	adds	r2, #1
 800914c:	f43f adc2 	beq.w	8008cd4 <_strtod_l+0x434>
 8009150:	4b9c      	ldr	r3, [pc, #624]	@ (80093c4 <_strtod_l+0xb24>)
 8009152:	ea09 0303 	and.w	r3, r9, r3
 8009156:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800915a:	f04f 0a00 	mov.w	sl, #0
 800915e:	9b06      	ldr	r3, [sp, #24]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d1b2      	bne.n	80090ca <_strtod_l+0x82a>
 8009164:	e5c1      	b.n	8008cea <_strtod_l+0x44a>
 8009166:	f04f 33ff 	mov.w	r3, #4294967295
 800916a:	e7e9      	b.n	8009140 <_strtod_l+0x8a0>
 800916c:	460b      	mov	r3, r1
 800916e:	e7e7      	b.n	8009140 <_strtod_l+0x8a0>
 8009170:	ea53 030a 	orrs.w	r3, r3, sl
 8009174:	d09b      	beq.n	80090ae <_strtod_l+0x80e>
 8009176:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009178:	b1c3      	cbz	r3, 80091ac <_strtod_l+0x90c>
 800917a:	ea13 0f09 	tst.w	r3, r9
 800917e:	d0ee      	beq.n	800915e <_strtod_l+0x8be>
 8009180:	9a06      	ldr	r2, [sp, #24]
 8009182:	4650      	mov	r0, sl
 8009184:	4659      	mov	r1, fp
 8009186:	f1b8 0f00 	cmp.w	r8, #0
 800918a:	d013      	beq.n	80091b4 <_strtod_l+0x914>
 800918c:	f7ff fb6d 	bl	800886a <sulp>
 8009190:	ee39 7b00 	vadd.f64	d7, d9, d0
 8009194:	ec5b ab17 	vmov	sl, fp, d7
 8009198:	e7e1      	b.n	800915e <_strtod_l+0x8be>
 800919a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800919e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80091a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80091a6:	f04f 3aff 	mov.w	sl, #4294967295
 80091aa:	e7d8      	b.n	800915e <_strtod_l+0x8be>
 80091ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091ae:	ea13 0f0a 	tst.w	r3, sl
 80091b2:	e7e4      	b.n	800917e <_strtod_l+0x8de>
 80091b4:	f7ff fb59 	bl	800886a <sulp>
 80091b8:	ee39 0b40 	vsub.f64	d0, d9, d0
 80091bc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80091c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091c4:	ec5b ab10 	vmov	sl, fp, d0
 80091c8:	d1c9      	bne.n	800915e <_strtod_l+0x8be>
 80091ca:	e617      	b.n	8008dfc <_strtod_l+0x55c>
 80091cc:	4629      	mov	r1, r5
 80091ce:	4620      	mov	r0, r4
 80091d0:	f001 fb2e 	bl	800a830 <__ratio>
 80091d4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80091d8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80091dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091e0:	d85d      	bhi.n	800929e <_strtod_l+0x9fe>
 80091e2:	f1b8 0f00 	cmp.w	r8, #0
 80091e6:	d164      	bne.n	80092b2 <_strtod_l+0xa12>
 80091e8:	f1ba 0f00 	cmp.w	sl, #0
 80091ec:	d14b      	bne.n	8009286 <_strtod_l+0x9e6>
 80091ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091f2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d160      	bne.n	80092bc <_strtod_l+0xa1c>
 80091fa:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80091fe:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8009202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009206:	d401      	bmi.n	800920c <_strtod_l+0x96c>
 8009208:	ee20 8b08 	vmul.f64	d8, d0, d8
 800920c:	eeb1 ab48 	vneg.f64	d10, d8
 8009210:	486c      	ldr	r0, [pc, #432]	@ (80093c4 <_strtod_l+0xb24>)
 8009212:	496e      	ldr	r1, [pc, #440]	@ (80093cc <_strtod_l+0xb2c>)
 8009214:	ea09 0700 	and.w	r7, r9, r0
 8009218:	428f      	cmp	r7, r1
 800921a:	ec53 2b1a 	vmov	r2, r3, d10
 800921e:	d17d      	bne.n	800931c <_strtod_l+0xa7c>
 8009220:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8009224:	ec4b ab1c 	vmov	d12, sl, fp
 8009228:	eeb0 0b4c 	vmov.f64	d0, d12
 800922c:	f001 fa38 	bl	800a6a0 <__ulp>
 8009230:	4864      	ldr	r0, [pc, #400]	@ (80093c4 <_strtod_l+0xb24>)
 8009232:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8009236:	ee1c 3a90 	vmov	r3, s25
 800923a:	4a65      	ldr	r2, [pc, #404]	@ (80093d0 <_strtod_l+0xb30>)
 800923c:	ea03 0100 	and.w	r1, r3, r0
 8009240:	4291      	cmp	r1, r2
 8009242:	ec5b ab1c 	vmov	sl, fp, d12
 8009246:	d93c      	bls.n	80092c2 <_strtod_l+0xa22>
 8009248:	ee19 2a90 	vmov	r2, s19
 800924c:	4b5e      	ldr	r3, [pc, #376]	@ (80093c8 <_strtod_l+0xb28>)
 800924e:	429a      	cmp	r2, r3
 8009250:	d104      	bne.n	800925c <_strtod_l+0x9bc>
 8009252:	ee19 3a10 	vmov	r3, s18
 8009256:	3301      	adds	r3, #1
 8009258:	f43f ad3c 	beq.w	8008cd4 <_strtod_l+0x434>
 800925c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 80093c8 <_strtod_l+0xb28>
 8009260:	f04f 3aff 	mov.w	sl, #4294967295
 8009264:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009266:	9805      	ldr	r0, [sp, #20]
 8009268:	f000 feee 	bl	800a048 <_Bfree>
 800926c:	9805      	ldr	r0, [sp, #20]
 800926e:	4631      	mov	r1, r6
 8009270:	f000 feea 	bl	800a048 <_Bfree>
 8009274:	9805      	ldr	r0, [sp, #20]
 8009276:	4629      	mov	r1, r5
 8009278:	f000 fee6 	bl	800a048 <_Bfree>
 800927c:	9805      	ldr	r0, [sp, #20]
 800927e:	4621      	mov	r1, r4
 8009280:	f000 fee2 	bl	800a048 <_Bfree>
 8009284:	e627      	b.n	8008ed6 <_strtod_l+0x636>
 8009286:	f1ba 0f01 	cmp.w	sl, #1
 800928a:	d103      	bne.n	8009294 <_strtod_l+0x9f4>
 800928c:	f1bb 0f00 	cmp.w	fp, #0
 8009290:	f43f adb4 	beq.w	8008dfc <_strtod_l+0x55c>
 8009294:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8009298:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800929c:	e7b8      	b.n	8009210 <_strtod_l+0x970>
 800929e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80092a2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80092a6:	f1b8 0f00 	cmp.w	r8, #0
 80092aa:	d0af      	beq.n	800920c <_strtod_l+0x96c>
 80092ac:	eeb0 ab48 	vmov.f64	d10, d8
 80092b0:	e7ae      	b.n	8009210 <_strtod_l+0x970>
 80092b2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80092b6:	eeb0 8b4a 	vmov.f64	d8, d10
 80092ba:	e7a9      	b.n	8009210 <_strtod_l+0x970>
 80092bc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80092c0:	e7a6      	b.n	8009210 <_strtod_l+0x970>
 80092c2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80092c6:	9b06      	ldr	r3, [sp, #24]
 80092c8:	46d9      	mov	r9, fp
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1ca      	bne.n	8009264 <_strtod_l+0x9c4>
 80092ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092d2:	0d1b      	lsrs	r3, r3, #20
 80092d4:	051b      	lsls	r3, r3, #20
 80092d6:	429f      	cmp	r7, r3
 80092d8:	d1c4      	bne.n	8009264 <_strtod_l+0x9c4>
 80092da:	ec51 0b18 	vmov	r0, r1, d8
 80092de:	f7f7 fa4b 	bl	8000778 <__aeabi_d2lz>
 80092e2:	f7f7 fa03 	bl	80006ec <__aeabi_l2d>
 80092e6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80092ea:	ec41 0b17 	vmov	d7, r0, r1
 80092ee:	ea49 090a 	orr.w	r9, r9, sl
 80092f2:	ea59 0908 	orrs.w	r9, r9, r8
 80092f6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80092fa:	d03c      	beq.n	8009376 <_strtod_l+0xad6>
 80092fc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80093a8 <_strtod_l+0xb08>
 8009300:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009308:	f53f acef 	bmi.w	8008cea <_strtod_l+0x44a>
 800930c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 80093b0 <_strtod_l+0xb10>
 8009310:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009318:	dda4      	ble.n	8009264 <_strtod_l+0x9c4>
 800931a:	e4e6      	b.n	8008cea <_strtod_l+0x44a>
 800931c:	9906      	ldr	r1, [sp, #24]
 800931e:	b1e1      	cbz	r1, 800935a <_strtod_l+0xaba>
 8009320:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8009324:	d819      	bhi.n	800935a <_strtod_l+0xaba>
 8009326:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800932a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800932e:	d811      	bhi.n	8009354 <_strtod_l+0xab4>
 8009330:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8009334:	ee18 3a10 	vmov	r3, s16
 8009338:	2b01      	cmp	r3, #1
 800933a:	bf38      	it	cc
 800933c:	2301      	movcc	r3, #1
 800933e:	ee08 3a10 	vmov	s16, r3
 8009342:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8009346:	f1b8 0f00 	cmp.w	r8, #0
 800934a:	d111      	bne.n	8009370 <_strtod_l+0xad0>
 800934c:	eeb1 7b48 	vneg.f64	d7, d8
 8009350:	ec53 2b17 	vmov	r2, r3, d7
 8009354:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8009358:	1bcb      	subs	r3, r1, r7
 800935a:	eeb0 0b49 	vmov.f64	d0, d9
 800935e:	ec43 2b1a 	vmov	d10, r2, r3
 8009362:	f001 f99d 	bl	800a6a0 <__ulp>
 8009366:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800936a:	ec5b ab19 	vmov	sl, fp, d9
 800936e:	e7aa      	b.n	80092c6 <_strtod_l+0xa26>
 8009370:	eeb0 7b48 	vmov.f64	d7, d8
 8009374:	e7ec      	b.n	8009350 <_strtod_l+0xab0>
 8009376:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80093b8 <_strtod_l+0xb18>
 800937a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800937e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009382:	f57f af6f 	bpl.w	8009264 <_strtod_l+0x9c4>
 8009386:	e4b0      	b.n	8008cea <_strtod_l+0x44a>
 8009388:	2300      	movs	r3, #0
 800938a:	9308      	str	r3, [sp, #32]
 800938c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800938e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009390:	6013      	str	r3, [r2, #0]
 8009392:	f7ff bac4 	b.w	800891e <_strtod_l+0x7e>
 8009396:	2a65      	cmp	r2, #101	@ 0x65
 8009398:	f43f abbf 	beq.w	8008b1a <_strtod_l+0x27a>
 800939c:	2a45      	cmp	r2, #69	@ 0x45
 800939e:	f43f abbc 	beq.w	8008b1a <_strtod_l+0x27a>
 80093a2:	2101      	movs	r1, #1
 80093a4:	f7ff bbf4 	b.w	8008b90 <_strtod_l+0x2f0>
 80093a8:	94a03595 	.word	0x94a03595
 80093ac:	3fdfffff 	.word	0x3fdfffff
 80093b0:	35afe535 	.word	0x35afe535
 80093b4:	3fe00000 	.word	0x3fe00000
 80093b8:	94a03595 	.word	0x94a03595
 80093bc:	3fcfffff 	.word	0x3fcfffff
 80093c0:	000fffff 	.word	0x000fffff
 80093c4:	7ff00000 	.word	0x7ff00000
 80093c8:	7fefffff 	.word	0x7fefffff
 80093cc:	7fe00000 	.word	0x7fe00000
 80093d0:	7c9fffff 	.word	0x7c9fffff

080093d4 <strtod>:
 80093d4:	460a      	mov	r2, r1
 80093d6:	4601      	mov	r1, r0
 80093d8:	4802      	ldr	r0, [pc, #8]	@ (80093e4 <strtod+0x10>)
 80093da:	4b03      	ldr	r3, [pc, #12]	@ (80093e8 <strtod+0x14>)
 80093dc:	6800      	ldr	r0, [r0, #0]
 80093de:	f7ff ba5f 	b.w	80088a0 <_strtod_l>
 80093e2:	bf00      	nop
 80093e4:	2400019c 	.word	0x2400019c
 80093e8:	24000030 	.word	0x24000030

080093ec <std>:
 80093ec:	2300      	movs	r3, #0
 80093ee:	b510      	push	{r4, lr}
 80093f0:	4604      	mov	r4, r0
 80093f2:	e9c0 3300 	strd	r3, r3, [r0]
 80093f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093fa:	6083      	str	r3, [r0, #8]
 80093fc:	8181      	strh	r1, [r0, #12]
 80093fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8009400:	81c2      	strh	r2, [r0, #14]
 8009402:	6183      	str	r3, [r0, #24]
 8009404:	4619      	mov	r1, r3
 8009406:	2208      	movs	r2, #8
 8009408:	305c      	adds	r0, #92	@ 0x5c
 800940a:	f000 f8f4 	bl	80095f6 <memset>
 800940e:	4b0d      	ldr	r3, [pc, #52]	@ (8009444 <std+0x58>)
 8009410:	6263      	str	r3, [r4, #36]	@ 0x24
 8009412:	4b0d      	ldr	r3, [pc, #52]	@ (8009448 <std+0x5c>)
 8009414:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009416:	4b0d      	ldr	r3, [pc, #52]	@ (800944c <std+0x60>)
 8009418:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800941a:	4b0d      	ldr	r3, [pc, #52]	@ (8009450 <std+0x64>)
 800941c:	6323      	str	r3, [r4, #48]	@ 0x30
 800941e:	4b0d      	ldr	r3, [pc, #52]	@ (8009454 <std+0x68>)
 8009420:	6224      	str	r4, [r4, #32]
 8009422:	429c      	cmp	r4, r3
 8009424:	d006      	beq.n	8009434 <std+0x48>
 8009426:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800942a:	4294      	cmp	r4, r2
 800942c:	d002      	beq.n	8009434 <std+0x48>
 800942e:	33d0      	adds	r3, #208	@ 0xd0
 8009430:	429c      	cmp	r4, r3
 8009432:	d105      	bne.n	8009440 <std+0x54>
 8009434:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800943c:	f000 b966 	b.w	800970c <__retarget_lock_init_recursive>
 8009440:	bd10      	pop	{r4, pc}
 8009442:	bf00      	nop
 8009444:	08009571 	.word	0x08009571
 8009448:	08009593 	.word	0x08009593
 800944c:	080095cb 	.word	0x080095cb
 8009450:	080095ef 	.word	0x080095ef
 8009454:	24000480 	.word	0x24000480

08009458 <stdio_exit_handler>:
 8009458:	4a02      	ldr	r2, [pc, #8]	@ (8009464 <stdio_exit_handler+0xc>)
 800945a:	4903      	ldr	r1, [pc, #12]	@ (8009468 <stdio_exit_handler+0x10>)
 800945c:	4803      	ldr	r0, [pc, #12]	@ (800946c <stdio_exit_handler+0x14>)
 800945e:	f000 b869 	b.w	8009534 <_fwalk_sglue>
 8009462:	bf00      	nop
 8009464:	24000024 	.word	0x24000024
 8009468:	0800aa39 	.word	0x0800aa39
 800946c:	240001a0 	.word	0x240001a0

08009470 <cleanup_stdio>:
 8009470:	6841      	ldr	r1, [r0, #4]
 8009472:	4b0c      	ldr	r3, [pc, #48]	@ (80094a4 <cleanup_stdio+0x34>)
 8009474:	4299      	cmp	r1, r3
 8009476:	b510      	push	{r4, lr}
 8009478:	4604      	mov	r4, r0
 800947a:	d001      	beq.n	8009480 <cleanup_stdio+0x10>
 800947c:	f001 fadc 	bl	800aa38 <_fflush_r>
 8009480:	68a1      	ldr	r1, [r4, #8]
 8009482:	4b09      	ldr	r3, [pc, #36]	@ (80094a8 <cleanup_stdio+0x38>)
 8009484:	4299      	cmp	r1, r3
 8009486:	d002      	beq.n	800948e <cleanup_stdio+0x1e>
 8009488:	4620      	mov	r0, r4
 800948a:	f001 fad5 	bl	800aa38 <_fflush_r>
 800948e:	68e1      	ldr	r1, [r4, #12]
 8009490:	4b06      	ldr	r3, [pc, #24]	@ (80094ac <cleanup_stdio+0x3c>)
 8009492:	4299      	cmp	r1, r3
 8009494:	d004      	beq.n	80094a0 <cleanup_stdio+0x30>
 8009496:	4620      	mov	r0, r4
 8009498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800949c:	f001 bacc 	b.w	800aa38 <_fflush_r>
 80094a0:	bd10      	pop	{r4, pc}
 80094a2:	bf00      	nop
 80094a4:	24000480 	.word	0x24000480
 80094a8:	240004e8 	.word	0x240004e8
 80094ac:	24000550 	.word	0x24000550

080094b0 <global_stdio_init.part.0>:
 80094b0:	b510      	push	{r4, lr}
 80094b2:	4b0b      	ldr	r3, [pc, #44]	@ (80094e0 <global_stdio_init.part.0+0x30>)
 80094b4:	4c0b      	ldr	r4, [pc, #44]	@ (80094e4 <global_stdio_init.part.0+0x34>)
 80094b6:	4a0c      	ldr	r2, [pc, #48]	@ (80094e8 <global_stdio_init.part.0+0x38>)
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	4620      	mov	r0, r4
 80094bc:	2200      	movs	r2, #0
 80094be:	2104      	movs	r1, #4
 80094c0:	f7ff ff94 	bl	80093ec <std>
 80094c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80094c8:	2201      	movs	r2, #1
 80094ca:	2109      	movs	r1, #9
 80094cc:	f7ff ff8e 	bl	80093ec <std>
 80094d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80094d4:	2202      	movs	r2, #2
 80094d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094da:	2112      	movs	r1, #18
 80094dc:	f7ff bf86 	b.w	80093ec <std>
 80094e0:	240005b8 	.word	0x240005b8
 80094e4:	24000480 	.word	0x24000480
 80094e8:	08009459 	.word	0x08009459

080094ec <__sfp_lock_acquire>:
 80094ec:	4801      	ldr	r0, [pc, #4]	@ (80094f4 <__sfp_lock_acquire+0x8>)
 80094ee:	f000 b90e 	b.w	800970e <__retarget_lock_acquire_recursive>
 80094f2:	bf00      	nop
 80094f4:	240005c1 	.word	0x240005c1

080094f8 <__sfp_lock_release>:
 80094f8:	4801      	ldr	r0, [pc, #4]	@ (8009500 <__sfp_lock_release+0x8>)
 80094fa:	f000 b909 	b.w	8009710 <__retarget_lock_release_recursive>
 80094fe:	bf00      	nop
 8009500:	240005c1 	.word	0x240005c1

08009504 <__sinit>:
 8009504:	b510      	push	{r4, lr}
 8009506:	4604      	mov	r4, r0
 8009508:	f7ff fff0 	bl	80094ec <__sfp_lock_acquire>
 800950c:	6a23      	ldr	r3, [r4, #32]
 800950e:	b11b      	cbz	r3, 8009518 <__sinit+0x14>
 8009510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009514:	f7ff bff0 	b.w	80094f8 <__sfp_lock_release>
 8009518:	4b04      	ldr	r3, [pc, #16]	@ (800952c <__sinit+0x28>)
 800951a:	6223      	str	r3, [r4, #32]
 800951c:	4b04      	ldr	r3, [pc, #16]	@ (8009530 <__sinit+0x2c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1f5      	bne.n	8009510 <__sinit+0xc>
 8009524:	f7ff ffc4 	bl	80094b0 <global_stdio_init.part.0>
 8009528:	e7f2      	b.n	8009510 <__sinit+0xc>
 800952a:	bf00      	nop
 800952c:	08009471 	.word	0x08009471
 8009530:	240005b8 	.word	0x240005b8

08009534 <_fwalk_sglue>:
 8009534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009538:	4607      	mov	r7, r0
 800953a:	4688      	mov	r8, r1
 800953c:	4614      	mov	r4, r2
 800953e:	2600      	movs	r6, #0
 8009540:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009544:	f1b9 0901 	subs.w	r9, r9, #1
 8009548:	d505      	bpl.n	8009556 <_fwalk_sglue+0x22>
 800954a:	6824      	ldr	r4, [r4, #0]
 800954c:	2c00      	cmp	r4, #0
 800954e:	d1f7      	bne.n	8009540 <_fwalk_sglue+0xc>
 8009550:	4630      	mov	r0, r6
 8009552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009556:	89ab      	ldrh	r3, [r5, #12]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d907      	bls.n	800956c <_fwalk_sglue+0x38>
 800955c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009560:	3301      	adds	r3, #1
 8009562:	d003      	beq.n	800956c <_fwalk_sglue+0x38>
 8009564:	4629      	mov	r1, r5
 8009566:	4638      	mov	r0, r7
 8009568:	47c0      	blx	r8
 800956a:	4306      	orrs	r6, r0
 800956c:	3568      	adds	r5, #104	@ 0x68
 800956e:	e7e9      	b.n	8009544 <_fwalk_sglue+0x10>

08009570 <__sread>:
 8009570:	b510      	push	{r4, lr}
 8009572:	460c      	mov	r4, r1
 8009574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009578:	f000 f87a 	bl	8009670 <_read_r>
 800957c:	2800      	cmp	r0, #0
 800957e:	bfab      	itete	ge
 8009580:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009582:	89a3      	ldrhlt	r3, [r4, #12]
 8009584:	181b      	addge	r3, r3, r0
 8009586:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800958a:	bfac      	ite	ge
 800958c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800958e:	81a3      	strhlt	r3, [r4, #12]
 8009590:	bd10      	pop	{r4, pc}

08009592 <__swrite>:
 8009592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009596:	461f      	mov	r7, r3
 8009598:	898b      	ldrh	r3, [r1, #12]
 800959a:	05db      	lsls	r3, r3, #23
 800959c:	4605      	mov	r5, r0
 800959e:	460c      	mov	r4, r1
 80095a0:	4616      	mov	r6, r2
 80095a2:	d505      	bpl.n	80095b0 <__swrite+0x1e>
 80095a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095a8:	2302      	movs	r3, #2
 80095aa:	2200      	movs	r2, #0
 80095ac:	f000 f84e 	bl	800964c <_lseek_r>
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095ba:	81a3      	strh	r3, [r4, #12]
 80095bc:	4632      	mov	r2, r6
 80095be:	463b      	mov	r3, r7
 80095c0:	4628      	mov	r0, r5
 80095c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095c6:	f000 b865 	b.w	8009694 <_write_r>

080095ca <__sseek>:
 80095ca:	b510      	push	{r4, lr}
 80095cc:	460c      	mov	r4, r1
 80095ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095d2:	f000 f83b 	bl	800964c <_lseek_r>
 80095d6:	1c43      	adds	r3, r0, #1
 80095d8:	89a3      	ldrh	r3, [r4, #12]
 80095da:	bf15      	itete	ne
 80095dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80095de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80095e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80095e6:	81a3      	strheq	r3, [r4, #12]
 80095e8:	bf18      	it	ne
 80095ea:	81a3      	strhne	r3, [r4, #12]
 80095ec:	bd10      	pop	{r4, pc}

080095ee <__sclose>:
 80095ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095f2:	f000 b81b 	b.w	800962c <_close_r>

080095f6 <memset>:
 80095f6:	4402      	add	r2, r0
 80095f8:	4603      	mov	r3, r0
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d100      	bne.n	8009600 <memset+0xa>
 80095fe:	4770      	bx	lr
 8009600:	f803 1b01 	strb.w	r1, [r3], #1
 8009604:	e7f9      	b.n	80095fa <memset+0x4>

08009606 <strncmp>:
 8009606:	b510      	push	{r4, lr}
 8009608:	b16a      	cbz	r2, 8009626 <strncmp+0x20>
 800960a:	3901      	subs	r1, #1
 800960c:	1884      	adds	r4, r0, r2
 800960e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009612:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009616:	429a      	cmp	r2, r3
 8009618:	d103      	bne.n	8009622 <strncmp+0x1c>
 800961a:	42a0      	cmp	r0, r4
 800961c:	d001      	beq.n	8009622 <strncmp+0x1c>
 800961e:	2a00      	cmp	r2, #0
 8009620:	d1f5      	bne.n	800960e <strncmp+0x8>
 8009622:	1ad0      	subs	r0, r2, r3
 8009624:	bd10      	pop	{r4, pc}
 8009626:	4610      	mov	r0, r2
 8009628:	e7fc      	b.n	8009624 <strncmp+0x1e>
	...

0800962c <_close_r>:
 800962c:	b538      	push	{r3, r4, r5, lr}
 800962e:	4d06      	ldr	r5, [pc, #24]	@ (8009648 <_close_r+0x1c>)
 8009630:	2300      	movs	r3, #0
 8009632:	4604      	mov	r4, r0
 8009634:	4608      	mov	r0, r1
 8009636:	602b      	str	r3, [r5, #0]
 8009638:	f7f8 f812 	bl	8001660 <_close>
 800963c:	1c43      	adds	r3, r0, #1
 800963e:	d102      	bne.n	8009646 <_close_r+0x1a>
 8009640:	682b      	ldr	r3, [r5, #0]
 8009642:	b103      	cbz	r3, 8009646 <_close_r+0x1a>
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	bd38      	pop	{r3, r4, r5, pc}
 8009648:	240005bc 	.word	0x240005bc

0800964c <_lseek_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	4d07      	ldr	r5, [pc, #28]	@ (800966c <_lseek_r+0x20>)
 8009650:	4604      	mov	r4, r0
 8009652:	4608      	mov	r0, r1
 8009654:	4611      	mov	r1, r2
 8009656:	2200      	movs	r2, #0
 8009658:	602a      	str	r2, [r5, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	f7f8 f827 	bl	80016ae <_lseek>
 8009660:	1c43      	adds	r3, r0, #1
 8009662:	d102      	bne.n	800966a <_lseek_r+0x1e>
 8009664:	682b      	ldr	r3, [r5, #0]
 8009666:	b103      	cbz	r3, 800966a <_lseek_r+0x1e>
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	bd38      	pop	{r3, r4, r5, pc}
 800966c:	240005bc 	.word	0x240005bc

08009670 <_read_r>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4d07      	ldr	r5, [pc, #28]	@ (8009690 <_read_r+0x20>)
 8009674:	4604      	mov	r4, r0
 8009676:	4608      	mov	r0, r1
 8009678:	4611      	mov	r1, r2
 800967a:	2200      	movs	r2, #0
 800967c:	602a      	str	r2, [r5, #0]
 800967e:	461a      	mov	r2, r3
 8009680:	f7f7 ffd1 	bl	8001626 <_read>
 8009684:	1c43      	adds	r3, r0, #1
 8009686:	d102      	bne.n	800968e <_read_r+0x1e>
 8009688:	682b      	ldr	r3, [r5, #0]
 800968a:	b103      	cbz	r3, 800968e <_read_r+0x1e>
 800968c:	6023      	str	r3, [r4, #0]
 800968e:	bd38      	pop	{r3, r4, r5, pc}
 8009690:	240005bc 	.word	0x240005bc

08009694 <_write_r>:
 8009694:	b538      	push	{r3, r4, r5, lr}
 8009696:	4d07      	ldr	r5, [pc, #28]	@ (80096b4 <_write_r+0x20>)
 8009698:	4604      	mov	r4, r0
 800969a:	4608      	mov	r0, r1
 800969c:	4611      	mov	r1, r2
 800969e:	2200      	movs	r2, #0
 80096a0:	602a      	str	r2, [r5, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	f7f7 fc94 	bl	8000fd0 <_write>
 80096a8:	1c43      	adds	r3, r0, #1
 80096aa:	d102      	bne.n	80096b2 <_write_r+0x1e>
 80096ac:	682b      	ldr	r3, [r5, #0]
 80096ae:	b103      	cbz	r3, 80096b2 <_write_r+0x1e>
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	bd38      	pop	{r3, r4, r5, pc}
 80096b4:	240005bc 	.word	0x240005bc

080096b8 <__errno>:
 80096b8:	4b01      	ldr	r3, [pc, #4]	@ (80096c0 <__errno+0x8>)
 80096ba:	6818      	ldr	r0, [r3, #0]
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	2400019c 	.word	0x2400019c

080096c4 <__libc_init_array>:
 80096c4:	b570      	push	{r4, r5, r6, lr}
 80096c6:	4d0d      	ldr	r5, [pc, #52]	@ (80096fc <__libc_init_array+0x38>)
 80096c8:	4c0d      	ldr	r4, [pc, #52]	@ (8009700 <__libc_init_array+0x3c>)
 80096ca:	1b64      	subs	r4, r4, r5
 80096cc:	10a4      	asrs	r4, r4, #2
 80096ce:	2600      	movs	r6, #0
 80096d0:	42a6      	cmp	r6, r4
 80096d2:	d109      	bne.n	80096e8 <__libc_init_array+0x24>
 80096d4:	4d0b      	ldr	r5, [pc, #44]	@ (8009704 <__libc_init_array+0x40>)
 80096d6:	4c0c      	ldr	r4, [pc, #48]	@ (8009708 <__libc_init_array+0x44>)
 80096d8:	f001 ff04 	bl	800b4e4 <_init>
 80096dc:	1b64      	subs	r4, r4, r5
 80096de:	10a4      	asrs	r4, r4, #2
 80096e0:	2600      	movs	r6, #0
 80096e2:	42a6      	cmp	r6, r4
 80096e4:	d105      	bne.n	80096f2 <__libc_init_array+0x2e>
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
 80096e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ec:	4798      	blx	r3
 80096ee:	3601      	adds	r6, #1
 80096f0:	e7ee      	b.n	80096d0 <__libc_init_array+0xc>
 80096f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096f6:	4798      	blx	r3
 80096f8:	3601      	adds	r6, #1
 80096fa:	e7f2      	b.n	80096e2 <__libc_init_array+0x1e>
 80096fc:	0800b92c 	.word	0x0800b92c
 8009700:	0800b92c 	.word	0x0800b92c
 8009704:	0800b92c 	.word	0x0800b92c
 8009708:	0800b930 	.word	0x0800b930

0800970c <__retarget_lock_init_recursive>:
 800970c:	4770      	bx	lr

0800970e <__retarget_lock_acquire_recursive>:
 800970e:	4770      	bx	lr

08009710 <__retarget_lock_release_recursive>:
 8009710:	4770      	bx	lr

08009712 <memcpy>:
 8009712:	440a      	add	r2, r1
 8009714:	4291      	cmp	r1, r2
 8009716:	f100 33ff 	add.w	r3, r0, #4294967295
 800971a:	d100      	bne.n	800971e <memcpy+0xc>
 800971c:	4770      	bx	lr
 800971e:	b510      	push	{r4, lr}
 8009720:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009724:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009728:	4291      	cmp	r1, r2
 800972a:	d1f9      	bne.n	8009720 <memcpy+0xe>
 800972c:	bd10      	pop	{r4, pc}
	...

08009730 <nan>:
 8009730:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009738 <nan+0x8>
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	00000000 	.word	0x00000000
 800973c:	7ff80000 	.word	0x7ff80000

08009740 <_free_r>:
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	4605      	mov	r5, r0
 8009744:	2900      	cmp	r1, #0
 8009746:	d041      	beq.n	80097cc <_free_r+0x8c>
 8009748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800974c:	1f0c      	subs	r4, r1, #4
 800974e:	2b00      	cmp	r3, #0
 8009750:	bfb8      	it	lt
 8009752:	18e4      	addlt	r4, r4, r3
 8009754:	f000 fc2c 	bl	8009fb0 <__malloc_lock>
 8009758:	4a1d      	ldr	r2, [pc, #116]	@ (80097d0 <_free_r+0x90>)
 800975a:	6813      	ldr	r3, [r2, #0]
 800975c:	b933      	cbnz	r3, 800976c <_free_r+0x2c>
 800975e:	6063      	str	r3, [r4, #4]
 8009760:	6014      	str	r4, [r2, #0]
 8009762:	4628      	mov	r0, r5
 8009764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009768:	f000 bc28 	b.w	8009fbc <__malloc_unlock>
 800976c:	42a3      	cmp	r3, r4
 800976e:	d908      	bls.n	8009782 <_free_r+0x42>
 8009770:	6820      	ldr	r0, [r4, #0]
 8009772:	1821      	adds	r1, r4, r0
 8009774:	428b      	cmp	r3, r1
 8009776:	bf01      	itttt	eq
 8009778:	6819      	ldreq	r1, [r3, #0]
 800977a:	685b      	ldreq	r3, [r3, #4]
 800977c:	1809      	addeq	r1, r1, r0
 800977e:	6021      	streq	r1, [r4, #0]
 8009780:	e7ed      	b.n	800975e <_free_r+0x1e>
 8009782:	461a      	mov	r2, r3
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	b10b      	cbz	r3, 800978c <_free_r+0x4c>
 8009788:	42a3      	cmp	r3, r4
 800978a:	d9fa      	bls.n	8009782 <_free_r+0x42>
 800978c:	6811      	ldr	r1, [r2, #0]
 800978e:	1850      	adds	r0, r2, r1
 8009790:	42a0      	cmp	r0, r4
 8009792:	d10b      	bne.n	80097ac <_free_r+0x6c>
 8009794:	6820      	ldr	r0, [r4, #0]
 8009796:	4401      	add	r1, r0
 8009798:	1850      	adds	r0, r2, r1
 800979a:	4283      	cmp	r3, r0
 800979c:	6011      	str	r1, [r2, #0]
 800979e:	d1e0      	bne.n	8009762 <_free_r+0x22>
 80097a0:	6818      	ldr	r0, [r3, #0]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	6053      	str	r3, [r2, #4]
 80097a6:	4408      	add	r0, r1
 80097a8:	6010      	str	r0, [r2, #0]
 80097aa:	e7da      	b.n	8009762 <_free_r+0x22>
 80097ac:	d902      	bls.n	80097b4 <_free_r+0x74>
 80097ae:	230c      	movs	r3, #12
 80097b0:	602b      	str	r3, [r5, #0]
 80097b2:	e7d6      	b.n	8009762 <_free_r+0x22>
 80097b4:	6820      	ldr	r0, [r4, #0]
 80097b6:	1821      	adds	r1, r4, r0
 80097b8:	428b      	cmp	r3, r1
 80097ba:	bf04      	itt	eq
 80097bc:	6819      	ldreq	r1, [r3, #0]
 80097be:	685b      	ldreq	r3, [r3, #4]
 80097c0:	6063      	str	r3, [r4, #4]
 80097c2:	bf04      	itt	eq
 80097c4:	1809      	addeq	r1, r1, r0
 80097c6:	6021      	streq	r1, [r4, #0]
 80097c8:	6054      	str	r4, [r2, #4]
 80097ca:	e7ca      	b.n	8009762 <_free_r+0x22>
 80097cc:	bd38      	pop	{r3, r4, r5, pc}
 80097ce:	bf00      	nop
 80097d0:	240005c8 	.word	0x240005c8

080097d4 <rshift>:
 80097d4:	6903      	ldr	r3, [r0, #16]
 80097d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80097da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80097e2:	f100 0414 	add.w	r4, r0, #20
 80097e6:	dd45      	ble.n	8009874 <rshift+0xa0>
 80097e8:	f011 011f 	ands.w	r1, r1, #31
 80097ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80097f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80097f4:	d10c      	bne.n	8009810 <rshift+0x3c>
 80097f6:	f100 0710 	add.w	r7, r0, #16
 80097fa:	4629      	mov	r1, r5
 80097fc:	42b1      	cmp	r1, r6
 80097fe:	d334      	bcc.n	800986a <rshift+0x96>
 8009800:	1a9b      	subs	r3, r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	1eea      	subs	r2, r5, #3
 8009806:	4296      	cmp	r6, r2
 8009808:	bf38      	it	cc
 800980a:	2300      	movcc	r3, #0
 800980c:	4423      	add	r3, r4
 800980e:	e015      	b.n	800983c <rshift+0x68>
 8009810:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009814:	f1c1 0820 	rsb	r8, r1, #32
 8009818:	40cf      	lsrs	r7, r1
 800981a:	f105 0e04 	add.w	lr, r5, #4
 800981e:	46a1      	mov	r9, r4
 8009820:	4576      	cmp	r6, lr
 8009822:	46f4      	mov	ip, lr
 8009824:	d815      	bhi.n	8009852 <rshift+0x7e>
 8009826:	1a9a      	subs	r2, r3, r2
 8009828:	0092      	lsls	r2, r2, #2
 800982a:	3a04      	subs	r2, #4
 800982c:	3501      	adds	r5, #1
 800982e:	42ae      	cmp	r6, r5
 8009830:	bf38      	it	cc
 8009832:	2200      	movcc	r2, #0
 8009834:	18a3      	adds	r3, r4, r2
 8009836:	50a7      	str	r7, [r4, r2]
 8009838:	b107      	cbz	r7, 800983c <rshift+0x68>
 800983a:	3304      	adds	r3, #4
 800983c:	1b1a      	subs	r2, r3, r4
 800983e:	42a3      	cmp	r3, r4
 8009840:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009844:	bf08      	it	eq
 8009846:	2300      	moveq	r3, #0
 8009848:	6102      	str	r2, [r0, #16]
 800984a:	bf08      	it	eq
 800984c:	6143      	streq	r3, [r0, #20]
 800984e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009852:	f8dc c000 	ldr.w	ip, [ip]
 8009856:	fa0c fc08 	lsl.w	ip, ip, r8
 800985a:	ea4c 0707 	orr.w	r7, ip, r7
 800985e:	f849 7b04 	str.w	r7, [r9], #4
 8009862:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009866:	40cf      	lsrs	r7, r1
 8009868:	e7da      	b.n	8009820 <rshift+0x4c>
 800986a:	f851 cb04 	ldr.w	ip, [r1], #4
 800986e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009872:	e7c3      	b.n	80097fc <rshift+0x28>
 8009874:	4623      	mov	r3, r4
 8009876:	e7e1      	b.n	800983c <rshift+0x68>

08009878 <__hexdig_fun>:
 8009878:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800987c:	2b09      	cmp	r3, #9
 800987e:	d802      	bhi.n	8009886 <__hexdig_fun+0xe>
 8009880:	3820      	subs	r0, #32
 8009882:	b2c0      	uxtb	r0, r0
 8009884:	4770      	bx	lr
 8009886:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800988a:	2b05      	cmp	r3, #5
 800988c:	d801      	bhi.n	8009892 <__hexdig_fun+0x1a>
 800988e:	3847      	subs	r0, #71	@ 0x47
 8009890:	e7f7      	b.n	8009882 <__hexdig_fun+0xa>
 8009892:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009896:	2b05      	cmp	r3, #5
 8009898:	d801      	bhi.n	800989e <__hexdig_fun+0x26>
 800989a:	3827      	subs	r0, #39	@ 0x27
 800989c:	e7f1      	b.n	8009882 <__hexdig_fun+0xa>
 800989e:	2000      	movs	r0, #0
 80098a0:	4770      	bx	lr
	...

080098a4 <__gethex>:
 80098a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a8:	b085      	sub	sp, #20
 80098aa:	468a      	mov	sl, r1
 80098ac:	9302      	str	r3, [sp, #8]
 80098ae:	680b      	ldr	r3, [r1, #0]
 80098b0:	9001      	str	r0, [sp, #4]
 80098b2:	4690      	mov	r8, r2
 80098b4:	1c9c      	adds	r4, r3, #2
 80098b6:	46a1      	mov	r9, r4
 80098b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80098bc:	2830      	cmp	r0, #48	@ 0x30
 80098be:	d0fa      	beq.n	80098b6 <__gethex+0x12>
 80098c0:	eba9 0303 	sub.w	r3, r9, r3
 80098c4:	f1a3 0b02 	sub.w	fp, r3, #2
 80098c8:	f7ff ffd6 	bl	8009878 <__hexdig_fun>
 80098cc:	4605      	mov	r5, r0
 80098ce:	2800      	cmp	r0, #0
 80098d0:	d168      	bne.n	80099a4 <__gethex+0x100>
 80098d2:	49a0      	ldr	r1, [pc, #640]	@ (8009b54 <__gethex+0x2b0>)
 80098d4:	2201      	movs	r2, #1
 80098d6:	4648      	mov	r0, r9
 80098d8:	f7ff fe95 	bl	8009606 <strncmp>
 80098dc:	4607      	mov	r7, r0
 80098de:	2800      	cmp	r0, #0
 80098e0:	d167      	bne.n	80099b2 <__gethex+0x10e>
 80098e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80098e6:	4626      	mov	r6, r4
 80098e8:	f7ff ffc6 	bl	8009878 <__hexdig_fun>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	d062      	beq.n	80099b6 <__gethex+0x112>
 80098f0:	4623      	mov	r3, r4
 80098f2:	7818      	ldrb	r0, [r3, #0]
 80098f4:	2830      	cmp	r0, #48	@ 0x30
 80098f6:	4699      	mov	r9, r3
 80098f8:	f103 0301 	add.w	r3, r3, #1
 80098fc:	d0f9      	beq.n	80098f2 <__gethex+0x4e>
 80098fe:	f7ff ffbb 	bl	8009878 <__hexdig_fun>
 8009902:	fab0 f580 	clz	r5, r0
 8009906:	096d      	lsrs	r5, r5, #5
 8009908:	f04f 0b01 	mov.w	fp, #1
 800990c:	464a      	mov	r2, r9
 800990e:	4616      	mov	r6, r2
 8009910:	3201      	adds	r2, #1
 8009912:	7830      	ldrb	r0, [r6, #0]
 8009914:	f7ff ffb0 	bl	8009878 <__hexdig_fun>
 8009918:	2800      	cmp	r0, #0
 800991a:	d1f8      	bne.n	800990e <__gethex+0x6a>
 800991c:	498d      	ldr	r1, [pc, #564]	@ (8009b54 <__gethex+0x2b0>)
 800991e:	2201      	movs	r2, #1
 8009920:	4630      	mov	r0, r6
 8009922:	f7ff fe70 	bl	8009606 <strncmp>
 8009926:	2800      	cmp	r0, #0
 8009928:	d13f      	bne.n	80099aa <__gethex+0x106>
 800992a:	b944      	cbnz	r4, 800993e <__gethex+0x9a>
 800992c:	1c74      	adds	r4, r6, #1
 800992e:	4622      	mov	r2, r4
 8009930:	4616      	mov	r6, r2
 8009932:	3201      	adds	r2, #1
 8009934:	7830      	ldrb	r0, [r6, #0]
 8009936:	f7ff ff9f 	bl	8009878 <__hexdig_fun>
 800993a:	2800      	cmp	r0, #0
 800993c:	d1f8      	bne.n	8009930 <__gethex+0x8c>
 800993e:	1ba4      	subs	r4, r4, r6
 8009940:	00a7      	lsls	r7, r4, #2
 8009942:	7833      	ldrb	r3, [r6, #0]
 8009944:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009948:	2b50      	cmp	r3, #80	@ 0x50
 800994a:	d13e      	bne.n	80099ca <__gethex+0x126>
 800994c:	7873      	ldrb	r3, [r6, #1]
 800994e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009950:	d033      	beq.n	80099ba <__gethex+0x116>
 8009952:	2b2d      	cmp	r3, #45	@ 0x2d
 8009954:	d034      	beq.n	80099c0 <__gethex+0x11c>
 8009956:	1c71      	adds	r1, r6, #1
 8009958:	2400      	movs	r4, #0
 800995a:	7808      	ldrb	r0, [r1, #0]
 800995c:	f7ff ff8c 	bl	8009878 <__hexdig_fun>
 8009960:	1e43      	subs	r3, r0, #1
 8009962:	b2db      	uxtb	r3, r3
 8009964:	2b18      	cmp	r3, #24
 8009966:	d830      	bhi.n	80099ca <__gethex+0x126>
 8009968:	f1a0 0210 	sub.w	r2, r0, #16
 800996c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009970:	f7ff ff82 	bl	8009878 <__hexdig_fun>
 8009974:	f100 3cff 	add.w	ip, r0, #4294967295
 8009978:	fa5f fc8c 	uxtb.w	ip, ip
 800997c:	f1bc 0f18 	cmp.w	ip, #24
 8009980:	f04f 030a 	mov.w	r3, #10
 8009984:	d91e      	bls.n	80099c4 <__gethex+0x120>
 8009986:	b104      	cbz	r4, 800998a <__gethex+0xe6>
 8009988:	4252      	negs	r2, r2
 800998a:	4417      	add	r7, r2
 800998c:	f8ca 1000 	str.w	r1, [sl]
 8009990:	b1ed      	cbz	r5, 80099ce <__gethex+0x12a>
 8009992:	f1bb 0f00 	cmp.w	fp, #0
 8009996:	bf0c      	ite	eq
 8009998:	2506      	moveq	r5, #6
 800999a:	2500      	movne	r5, #0
 800999c:	4628      	mov	r0, r5
 800999e:	b005      	add	sp, #20
 80099a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a4:	2500      	movs	r5, #0
 80099a6:	462c      	mov	r4, r5
 80099a8:	e7b0      	b.n	800990c <__gethex+0x68>
 80099aa:	2c00      	cmp	r4, #0
 80099ac:	d1c7      	bne.n	800993e <__gethex+0x9a>
 80099ae:	4627      	mov	r7, r4
 80099b0:	e7c7      	b.n	8009942 <__gethex+0x9e>
 80099b2:	464e      	mov	r6, r9
 80099b4:	462f      	mov	r7, r5
 80099b6:	2501      	movs	r5, #1
 80099b8:	e7c3      	b.n	8009942 <__gethex+0x9e>
 80099ba:	2400      	movs	r4, #0
 80099bc:	1cb1      	adds	r1, r6, #2
 80099be:	e7cc      	b.n	800995a <__gethex+0xb6>
 80099c0:	2401      	movs	r4, #1
 80099c2:	e7fb      	b.n	80099bc <__gethex+0x118>
 80099c4:	fb03 0002 	mla	r0, r3, r2, r0
 80099c8:	e7ce      	b.n	8009968 <__gethex+0xc4>
 80099ca:	4631      	mov	r1, r6
 80099cc:	e7de      	b.n	800998c <__gethex+0xe8>
 80099ce:	eba6 0309 	sub.w	r3, r6, r9
 80099d2:	3b01      	subs	r3, #1
 80099d4:	4629      	mov	r1, r5
 80099d6:	2b07      	cmp	r3, #7
 80099d8:	dc0a      	bgt.n	80099f0 <__gethex+0x14c>
 80099da:	9801      	ldr	r0, [sp, #4]
 80099dc:	f000 faf4 	bl	8009fc8 <_Balloc>
 80099e0:	4604      	mov	r4, r0
 80099e2:	b940      	cbnz	r0, 80099f6 <__gethex+0x152>
 80099e4:	4b5c      	ldr	r3, [pc, #368]	@ (8009b58 <__gethex+0x2b4>)
 80099e6:	4602      	mov	r2, r0
 80099e8:	21e4      	movs	r1, #228	@ 0xe4
 80099ea:	485c      	ldr	r0, [pc, #368]	@ (8009b5c <__gethex+0x2b8>)
 80099ec:	f001 f85c 	bl	800aaa8 <__assert_func>
 80099f0:	3101      	adds	r1, #1
 80099f2:	105b      	asrs	r3, r3, #1
 80099f4:	e7ef      	b.n	80099d6 <__gethex+0x132>
 80099f6:	f100 0a14 	add.w	sl, r0, #20
 80099fa:	2300      	movs	r3, #0
 80099fc:	4655      	mov	r5, sl
 80099fe:	469b      	mov	fp, r3
 8009a00:	45b1      	cmp	r9, r6
 8009a02:	d337      	bcc.n	8009a74 <__gethex+0x1d0>
 8009a04:	f845 bb04 	str.w	fp, [r5], #4
 8009a08:	eba5 050a 	sub.w	r5, r5, sl
 8009a0c:	10ad      	asrs	r5, r5, #2
 8009a0e:	6125      	str	r5, [r4, #16]
 8009a10:	4658      	mov	r0, fp
 8009a12:	f000 fbcb 	bl	800a1ac <__hi0bits>
 8009a16:	016d      	lsls	r5, r5, #5
 8009a18:	f8d8 6000 	ldr.w	r6, [r8]
 8009a1c:	1a2d      	subs	r5, r5, r0
 8009a1e:	42b5      	cmp	r5, r6
 8009a20:	dd54      	ble.n	8009acc <__gethex+0x228>
 8009a22:	1bad      	subs	r5, r5, r6
 8009a24:	4629      	mov	r1, r5
 8009a26:	4620      	mov	r0, r4
 8009a28:	f000 ff54 	bl	800a8d4 <__any_on>
 8009a2c:	4681      	mov	r9, r0
 8009a2e:	b178      	cbz	r0, 8009a50 <__gethex+0x1ac>
 8009a30:	1e6b      	subs	r3, r5, #1
 8009a32:	1159      	asrs	r1, r3, #5
 8009a34:	f003 021f 	and.w	r2, r3, #31
 8009a38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009a3c:	f04f 0901 	mov.w	r9, #1
 8009a40:	fa09 f202 	lsl.w	r2, r9, r2
 8009a44:	420a      	tst	r2, r1
 8009a46:	d003      	beq.n	8009a50 <__gethex+0x1ac>
 8009a48:	454b      	cmp	r3, r9
 8009a4a:	dc36      	bgt.n	8009aba <__gethex+0x216>
 8009a4c:	f04f 0902 	mov.w	r9, #2
 8009a50:	4629      	mov	r1, r5
 8009a52:	4620      	mov	r0, r4
 8009a54:	f7ff febe 	bl	80097d4 <rshift>
 8009a58:	442f      	add	r7, r5
 8009a5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a5e:	42bb      	cmp	r3, r7
 8009a60:	da42      	bge.n	8009ae8 <__gethex+0x244>
 8009a62:	9801      	ldr	r0, [sp, #4]
 8009a64:	4621      	mov	r1, r4
 8009a66:	f000 faef 	bl	800a048 <_Bfree>
 8009a6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	6013      	str	r3, [r2, #0]
 8009a70:	25a3      	movs	r5, #163	@ 0xa3
 8009a72:	e793      	b.n	800999c <__gethex+0xf8>
 8009a74:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009a78:	2a2e      	cmp	r2, #46	@ 0x2e
 8009a7a:	d012      	beq.n	8009aa2 <__gethex+0x1fe>
 8009a7c:	2b20      	cmp	r3, #32
 8009a7e:	d104      	bne.n	8009a8a <__gethex+0x1e6>
 8009a80:	f845 bb04 	str.w	fp, [r5], #4
 8009a84:	f04f 0b00 	mov.w	fp, #0
 8009a88:	465b      	mov	r3, fp
 8009a8a:	7830      	ldrb	r0, [r6, #0]
 8009a8c:	9303      	str	r3, [sp, #12]
 8009a8e:	f7ff fef3 	bl	8009878 <__hexdig_fun>
 8009a92:	9b03      	ldr	r3, [sp, #12]
 8009a94:	f000 000f 	and.w	r0, r0, #15
 8009a98:	4098      	lsls	r0, r3
 8009a9a:	ea4b 0b00 	orr.w	fp, fp, r0
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	e7ae      	b.n	8009a00 <__gethex+0x15c>
 8009aa2:	45b1      	cmp	r9, r6
 8009aa4:	d8ea      	bhi.n	8009a7c <__gethex+0x1d8>
 8009aa6:	492b      	ldr	r1, [pc, #172]	@ (8009b54 <__gethex+0x2b0>)
 8009aa8:	9303      	str	r3, [sp, #12]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	4630      	mov	r0, r6
 8009aae:	f7ff fdaa 	bl	8009606 <strncmp>
 8009ab2:	9b03      	ldr	r3, [sp, #12]
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	d1e1      	bne.n	8009a7c <__gethex+0x1d8>
 8009ab8:	e7a2      	b.n	8009a00 <__gethex+0x15c>
 8009aba:	1ea9      	subs	r1, r5, #2
 8009abc:	4620      	mov	r0, r4
 8009abe:	f000 ff09 	bl	800a8d4 <__any_on>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	d0c2      	beq.n	8009a4c <__gethex+0x1a8>
 8009ac6:	f04f 0903 	mov.w	r9, #3
 8009aca:	e7c1      	b.n	8009a50 <__gethex+0x1ac>
 8009acc:	da09      	bge.n	8009ae2 <__gethex+0x23e>
 8009ace:	1b75      	subs	r5, r6, r5
 8009ad0:	4621      	mov	r1, r4
 8009ad2:	9801      	ldr	r0, [sp, #4]
 8009ad4:	462a      	mov	r2, r5
 8009ad6:	f000 fcc7 	bl	800a468 <__lshift>
 8009ada:	1b7f      	subs	r7, r7, r5
 8009adc:	4604      	mov	r4, r0
 8009ade:	f100 0a14 	add.w	sl, r0, #20
 8009ae2:	f04f 0900 	mov.w	r9, #0
 8009ae6:	e7b8      	b.n	8009a5a <__gethex+0x1b6>
 8009ae8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009aec:	42bd      	cmp	r5, r7
 8009aee:	dd6f      	ble.n	8009bd0 <__gethex+0x32c>
 8009af0:	1bed      	subs	r5, r5, r7
 8009af2:	42ae      	cmp	r6, r5
 8009af4:	dc34      	bgt.n	8009b60 <__gethex+0x2bc>
 8009af6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	d022      	beq.n	8009b44 <__gethex+0x2a0>
 8009afe:	2b03      	cmp	r3, #3
 8009b00:	d024      	beq.n	8009b4c <__gethex+0x2a8>
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d115      	bne.n	8009b32 <__gethex+0x28e>
 8009b06:	42ae      	cmp	r6, r5
 8009b08:	d113      	bne.n	8009b32 <__gethex+0x28e>
 8009b0a:	2e01      	cmp	r6, #1
 8009b0c:	d10b      	bne.n	8009b26 <__gethex+0x282>
 8009b0e:	9a02      	ldr	r2, [sp, #8]
 8009b10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009b14:	6013      	str	r3, [r2, #0]
 8009b16:	2301      	movs	r3, #1
 8009b18:	6123      	str	r3, [r4, #16]
 8009b1a:	f8ca 3000 	str.w	r3, [sl]
 8009b1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b20:	2562      	movs	r5, #98	@ 0x62
 8009b22:	601c      	str	r4, [r3, #0]
 8009b24:	e73a      	b.n	800999c <__gethex+0xf8>
 8009b26:	1e71      	subs	r1, r6, #1
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f000 fed3 	bl	800a8d4 <__any_on>
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	d1ed      	bne.n	8009b0e <__gethex+0x26a>
 8009b32:	9801      	ldr	r0, [sp, #4]
 8009b34:	4621      	mov	r1, r4
 8009b36:	f000 fa87 	bl	800a048 <_Bfree>
 8009b3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	6013      	str	r3, [r2, #0]
 8009b40:	2550      	movs	r5, #80	@ 0x50
 8009b42:	e72b      	b.n	800999c <__gethex+0xf8>
 8009b44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1f3      	bne.n	8009b32 <__gethex+0x28e>
 8009b4a:	e7e0      	b.n	8009b0e <__gethex+0x26a>
 8009b4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1dd      	bne.n	8009b0e <__gethex+0x26a>
 8009b52:	e7ee      	b.n	8009b32 <__gethex+0x28e>
 8009b54:	0800b55c 	.word	0x0800b55c
 8009b58:	0800b572 	.word	0x0800b572
 8009b5c:	0800b583 	.word	0x0800b583
 8009b60:	1e6f      	subs	r7, r5, #1
 8009b62:	f1b9 0f00 	cmp.w	r9, #0
 8009b66:	d130      	bne.n	8009bca <__gethex+0x326>
 8009b68:	b127      	cbz	r7, 8009b74 <__gethex+0x2d0>
 8009b6a:	4639      	mov	r1, r7
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	f000 feb1 	bl	800a8d4 <__any_on>
 8009b72:	4681      	mov	r9, r0
 8009b74:	117a      	asrs	r2, r7, #5
 8009b76:	2301      	movs	r3, #1
 8009b78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009b7c:	f007 071f 	and.w	r7, r7, #31
 8009b80:	40bb      	lsls	r3, r7
 8009b82:	4213      	tst	r3, r2
 8009b84:	4629      	mov	r1, r5
 8009b86:	4620      	mov	r0, r4
 8009b88:	bf18      	it	ne
 8009b8a:	f049 0902 	orrne.w	r9, r9, #2
 8009b8e:	f7ff fe21 	bl	80097d4 <rshift>
 8009b92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009b96:	1b76      	subs	r6, r6, r5
 8009b98:	2502      	movs	r5, #2
 8009b9a:	f1b9 0f00 	cmp.w	r9, #0
 8009b9e:	d047      	beq.n	8009c30 <__gethex+0x38c>
 8009ba0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d015      	beq.n	8009bd4 <__gethex+0x330>
 8009ba8:	2b03      	cmp	r3, #3
 8009baa:	d017      	beq.n	8009bdc <__gethex+0x338>
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d109      	bne.n	8009bc4 <__gethex+0x320>
 8009bb0:	f019 0f02 	tst.w	r9, #2
 8009bb4:	d006      	beq.n	8009bc4 <__gethex+0x320>
 8009bb6:	f8da 3000 	ldr.w	r3, [sl]
 8009bba:	ea49 0903 	orr.w	r9, r9, r3
 8009bbe:	f019 0f01 	tst.w	r9, #1
 8009bc2:	d10e      	bne.n	8009be2 <__gethex+0x33e>
 8009bc4:	f045 0510 	orr.w	r5, r5, #16
 8009bc8:	e032      	b.n	8009c30 <__gethex+0x38c>
 8009bca:	f04f 0901 	mov.w	r9, #1
 8009bce:	e7d1      	b.n	8009b74 <__gethex+0x2d0>
 8009bd0:	2501      	movs	r5, #1
 8009bd2:	e7e2      	b.n	8009b9a <__gethex+0x2f6>
 8009bd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bd6:	f1c3 0301 	rsb	r3, r3, #1
 8009bda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009bdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d0f0      	beq.n	8009bc4 <__gethex+0x320>
 8009be2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009be6:	f104 0314 	add.w	r3, r4, #20
 8009bea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009bee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009bf2:	f04f 0c00 	mov.w	ip, #0
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bfc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009c00:	d01b      	beq.n	8009c3a <__gethex+0x396>
 8009c02:	3201      	adds	r2, #1
 8009c04:	6002      	str	r2, [r0, #0]
 8009c06:	2d02      	cmp	r5, #2
 8009c08:	f104 0314 	add.w	r3, r4, #20
 8009c0c:	d13c      	bne.n	8009c88 <__gethex+0x3e4>
 8009c0e:	f8d8 2000 	ldr.w	r2, [r8]
 8009c12:	3a01      	subs	r2, #1
 8009c14:	42b2      	cmp	r2, r6
 8009c16:	d109      	bne.n	8009c2c <__gethex+0x388>
 8009c18:	1171      	asrs	r1, r6, #5
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009c20:	f006 061f 	and.w	r6, r6, #31
 8009c24:	fa02 f606 	lsl.w	r6, r2, r6
 8009c28:	421e      	tst	r6, r3
 8009c2a:	d13a      	bne.n	8009ca2 <__gethex+0x3fe>
 8009c2c:	f045 0520 	orr.w	r5, r5, #32
 8009c30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c32:	601c      	str	r4, [r3, #0]
 8009c34:	9b02      	ldr	r3, [sp, #8]
 8009c36:	601f      	str	r7, [r3, #0]
 8009c38:	e6b0      	b.n	800999c <__gethex+0xf8>
 8009c3a:	4299      	cmp	r1, r3
 8009c3c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009c40:	d8d9      	bhi.n	8009bf6 <__gethex+0x352>
 8009c42:	68a3      	ldr	r3, [r4, #8]
 8009c44:	459b      	cmp	fp, r3
 8009c46:	db17      	blt.n	8009c78 <__gethex+0x3d4>
 8009c48:	6861      	ldr	r1, [r4, #4]
 8009c4a:	9801      	ldr	r0, [sp, #4]
 8009c4c:	3101      	adds	r1, #1
 8009c4e:	f000 f9bb 	bl	8009fc8 <_Balloc>
 8009c52:	4681      	mov	r9, r0
 8009c54:	b918      	cbnz	r0, 8009c5e <__gethex+0x3ba>
 8009c56:	4b1a      	ldr	r3, [pc, #104]	@ (8009cc0 <__gethex+0x41c>)
 8009c58:	4602      	mov	r2, r0
 8009c5a:	2184      	movs	r1, #132	@ 0x84
 8009c5c:	e6c5      	b.n	80099ea <__gethex+0x146>
 8009c5e:	6922      	ldr	r2, [r4, #16]
 8009c60:	3202      	adds	r2, #2
 8009c62:	f104 010c 	add.w	r1, r4, #12
 8009c66:	0092      	lsls	r2, r2, #2
 8009c68:	300c      	adds	r0, #12
 8009c6a:	f7ff fd52 	bl	8009712 <memcpy>
 8009c6e:	4621      	mov	r1, r4
 8009c70:	9801      	ldr	r0, [sp, #4]
 8009c72:	f000 f9e9 	bl	800a048 <_Bfree>
 8009c76:	464c      	mov	r4, r9
 8009c78:	6923      	ldr	r3, [r4, #16]
 8009c7a:	1c5a      	adds	r2, r3, #1
 8009c7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c80:	6122      	str	r2, [r4, #16]
 8009c82:	2201      	movs	r2, #1
 8009c84:	615a      	str	r2, [r3, #20]
 8009c86:	e7be      	b.n	8009c06 <__gethex+0x362>
 8009c88:	6922      	ldr	r2, [r4, #16]
 8009c8a:	455a      	cmp	r2, fp
 8009c8c:	dd0b      	ble.n	8009ca6 <__gethex+0x402>
 8009c8e:	2101      	movs	r1, #1
 8009c90:	4620      	mov	r0, r4
 8009c92:	f7ff fd9f 	bl	80097d4 <rshift>
 8009c96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c9a:	3701      	adds	r7, #1
 8009c9c:	42bb      	cmp	r3, r7
 8009c9e:	f6ff aee0 	blt.w	8009a62 <__gethex+0x1be>
 8009ca2:	2501      	movs	r5, #1
 8009ca4:	e7c2      	b.n	8009c2c <__gethex+0x388>
 8009ca6:	f016 061f 	ands.w	r6, r6, #31
 8009caa:	d0fa      	beq.n	8009ca2 <__gethex+0x3fe>
 8009cac:	4453      	add	r3, sl
 8009cae:	f1c6 0620 	rsb	r6, r6, #32
 8009cb2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009cb6:	f000 fa79 	bl	800a1ac <__hi0bits>
 8009cba:	42b0      	cmp	r0, r6
 8009cbc:	dbe7      	blt.n	8009c8e <__gethex+0x3ea>
 8009cbe:	e7f0      	b.n	8009ca2 <__gethex+0x3fe>
 8009cc0:	0800b572 	.word	0x0800b572

08009cc4 <L_shift>:
 8009cc4:	f1c2 0208 	rsb	r2, r2, #8
 8009cc8:	0092      	lsls	r2, r2, #2
 8009cca:	b570      	push	{r4, r5, r6, lr}
 8009ccc:	f1c2 0620 	rsb	r6, r2, #32
 8009cd0:	6843      	ldr	r3, [r0, #4]
 8009cd2:	6804      	ldr	r4, [r0, #0]
 8009cd4:	fa03 f506 	lsl.w	r5, r3, r6
 8009cd8:	432c      	orrs	r4, r5
 8009cda:	40d3      	lsrs	r3, r2
 8009cdc:	6004      	str	r4, [r0, #0]
 8009cde:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ce2:	4288      	cmp	r0, r1
 8009ce4:	d3f4      	bcc.n	8009cd0 <L_shift+0xc>
 8009ce6:	bd70      	pop	{r4, r5, r6, pc}

08009ce8 <__match>:
 8009ce8:	b530      	push	{r4, r5, lr}
 8009cea:	6803      	ldr	r3, [r0, #0]
 8009cec:	3301      	adds	r3, #1
 8009cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cf2:	b914      	cbnz	r4, 8009cfa <__match+0x12>
 8009cf4:	6003      	str	r3, [r0, #0]
 8009cf6:	2001      	movs	r0, #1
 8009cf8:	bd30      	pop	{r4, r5, pc}
 8009cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cfe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009d02:	2d19      	cmp	r5, #25
 8009d04:	bf98      	it	ls
 8009d06:	3220      	addls	r2, #32
 8009d08:	42a2      	cmp	r2, r4
 8009d0a:	d0f0      	beq.n	8009cee <__match+0x6>
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	e7f3      	b.n	8009cf8 <__match+0x10>

08009d10 <__hexnan>:
 8009d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d14:	680b      	ldr	r3, [r1, #0]
 8009d16:	6801      	ldr	r1, [r0, #0]
 8009d18:	115e      	asrs	r6, r3, #5
 8009d1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009d1e:	f013 031f 	ands.w	r3, r3, #31
 8009d22:	b087      	sub	sp, #28
 8009d24:	bf18      	it	ne
 8009d26:	3604      	addne	r6, #4
 8009d28:	2500      	movs	r5, #0
 8009d2a:	1f37      	subs	r7, r6, #4
 8009d2c:	4682      	mov	sl, r0
 8009d2e:	4690      	mov	r8, r2
 8009d30:	9301      	str	r3, [sp, #4]
 8009d32:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d36:	46b9      	mov	r9, r7
 8009d38:	463c      	mov	r4, r7
 8009d3a:	9502      	str	r5, [sp, #8]
 8009d3c:	46ab      	mov	fp, r5
 8009d3e:	784a      	ldrb	r2, [r1, #1]
 8009d40:	1c4b      	adds	r3, r1, #1
 8009d42:	9303      	str	r3, [sp, #12]
 8009d44:	b342      	cbz	r2, 8009d98 <__hexnan+0x88>
 8009d46:	4610      	mov	r0, r2
 8009d48:	9105      	str	r1, [sp, #20]
 8009d4a:	9204      	str	r2, [sp, #16]
 8009d4c:	f7ff fd94 	bl	8009878 <__hexdig_fun>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	d151      	bne.n	8009df8 <__hexnan+0xe8>
 8009d54:	9a04      	ldr	r2, [sp, #16]
 8009d56:	9905      	ldr	r1, [sp, #20]
 8009d58:	2a20      	cmp	r2, #32
 8009d5a:	d818      	bhi.n	8009d8e <__hexnan+0x7e>
 8009d5c:	9b02      	ldr	r3, [sp, #8]
 8009d5e:	459b      	cmp	fp, r3
 8009d60:	dd13      	ble.n	8009d8a <__hexnan+0x7a>
 8009d62:	454c      	cmp	r4, r9
 8009d64:	d206      	bcs.n	8009d74 <__hexnan+0x64>
 8009d66:	2d07      	cmp	r5, #7
 8009d68:	dc04      	bgt.n	8009d74 <__hexnan+0x64>
 8009d6a:	462a      	mov	r2, r5
 8009d6c:	4649      	mov	r1, r9
 8009d6e:	4620      	mov	r0, r4
 8009d70:	f7ff ffa8 	bl	8009cc4 <L_shift>
 8009d74:	4544      	cmp	r4, r8
 8009d76:	d952      	bls.n	8009e1e <__hexnan+0x10e>
 8009d78:	2300      	movs	r3, #0
 8009d7a:	f1a4 0904 	sub.w	r9, r4, #4
 8009d7e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d82:	f8cd b008 	str.w	fp, [sp, #8]
 8009d86:	464c      	mov	r4, r9
 8009d88:	461d      	mov	r5, r3
 8009d8a:	9903      	ldr	r1, [sp, #12]
 8009d8c:	e7d7      	b.n	8009d3e <__hexnan+0x2e>
 8009d8e:	2a29      	cmp	r2, #41	@ 0x29
 8009d90:	d157      	bne.n	8009e42 <__hexnan+0x132>
 8009d92:	3102      	adds	r1, #2
 8009d94:	f8ca 1000 	str.w	r1, [sl]
 8009d98:	f1bb 0f00 	cmp.w	fp, #0
 8009d9c:	d051      	beq.n	8009e42 <__hexnan+0x132>
 8009d9e:	454c      	cmp	r4, r9
 8009da0:	d206      	bcs.n	8009db0 <__hexnan+0xa0>
 8009da2:	2d07      	cmp	r5, #7
 8009da4:	dc04      	bgt.n	8009db0 <__hexnan+0xa0>
 8009da6:	462a      	mov	r2, r5
 8009da8:	4649      	mov	r1, r9
 8009daa:	4620      	mov	r0, r4
 8009dac:	f7ff ff8a 	bl	8009cc4 <L_shift>
 8009db0:	4544      	cmp	r4, r8
 8009db2:	d936      	bls.n	8009e22 <__hexnan+0x112>
 8009db4:	f1a8 0204 	sub.w	r2, r8, #4
 8009db8:	4623      	mov	r3, r4
 8009dba:	f853 1b04 	ldr.w	r1, [r3], #4
 8009dbe:	f842 1f04 	str.w	r1, [r2, #4]!
 8009dc2:	429f      	cmp	r7, r3
 8009dc4:	d2f9      	bcs.n	8009dba <__hexnan+0xaa>
 8009dc6:	1b3b      	subs	r3, r7, r4
 8009dc8:	f023 0303 	bic.w	r3, r3, #3
 8009dcc:	3304      	adds	r3, #4
 8009dce:	3401      	adds	r4, #1
 8009dd0:	3e03      	subs	r6, #3
 8009dd2:	42b4      	cmp	r4, r6
 8009dd4:	bf88      	it	hi
 8009dd6:	2304      	movhi	r3, #4
 8009dd8:	4443      	add	r3, r8
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f843 2b04 	str.w	r2, [r3], #4
 8009de0:	429f      	cmp	r7, r3
 8009de2:	d2fb      	bcs.n	8009ddc <__hexnan+0xcc>
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	b91b      	cbnz	r3, 8009df0 <__hexnan+0xe0>
 8009de8:	4547      	cmp	r7, r8
 8009dea:	d128      	bne.n	8009e3e <__hexnan+0x12e>
 8009dec:	2301      	movs	r3, #1
 8009dee:	603b      	str	r3, [r7, #0]
 8009df0:	2005      	movs	r0, #5
 8009df2:	b007      	add	sp, #28
 8009df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df8:	3501      	adds	r5, #1
 8009dfa:	2d08      	cmp	r5, #8
 8009dfc:	f10b 0b01 	add.w	fp, fp, #1
 8009e00:	dd06      	ble.n	8009e10 <__hexnan+0x100>
 8009e02:	4544      	cmp	r4, r8
 8009e04:	d9c1      	bls.n	8009d8a <__hexnan+0x7a>
 8009e06:	2300      	movs	r3, #0
 8009e08:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e0c:	2501      	movs	r5, #1
 8009e0e:	3c04      	subs	r4, #4
 8009e10:	6822      	ldr	r2, [r4, #0]
 8009e12:	f000 000f 	and.w	r0, r0, #15
 8009e16:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009e1a:	6020      	str	r0, [r4, #0]
 8009e1c:	e7b5      	b.n	8009d8a <__hexnan+0x7a>
 8009e1e:	2508      	movs	r5, #8
 8009e20:	e7b3      	b.n	8009d8a <__hexnan+0x7a>
 8009e22:	9b01      	ldr	r3, [sp, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d0dd      	beq.n	8009de4 <__hexnan+0xd4>
 8009e28:	f1c3 0320 	rsb	r3, r3, #32
 8009e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e30:	40da      	lsrs	r2, r3
 8009e32:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009e36:	4013      	ands	r3, r2
 8009e38:	f846 3c04 	str.w	r3, [r6, #-4]
 8009e3c:	e7d2      	b.n	8009de4 <__hexnan+0xd4>
 8009e3e:	3f04      	subs	r7, #4
 8009e40:	e7d0      	b.n	8009de4 <__hexnan+0xd4>
 8009e42:	2004      	movs	r0, #4
 8009e44:	e7d5      	b.n	8009df2 <__hexnan+0xe2>
	...

08009e48 <sbrk_aligned>:
 8009e48:	b570      	push	{r4, r5, r6, lr}
 8009e4a:	4e0f      	ldr	r6, [pc, #60]	@ (8009e88 <sbrk_aligned+0x40>)
 8009e4c:	460c      	mov	r4, r1
 8009e4e:	6831      	ldr	r1, [r6, #0]
 8009e50:	4605      	mov	r5, r0
 8009e52:	b911      	cbnz	r1, 8009e5a <sbrk_aligned+0x12>
 8009e54:	f000 fe18 	bl	800aa88 <_sbrk_r>
 8009e58:	6030      	str	r0, [r6, #0]
 8009e5a:	4621      	mov	r1, r4
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	f000 fe13 	bl	800aa88 <_sbrk_r>
 8009e62:	1c43      	adds	r3, r0, #1
 8009e64:	d103      	bne.n	8009e6e <sbrk_aligned+0x26>
 8009e66:	f04f 34ff 	mov.w	r4, #4294967295
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	bd70      	pop	{r4, r5, r6, pc}
 8009e6e:	1cc4      	adds	r4, r0, #3
 8009e70:	f024 0403 	bic.w	r4, r4, #3
 8009e74:	42a0      	cmp	r0, r4
 8009e76:	d0f8      	beq.n	8009e6a <sbrk_aligned+0x22>
 8009e78:	1a21      	subs	r1, r4, r0
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	f000 fe04 	bl	800aa88 <_sbrk_r>
 8009e80:	3001      	adds	r0, #1
 8009e82:	d1f2      	bne.n	8009e6a <sbrk_aligned+0x22>
 8009e84:	e7ef      	b.n	8009e66 <sbrk_aligned+0x1e>
 8009e86:	bf00      	nop
 8009e88:	240005c4 	.word	0x240005c4

08009e8c <_malloc_r>:
 8009e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e90:	1ccd      	adds	r5, r1, #3
 8009e92:	f025 0503 	bic.w	r5, r5, #3
 8009e96:	3508      	adds	r5, #8
 8009e98:	2d0c      	cmp	r5, #12
 8009e9a:	bf38      	it	cc
 8009e9c:	250c      	movcc	r5, #12
 8009e9e:	2d00      	cmp	r5, #0
 8009ea0:	4606      	mov	r6, r0
 8009ea2:	db01      	blt.n	8009ea8 <_malloc_r+0x1c>
 8009ea4:	42a9      	cmp	r1, r5
 8009ea6:	d904      	bls.n	8009eb2 <_malloc_r+0x26>
 8009ea8:	230c      	movs	r3, #12
 8009eaa:	6033      	str	r3, [r6, #0]
 8009eac:	2000      	movs	r0, #0
 8009eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f88 <_malloc_r+0xfc>
 8009eb6:	f000 f87b 	bl	8009fb0 <__malloc_lock>
 8009eba:	f8d8 3000 	ldr.w	r3, [r8]
 8009ebe:	461c      	mov	r4, r3
 8009ec0:	bb44      	cbnz	r4, 8009f14 <_malloc_r+0x88>
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	f7ff ffbf 	bl	8009e48 <sbrk_aligned>
 8009eca:	1c43      	adds	r3, r0, #1
 8009ecc:	4604      	mov	r4, r0
 8009ece:	d158      	bne.n	8009f82 <_malloc_r+0xf6>
 8009ed0:	f8d8 4000 	ldr.w	r4, [r8]
 8009ed4:	4627      	mov	r7, r4
 8009ed6:	2f00      	cmp	r7, #0
 8009ed8:	d143      	bne.n	8009f62 <_malloc_r+0xd6>
 8009eda:	2c00      	cmp	r4, #0
 8009edc:	d04b      	beq.n	8009f76 <_malloc_r+0xea>
 8009ede:	6823      	ldr	r3, [r4, #0]
 8009ee0:	4639      	mov	r1, r7
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	eb04 0903 	add.w	r9, r4, r3
 8009ee8:	f000 fdce 	bl	800aa88 <_sbrk_r>
 8009eec:	4581      	cmp	r9, r0
 8009eee:	d142      	bne.n	8009f76 <_malloc_r+0xea>
 8009ef0:	6821      	ldr	r1, [r4, #0]
 8009ef2:	1a6d      	subs	r5, r5, r1
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	f7ff ffa6 	bl	8009e48 <sbrk_aligned>
 8009efc:	3001      	adds	r0, #1
 8009efe:	d03a      	beq.n	8009f76 <_malloc_r+0xea>
 8009f00:	6823      	ldr	r3, [r4, #0]
 8009f02:	442b      	add	r3, r5
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	f8d8 3000 	ldr.w	r3, [r8]
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	bb62      	cbnz	r2, 8009f68 <_malloc_r+0xdc>
 8009f0e:	f8c8 7000 	str.w	r7, [r8]
 8009f12:	e00f      	b.n	8009f34 <_malloc_r+0xa8>
 8009f14:	6822      	ldr	r2, [r4, #0]
 8009f16:	1b52      	subs	r2, r2, r5
 8009f18:	d420      	bmi.n	8009f5c <_malloc_r+0xd0>
 8009f1a:	2a0b      	cmp	r2, #11
 8009f1c:	d917      	bls.n	8009f4e <_malloc_r+0xc2>
 8009f1e:	1961      	adds	r1, r4, r5
 8009f20:	42a3      	cmp	r3, r4
 8009f22:	6025      	str	r5, [r4, #0]
 8009f24:	bf18      	it	ne
 8009f26:	6059      	strne	r1, [r3, #4]
 8009f28:	6863      	ldr	r3, [r4, #4]
 8009f2a:	bf08      	it	eq
 8009f2c:	f8c8 1000 	streq.w	r1, [r8]
 8009f30:	5162      	str	r2, [r4, r5]
 8009f32:	604b      	str	r3, [r1, #4]
 8009f34:	4630      	mov	r0, r6
 8009f36:	f000 f841 	bl	8009fbc <__malloc_unlock>
 8009f3a:	f104 000b 	add.w	r0, r4, #11
 8009f3e:	1d23      	adds	r3, r4, #4
 8009f40:	f020 0007 	bic.w	r0, r0, #7
 8009f44:	1ac2      	subs	r2, r0, r3
 8009f46:	bf1c      	itt	ne
 8009f48:	1a1b      	subne	r3, r3, r0
 8009f4a:	50a3      	strne	r3, [r4, r2]
 8009f4c:	e7af      	b.n	8009eae <_malloc_r+0x22>
 8009f4e:	6862      	ldr	r2, [r4, #4]
 8009f50:	42a3      	cmp	r3, r4
 8009f52:	bf0c      	ite	eq
 8009f54:	f8c8 2000 	streq.w	r2, [r8]
 8009f58:	605a      	strne	r2, [r3, #4]
 8009f5a:	e7eb      	b.n	8009f34 <_malloc_r+0xa8>
 8009f5c:	4623      	mov	r3, r4
 8009f5e:	6864      	ldr	r4, [r4, #4]
 8009f60:	e7ae      	b.n	8009ec0 <_malloc_r+0x34>
 8009f62:	463c      	mov	r4, r7
 8009f64:	687f      	ldr	r7, [r7, #4]
 8009f66:	e7b6      	b.n	8009ed6 <_malloc_r+0x4a>
 8009f68:	461a      	mov	r2, r3
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	42a3      	cmp	r3, r4
 8009f6e:	d1fb      	bne.n	8009f68 <_malloc_r+0xdc>
 8009f70:	2300      	movs	r3, #0
 8009f72:	6053      	str	r3, [r2, #4]
 8009f74:	e7de      	b.n	8009f34 <_malloc_r+0xa8>
 8009f76:	230c      	movs	r3, #12
 8009f78:	6033      	str	r3, [r6, #0]
 8009f7a:	4630      	mov	r0, r6
 8009f7c:	f000 f81e 	bl	8009fbc <__malloc_unlock>
 8009f80:	e794      	b.n	8009eac <_malloc_r+0x20>
 8009f82:	6005      	str	r5, [r0, #0]
 8009f84:	e7d6      	b.n	8009f34 <_malloc_r+0xa8>
 8009f86:	bf00      	nop
 8009f88:	240005c8 	.word	0x240005c8

08009f8c <__ascii_mbtowc>:
 8009f8c:	b082      	sub	sp, #8
 8009f8e:	b901      	cbnz	r1, 8009f92 <__ascii_mbtowc+0x6>
 8009f90:	a901      	add	r1, sp, #4
 8009f92:	b142      	cbz	r2, 8009fa6 <__ascii_mbtowc+0x1a>
 8009f94:	b14b      	cbz	r3, 8009faa <__ascii_mbtowc+0x1e>
 8009f96:	7813      	ldrb	r3, [r2, #0]
 8009f98:	600b      	str	r3, [r1, #0]
 8009f9a:	7812      	ldrb	r2, [r2, #0]
 8009f9c:	1e10      	subs	r0, r2, #0
 8009f9e:	bf18      	it	ne
 8009fa0:	2001      	movne	r0, #1
 8009fa2:	b002      	add	sp, #8
 8009fa4:	4770      	bx	lr
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	e7fb      	b.n	8009fa2 <__ascii_mbtowc+0x16>
 8009faa:	f06f 0001 	mvn.w	r0, #1
 8009fae:	e7f8      	b.n	8009fa2 <__ascii_mbtowc+0x16>

08009fb0 <__malloc_lock>:
 8009fb0:	4801      	ldr	r0, [pc, #4]	@ (8009fb8 <__malloc_lock+0x8>)
 8009fb2:	f7ff bbac 	b.w	800970e <__retarget_lock_acquire_recursive>
 8009fb6:	bf00      	nop
 8009fb8:	240005c0 	.word	0x240005c0

08009fbc <__malloc_unlock>:
 8009fbc:	4801      	ldr	r0, [pc, #4]	@ (8009fc4 <__malloc_unlock+0x8>)
 8009fbe:	f7ff bba7 	b.w	8009710 <__retarget_lock_release_recursive>
 8009fc2:	bf00      	nop
 8009fc4:	240005c0 	.word	0x240005c0

08009fc8 <_Balloc>:
 8009fc8:	b570      	push	{r4, r5, r6, lr}
 8009fca:	69c6      	ldr	r6, [r0, #28]
 8009fcc:	4604      	mov	r4, r0
 8009fce:	460d      	mov	r5, r1
 8009fd0:	b976      	cbnz	r6, 8009ff0 <_Balloc+0x28>
 8009fd2:	2010      	movs	r0, #16
 8009fd4:	f000 fd9a 	bl	800ab0c <malloc>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	61e0      	str	r0, [r4, #28]
 8009fdc:	b920      	cbnz	r0, 8009fe8 <_Balloc+0x20>
 8009fde:	4b18      	ldr	r3, [pc, #96]	@ (800a040 <_Balloc+0x78>)
 8009fe0:	4818      	ldr	r0, [pc, #96]	@ (800a044 <_Balloc+0x7c>)
 8009fe2:	216b      	movs	r1, #107	@ 0x6b
 8009fe4:	f000 fd60 	bl	800aaa8 <__assert_func>
 8009fe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fec:	6006      	str	r6, [r0, #0]
 8009fee:	60c6      	str	r6, [r0, #12]
 8009ff0:	69e6      	ldr	r6, [r4, #28]
 8009ff2:	68f3      	ldr	r3, [r6, #12]
 8009ff4:	b183      	cbz	r3, 800a018 <_Balloc+0x50>
 8009ff6:	69e3      	ldr	r3, [r4, #28]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ffe:	b9b8      	cbnz	r0, 800a030 <_Balloc+0x68>
 800a000:	2101      	movs	r1, #1
 800a002:	fa01 f605 	lsl.w	r6, r1, r5
 800a006:	1d72      	adds	r2, r6, #5
 800a008:	0092      	lsls	r2, r2, #2
 800a00a:	4620      	mov	r0, r4
 800a00c:	f000 fd6a 	bl	800aae4 <_calloc_r>
 800a010:	b160      	cbz	r0, 800a02c <_Balloc+0x64>
 800a012:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a016:	e00e      	b.n	800a036 <_Balloc+0x6e>
 800a018:	2221      	movs	r2, #33	@ 0x21
 800a01a:	2104      	movs	r1, #4
 800a01c:	4620      	mov	r0, r4
 800a01e:	f000 fd61 	bl	800aae4 <_calloc_r>
 800a022:	69e3      	ldr	r3, [r4, #28]
 800a024:	60f0      	str	r0, [r6, #12]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1e4      	bne.n	8009ff6 <_Balloc+0x2e>
 800a02c:	2000      	movs	r0, #0
 800a02e:	bd70      	pop	{r4, r5, r6, pc}
 800a030:	6802      	ldr	r2, [r0, #0]
 800a032:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a036:	2300      	movs	r3, #0
 800a038:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a03c:	e7f7      	b.n	800a02e <_Balloc+0x66>
 800a03e:	bf00      	nop
 800a040:	0800b5e3 	.word	0x0800b5e3
 800a044:	0800b5fa 	.word	0x0800b5fa

0800a048 <_Bfree>:
 800a048:	b570      	push	{r4, r5, r6, lr}
 800a04a:	69c6      	ldr	r6, [r0, #28]
 800a04c:	4605      	mov	r5, r0
 800a04e:	460c      	mov	r4, r1
 800a050:	b976      	cbnz	r6, 800a070 <_Bfree+0x28>
 800a052:	2010      	movs	r0, #16
 800a054:	f000 fd5a 	bl	800ab0c <malloc>
 800a058:	4602      	mov	r2, r0
 800a05a:	61e8      	str	r0, [r5, #28]
 800a05c:	b920      	cbnz	r0, 800a068 <_Bfree+0x20>
 800a05e:	4b09      	ldr	r3, [pc, #36]	@ (800a084 <_Bfree+0x3c>)
 800a060:	4809      	ldr	r0, [pc, #36]	@ (800a088 <_Bfree+0x40>)
 800a062:	218f      	movs	r1, #143	@ 0x8f
 800a064:	f000 fd20 	bl	800aaa8 <__assert_func>
 800a068:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a06c:	6006      	str	r6, [r0, #0]
 800a06e:	60c6      	str	r6, [r0, #12]
 800a070:	b13c      	cbz	r4, 800a082 <_Bfree+0x3a>
 800a072:	69eb      	ldr	r3, [r5, #28]
 800a074:	6862      	ldr	r2, [r4, #4]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a07c:	6021      	str	r1, [r4, #0]
 800a07e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a082:	bd70      	pop	{r4, r5, r6, pc}
 800a084:	0800b5e3 	.word	0x0800b5e3
 800a088:	0800b5fa 	.word	0x0800b5fa

0800a08c <__multadd>:
 800a08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a090:	690d      	ldr	r5, [r1, #16]
 800a092:	4607      	mov	r7, r0
 800a094:	460c      	mov	r4, r1
 800a096:	461e      	mov	r6, r3
 800a098:	f101 0c14 	add.w	ip, r1, #20
 800a09c:	2000      	movs	r0, #0
 800a09e:	f8dc 3000 	ldr.w	r3, [ip]
 800a0a2:	b299      	uxth	r1, r3
 800a0a4:	fb02 6101 	mla	r1, r2, r1, r6
 800a0a8:	0c1e      	lsrs	r6, r3, #16
 800a0aa:	0c0b      	lsrs	r3, r1, #16
 800a0ac:	fb02 3306 	mla	r3, r2, r6, r3
 800a0b0:	b289      	uxth	r1, r1
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a0b8:	4285      	cmp	r5, r0
 800a0ba:	f84c 1b04 	str.w	r1, [ip], #4
 800a0be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0c2:	dcec      	bgt.n	800a09e <__multadd+0x12>
 800a0c4:	b30e      	cbz	r6, 800a10a <__multadd+0x7e>
 800a0c6:	68a3      	ldr	r3, [r4, #8]
 800a0c8:	42ab      	cmp	r3, r5
 800a0ca:	dc19      	bgt.n	800a100 <__multadd+0x74>
 800a0cc:	6861      	ldr	r1, [r4, #4]
 800a0ce:	4638      	mov	r0, r7
 800a0d0:	3101      	adds	r1, #1
 800a0d2:	f7ff ff79 	bl	8009fc8 <_Balloc>
 800a0d6:	4680      	mov	r8, r0
 800a0d8:	b928      	cbnz	r0, 800a0e6 <__multadd+0x5a>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a110 <__multadd+0x84>)
 800a0de:	480d      	ldr	r0, [pc, #52]	@ (800a114 <__multadd+0x88>)
 800a0e0:	21ba      	movs	r1, #186	@ 0xba
 800a0e2:	f000 fce1 	bl	800aaa8 <__assert_func>
 800a0e6:	6922      	ldr	r2, [r4, #16]
 800a0e8:	3202      	adds	r2, #2
 800a0ea:	f104 010c 	add.w	r1, r4, #12
 800a0ee:	0092      	lsls	r2, r2, #2
 800a0f0:	300c      	adds	r0, #12
 800a0f2:	f7ff fb0e 	bl	8009712 <memcpy>
 800a0f6:	4621      	mov	r1, r4
 800a0f8:	4638      	mov	r0, r7
 800a0fa:	f7ff ffa5 	bl	800a048 <_Bfree>
 800a0fe:	4644      	mov	r4, r8
 800a100:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a104:	3501      	adds	r5, #1
 800a106:	615e      	str	r6, [r3, #20]
 800a108:	6125      	str	r5, [r4, #16]
 800a10a:	4620      	mov	r0, r4
 800a10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a110:	0800b572 	.word	0x0800b572
 800a114:	0800b5fa 	.word	0x0800b5fa

0800a118 <__s2b>:
 800a118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a11c:	460c      	mov	r4, r1
 800a11e:	4615      	mov	r5, r2
 800a120:	461f      	mov	r7, r3
 800a122:	2209      	movs	r2, #9
 800a124:	3308      	adds	r3, #8
 800a126:	4606      	mov	r6, r0
 800a128:	fb93 f3f2 	sdiv	r3, r3, r2
 800a12c:	2100      	movs	r1, #0
 800a12e:	2201      	movs	r2, #1
 800a130:	429a      	cmp	r2, r3
 800a132:	db09      	blt.n	800a148 <__s2b+0x30>
 800a134:	4630      	mov	r0, r6
 800a136:	f7ff ff47 	bl	8009fc8 <_Balloc>
 800a13a:	b940      	cbnz	r0, 800a14e <__s2b+0x36>
 800a13c:	4602      	mov	r2, r0
 800a13e:	4b19      	ldr	r3, [pc, #100]	@ (800a1a4 <__s2b+0x8c>)
 800a140:	4819      	ldr	r0, [pc, #100]	@ (800a1a8 <__s2b+0x90>)
 800a142:	21d3      	movs	r1, #211	@ 0xd3
 800a144:	f000 fcb0 	bl	800aaa8 <__assert_func>
 800a148:	0052      	lsls	r2, r2, #1
 800a14a:	3101      	adds	r1, #1
 800a14c:	e7f0      	b.n	800a130 <__s2b+0x18>
 800a14e:	9b08      	ldr	r3, [sp, #32]
 800a150:	6143      	str	r3, [r0, #20]
 800a152:	2d09      	cmp	r5, #9
 800a154:	f04f 0301 	mov.w	r3, #1
 800a158:	6103      	str	r3, [r0, #16]
 800a15a:	dd16      	ble.n	800a18a <__s2b+0x72>
 800a15c:	f104 0909 	add.w	r9, r4, #9
 800a160:	46c8      	mov	r8, r9
 800a162:	442c      	add	r4, r5
 800a164:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a168:	4601      	mov	r1, r0
 800a16a:	3b30      	subs	r3, #48	@ 0x30
 800a16c:	220a      	movs	r2, #10
 800a16e:	4630      	mov	r0, r6
 800a170:	f7ff ff8c 	bl	800a08c <__multadd>
 800a174:	45a0      	cmp	r8, r4
 800a176:	d1f5      	bne.n	800a164 <__s2b+0x4c>
 800a178:	f1a5 0408 	sub.w	r4, r5, #8
 800a17c:	444c      	add	r4, r9
 800a17e:	1b2d      	subs	r5, r5, r4
 800a180:	1963      	adds	r3, r4, r5
 800a182:	42bb      	cmp	r3, r7
 800a184:	db04      	blt.n	800a190 <__s2b+0x78>
 800a186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a18a:	340a      	adds	r4, #10
 800a18c:	2509      	movs	r5, #9
 800a18e:	e7f6      	b.n	800a17e <__s2b+0x66>
 800a190:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a194:	4601      	mov	r1, r0
 800a196:	3b30      	subs	r3, #48	@ 0x30
 800a198:	220a      	movs	r2, #10
 800a19a:	4630      	mov	r0, r6
 800a19c:	f7ff ff76 	bl	800a08c <__multadd>
 800a1a0:	e7ee      	b.n	800a180 <__s2b+0x68>
 800a1a2:	bf00      	nop
 800a1a4:	0800b572 	.word	0x0800b572
 800a1a8:	0800b5fa 	.word	0x0800b5fa

0800a1ac <__hi0bits>:
 800a1ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	bf36      	itet	cc
 800a1b4:	0403      	lslcc	r3, r0, #16
 800a1b6:	2000      	movcs	r0, #0
 800a1b8:	2010      	movcc	r0, #16
 800a1ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1be:	bf3c      	itt	cc
 800a1c0:	021b      	lslcc	r3, r3, #8
 800a1c2:	3008      	addcc	r0, #8
 800a1c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1c8:	bf3c      	itt	cc
 800a1ca:	011b      	lslcc	r3, r3, #4
 800a1cc:	3004      	addcc	r0, #4
 800a1ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1d2:	bf3c      	itt	cc
 800a1d4:	009b      	lslcc	r3, r3, #2
 800a1d6:	3002      	addcc	r0, #2
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	db05      	blt.n	800a1e8 <__hi0bits+0x3c>
 800a1dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a1e0:	f100 0001 	add.w	r0, r0, #1
 800a1e4:	bf08      	it	eq
 800a1e6:	2020      	moveq	r0, #32
 800a1e8:	4770      	bx	lr

0800a1ea <__lo0bits>:
 800a1ea:	6803      	ldr	r3, [r0, #0]
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	f013 0007 	ands.w	r0, r3, #7
 800a1f2:	d00b      	beq.n	800a20c <__lo0bits+0x22>
 800a1f4:	07d9      	lsls	r1, r3, #31
 800a1f6:	d421      	bmi.n	800a23c <__lo0bits+0x52>
 800a1f8:	0798      	lsls	r0, r3, #30
 800a1fa:	bf49      	itett	mi
 800a1fc:	085b      	lsrmi	r3, r3, #1
 800a1fe:	089b      	lsrpl	r3, r3, #2
 800a200:	2001      	movmi	r0, #1
 800a202:	6013      	strmi	r3, [r2, #0]
 800a204:	bf5c      	itt	pl
 800a206:	6013      	strpl	r3, [r2, #0]
 800a208:	2002      	movpl	r0, #2
 800a20a:	4770      	bx	lr
 800a20c:	b299      	uxth	r1, r3
 800a20e:	b909      	cbnz	r1, 800a214 <__lo0bits+0x2a>
 800a210:	0c1b      	lsrs	r3, r3, #16
 800a212:	2010      	movs	r0, #16
 800a214:	b2d9      	uxtb	r1, r3
 800a216:	b909      	cbnz	r1, 800a21c <__lo0bits+0x32>
 800a218:	3008      	adds	r0, #8
 800a21a:	0a1b      	lsrs	r3, r3, #8
 800a21c:	0719      	lsls	r1, r3, #28
 800a21e:	bf04      	itt	eq
 800a220:	091b      	lsreq	r3, r3, #4
 800a222:	3004      	addeq	r0, #4
 800a224:	0799      	lsls	r1, r3, #30
 800a226:	bf04      	itt	eq
 800a228:	089b      	lsreq	r3, r3, #2
 800a22a:	3002      	addeq	r0, #2
 800a22c:	07d9      	lsls	r1, r3, #31
 800a22e:	d403      	bmi.n	800a238 <__lo0bits+0x4e>
 800a230:	085b      	lsrs	r3, r3, #1
 800a232:	f100 0001 	add.w	r0, r0, #1
 800a236:	d003      	beq.n	800a240 <__lo0bits+0x56>
 800a238:	6013      	str	r3, [r2, #0]
 800a23a:	4770      	bx	lr
 800a23c:	2000      	movs	r0, #0
 800a23e:	4770      	bx	lr
 800a240:	2020      	movs	r0, #32
 800a242:	4770      	bx	lr

0800a244 <__i2b>:
 800a244:	b510      	push	{r4, lr}
 800a246:	460c      	mov	r4, r1
 800a248:	2101      	movs	r1, #1
 800a24a:	f7ff febd 	bl	8009fc8 <_Balloc>
 800a24e:	4602      	mov	r2, r0
 800a250:	b928      	cbnz	r0, 800a25e <__i2b+0x1a>
 800a252:	4b05      	ldr	r3, [pc, #20]	@ (800a268 <__i2b+0x24>)
 800a254:	4805      	ldr	r0, [pc, #20]	@ (800a26c <__i2b+0x28>)
 800a256:	f240 1145 	movw	r1, #325	@ 0x145
 800a25a:	f000 fc25 	bl	800aaa8 <__assert_func>
 800a25e:	2301      	movs	r3, #1
 800a260:	6144      	str	r4, [r0, #20]
 800a262:	6103      	str	r3, [r0, #16]
 800a264:	bd10      	pop	{r4, pc}
 800a266:	bf00      	nop
 800a268:	0800b572 	.word	0x0800b572
 800a26c:	0800b5fa 	.word	0x0800b5fa

0800a270 <__multiply>:
 800a270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a274:	4617      	mov	r7, r2
 800a276:	690a      	ldr	r2, [r1, #16]
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	bfa8      	it	ge
 800a27e:	463b      	movge	r3, r7
 800a280:	4689      	mov	r9, r1
 800a282:	bfa4      	itt	ge
 800a284:	460f      	movge	r7, r1
 800a286:	4699      	movge	r9, r3
 800a288:	693d      	ldr	r5, [r7, #16]
 800a28a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	6879      	ldr	r1, [r7, #4]
 800a292:	eb05 060a 	add.w	r6, r5, sl
 800a296:	42b3      	cmp	r3, r6
 800a298:	b085      	sub	sp, #20
 800a29a:	bfb8      	it	lt
 800a29c:	3101      	addlt	r1, #1
 800a29e:	f7ff fe93 	bl	8009fc8 <_Balloc>
 800a2a2:	b930      	cbnz	r0, 800a2b2 <__multiply+0x42>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	4b41      	ldr	r3, [pc, #260]	@ (800a3ac <__multiply+0x13c>)
 800a2a8:	4841      	ldr	r0, [pc, #260]	@ (800a3b0 <__multiply+0x140>)
 800a2aa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a2ae:	f000 fbfb 	bl	800aaa8 <__assert_func>
 800a2b2:	f100 0414 	add.w	r4, r0, #20
 800a2b6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a2ba:	4623      	mov	r3, r4
 800a2bc:	2200      	movs	r2, #0
 800a2be:	4573      	cmp	r3, lr
 800a2c0:	d320      	bcc.n	800a304 <__multiply+0x94>
 800a2c2:	f107 0814 	add.w	r8, r7, #20
 800a2c6:	f109 0114 	add.w	r1, r9, #20
 800a2ca:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a2ce:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a2d2:	9302      	str	r3, [sp, #8]
 800a2d4:	1beb      	subs	r3, r5, r7
 800a2d6:	3b15      	subs	r3, #21
 800a2d8:	f023 0303 	bic.w	r3, r3, #3
 800a2dc:	3304      	adds	r3, #4
 800a2de:	3715      	adds	r7, #21
 800a2e0:	42bd      	cmp	r5, r7
 800a2e2:	bf38      	it	cc
 800a2e4:	2304      	movcc	r3, #4
 800a2e6:	9301      	str	r3, [sp, #4]
 800a2e8:	9b02      	ldr	r3, [sp, #8]
 800a2ea:	9103      	str	r1, [sp, #12]
 800a2ec:	428b      	cmp	r3, r1
 800a2ee:	d80c      	bhi.n	800a30a <__multiply+0x9a>
 800a2f0:	2e00      	cmp	r6, #0
 800a2f2:	dd03      	ble.n	800a2fc <__multiply+0x8c>
 800a2f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d055      	beq.n	800a3a8 <__multiply+0x138>
 800a2fc:	6106      	str	r6, [r0, #16]
 800a2fe:	b005      	add	sp, #20
 800a300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a304:	f843 2b04 	str.w	r2, [r3], #4
 800a308:	e7d9      	b.n	800a2be <__multiply+0x4e>
 800a30a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a30e:	f1ba 0f00 	cmp.w	sl, #0
 800a312:	d01f      	beq.n	800a354 <__multiply+0xe4>
 800a314:	46c4      	mov	ip, r8
 800a316:	46a1      	mov	r9, r4
 800a318:	2700      	movs	r7, #0
 800a31a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a31e:	f8d9 3000 	ldr.w	r3, [r9]
 800a322:	fa1f fb82 	uxth.w	fp, r2
 800a326:	b29b      	uxth	r3, r3
 800a328:	fb0a 330b 	mla	r3, sl, fp, r3
 800a32c:	443b      	add	r3, r7
 800a32e:	f8d9 7000 	ldr.w	r7, [r9]
 800a332:	0c12      	lsrs	r2, r2, #16
 800a334:	0c3f      	lsrs	r7, r7, #16
 800a336:	fb0a 7202 	mla	r2, sl, r2, r7
 800a33a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a33e:	b29b      	uxth	r3, r3
 800a340:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a344:	4565      	cmp	r5, ip
 800a346:	f849 3b04 	str.w	r3, [r9], #4
 800a34a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a34e:	d8e4      	bhi.n	800a31a <__multiply+0xaa>
 800a350:	9b01      	ldr	r3, [sp, #4]
 800a352:	50e7      	str	r7, [r4, r3]
 800a354:	9b03      	ldr	r3, [sp, #12]
 800a356:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a35a:	3104      	adds	r1, #4
 800a35c:	f1b9 0f00 	cmp.w	r9, #0
 800a360:	d020      	beq.n	800a3a4 <__multiply+0x134>
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	4647      	mov	r7, r8
 800a366:	46a4      	mov	ip, r4
 800a368:	f04f 0a00 	mov.w	sl, #0
 800a36c:	f8b7 b000 	ldrh.w	fp, [r7]
 800a370:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a374:	fb09 220b 	mla	r2, r9, fp, r2
 800a378:	4452      	add	r2, sl
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a380:	f84c 3b04 	str.w	r3, [ip], #4
 800a384:	f857 3b04 	ldr.w	r3, [r7], #4
 800a388:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a38c:	f8bc 3000 	ldrh.w	r3, [ip]
 800a390:	fb09 330a 	mla	r3, r9, sl, r3
 800a394:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a398:	42bd      	cmp	r5, r7
 800a39a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a39e:	d8e5      	bhi.n	800a36c <__multiply+0xfc>
 800a3a0:	9a01      	ldr	r2, [sp, #4]
 800a3a2:	50a3      	str	r3, [r4, r2]
 800a3a4:	3404      	adds	r4, #4
 800a3a6:	e79f      	b.n	800a2e8 <__multiply+0x78>
 800a3a8:	3e01      	subs	r6, #1
 800a3aa:	e7a1      	b.n	800a2f0 <__multiply+0x80>
 800a3ac:	0800b572 	.word	0x0800b572
 800a3b0:	0800b5fa 	.word	0x0800b5fa

0800a3b4 <__pow5mult>:
 800a3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3b8:	4615      	mov	r5, r2
 800a3ba:	f012 0203 	ands.w	r2, r2, #3
 800a3be:	4607      	mov	r7, r0
 800a3c0:	460e      	mov	r6, r1
 800a3c2:	d007      	beq.n	800a3d4 <__pow5mult+0x20>
 800a3c4:	4c25      	ldr	r4, [pc, #148]	@ (800a45c <__pow5mult+0xa8>)
 800a3c6:	3a01      	subs	r2, #1
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3ce:	f7ff fe5d 	bl	800a08c <__multadd>
 800a3d2:	4606      	mov	r6, r0
 800a3d4:	10ad      	asrs	r5, r5, #2
 800a3d6:	d03d      	beq.n	800a454 <__pow5mult+0xa0>
 800a3d8:	69fc      	ldr	r4, [r7, #28]
 800a3da:	b97c      	cbnz	r4, 800a3fc <__pow5mult+0x48>
 800a3dc:	2010      	movs	r0, #16
 800a3de:	f000 fb95 	bl	800ab0c <malloc>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	61f8      	str	r0, [r7, #28]
 800a3e6:	b928      	cbnz	r0, 800a3f4 <__pow5mult+0x40>
 800a3e8:	4b1d      	ldr	r3, [pc, #116]	@ (800a460 <__pow5mult+0xac>)
 800a3ea:	481e      	ldr	r0, [pc, #120]	@ (800a464 <__pow5mult+0xb0>)
 800a3ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a3f0:	f000 fb5a 	bl	800aaa8 <__assert_func>
 800a3f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3f8:	6004      	str	r4, [r0, #0]
 800a3fa:	60c4      	str	r4, [r0, #12]
 800a3fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a400:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a404:	b94c      	cbnz	r4, 800a41a <__pow5mult+0x66>
 800a406:	f240 2171 	movw	r1, #625	@ 0x271
 800a40a:	4638      	mov	r0, r7
 800a40c:	f7ff ff1a 	bl	800a244 <__i2b>
 800a410:	2300      	movs	r3, #0
 800a412:	f8c8 0008 	str.w	r0, [r8, #8]
 800a416:	4604      	mov	r4, r0
 800a418:	6003      	str	r3, [r0, #0]
 800a41a:	f04f 0900 	mov.w	r9, #0
 800a41e:	07eb      	lsls	r3, r5, #31
 800a420:	d50a      	bpl.n	800a438 <__pow5mult+0x84>
 800a422:	4631      	mov	r1, r6
 800a424:	4622      	mov	r2, r4
 800a426:	4638      	mov	r0, r7
 800a428:	f7ff ff22 	bl	800a270 <__multiply>
 800a42c:	4631      	mov	r1, r6
 800a42e:	4680      	mov	r8, r0
 800a430:	4638      	mov	r0, r7
 800a432:	f7ff fe09 	bl	800a048 <_Bfree>
 800a436:	4646      	mov	r6, r8
 800a438:	106d      	asrs	r5, r5, #1
 800a43a:	d00b      	beq.n	800a454 <__pow5mult+0xa0>
 800a43c:	6820      	ldr	r0, [r4, #0]
 800a43e:	b938      	cbnz	r0, 800a450 <__pow5mult+0x9c>
 800a440:	4622      	mov	r2, r4
 800a442:	4621      	mov	r1, r4
 800a444:	4638      	mov	r0, r7
 800a446:	f7ff ff13 	bl	800a270 <__multiply>
 800a44a:	6020      	str	r0, [r4, #0]
 800a44c:	f8c0 9000 	str.w	r9, [r0]
 800a450:	4604      	mov	r4, r0
 800a452:	e7e4      	b.n	800a41e <__pow5mult+0x6a>
 800a454:	4630      	mov	r0, r6
 800a456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a45a:	bf00      	nop
 800a45c:	0800b718 	.word	0x0800b718
 800a460:	0800b5e3 	.word	0x0800b5e3
 800a464:	0800b5fa 	.word	0x0800b5fa

0800a468 <__lshift>:
 800a468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a46c:	460c      	mov	r4, r1
 800a46e:	6849      	ldr	r1, [r1, #4]
 800a470:	6923      	ldr	r3, [r4, #16]
 800a472:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a476:	68a3      	ldr	r3, [r4, #8]
 800a478:	4607      	mov	r7, r0
 800a47a:	4691      	mov	r9, r2
 800a47c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a480:	f108 0601 	add.w	r6, r8, #1
 800a484:	42b3      	cmp	r3, r6
 800a486:	db0b      	blt.n	800a4a0 <__lshift+0x38>
 800a488:	4638      	mov	r0, r7
 800a48a:	f7ff fd9d 	bl	8009fc8 <_Balloc>
 800a48e:	4605      	mov	r5, r0
 800a490:	b948      	cbnz	r0, 800a4a6 <__lshift+0x3e>
 800a492:	4602      	mov	r2, r0
 800a494:	4b28      	ldr	r3, [pc, #160]	@ (800a538 <__lshift+0xd0>)
 800a496:	4829      	ldr	r0, [pc, #164]	@ (800a53c <__lshift+0xd4>)
 800a498:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a49c:	f000 fb04 	bl	800aaa8 <__assert_func>
 800a4a0:	3101      	adds	r1, #1
 800a4a2:	005b      	lsls	r3, r3, #1
 800a4a4:	e7ee      	b.n	800a484 <__lshift+0x1c>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	f100 0114 	add.w	r1, r0, #20
 800a4ac:	f100 0210 	add.w	r2, r0, #16
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	4553      	cmp	r3, sl
 800a4b4:	db33      	blt.n	800a51e <__lshift+0xb6>
 800a4b6:	6920      	ldr	r0, [r4, #16]
 800a4b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4bc:	f104 0314 	add.w	r3, r4, #20
 800a4c0:	f019 091f 	ands.w	r9, r9, #31
 800a4c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4cc:	d02b      	beq.n	800a526 <__lshift+0xbe>
 800a4ce:	f1c9 0e20 	rsb	lr, r9, #32
 800a4d2:	468a      	mov	sl, r1
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	6818      	ldr	r0, [r3, #0]
 800a4d8:	fa00 f009 	lsl.w	r0, r0, r9
 800a4dc:	4310      	orrs	r0, r2
 800a4de:	f84a 0b04 	str.w	r0, [sl], #4
 800a4e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4e6:	459c      	cmp	ip, r3
 800a4e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a4ec:	d8f3      	bhi.n	800a4d6 <__lshift+0x6e>
 800a4ee:	ebac 0304 	sub.w	r3, ip, r4
 800a4f2:	3b15      	subs	r3, #21
 800a4f4:	f023 0303 	bic.w	r3, r3, #3
 800a4f8:	3304      	adds	r3, #4
 800a4fa:	f104 0015 	add.w	r0, r4, #21
 800a4fe:	4560      	cmp	r0, ip
 800a500:	bf88      	it	hi
 800a502:	2304      	movhi	r3, #4
 800a504:	50ca      	str	r2, [r1, r3]
 800a506:	b10a      	cbz	r2, 800a50c <__lshift+0xa4>
 800a508:	f108 0602 	add.w	r6, r8, #2
 800a50c:	3e01      	subs	r6, #1
 800a50e:	4638      	mov	r0, r7
 800a510:	612e      	str	r6, [r5, #16]
 800a512:	4621      	mov	r1, r4
 800a514:	f7ff fd98 	bl	800a048 <_Bfree>
 800a518:	4628      	mov	r0, r5
 800a51a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a51e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a522:	3301      	adds	r3, #1
 800a524:	e7c5      	b.n	800a4b2 <__lshift+0x4a>
 800a526:	3904      	subs	r1, #4
 800a528:	f853 2b04 	ldr.w	r2, [r3], #4
 800a52c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a530:	459c      	cmp	ip, r3
 800a532:	d8f9      	bhi.n	800a528 <__lshift+0xc0>
 800a534:	e7ea      	b.n	800a50c <__lshift+0xa4>
 800a536:	bf00      	nop
 800a538:	0800b572 	.word	0x0800b572
 800a53c:	0800b5fa 	.word	0x0800b5fa

0800a540 <__mcmp>:
 800a540:	690a      	ldr	r2, [r1, #16]
 800a542:	4603      	mov	r3, r0
 800a544:	6900      	ldr	r0, [r0, #16]
 800a546:	1a80      	subs	r0, r0, r2
 800a548:	b530      	push	{r4, r5, lr}
 800a54a:	d10e      	bne.n	800a56a <__mcmp+0x2a>
 800a54c:	3314      	adds	r3, #20
 800a54e:	3114      	adds	r1, #20
 800a550:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a554:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a558:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a55c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a560:	4295      	cmp	r5, r2
 800a562:	d003      	beq.n	800a56c <__mcmp+0x2c>
 800a564:	d205      	bcs.n	800a572 <__mcmp+0x32>
 800a566:	f04f 30ff 	mov.w	r0, #4294967295
 800a56a:	bd30      	pop	{r4, r5, pc}
 800a56c:	42a3      	cmp	r3, r4
 800a56e:	d3f3      	bcc.n	800a558 <__mcmp+0x18>
 800a570:	e7fb      	b.n	800a56a <__mcmp+0x2a>
 800a572:	2001      	movs	r0, #1
 800a574:	e7f9      	b.n	800a56a <__mcmp+0x2a>
	...

0800a578 <__mdiff>:
 800a578:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a57c:	4689      	mov	r9, r1
 800a57e:	4606      	mov	r6, r0
 800a580:	4611      	mov	r1, r2
 800a582:	4648      	mov	r0, r9
 800a584:	4614      	mov	r4, r2
 800a586:	f7ff ffdb 	bl	800a540 <__mcmp>
 800a58a:	1e05      	subs	r5, r0, #0
 800a58c:	d112      	bne.n	800a5b4 <__mdiff+0x3c>
 800a58e:	4629      	mov	r1, r5
 800a590:	4630      	mov	r0, r6
 800a592:	f7ff fd19 	bl	8009fc8 <_Balloc>
 800a596:	4602      	mov	r2, r0
 800a598:	b928      	cbnz	r0, 800a5a6 <__mdiff+0x2e>
 800a59a:	4b3f      	ldr	r3, [pc, #252]	@ (800a698 <__mdiff+0x120>)
 800a59c:	f240 2137 	movw	r1, #567	@ 0x237
 800a5a0:	483e      	ldr	r0, [pc, #248]	@ (800a69c <__mdiff+0x124>)
 800a5a2:	f000 fa81 	bl	800aaa8 <__assert_func>
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	b003      	add	sp, #12
 800a5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5b4:	bfbc      	itt	lt
 800a5b6:	464b      	movlt	r3, r9
 800a5b8:	46a1      	movlt	r9, r4
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a5c0:	bfba      	itte	lt
 800a5c2:	461c      	movlt	r4, r3
 800a5c4:	2501      	movlt	r5, #1
 800a5c6:	2500      	movge	r5, #0
 800a5c8:	f7ff fcfe 	bl	8009fc8 <_Balloc>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	b918      	cbnz	r0, 800a5d8 <__mdiff+0x60>
 800a5d0:	4b31      	ldr	r3, [pc, #196]	@ (800a698 <__mdiff+0x120>)
 800a5d2:	f240 2145 	movw	r1, #581	@ 0x245
 800a5d6:	e7e3      	b.n	800a5a0 <__mdiff+0x28>
 800a5d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a5dc:	6926      	ldr	r6, [r4, #16]
 800a5de:	60c5      	str	r5, [r0, #12]
 800a5e0:	f109 0310 	add.w	r3, r9, #16
 800a5e4:	f109 0514 	add.w	r5, r9, #20
 800a5e8:	f104 0e14 	add.w	lr, r4, #20
 800a5ec:	f100 0b14 	add.w	fp, r0, #20
 800a5f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a5f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a5f8:	9301      	str	r3, [sp, #4]
 800a5fa:	46d9      	mov	r9, fp
 800a5fc:	f04f 0c00 	mov.w	ip, #0
 800a600:	9b01      	ldr	r3, [sp, #4]
 800a602:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a606:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a60a:	9301      	str	r3, [sp, #4]
 800a60c:	fa1f f38a 	uxth.w	r3, sl
 800a610:	4619      	mov	r1, r3
 800a612:	b283      	uxth	r3, r0
 800a614:	1acb      	subs	r3, r1, r3
 800a616:	0c00      	lsrs	r0, r0, #16
 800a618:	4463      	add	r3, ip
 800a61a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a61e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a622:	b29b      	uxth	r3, r3
 800a624:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a628:	4576      	cmp	r6, lr
 800a62a:	f849 3b04 	str.w	r3, [r9], #4
 800a62e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a632:	d8e5      	bhi.n	800a600 <__mdiff+0x88>
 800a634:	1b33      	subs	r3, r6, r4
 800a636:	3b15      	subs	r3, #21
 800a638:	f023 0303 	bic.w	r3, r3, #3
 800a63c:	3415      	adds	r4, #21
 800a63e:	3304      	adds	r3, #4
 800a640:	42a6      	cmp	r6, r4
 800a642:	bf38      	it	cc
 800a644:	2304      	movcc	r3, #4
 800a646:	441d      	add	r5, r3
 800a648:	445b      	add	r3, fp
 800a64a:	461e      	mov	r6, r3
 800a64c:	462c      	mov	r4, r5
 800a64e:	4544      	cmp	r4, r8
 800a650:	d30e      	bcc.n	800a670 <__mdiff+0xf8>
 800a652:	f108 0103 	add.w	r1, r8, #3
 800a656:	1b49      	subs	r1, r1, r5
 800a658:	f021 0103 	bic.w	r1, r1, #3
 800a65c:	3d03      	subs	r5, #3
 800a65e:	45a8      	cmp	r8, r5
 800a660:	bf38      	it	cc
 800a662:	2100      	movcc	r1, #0
 800a664:	440b      	add	r3, r1
 800a666:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a66a:	b191      	cbz	r1, 800a692 <__mdiff+0x11a>
 800a66c:	6117      	str	r7, [r2, #16]
 800a66e:	e79d      	b.n	800a5ac <__mdiff+0x34>
 800a670:	f854 1b04 	ldr.w	r1, [r4], #4
 800a674:	46e6      	mov	lr, ip
 800a676:	0c08      	lsrs	r0, r1, #16
 800a678:	fa1c fc81 	uxtah	ip, ip, r1
 800a67c:	4471      	add	r1, lr
 800a67e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a682:	b289      	uxth	r1, r1
 800a684:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a688:	f846 1b04 	str.w	r1, [r6], #4
 800a68c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a690:	e7dd      	b.n	800a64e <__mdiff+0xd6>
 800a692:	3f01      	subs	r7, #1
 800a694:	e7e7      	b.n	800a666 <__mdiff+0xee>
 800a696:	bf00      	nop
 800a698:	0800b572 	.word	0x0800b572
 800a69c:	0800b5fa 	.word	0x0800b5fa

0800a6a0 <__ulp>:
 800a6a0:	b082      	sub	sp, #8
 800a6a2:	ed8d 0b00 	vstr	d0, [sp]
 800a6a6:	9a01      	ldr	r2, [sp, #4]
 800a6a8:	4b0f      	ldr	r3, [pc, #60]	@ (800a6e8 <__ulp+0x48>)
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	dc08      	bgt.n	800a6c6 <__ulp+0x26>
 800a6b4:	425b      	negs	r3, r3
 800a6b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a6ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a6be:	da04      	bge.n	800a6ca <__ulp+0x2a>
 800a6c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a6c4:	4113      	asrs	r3, r2
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	e008      	b.n	800a6dc <__ulp+0x3c>
 800a6ca:	f1a2 0314 	sub.w	r3, r2, #20
 800a6ce:	2b1e      	cmp	r3, #30
 800a6d0:	bfda      	itte	le
 800a6d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a6d6:	40da      	lsrle	r2, r3
 800a6d8:	2201      	movgt	r2, #1
 800a6da:	2300      	movs	r3, #0
 800a6dc:	4619      	mov	r1, r3
 800a6de:	4610      	mov	r0, r2
 800a6e0:	ec41 0b10 	vmov	d0, r0, r1
 800a6e4:	b002      	add	sp, #8
 800a6e6:	4770      	bx	lr
 800a6e8:	7ff00000 	.word	0x7ff00000

0800a6ec <__b2d>:
 800a6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f0:	6906      	ldr	r6, [r0, #16]
 800a6f2:	f100 0814 	add.w	r8, r0, #20
 800a6f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a6fa:	1f37      	subs	r7, r6, #4
 800a6fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a700:	4610      	mov	r0, r2
 800a702:	f7ff fd53 	bl	800a1ac <__hi0bits>
 800a706:	f1c0 0320 	rsb	r3, r0, #32
 800a70a:	280a      	cmp	r0, #10
 800a70c:	600b      	str	r3, [r1, #0]
 800a70e:	491b      	ldr	r1, [pc, #108]	@ (800a77c <__b2d+0x90>)
 800a710:	dc15      	bgt.n	800a73e <__b2d+0x52>
 800a712:	f1c0 0c0b 	rsb	ip, r0, #11
 800a716:	fa22 f30c 	lsr.w	r3, r2, ip
 800a71a:	45b8      	cmp	r8, r7
 800a71c:	ea43 0501 	orr.w	r5, r3, r1
 800a720:	bf34      	ite	cc
 800a722:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a726:	2300      	movcs	r3, #0
 800a728:	3015      	adds	r0, #21
 800a72a:	fa02 f000 	lsl.w	r0, r2, r0
 800a72e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a732:	4303      	orrs	r3, r0
 800a734:	461c      	mov	r4, r3
 800a736:	ec45 4b10 	vmov	d0, r4, r5
 800a73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a73e:	45b8      	cmp	r8, r7
 800a740:	bf3a      	itte	cc
 800a742:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a746:	f1a6 0708 	subcc.w	r7, r6, #8
 800a74a:	2300      	movcs	r3, #0
 800a74c:	380b      	subs	r0, #11
 800a74e:	d012      	beq.n	800a776 <__b2d+0x8a>
 800a750:	f1c0 0120 	rsb	r1, r0, #32
 800a754:	fa23 f401 	lsr.w	r4, r3, r1
 800a758:	4082      	lsls	r2, r0
 800a75a:	4322      	orrs	r2, r4
 800a75c:	4547      	cmp	r7, r8
 800a75e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a762:	bf8c      	ite	hi
 800a764:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a768:	2200      	movls	r2, #0
 800a76a:	4083      	lsls	r3, r0
 800a76c:	40ca      	lsrs	r2, r1
 800a76e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a772:	4313      	orrs	r3, r2
 800a774:	e7de      	b.n	800a734 <__b2d+0x48>
 800a776:	ea42 0501 	orr.w	r5, r2, r1
 800a77a:	e7db      	b.n	800a734 <__b2d+0x48>
 800a77c:	3ff00000 	.word	0x3ff00000

0800a780 <__d2b>:
 800a780:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a784:	460f      	mov	r7, r1
 800a786:	2101      	movs	r1, #1
 800a788:	ec59 8b10 	vmov	r8, r9, d0
 800a78c:	4616      	mov	r6, r2
 800a78e:	f7ff fc1b 	bl	8009fc8 <_Balloc>
 800a792:	4604      	mov	r4, r0
 800a794:	b930      	cbnz	r0, 800a7a4 <__d2b+0x24>
 800a796:	4602      	mov	r2, r0
 800a798:	4b23      	ldr	r3, [pc, #140]	@ (800a828 <__d2b+0xa8>)
 800a79a:	4824      	ldr	r0, [pc, #144]	@ (800a82c <__d2b+0xac>)
 800a79c:	f240 310f 	movw	r1, #783	@ 0x30f
 800a7a0:	f000 f982 	bl	800aaa8 <__assert_func>
 800a7a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7ac:	b10d      	cbz	r5, 800a7b2 <__d2b+0x32>
 800a7ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7b2:	9301      	str	r3, [sp, #4]
 800a7b4:	f1b8 0300 	subs.w	r3, r8, #0
 800a7b8:	d023      	beq.n	800a802 <__d2b+0x82>
 800a7ba:	4668      	mov	r0, sp
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	f7ff fd14 	bl	800a1ea <__lo0bits>
 800a7c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a7c6:	b1d0      	cbz	r0, 800a7fe <__d2b+0x7e>
 800a7c8:	f1c0 0320 	rsb	r3, r0, #32
 800a7cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d0:	430b      	orrs	r3, r1
 800a7d2:	40c2      	lsrs	r2, r0
 800a7d4:	6163      	str	r3, [r4, #20]
 800a7d6:	9201      	str	r2, [sp, #4]
 800a7d8:	9b01      	ldr	r3, [sp, #4]
 800a7da:	61a3      	str	r3, [r4, #24]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	bf0c      	ite	eq
 800a7e0:	2201      	moveq	r2, #1
 800a7e2:	2202      	movne	r2, #2
 800a7e4:	6122      	str	r2, [r4, #16]
 800a7e6:	b1a5      	cbz	r5, 800a812 <__d2b+0x92>
 800a7e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a7ec:	4405      	add	r5, r0
 800a7ee:	603d      	str	r5, [r7, #0]
 800a7f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a7f4:	6030      	str	r0, [r6, #0]
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	b003      	add	sp, #12
 800a7fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7fe:	6161      	str	r1, [r4, #20]
 800a800:	e7ea      	b.n	800a7d8 <__d2b+0x58>
 800a802:	a801      	add	r0, sp, #4
 800a804:	f7ff fcf1 	bl	800a1ea <__lo0bits>
 800a808:	9b01      	ldr	r3, [sp, #4]
 800a80a:	6163      	str	r3, [r4, #20]
 800a80c:	3020      	adds	r0, #32
 800a80e:	2201      	movs	r2, #1
 800a810:	e7e8      	b.n	800a7e4 <__d2b+0x64>
 800a812:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a816:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a81a:	6038      	str	r0, [r7, #0]
 800a81c:	6918      	ldr	r0, [r3, #16]
 800a81e:	f7ff fcc5 	bl	800a1ac <__hi0bits>
 800a822:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a826:	e7e5      	b.n	800a7f4 <__d2b+0x74>
 800a828:	0800b572 	.word	0x0800b572
 800a82c:	0800b5fa 	.word	0x0800b5fa

0800a830 <__ratio>:
 800a830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a834:	4688      	mov	r8, r1
 800a836:	4669      	mov	r1, sp
 800a838:	4681      	mov	r9, r0
 800a83a:	f7ff ff57 	bl	800a6ec <__b2d>
 800a83e:	a901      	add	r1, sp, #4
 800a840:	4640      	mov	r0, r8
 800a842:	ec55 4b10 	vmov	r4, r5, d0
 800a846:	f7ff ff51 	bl	800a6ec <__b2d>
 800a84a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a84e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800a852:	1ad2      	subs	r2, r2, r3
 800a854:	e9dd 3100 	ldrd	r3, r1, [sp]
 800a858:	1a5b      	subs	r3, r3, r1
 800a85a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a85e:	ec57 6b10 	vmov	r6, r7, d0
 800a862:	2b00      	cmp	r3, #0
 800a864:	bfd6      	itet	le
 800a866:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a86a:	462a      	movgt	r2, r5
 800a86c:	463a      	movle	r2, r7
 800a86e:	46ab      	mov	fp, r5
 800a870:	46a2      	mov	sl, r4
 800a872:	bfce      	itee	gt
 800a874:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a878:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a87c:	ee00 3a90 	vmovle	s1, r3
 800a880:	ec4b ab17 	vmov	d7, sl, fp
 800a884:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a888:	b003      	add	sp, #12
 800a88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a88e <__copybits>:
 800a88e:	3901      	subs	r1, #1
 800a890:	b570      	push	{r4, r5, r6, lr}
 800a892:	1149      	asrs	r1, r1, #5
 800a894:	6914      	ldr	r4, [r2, #16]
 800a896:	3101      	adds	r1, #1
 800a898:	f102 0314 	add.w	r3, r2, #20
 800a89c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a8a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a8a4:	1f05      	subs	r5, r0, #4
 800a8a6:	42a3      	cmp	r3, r4
 800a8a8:	d30c      	bcc.n	800a8c4 <__copybits+0x36>
 800a8aa:	1aa3      	subs	r3, r4, r2
 800a8ac:	3b11      	subs	r3, #17
 800a8ae:	f023 0303 	bic.w	r3, r3, #3
 800a8b2:	3211      	adds	r2, #17
 800a8b4:	42a2      	cmp	r2, r4
 800a8b6:	bf88      	it	hi
 800a8b8:	2300      	movhi	r3, #0
 800a8ba:	4418      	add	r0, r3
 800a8bc:	2300      	movs	r3, #0
 800a8be:	4288      	cmp	r0, r1
 800a8c0:	d305      	bcc.n	800a8ce <__copybits+0x40>
 800a8c2:	bd70      	pop	{r4, r5, r6, pc}
 800a8c4:	f853 6b04 	ldr.w	r6, [r3], #4
 800a8c8:	f845 6f04 	str.w	r6, [r5, #4]!
 800a8cc:	e7eb      	b.n	800a8a6 <__copybits+0x18>
 800a8ce:	f840 3b04 	str.w	r3, [r0], #4
 800a8d2:	e7f4      	b.n	800a8be <__copybits+0x30>

0800a8d4 <__any_on>:
 800a8d4:	f100 0214 	add.w	r2, r0, #20
 800a8d8:	6900      	ldr	r0, [r0, #16]
 800a8da:	114b      	asrs	r3, r1, #5
 800a8dc:	4298      	cmp	r0, r3
 800a8de:	b510      	push	{r4, lr}
 800a8e0:	db11      	blt.n	800a906 <__any_on+0x32>
 800a8e2:	dd0a      	ble.n	800a8fa <__any_on+0x26>
 800a8e4:	f011 011f 	ands.w	r1, r1, #31
 800a8e8:	d007      	beq.n	800a8fa <__any_on+0x26>
 800a8ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a8ee:	fa24 f001 	lsr.w	r0, r4, r1
 800a8f2:	fa00 f101 	lsl.w	r1, r0, r1
 800a8f6:	428c      	cmp	r4, r1
 800a8f8:	d10b      	bne.n	800a912 <__any_on+0x3e>
 800a8fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d803      	bhi.n	800a90a <__any_on+0x36>
 800a902:	2000      	movs	r0, #0
 800a904:	bd10      	pop	{r4, pc}
 800a906:	4603      	mov	r3, r0
 800a908:	e7f7      	b.n	800a8fa <__any_on+0x26>
 800a90a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a90e:	2900      	cmp	r1, #0
 800a910:	d0f5      	beq.n	800a8fe <__any_on+0x2a>
 800a912:	2001      	movs	r0, #1
 800a914:	e7f6      	b.n	800a904 <__any_on+0x30>

0800a916 <__ascii_wctomb>:
 800a916:	4603      	mov	r3, r0
 800a918:	4608      	mov	r0, r1
 800a91a:	b141      	cbz	r1, 800a92e <__ascii_wctomb+0x18>
 800a91c:	2aff      	cmp	r2, #255	@ 0xff
 800a91e:	d904      	bls.n	800a92a <__ascii_wctomb+0x14>
 800a920:	228a      	movs	r2, #138	@ 0x8a
 800a922:	601a      	str	r2, [r3, #0]
 800a924:	f04f 30ff 	mov.w	r0, #4294967295
 800a928:	4770      	bx	lr
 800a92a:	700a      	strb	r2, [r1, #0]
 800a92c:	2001      	movs	r0, #1
 800a92e:	4770      	bx	lr

0800a930 <__sflush_r>:
 800a930:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a938:	0716      	lsls	r6, r2, #28
 800a93a:	4605      	mov	r5, r0
 800a93c:	460c      	mov	r4, r1
 800a93e:	d454      	bmi.n	800a9ea <__sflush_r+0xba>
 800a940:	684b      	ldr	r3, [r1, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	dc02      	bgt.n	800a94c <__sflush_r+0x1c>
 800a946:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a948:	2b00      	cmp	r3, #0
 800a94a:	dd48      	ble.n	800a9de <__sflush_r+0xae>
 800a94c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a94e:	2e00      	cmp	r6, #0
 800a950:	d045      	beq.n	800a9de <__sflush_r+0xae>
 800a952:	2300      	movs	r3, #0
 800a954:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a958:	682f      	ldr	r7, [r5, #0]
 800a95a:	6a21      	ldr	r1, [r4, #32]
 800a95c:	602b      	str	r3, [r5, #0]
 800a95e:	d030      	beq.n	800a9c2 <__sflush_r+0x92>
 800a960:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a962:	89a3      	ldrh	r3, [r4, #12]
 800a964:	0759      	lsls	r1, r3, #29
 800a966:	d505      	bpl.n	800a974 <__sflush_r+0x44>
 800a968:	6863      	ldr	r3, [r4, #4]
 800a96a:	1ad2      	subs	r2, r2, r3
 800a96c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a96e:	b10b      	cbz	r3, 800a974 <__sflush_r+0x44>
 800a970:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a972:	1ad2      	subs	r2, r2, r3
 800a974:	2300      	movs	r3, #0
 800a976:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a978:	6a21      	ldr	r1, [r4, #32]
 800a97a:	4628      	mov	r0, r5
 800a97c:	47b0      	blx	r6
 800a97e:	1c43      	adds	r3, r0, #1
 800a980:	89a3      	ldrh	r3, [r4, #12]
 800a982:	d106      	bne.n	800a992 <__sflush_r+0x62>
 800a984:	6829      	ldr	r1, [r5, #0]
 800a986:	291d      	cmp	r1, #29
 800a988:	d82b      	bhi.n	800a9e2 <__sflush_r+0xb2>
 800a98a:	4a2a      	ldr	r2, [pc, #168]	@ (800aa34 <__sflush_r+0x104>)
 800a98c:	40ca      	lsrs	r2, r1
 800a98e:	07d6      	lsls	r6, r2, #31
 800a990:	d527      	bpl.n	800a9e2 <__sflush_r+0xb2>
 800a992:	2200      	movs	r2, #0
 800a994:	6062      	str	r2, [r4, #4]
 800a996:	04d9      	lsls	r1, r3, #19
 800a998:	6922      	ldr	r2, [r4, #16]
 800a99a:	6022      	str	r2, [r4, #0]
 800a99c:	d504      	bpl.n	800a9a8 <__sflush_r+0x78>
 800a99e:	1c42      	adds	r2, r0, #1
 800a9a0:	d101      	bne.n	800a9a6 <__sflush_r+0x76>
 800a9a2:	682b      	ldr	r3, [r5, #0]
 800a9a4:	b903      	cbnz	r3, 800a9a8 <__sflush_r+0x78>
 800a9a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a9a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9aa:	602f      	str	r7, [r5, #0]
 800a9ac:	b1b9      	cbz	r1, 800a9de <__sflush_r+0xae>
 800a9ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a9b2:	4299      	cmp	r1, r3
 800a9b4:	d002      	beq.n	800a9bc <__sflush_r+0x8c>
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f7fe fec2 	bl	8009740 <_free_r>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	6363      	str	r3, [r4, #52]	@ 0x34
 800a9c0:	e00d      	b.n	800a9de <__sflush_r+0xae>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	47b0      	blx	r6
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	1c50      	adds	r0, r2, #1
 800a9cc:	d1c9      	bne.n	800a962 <__sflush_r+0x32>
 800a9ce:	682b      	ldr	r3, [r5, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d0c6      	beq.n	800a962 <__sflush_r+0x32>
 800a9d4:	2b1d      	cmp	r3, #29
 800a9d6:	d001      	beq.n	800a9dc <__sflush_r+0xac>
 800a9d8:	2b16      	cmp	r3, #22
 800a9da:	d11e      	bne.n	800aa1a <__sflush_r+0xea>
 800a9dc:	602f      	str	r7, [r5, #0]
 800a9de:	2000      	movs	r0, #0
 800a9e0:	e022      	b.n	800aa28 <__sflush_r+0xf8>
 800a9e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9e6:	b21b      	sxth	r3, r3
 800a9e8:	e01b      	b.n	800aa22 <__sflush_r+0xf2>
 800a9ea:	690f      	ldr	r7, [r1, #16]
 800a9ec:	2f00      	cmp	r7, #0
 800a9ee:	d0f6      	beq.n	800a9de <__sflush_r+0xae>
 800a9f0:	0793      	lsls	r3, r2, #30
 800a9f2:	680e      	ldr	r6, [r1, #0]
 800a9f4:	bf08      	it	eq
 800a9f6:	694b      	ldreq	r3, [r1, #20]
 800a9f8:	600f      	str	r7, [r1, #0]
 800a9fa:	bf18      	it	ne
 800a9fc:	2300      	movne	r3, #0
 800a9fe:	eba6 0807 	sub.w	r8, r6, r7
 800aa02:	608b      	str	r3, [r1, #8]
 800aa04:	f1b8 0f00 	cmp.w	r8, #0
 800aa08:	dde9      	ble.n	800a9de <__sflush_r+0xae>
 800aa0a:	6a21      	ldr	r1, [r4, #32]
 800aa0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aa0e:	4643      	mov	r3, r8
 800aa10:	463a      	mov	r2, r7
 800aa12:	4628      	mov	r0, r5
 800aa14:	47b0      	blx	r6
 800aa16:	2800      	cmp	r0, #0
 800aa18:	dc08      	bgt.n	800aa2c <__sflush_r+0xfc>
 800aa1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa22:	81a3      	strh	r3, [r4, #12]
 800aa24:	f04f 30ff 	mov.w	r0, #4294967295
 800aa28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa2c:	4407      	add	r7, r0
 800aa2e:	eba8 0800 	sub.w	r8, r8, r0
 800aa32:	e7e7      	b.n	800aa04 <__sflush_r+0xd4>
 800aa34:	20400001 	.word	0x20400001

0800aa38 <_fflush_r>:
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	690b      	ldr	r3, [r1, #16]
 800aa3c:	4605      	mov	r5, r0
 800aa3e:	460c      	mov	r4, r1
 800aa40:	b913      	cbnz	r3, 800aa48 <_fflush_r+0x10>
 800aa42:	2500      	movs	r5, #0
 800aa44:	4628      	mov	r0, r5
 800aa46:	bd38      	pop	{r3, r4, r5, pc}
 800aa48:	b118      	cbz	r0, 800aa52 <_fflush_r+0x1a>
 800aa4a:	6a03      	ldr	r3, [r0, #32]
 800aa4c:	b90b      	cbnz	r3, 800aa52 <_fflush_r+0x1a>
 800aa4e:	f7fe fd59 	bl	8009504 <__sinit>
 800aa52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d0f3      	beq.n	800aa42 <_fflush_r+0xa>
 800aa5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa5c:	07d0      	lsls	r0, r2, #31
 800aa5e:	d404      	bmi.n	800aa6a <_fflush_r+0x32>
 800aa60:	0599      	lsls	r1, r3, #22
 800aa62:	d402      	bmi.n	800aa6a <_fflush_r+0x32>
 800aa64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa66:	f7fe fe52 	bl	800970e <__retarget_lock_acquire_recursive>
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	4621      	mov	r1, r4
 800aa6e:	f7ff ff5f 	bl	800a930 <__sflush_r>
 800aa72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa74:	07da      	lsls	r2, r3, #31
 800aa76:	4605      	mov	r5, r0
 800aa78:	d4e4      	bmi.n	800aa44 <_fflush_r+0xc>
 800aa7a:	89a3      	ldrh	r3, [r4, #12]
 800aa7c:	059b      	lsls	r3, r3, #22
 800aa7e:	d4e1      	bmi.n	800aa44 <_fflush_r+0xc>
 800aa80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa82:	f7fe fe45 	bl	8009710 <__retarget_lock_release_recursive>
 800aa86:	e7dd      	b.n	800aa44 <_fflush_r+0xc>

0800aa88 <_sbrk_r>:
 800aa88:	b538      	push	{r3, r4, r5, lr}
 800aa8a:	4d06      	ldr	r5, [pc, #24]	@ (800aaa4 <_sbrk_r+0x1c>)
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	4604      	mov	r4, r0
 800aa90:	4608      	mov	r0, r1
 800aa92:	602b      	str	r3, [r5, #0]
 800aa94:	f7f6 fe18 	bl	80016c8 <_sbrk>
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	d102      	bne.n	800aaa2 <_sbrk_r+0x1a>
 800aa9c:	682b      	ldr	r3, [r5, #0]
 800aa9e:	b103      	cbz	r3, 800aaa2 <_sbrk_r+0x1a>
 800aaa0:	6023      	str	r3, [r4, #0]
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	240005bc 	.word	0x240005bc

0800aaa8 <__assert_func>:
 800aaa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aaaa:	4614      	mov	r4, r2
 800aaac:	461a      	mov	r2, r3
 800aaae:	4b09      	ldr	r3, [pc, #36]	@ (800aad4 <__assert_func+0x2c>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4605      	mov	r5, r0
 800aab4:	68d8      	ldr	r0, [r3, #12]
 800aab6:	b14c      	cbz	r4, 800aacc <__assert_func+0x24>
 800aab8:	4b07      	ldr	r3, [pc, #28]	@ (800aad8 <__assert_func+0x30>)
 800aaba:	9100      	str	r1, [sp, #0]
 800aabc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aac0:	4906      	ldr	r1, [pc, #24]	@ (800aadc <__assert_func+0x34>)
 800aac2:	462b      	mov	r3, r5
 800aac4:	f000 f82a 	bl	800ab1c <fiprintf>
 800aac8:	f000 f83a 	bl	800ab40 <abort>
 800aacc:	4b04      	ldr	r3, [pc, #16]	@ (800aae0 <__assert_func+0x38>)
 800aace:	461c      	mov	r4, r3
 800aad0:	e7f3      	b.n	800aaba <__assert_func+0x12>
 800aad2:	bf00      	nop
 800aad4:	2400019c 	.word	0x2400019c
 800aad8:	0800b653 	.word	0x0800b653
 800aadc:	0800b660 	.word	0x0800b660
 800aae0:	0800b68e 	.word	0x0800b68e

0800aae4 <_calloc_r>:
 800aae4:	b570      	push	{r4, r5, r6, lr}
 800aae6:	fba1 5402 	umull	r5, r4, r1, r2
 800aaea:	b934      	cbnz	r4, 800aafa <_calloc_r+0x16>
 800aaec:	4629      	mov	r1, r5
 800aaee:	f7ff f9cd 	bl	8009e8c <_malloc_r>
 800aaf2:	4606      	mov	r6, r0
 800aaf4:	b928      	cbnz	r0, 800ab02 <_calloc_r+0x1e>
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	bd70      	pop	{r4, r5, r6, pc}
 800aafa:	220c      	movs	r2, #12
 800aafc:	6002      	str	r2, [r0, #0]
 800aafe:	2600      	movs	r6, #0
 800ab00:	e7f9      	b.n	800aaf6 <_calloc_r+0x12>
 800ab02:	462a      	mov	r2, r5
 800ab04:	4621      	mov	r1, r4
 800ab06:	f7fe fd76 	bl	80095f6 <memset>
 800ab0a:	e7f4      	b.n	800aaf6 <_calloc_r+0x12>

0800ab0c <malloc>:
 800ab0c:	4b02      	ldr	r3, [pc, #8]	@ (800ab18 <malloc+0xc>)
 800ab0e:	4601      	mov	r1, r0
 800ab10:	6818      	ldr	r0, [r3, #0]
 800ab12:	f7ff b9bb 	b.w	8009e8c <_malloc_r>
 800ab16:	bf00      	nop
 800ab18:	2400019c 	.word	0x2400019c

0800ab1c <fiprintf>:
 800ab1c:	b40e      	push	{r1, r2, r3}
 800ab1e:	b503      	push	{r0, r1, lr}
 800ab20:	4601      	mov	r1, r0
 800ab22:	ab03      	add	r3, sp, #12
 800ab24:	4805      	ldr	r0, [pc, #20]	@ (800ab3c <fiprintf+0x20>)
 800ab26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab2a:	6800      	ldr	r0, [r0, #0]
 800ab2c:	9301      	str	r3, [sp, #4]
 800ab2e:	f000 f837 	bl	800aba0 <_vfiprintf_r>
 800ab32:	b002      	add	sp, #8
 800ab34:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab38:	b003      	add	sp, #12
 800ab3a:	4770      	bx	lr
 800ab3c:	2400019c 	.word	0x2400019c

0800ab40 <abort>:
 800ab40:	b508      	push	{r3, lr}
 800ab42:	2006      	movs	r0, #6
 800ab44:	f000 fb8c 	bl	800b260 <raise>
 800ab48:	2001      	movs	r0, #1
 800ab4a:	f7f6 fd61 	bl	8001610 <_exit>

0800ab4e <__sfputc_r>:
 800ab4e:	6893      	ldr	r3, [r2, #8]
 800ab50:	3b01      	subs	r3, #1
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	b410      	push	{r4}
 800ab56:	6093      	str	r3, [r2, #8]
 800ab58:	da08      	bge.n	800ab6c <__sfputc_r+0x1e>
 800ab5a:	6994      	ldr	r4, [r2, #24]
 800ab5c:	42a3      	cmp	r3, r4
 800ab5e:	db01      	blt.n	800ab64 <__sfputc_r+0x16>
 800ab60:	290a      	cmp	r1, #10
 800ab62:	d103      	bne.n	800ab6c <__sfputc_r+0x1e>
 800ab64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab68:	f000 babe 	b.w	800b0e8 <__swbuf_r>
 800ab6c:	6813      	ldr	r3, [r2, #0]
 800ab6e:	1c58      	adds	r0, r3, #1
 800ab70:	6010      	str	r0, [r2, #0]
 800ab72:	7019      	strb	r1, [r3, #0]
 800ab74:	4608      	mov	r0, r1
 800ab76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <__sfputs_r>:
 800ab7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7e:	4606      	mov	r6, r0
 800ab80:	460f      	mov	r7, r1
 800ab82:	4614      	mov	r4, r2
 800ab84:	18d5      	adds	r5, r2, r3
 800ab86:	42ac      	cmp	r4, r5
 800ab88:	d101      	bne.n	800ab8e <__sfputs_r+0x12>
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	e007      	b.n	800ab9e <__sfputs_r+0x22>
 800ab8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab92:	463a      	mov	r2, r7
 800ab94:	4630      	mov	r0, r6
 800ab96:	f7ff ffda 	bl	800ab4e <__sfputc_r>
 800ab9a:	1c43      	adds	r3, r0, #1
 800ab9c:	d1f3      	bne.n	800ab86 <__sfputs_r+0xa>
 800ab9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aba0 <_vfiprintf_r>:
 800aba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba4:	460d      	mov	r5, r1
 800aba6:	b09d      	sub	sp, #116	@ 0x74
 800aba8:	4614      	mov	r4, r2
 800abaa:	4698      	mov	r8, r3
 800abac:	4606      	mov	r6, r0
 800abae:	b118      	cbz	r0, 800abb8 <_vfiprintf_r+0x18>
 800abb0:	6a03      	ldr	r3, [r0, #32]
 800abb2:	b90b      	cbnz	r3, 800abb8 <_vfiprintf_r+0x18>
 800abb4:	f7fe fca6 	bl	8009504 <__sinit>
 800abb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abba:	07d9      	lsls	r1, r3, #31
 800abbc:	d405      	bmi.n	800abca <_vfiprintf_r+0x2a>
 800abbe:	89ab      	ldrh	r3, [r5, #12]
 800abc0:	059a      	lsls	r2, r3, #22
 800abc2:	d402      	bmi.n	800abca <_vfiprintf_r+0x2a>
 800abc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abc6:	f7fe fda2 	bl	800970e <__retarget_lock_acquire_recursive>
 800abca:	89ab      	ldrh	r3, [r5, #12]
 800abcc:	071b      	lsls	r3, r3, #28
 800abce:	d501      	bpl.n	800abd4 <_vfiprintf_r+0x34>
 800abd0:	692b      	ldr	r3, [r5, #16]
 800abd2:	b99b      	cbnz	r3, 800abfc <_vfiprintf_r+0x5c>
 800abd4:	4629      	mov	r1, r5
 800abd6:	4630      	mov	r0, r6
 800abd8:	f000 fac4 	bl	800b164 <__swsetup_r>
 800abdc:	b170      	cbz	r0, 800abfc <_vfiprintf_r+0x5c>
 800abde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abe0:	07dc      	lsls	r4, r3, #31
 800abe2:	d504      	bpl.n	800abee <_vfiprintf_r+0x4e>
 800abe4:	f04f 30ff 	mov.w	r0, #4294967295
 800abe8:	b01d      	add	sp, #116	@ 0x74
 800abea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abee:	89ab      	ldrh	r3, [r5, #12]
 800abf0:	0598      	lsls	r0, r3, #22
 800abf2:	d4f7      	bmi.n	800abe4 <_vfiprintf_r+0x44>
 800abf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abf6:	f7fe fd8b 	bl	8009710 <__retarget_lock_release_recursive>
 800abfa:	e7f3      	b.n	800abe4 <_vfiprintf_r+0x44>
 800abfc:	2300      	movs	r3, #0
 800abfe:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac00:	2320      	movs	r3, #32
 800ac02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac06:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac0a:	2330      	movs	r3, #48	@ 0x30
 800ac0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800adbc <_vfiprintf_r+0x21c>
 800ac10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac14:	f04f 0901 	mov.w	r9, #1
 800ac18:	4623      	mov	r3, r4
 800ac1a:	469a      	mov	sl, r3
 800ac1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac20:	b10a      	cbz	r2, 800ac26 <_vfiprintf_r+0x86>
 800ac22:	2a25      	cmp	r2, #37	@ 0x25
 800ac24:	d1f9      	bne.n	800ac1a <_vfiprintf_r+0x7a>
 800ac26:	ebba 0b04 	subs.w	fp, sl, r4
 800ac2a:	d00b      	beq.n	800ac44 <_vfiprintf_r+0xa4>
 800ac2c:	465b      	mov	r3, fp
 800ac2e:	4622      	mov	r2, r4
 800ac30:	4629      	mov	r1, r5
 800ac32:	4630      	mov	r0, r6
 800ac34:	f7ff ffa2 	bl	800ab7c <__sfputs_r>
 800ac38:	3001      	adds	r0, #1
 800ac3a:	f000 80a7 	beq.w	800ad8c <_vfiprintf_r+0x1ec>
 800ac3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac40:	445a      	add	r2, fp
 800ac42:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac44:	f89a 3000 	ldrb.w	r3, [sl]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f000 809f 	beq.w	800ad8c <_vfiprintf_r+0x1ec>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	f04f 32ff 	mov.w	r2, #4294967295
 800ac54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac58:	f10a 0a01 	add.w	sl, sl, #1
 800ac5c:	9304      	str	r3, [sp, #16]
 800ac5e:	9307      	str	r3, [sp, #28]
 800ac60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac64:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac66:	4654      	mov	r4, sl
 800ac68:	2205      	movs	r2, #5
 800ac6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac6e:	4853      	ldr	r0, [pc, #332]	@ (800adbc <_vfiprintf_r+0x21c>)
 800ac70:	f7f5 fb5e 	bl	8000330 <memchr>
 800ac74:	9a04      	ldr	r2, [sp, #16]
 800ac76:	b9d8      	cbnz	r0, 800acb0 <_vfiprintf_r+0x110>
 800ac78:	06d1      	lsls	r1, r2, #27
 800ac7a:	bf44      	itt	mi
 800ac7c:	2320      	movmi	r3, #32
 800ac7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac82:	0713      	lsls	r3, r2, #28
 800ac84:	bf44      	itt	mi
 800ac86:	232b      	movmi	r3, #43	@ 0x2b
 800ac88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac90:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac92:	d015      	beq.n	800acc0 <_vfiprintf_r+0x120>
 800ac94:	9a07      	ldr	r2, [sp, #28]
 800ac96:	4654      	mov	r4, sl
 800ac98:	2000      	movs	r0, #0
 800ac9a:	f04f 0c0a 	mov.w	ip, #10
 800ac9e:	4621      	mov	r1, r4
 800aca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aca4:	3b30      	subs	r3, #48	@ 0x30
 800aca6:	2b09      	cmp	r3, #9
 800aca8:	d94b      	bls.n	800ad42 <_vfiprintf_r+0x1a2>
 800acaa:	b1b0      	cbz	r0, 800acda <_vfiprintf_r+0x13a>
 800acac:	9207      	str	r2, [sp, #28]
 800acae:	e014      	b.n	800acda <_vfiprintf_r+0x13a>
 800acb0:	eba0 0308 	sub.w	r3, r0, r8
 800acb4:	fa09 f303 	lsl.w	r3, r9, r3
 800acb8:	4313      	orrs	r3, r2
 800acba:	9304      	str	r3, [sp, #16]
 800acbc:	46a2      	mov	sl, r4
 800acbe:	e7d2      	b.n	800ac66 <_vfiprintf_r+0xc6>
 800acc0:	9b03      	ldr	r3, [sp, #12]
 800acc2:	1d19      	adds	r1, r3, #4
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	9103      	str	r1, [sp, #12]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	bfbb      	ittet	lt
 800accc:	425b      	neglt	r3, r3
 800acce:	f042 0202 	orrlt.w	r2, r2, #2
 800acd2:	9307      	strge	r3, [sp, #28]
 800acd4:	9307      	strlt	r3, [sp, #28]
 800acd6:	bfb8      	it	lt
 800acd8:	9204      	strlt	r2, [sp, #16]
 800acda:	7823      	ldrb	r3, [r4, #0]
 800acdc:	2b2e      	cmp	r3, #46	@ 0x2e
 800acde:	d10a      	bne.n	800acf6 <_vfiprintf_r+0x156>
 800ace0:	7863      	ldrb	r3, [r4, #1]
 800ace2:	2b2a      	cmp	r3, #42	@ 0x2a
 800ace4:	d132      	bne.n	800ad4c <_vfiprintf_r+0x1ac>
 800ace6:	9b03      	ldr	r3, [sp, #12]
 800ace8:	1d1a      	adds	r2, r3, #4
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	9203      	str	r2, [sp, #12]
 800acee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800acf2:	3402      	adds	r4, #2
 800acf4:	9305      	str	r3, [sp, #20]
 800acf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800adcc <_vfiprintf_r+0x22c>
 800acfa:	7821      	ldrb	r1, [r4, #0]
 800acfc:	2203      	movs	r2, #3
 800acfe:	4650      	mov	r0, sl
 800ad00:	f7f5 fb16 	bl	8000330 <memchr>
 800ad04:	b138      	cbz	r0, 800ad16 <_vfiprintf_r+0x176>
 800ad06:	9b04      	ldr	r3, [sp, #16]
 800ad08:	eba0 000a 	sub.w	r0, r0, sl
 800ad0c:	2240      	movs	r2, #64	@ 0x40
 800ad0e:	4082      	lsls	r2, r0
 800ad10:	4313      	orrs	r3, r2
 800ad12:	3401      	adds	r4, #1
 800ad14:	9304      	str	r3, [sp, #16]
 800ad16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad1a:	4829      	ldr	r0, [pc, #164]	@ (800adc0 <_vfiprintf_r+0x220>)
 800ad1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad20:	2206      	movs	r2, #6
 800ad22:	f7f5 fb05 	bl	8000330 <memchr>
 800ad26:	2800      	cmp	r0, #0
 800ad28:	d03f      	beq.n	800adaa <_vfiprintf_r+0x20a>
 800ad2a:	4b26      	ldr	r3, [pc, #152]	@ (800adc4 <_vfiprintf_r+0x224>)
 800ad2c:	bb1b      	cbnz	r3, 800ad76 <_vfiprintf_r+0x1d6>
 800ad2e:	9b03      	ldr	r3, [sp, #12]
 800ad30:	3307      	adds	r3, #7
 800ad32:	f023 0307 	bic.w	r3, r3, #7
 800ad36:	3308      	adds	r3, #8
 800ad38:	9303      	str	r3, [sp, #12]
 800ad3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad3c:	443b      	add	r3, r7
 800ad3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad40:	e76a      	b.n	800ac18 <_vfiprintf_r+0x78>
 800ad42:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad46:	460c      	mov	r4, r1
 800ad48:	2001      	movs	r0, #1
 800ad4a:	e7a8      	b.n	800ac9e <_vfiprintf_r+0xfe>
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	3401      	adds	r4, #1
 800ad50:	9305      	str	r3, [sp, #20]
 800ad52:	4619      	mov	r1, r3
 800ad54:	f04f 0c0a 	mov.w	ip, #10
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad5e:	3a30      	subs	r2, #48	@ 0x30
 800ad60:	2a09      	cmp	r2, #9
 800ad62:	d903      	bls.n	800ad6c <_vfiprintf_r+0x1cc>
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d0c6      	beq.n	800acf6 <_vfiprintf_r+0x156>
 800ad68:	9105      	str	r1, [sp, #20]
 800ad6a:	e7c4      	b.n	800acf6 <_vfiprintf_r+0x156>
 800ad6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad70:	4604      	mov	r4, r0
 800ad72:	2301      	movs	r3, #1
 800ad74:	e7f0      	b.n	800ad58 <_vfiprintf_r+0x1b8>
 800ad76:	ab03      	add	r3, sp, #12
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	462a      	mov	r2, r5
 800ad7c:	4b12      	ldr	r3, [pc, #72]	@ (800adc8 <_vfiprintf_r+0x228>)
 800ad7e:	a904      	add	r1, sp, #16
 800ad80:	4630      	mov	r0, r6
 800ad82:	f3af 8000 	nop.w
 800ad86:	4607      	mov	r7, r0
 800ad88:	1c78      	adds	r0, r7, #1
 800ad8a:	d1d6      	bne.n	800ad3a <_vfiprintf_r+0x19a>
 800ad8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad8e:	07d9      	lsls	r1, r3, #31
 800ad90:	d405      	bmi.n	800ad9e <_vfiprintf_r+0x1fe>
 800ad92:	89ab      	ldrh	r3, [r5, #12]
 800ad94:	059a      	lsls	r2, r3, #22
 800ad96:	d402      	bmi.n	800ad9e <_vfiprintf_r+0x1fe>
 800ad98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad9a:	f7fe fcb9 	bl	8009710 <__retarget_lock_release_recursive>
 800ad9e:	89ab      	ldrh	r3, [r5, #12]
 800ada0:	065b      	lsls	r3, r3, #25
 800ada2:	f53f af1f 	bmi.w	800abe4 <_vfiprintf_r+0x44>
 800ada6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ada8:	e71e      	b.n	800abe8 <_vfiprintf_r+0x48>
 800adaa:	ab03      	add	r3, sp, #12
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	462a      	mov	r2, r5
 800adb0:	4b05      	ldr	r3, [pc, #20]	@ (800adc8 <_vfiprintf_r+0x228>)
 800adb2:	a904      	add	r1, sp, #16
 800adb4:	4630      	mov	r0, r6
 800adb6:	f000 f879 	bl	800aeac <_printf_i>
 800adba:	e7e4      	b.n	800ad86 <_vfiprintf_r+0x1e6>
 800adbc:	0800b68f 	.word	0x0800b68f
 800adc0:	0800b699 	.word	0x0800b699
 800adc4:	00000000 	.word	0x00000000
 800adc8:	0800ab7d 	.word	0x0800ab7d
 800adcc:	0800b695 	.word	0x0800b695

0800add0 <_printf_common>:
 800add0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800add4:	4616      	mov	r6, r2
 800add6:	4698      	mov	r8, r3
 800add8:	688a      	ldr	r2, [r1, #8]
 800adda:	690b      	ldr	r3, [r1, #16]
 800addc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ade0:	4293      	cmp	r3, r2
 800ade2:	bfb8      	it	lt
 800ade4:	4613      	movlt	r3, r2
 800ade6:	6033      	str	r3, [r6, #0]
 800ade8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800adec:	4607      	mov	r7, r0
 800adee:	460c      	mov	r4, r1
 800adf0:	b10a      	cbz	r2, 800adf6 <_printf_common+0x26>
 800adf2:	3301      	adds	r3, #1
 800adf4:	6033      	str	r3, [r6, #0]
 800adf6:	6823      	ldr	r3, [r4, #0]
 800adf8:	0699      	lsls	r1, r3, #26
 800adfa:	bf42      	ittt	mi
 800adfc:	6833      	ldrmi	r3, [r6, #0]
 800adfe:	3302      	addmi	r3, #2
 800ae00:	6033      	strmi	r3, [r6, #0]
 800ae02:	6825      	ldr	r5, [r4, #0]
 800ae04:	f015 0506 	ands.w	r5, r5, #6
 800ae08:	d106      	bne.n	800ae18 <_printf_common+0x48>
 800ae0a:	f104 0a19 	add.w	sl, r4, #25
 800ae0e:	68e3      	ldr	r3, [r4, #12]
 800ae10:	6832      	ldr	r2, [r6, #0]
 800ae12:	1a9b      	subs	r3, r3, r2
 800ae14:	42ab      	cmp	r3, r5
 800ae16:	dc26      	bgt.n	800ae66 <_printf_common+0x96>
 800ae18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ae1c:	6822      	ldr	r2, [r4, #0]
 800ae1e:	3b00      	subs	r3, #0
 800ae20:	bf18      	it	ne
 800ae22:	2301      	movne	r3, #1
 800ae24:	0692      	lsls	r2, r2, #26
 800ae26:	d42b      	bmi.n	800ae80 <_printf_common+0xb0>
 800ae28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ae2c:	4641      	mov	r1, r8
 800ae2e:	4638      	mov	r0, r7
 800ae30:	47c8      	blx	r9
 800ae32:	3001      	adds	r0, #1
 800ae34:	d01e      	beq.n	800ae74 <_printf_common+0xa4>
 800ae36:	6823      	ldr	r3, [r4, #0]
 800ae38:	6922      	ldr	r2, [r4, #16]
 800ae3a:	f003 0306 	and.w	r3, r3, #6
 800ae3e:	2b04      	cmp	r3, #4
 800ae40:	bf02      	ittt	eq
 800ae42:	68e5      	ldreq	r5, [r4, #12]
 800ae44:	6833      	ldreq	r3, [r6, #0]
 800ae46:	1aed      	subeq	r5, r5, r3
 800ae48:	68a3      	ldr	r3, [r4, #8]
 800ae4a:	bf0c      	ite	eq
 800ae4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae50:	2500      	movne	r5, #0
 800ae52:	4293      	cmp	r3, r2
 800ae54:	bfc4      	itt	gt
 800ae56:	1a9b      	subgt	r3, r3, r2
 800ae58:	18ed      	addgt	r5, r5, r3
 800ae5a:	2600      	movs	r6, #0
 800ae5c:	341a      	adds	r4, #26
 800ae5e:	42b5      	cmp	r5, r6
 800ae60:	d11a      	bne.n	800ae98 <_printf_common+0xc8>
 800ae62:	2000      	movs	r0, #0
 800ae64:	e008      	b.n	800ae78 <_printf_common+0xa8>
 800ae66:	2301      	movs	r3, #1
 800ae68:	4652      	mov	r2, sl
 800ae6a:	4641      	mov	r1, r8
 800ae6c:	4638      	mov	r0, r7
 800ae6e:	47c8      	blx	r9
 800ae70:	3001      	adds	r0, #1
 800ae72:	d103      	bne.n	800ae7c <_printf_common+0xac>
 800ae74:	f04f 30ff 	mov.w	r0, #4294967295
 800ae78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae7c:	3501      	adds	r5, #1
 800ae7e:	e7c6      	b.n	800ae0e <_printf_common+0x3e>
 800ae80:	18e1      	adds	r1, r4, r3
 800ae82:	1c5a      	adds	r2, r3, #1
 800ae84:	2030      	movs	r0, #48	@ 0x30
 800ae86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae8a:	4422      	add	r2, r4
 800ae8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae94:	3302      	adds	r3, #2
 800ae96:	e7c7      	b.n	800ae28 <_printf_common+0x58>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	4622      	mov	r2, r4
 800ae9c:	4641      	mov	r1, r8
 800ae9e:	4638      	mov	r0, r7
 800aea0:	47c8      	blx	r9
 800aea2:	3001      	adds	r0, #1
 800aea4:	d0e6      	beq.n	800ae74 <_printf_common+0xa4>
 800aea6:	3601      	adds	r6, #1
 800aea8:	e7d9      	b.n	800ae5e <_printf_common+0x8e>
	...

0800aeac <_printf_i>:
 800aeac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aeb0:	7e0f      	ldrb	r7, [r1, #24]
 800aeb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aeb4:	2f78      	cmp	r7, #120	@ 0x78
 800aeb6:	4691      	mov	r9, r2
 800aeb8:	4680      	mov	r8, r0
 800aeba:	460c      	mov	r4, r1
 800aebc:	469a      	mov	sl, r3
 800aebe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aec2:	d807      	bhi.n	800aed4 <_printf_i+0x28>
 800aec4:	2f62      	cmp	r7, #98	@ 0x62
 800aec6:	d80a      	bhi.n	800aede <_printf_i+0x32>
 800aec8:	2f00      	cmp	r7, #0
 800aeca:	f000 80d1 	beq.w	800b070 <_printf_i+0x1c4>
 800aece:	2f58      	cmp	r7, #88	@ 0x58
 800aed0:	f000 80b8 	beq.w	800b044 <_printf_i+0x198>
 800aed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aed8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aedc:	e03a      	b.n	800af54 <_printf_i+0xa8>
 800aede:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aee2:	2b15      	cmp	r3, #21
 800aee4:	d8f6      	bhi.n	800aed4 <_printf_i+0x28>
 800aee6:	a101      	add	r1, pc, #4	@ (adr r1, 800aeec <_printf_i+0x40>)
 800aee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aeec:	0800af45 	.word	0x0800af45
 800aef0:	0800af59 	.word	0x0800af59
 800aef4:	0800aed5 	.word	0x0800aed5
 800aef8:	0800aed5 	.word	0x0800aed5
 800aefc:	0800aed5 	.word	0x0800aed5
 800af00:	0800aed5 	.word	0x0800aed5
 800af04:	0800af59 	.word	0x0800af59
 800af08:	0800aed5 	.word	0x0800aed5
 800af0c:	0800aed5 	.word	0x0800aed5
 800af10:	0800aed5 	.word	0x0800aed5
 800af14:	0800aed5 	.word	0x0800aed5
 800af18:	0800b057 	.word	0x0800b057
 800af1c:	0800af83 	.word	0x0800af83
 800af20:	0800b011 	.word	0x0800b011
 800af24:	0800aed5 	.word	0x0800aed5
 800af28:	0800aed5 	.word	0x0800aed5
 800af2c:	0800b079 	.word	0x0800b079
 800af30:	0800aed5 	.word	0x0800aed5
 800af34:	0800af83 	.word	0x0800af83
 800af38:	0800aed5 	.word	0x0800aed5
 800af3c:	0800aed5 	.word	0x0800aed5
 800af40:	0800b019 	.word	0x0800b019
 800af44:	6833      	ldr	r3, [r6, #0]
 800af46:	1d1a      	adds	r2, r3, #4
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	6032      	str	r2, [r6, #0]
 800af4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800af54:	2301      	movs	r3, #1
 800af56:	e09c      	b.n	800b092 <_printf_i+0x1e6>
 800af58:	6833      	ldr	r3, [r6, #0]
 800af5a:	6820      	ldr	r0, [r4, #0]
 800af5c:	1d19      	adds	r1, r3, #4
 800af5e:	6031      	str	r1, [r6, #0]
 800af60:	0606      	lsls	r6, r0, #24
 800af62:	d501      	bpl.n	800af68 <_printf_i+0xbc>
 800af64:	681d      	ldr	r5, [r3, #0]
 800af66:	e003      	b.n	800af70 <_printf_i+0xc4>
 800af68:	0645      	lsls	r5, r0, #25
 800af6a:	d5fb      	bpl.n	800af64 <_printf_i+0xb8>
 800af6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800af70:	2d00      	cmp	r5, #0
 800af72:	da03      	bge.n	800af7c <_printf_i+0xd0>
 800af74:	232d      	movs	r3, #45	@ 0x2d
 800af76:	426d      	negs	r5, r5
 800af78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af7c:	4858      	ldr	r0, [pc, #352]	@ (800b0e0 <_printf_i+0x234>)
 800af7e:	230a      	movs	r3, #10
 800af80:	e011      	b.n	800afa6 <_printf_i+0xfa>
 800af82:	6821      	ldr	r1, [r4, #0]
 800af84:	6833      	ldr	r3, [r6, #0]
 800af86:	0608      	lsls	r0, r1, #24
 800af88:	f853 5b04 	ldr.w	r5, [r3], #4
 800af8c:	d402      	bmi.n	800af94 <_printf_i+0xe8>
 800af8e:	0649      	lsls	r1, r1, #25
 800af90:	bf48      	it	mi
 800af92:	b2ad      	uxthmi	r5, r5
 800af94:	2f6f      	cmp	r7, #111	@ 0x6f
 800af96:	4852      	ldr	r0, [pc, #328]	@ (800b0e0 <_printf_i+0x234>)
 800af98:	6033      	str	r3, [r6, #0]
 800af9a:	bf14      	ite	ne
 800af9c:	230a      	movne	r3, #10
 800af9e:	2308      	moveq	r3, #8
 800afa0:	2100      	movs	r1, #0
 800afa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800afa6:	6866      	ldr	r6, [r4, #4]
 800afa8:	60a6      	str	r6, [r4, #8]
 800afaa:	2e00      	cmp	r6, #0
 800afac:	db05      	blt.n	800afba <_printf_i+0x10e>
 800afae:	6821      	ldr	r1, [r4, #0]
 800afb0:	432e      	orrs	r6, r5
 800afb2:	f021 0104 	bic.w	r1, r1, #4
 800afb6:	6021      	str	r1, [r4, #0]
 800afb8:	d04b      	beq.n	800b052 <_printf_i+0x1a6>
 800afba:	4616      	mov	r6, r2
 800afbc:	fbb5 f1f3 	udiv	r1, r5, r3
 800afc0:	fb03 5711 	mls	r7, r3, r1, r5
 800afc4:	5dc7      	ldrb	r7, [r0, r7]
 800afc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800afca:	462f      	mov	r7, r5
 800afcc:	42bb      	cmp	r3, r7
 800afce:	460d      	mov	r5, r1
 800afd0:	d9f4      	bls.n	800afbc <_printf_i+0x110>
 800afd2:	2b08      	cmp	r3, #8
 800afd4:	d10b      	bne.n	800afee <_printf_i+0x142>
 800afd6:	6823      	ldr	r3, [r4, #0]
 800afd8:	07df      	lsls	r7, r3, #31
 800afda:	d508      	bpl.n	800afee <_printf_i+0x142>
 800afdc:	6923      	ldr	r3, [r4, #16]
 800afde:	6861      	ldr	r1, [r4, #4]
 800afe0:	4299      	cmp	r1, r3
 800afe2:	bfde      	ittt	le
 800afe4:	2330      	movle	r3, #48	@ 0x30
 800afe6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800afea:	f106 36ff 	addle.w	r6, r6, #4294967295
 800afee:	1b92      	subs	r2, r2, r6
 800aff0:	6122      	str	r2, [r4, #16]
 800aff2:	f8cd a000 	str.w	sl, [sp]
 800aff6:	464b      	mov	r3, r9
 800aff8:	aa03      	add	r2, sp, #12
 800affa:	4621      	mov	r1, r4
 800affc:	4640      	mov	r0, r8
 800affe:	f7ff fee7 	bl	800add0 <_printf_common>
 800b002:	3001      	adds	r0, #1
 800b004:	d14a      	bne.n	800b09c <_printf_i+0x1f0>
 800b006:	f04f 30ff 	mov.w	r0, #4294967295
 800b00a:	b004      	add	sp, #16
 800b00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b010:	6823      	ldr	r3, [r4, #0]
 800b012:	f043 0320 	orr.w	r3, r3, #32
 800b016:	6023      	str	r3, [r4, #0]
 800b018:	4832      	ldr	r0, [pc, #200]	@ (800b0e4 <_printf_i+0x238>)
 800b01a:	2778      	movs	r7, #120	@ 0x78
 800b01c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b020:	6823      	ldr	r3, [r4, #0]
 800b022:	6831      	ldr	r1, [r6, #0]
 800b024:	061f      	lsls	r7, r3, #24
 800b026:	f851 5b04 	ldr.w	r5, [r1], #4
 800b02a:	d402      	bmi.n	800b032 <_printf_i+0x186>
 800b02c:	065f      	lsls	r7, r3, #25
 800b02e:	bf48      	it	mi
 800b030:	b2ad      	uxthmi	r5, r5
 800b032:	6031      	str	r1, [r6, #0]
 800b034:	07d9      	lsls	r1, r3, #31
 800b036:	bf44      	itt	mi
 800b038:	f043 0320 	orrmi.w	r3, r3, #32
 800b03c:	6023      	strmi	r3, [r4, #0]
 800b03e:	b11d      	cbz	r5, 800b048 <_printf_i+0x19c>
 800b040:	2310      	movs	r3, #16
 800b042:	e7ad      	b.n	800afa0 <_printf_i+0xf4>
 800b044:	4826      	ldr	r0, [pc, #152]	@ (800b0e0 <_printf_i+0x234>)
 800b046:	e7e9      	b.n	800b01c <_printf_i+0x170>
 800b048:	6823      	ldr	r3, [r4, #0]
 800b04a:	f023 0320 	bic.w	r3, r3, #32
 800b04e:	6023      	str	r3, [r4, #0]
 800b050:	e7f6      	b.n	800b040 <_printf_i+0x194>
 800b052:	4616      	mov	r6, r2
 800b054:	e7bd      	b.n	800afd2 <_printf_i+0x126>
 800b056:	6833      	ldr	r3, [r6, #0]
 800b058:	6825      	ldr	r5, [r4, #0]
 800b05a:	6961      	ldr	r1, [r4, #20]
 800b05c:	1d18      	adds	r0, r3, #4
 800b05e:	6030      	str	r0, [r6, #0]
 800b060:	062e      	lsls	r6, r5, #24
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	d501      	bpl.n	800b06a <_printf_i+0x1be>
 800b066:	6019      	str	r1, [r3, #0]
 800b068:	e002      	b.n	800b070 <_printf_i+0x1c4>
 800b06a:	0668      	lsls	r0, r5, #25
 800b06c:	d5fb      	bpl.n	800b066 <_printf_i+0x1ba>
 800b06e:	8019      	strh	r1, [r3, #0]
 800b070:	2300      	movs	r3, #0
 800b072:	6123      	str	r3, [r4, #16]
 800b074:	4616      	mov	r6, r2
 800b076:	e7bc      	b.n	800aff2 <_printf_i+0x146>
 800b078:	6833      	ldr	r3, [r6, #0]
 800b07a:	1d1a      	adds	r2, r3, #4
 800b07c:	6032      	str	r2, [r6, #0]
 800b07e:	681e      	ldr	r6, [r3, #0]
 800b080:	6862      	ldr	r2, [r4, #4]
 800b082:	2100      	movs	r1, #0
 800b084:	4630      	mov	r0, r6
 800b086:	f7f5 f953 	bl	8000330 <memchr>
 800b08a:	b108      	cbz	r0, 800b090 <_printf_i+0x1e4>
 800b08c:	1b80      	subs	r0, r0, r6
 800b08e:	6060      	str	r0, [r4, #4]
 800b090:	6863      	ldr	r3, [r4, #4]
 800b092:	6123      	str	r3, [r4, #16]
 800b094:	2300      	movs	r3, #0
 800b096:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b09a:	e7aa      	b.n	800aff2 <_printf_i+0x146>
 800b09c:	6923      	ldr	r3, [r4, #16]
 800b09e:	4632      	mov	r2, r6
 800b0a0:	4649      	mov	r1, r9
 800b0a2:	4640      	mov	r0, r8
 800b0a4:	47d0      	blx	sl
 800b0a6:	3001      	adds	r0, #1
 800b0a8:	d0ad      	beq.n	800b006 <_printf_i+0x15a>
 800b0aa:	6823      	ldr	r3, [r4, #0]
 800b0ac:	079b      	lsls	r3, r3, #30
 800b0ae:	d413      	bmi.n	800b0d8 <_printf_i+0x22c>
 800b0b0:	68e0      	ldr	r0, [r4, #12]
 800b0b2:	9b03      	ldr	r3, [sp, #12]
 800b0b4:	4298      	cmp	r0, r3
 800b0b6:	bfb8      	it	lt
 800b0b8:	4618      	movlt	r0, r3
 800b0ba:	e7a6      	b.n	800b00a <_printf_i+0x15e>
 800b0bc:	2301      	movs	r3, #1
 800b0be:	4632      	mov	r2, r6
 800b0c0:	4649      	mov	r1, r9
 800b0c2:	4640      	mov	r0, r8
 800b0c4:	47d0      	blx	sl
 800b0c6:	3001      	adds	r0, #1
 800b0c8:	d09d      	beq.n	800b006 <_printf_i+0x15a>
 800b0ca:	3501      	adds	r5, #1
 800b0cc:	68e3      	ldr	r3, [r4, #12]
 800b0ce:	9903      	ldr	r1, [sp, #12]
 800b0d0:	1a5b      	subs	r3, r3, r1
 800b0d2:	42ab      	cmp	r3, r5
 800b0d4:	dcf2      	bgt.n	800b0bc <_printf_i+0x210>
 800b0d6:	e7eb      	b.n	800b0b0 <_printf_i+0x204>
 800b0d8:	2500      	movs	r5, #0
 800b0da:	f104 0619 	add.w	r6, r4, #25
 800b0de:	e7f5      	b.n	800b0cc <_printf_i+0x220>
 800b0e0:	0800b6a0 	.word	0x0800b6a0
 800b0e4:	0800b6b1 	.word	0x0800b6b1

0800b0e8 <__swbuf_r>:
 800b0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ea:	460e      	mov	r6, r1
 800b0ec:	4614      	mov	r4, r2
 800b0ee:	4605      	mov	r5, r0
 800b0f0:	b118      	cbz	r0, 800b0fa <__swbuf_r+0x12>
 800b0f2:	6a03      	ldr	r3, [r0, #32]
 800b0f4:	b90b      	cbnz	r3, 800b0fa <__swbuf_r+0x12>
 800b0f6:	f7fe fa05 	bl	8009504 <__sinit>
 800b0fa:	69a3      	ldr	r3, [r4, #24]
 800b0fc:	60a3      	str	r3, [r4, #8]
 800b0fe:	89a3      	ldrh	r3, [r4, #12]
 800b100:	071a      	lsls	r2, r3, #28
 800b102:	d501      	bpl.n	800b108 <__swbuf_r+0x20>
 800b104:	6923      	ldr	r3, [r4, #16]
 800b106:	b943      	cbnz	r3, 800b11a <__swbuf_r+0x32>
 800b108:	4621      	mov	r1, r4
 800b10a:	4628      	mov	r0, r5
 800b10c:	f000 f82a 	bl	800b164 <__swsetup_r>
 800b110:	b118      	cbz	r0, 800b11a <__swbuf_r+0x32>
 800b112:	f04f 37ff 	mov.w	r7, #4294967295
 800b116:	4638      	mov	r0, r7
 800b118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b11a:	6823      	ldr	r3, [r4, #0]
 800b11c:	6922      	ldr	r2, [r4, #16]
 800b11e:	1a98      	subs	r0, r3, r2
 800b120:	6963      	ldr	r3, [r4, #20]
 800b122:	b2f6      	uxtb	r6, r6
 800b124:	4283      	cmp	r3, r0
 800b126:	4637      	mov	r7, r6
 800b128:	dc05      	bgt.n	800b136 <__swbuf_r+0x4e>
 800b12a:	4621      	mov	r1, r4
 800b12c:	4628      	mov	r0, r5
 800b12e:	f7ff fc83 	bl	800aa38 <_fflush_r>
 800b132:	2800      	cmp	r0, #0
 800b134:	d1ed      	bne.n	800b112 <__swbuf_r+0x2a>
 800b136:	68a3      	ldr	r3, [r4, #8]
 800b138:	3b01      	subs	r3, #1
 800b13a:	60a3      	str	r3, [r4, #8]
 800b13c:	6823      	ldr	r3, [r4, #0]
 800b13e:	1c5a      	adds	r2, r3, #1
 800b140:	6022      	str	r2, [r4, #0]
 800b142:	701e      	strb	r6, [r3, #0]
 800b144:	6962      	ldr	r2, [r4, #20]
 800b146:	1c43      	adds	r3, r0, #1
 800b148:	429a      	cmp	r2, r3
 800b14a:	d004      	beq.n	800b156 <__swbuf_r+0x6e>
 800b14c:	89a3      	ldrh	r3, [r4, #12]
 800b14e:	07db      	lsls	r3, r3, #31
 800b150:	d5e1      	bpl.n	800b116 <__swbuf_r+0x2e>
 800b152:	2e0a      	cmp	r6, #10
 800b154:	d1df      	bne.n	800b116 <__swbuf_r+0x2e>
 800b156:	4621      	mov	r1, r4
 800b158:	4628      	mov	r0, r5
 800b15a:	f7ff fc6d 	bl	800aa38 <_fflush_r>
 800b15e:	2800      	cmp	r0, #0
 800b160:	d0d9      	beq.n	800b116 <__swbuf_r+0x2e>
 800b162:	e7d6      	b.n	800b112 <__swbuf_r+0x2a>

0800b164 <__swsetup_r>:
 800b164:	b538      	push	{r3, r4, r5, lr}
 800b166:	4b29      	ldr	r3, [pc, #164]	@ (800b20c <__swsetup_r+0xa8>)
 800b168:	4605      	mov	r5, r0
 800b16a:	6818      	ldr	r0, [r3, #0]
 800b16c:	460c      	mov	r4, r1
 800b16e:	b118      	cbz	r0, 800b178 <__swsetup_r+0x14>
 800b170:	6a03      	ldr	r3, [r0, #32]
 800b172:	b90b      	cbnz	r3, 800b178 <__swsetup_r+0x14>
 800b174:	f7fe f9c6 	bl	8009504 <__sinit>
 800b178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b17c:	0719      	lsls	r1, r3, #28
 800b17e:	d422      	bmi.n	800b1c6 <__swsetup_r+0x62>
 800b180:	06da      	lsls	r2, r3, #27
 800b182:	d407      	bmi.n	800b194 <__swsetup_r+0x30>
 800b184:	2209      	movs	r2, #9
 800b186:	602a      	str	r2, [r5, #0]
 800b188:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b18c:	81a3      	strh	r3, [r4, #12]
 800b18e:	f04f 30ff 	mov.w	r0, #4294967295
 800b192:	e033      	b.n	800b1fc <__swsetup_r+0x98>
 800b194:	0758      	lsls	r0, r3, #29
 800b196:	d512      	bpl.n	800b1be <__swsetup_r+0x5a>
 800b198:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b19a:	b141      	cbz	r1, 800b1ae <__swsetup_r+0x4a>
 800b19c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1a0:	4299      	cmp	r1, r3
 800b1a2:	d002      	beq.n	800b1aa <__swsetup_r+0x46>
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	f7fe facb 	bl	8009740 <_free_r>
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1ae:	89a3      	ldrh	r3, [r4, #12]
 800b1b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b1b4:	81a3      	strh	r3, [r4, #12]
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	6063      	str	r3, [r4, #4]
 800b1ba:	6923      	ldr	r3, [r4, #16]
 800b1bc:	6023      	str	r3, [r4, #0]
 800b1be:	89a3      	ldrh	r3, [r4, #12]
 800b1c0:	f043 0308 	orr.w	r3, r3, #8
 800b1c4:	81a3      	strh	r3, [r4, #12]
 800b1c6:	6923      	ldr	r3, [r4, #16]
 800b1c8:	b94b      	cbnz	r3, 800b1de <__swsetup_r+0x7a>
 800b1ca:	89a3      	ldrh	r3, [r4, #12]
 800b1cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b1d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1d4:	d003      	beq.n	800b1de <__swsetup_r+0x7a>
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	4628      	mov	r0, r5
 800b1da:	f000 f883 	bl	800b2e4 <__smakebuf_r>
 800b1de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1e2:	f013 0201 	ands.w	r2, r3, #1
 800b1e6:	d00a      	beq.n	800b1fe <__swsetup_r+0x9a>
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	60a2      	str	r2, [r4, #8]
 800b1ec:	6962      	ldr	r2, [r4, #20]
 800b1ee:	4252      	negs	r2, r2
 800b1f0:	61a2      	str	r2, [r4, #24]
 800b1f2:	6922      	ldr	r2, [r4, #16]
 800b1f4:	b942      	cbnz	r2, 800b208 <__swsetup_r+0xa4>
 800b1f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b1fa:	d1c5      	bne.n	800b188 <__swsetup_r+0x24>
 800b1fc:	bd38      	pop	{r3, r4, r5, pc}
 800b1fe:	0799      	lsls	r1, r3, #30
 800b200:	bf58      	it	pl
 800b202:	6962      	ldrpl	r2, [r4, #20]
 800b204:	60a2      	str	r2, [r4, #8]
 800b206:	e7f4      	b.n	800b1f2 <__swsetup_r+0x8e>
 800b208:	2000      	movs	r0, #0
 800b20a:	e7f7      	b.n	800b1fc <__swsetup_r+0x98>
 800b20c:	2400019c 	.word	0x2400019c

0800b210 <_raise_r>:
 800b210:	291f      	cmp	r1, #31
 800b212:	b538      	push	{r3, r4, r5, lr}
 800b214:	4605      	mov	r5, r0
 800b216:	460c      	mov	r4, r1
 800b218:	d904      	bls.n	800b224 <_raise_r+0x14>
 800b21a:	2316      	movs	r3, #22
 800b21c:	6003      	str	r3, [r0, #0]
 800b21e:	f04f 30ff 	mov.w	r0, #4294967295
 800b222:	bd38      	pop	{r3, r4, r5, pc}
 800b224:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b226:	b112      	cbz	r2, 800b22e <_raise_r+0x1e>
 800b228:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b22c:	b94b      	cbnz	r3, 800b242 <_raise_r+0x32>
 800b22e:	4628      	mov	r0, r5
 800b230:	f000 f830 	bl	800b294 <_getpid_r>
 800b234:	4622      	mov	r2, r4
 800b236:	4601      	mov	r1, r0
 800b238:	4628      	mov	r0, r5
 800b23a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b23e:	f000 b817 	b.w	800b270 <_kill_r>
 800b242:	2b01      	cmp	r3, #1
 800b244:	d00a      	beq.n	800b25c <_raise_r+0x4c>
 800b246:	1c59      	adds	r1, r3, #1
 800b248:	d103      	bne.n	800b252 <_raise_r+0x42>
 800b24a:	2316      	movs	r3, #22
 800b24c:	6003      	str	r3, [r0, #0]
 800b24e:	2001      	movs	r0, #1
 800b250:	e7e7      	b.n	800b222 <_raise_r+0x12>
 800b252:	2100      	movs	r1, #0
 800b254:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b258:	4620      	mov	r0, r4
 800b25a:	4798      	blx	r3
 800b25c:	2000      	movs	r0, #0
 800b25e:	e7e0      	b.n	800b222 <_raise_r+0x12>

0800b260 <raise>:
 800b260:	4b02      	ldr	r3, [pc, #8]	@ (800b26c <raise+0xc>)
 800b262:	4601      	mov	r1, r0
 800b264:	6818      	ldr	r0, [r3, #0]
 800b266:	f7ff bfd3 	b.w	800b210 <_raise_r>
 800b26a:	bf00      	nop
 800b26c:	2400019c 	.word	0x2400019c

0800b270 <_kill_r>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	4d07      	ldr	r5, [pc, #28]	@ (800b290 <_kill_r+0x20>)
 800b274:	2300      	movs	r3, #0
 800b276:	4604      	mov	r4, r0
 800b278:	4608      	mov	r0, r1
 800b27a:	4611      	mov	r1, r2
 800b27c:	602b      	str	r3, [r5, #0]
 800b27e:	f7f6 f9b7 	bl	80015f0 <_kill>
 800b282:	1c43      	adds	r3, r0, #1
 800b284:	d102      	bne.n	800b28c <_kill_r+0x1c>
 800b286:	682b      	ldr	r3, [r5, #0]
 800b288:	b103      	cbz	r3, 800b28c <_kill_r+0x1c>
 800b28a:	6023      	str	r3, [r4, #0]
 800b28c:	bd38      	pop	{r3, r4, r5, pc}
 800b28e:	bf00      	nop
 800b290:	240005bc 	.word	0x240005bc

0800b294 <_getpid_r>:
 800b294:	f7f6 b9a4 	b.w	80015e0 <_getpid>

0800b298 <__swhatbuf_r>:
 800b298:	b570      	push	{r4, r5, r6, lr}
 800b29a:	460c      	mov	r4, r1
 800b29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2a0:	2900      	cmp	r1, #0
 800b2a2:	b096      	sub	sp, #88	@ 0x58
 800b2a4:	4615      	mov	r5, r2
 800b2a6:	461e      	mov	r6, r3
 800b2a8:	da0d      	bge.n	800b2c6 <__swhatbuf_r+0x2e>
 800b2aa:	89a3      	ldrh	r3, [r4, #12]
 800b2ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b2b0:	f04f 0100 	mov.w	r1, #0
 800b2b4:	bf14      	ite	ne
 800b2b6:	2340      	movne	r3, #64	@ 0x40
 800b2b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b2bc:	2000      	movs	r0, #0
 800b2be:	6031      	str	r1, [r6, #0]
 800b2c0:	602b      	str	r3, [r5, #0]
 800b2c2:	b016      	add	sp, #88	@ 0x58
 800b2c4:	bd70      	pop	{r4, r5, r6, pc}
 800b2c6:	466a      	mov	r2, sp
 800b2c8:	f000 f848 	bl	800b35c <_fstat_r>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	dbec      	blt.n	800b2aa <__swhatbuf_r+0x12>
 800b2d0:	9901      	ldr	r1, [sp, #4]
 800b2d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b2d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b2da:	4259      	negs	r1, r3
 800b2dc:	4159      	adcs	r1, r3
 800b2de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b2e2:	e7eb      	b.n	800b2bc <__swhatbuf_r+0x24>

0800b2e4 <__smakebuf_r>:
 800b2e4:	898b      	ldrh	r3, [r1, #12]
 800b2e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2e8:	079d      	lsls	r5, r3, #30
 800b2ea:	4606      	mov	r6, r0
 800b2ec:	460c      	mov	r4, r1
 800b2ee:	d507      	bpl.n	800b300 <__smakebuf_r+0x1c>
 800b2f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b2f4:	6023      	str	r3, [r4, #0]
 800b2f6:	6123      	str	r3, [r4, #16]
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	6163      	str	r3, [r4, #20]
 800b2fc:	b003      	add	sp, #12
 800b2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b300:	ab01      	add	r3, sp, #4
 800b302:	466a      	mov	r2, sp
 800b304:	f7ff ffc8 	bl	800b298 <__swhatbuf_r>
 800b308:	9f00      	ldr	r7, [sp, #0]
 800b30a:	4605      	mov	r5, r0
 800b30c:	4639      	mov	r1, r7
 800b30e:	4630      	mov	r0, r6
 800b310:	f7fe fdbc 	bl	8009e8c <_malloc_r>
 800b314:	b948      	cbnz	r0, 800b32a <__smakebuf_r+0x46>
 800b316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b31a:	059a      	lsls	r2, r3, #22
 800b31c:	d4ee      	bmi.n	800b2fc <__smakebuf_r+0x18>
 800b31e:	f023 0303 	bic.w	r3, r3, #3
 800b322:	f043 0302 	orr.w	r3, r3, #2
 800b326:	81a3      	strh	r3, [r4, #12]
 800b328:	e7e2      	b.n	800b2f0 <__smakebuf_r+0xc>
 800b32a:	89a3      	ldrh	r3, [r4, #12]
 800b32c:	6020      	str	r0, [r4, #0]
 800b32e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b332:	81a3      	strh	r3, [r4, #12]
 800b334:	9b01      	ldr	r3, [sp, #4]
 800b336:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b33a:	b15b      	cbz	r3, 800b354 <__smakebuf_r+0x70>
 800b33c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b340:	4630      	mov	r0, r6
 800b342:	f000 f81d 	bl	800b380 <_isatty_r>
 800b346:	b128      	cbz	r0, 800b354 <__smakebuf_r+0x70>
 800b348:	89a3      	ldrh	r3, [r4, #12]
 800b34a:	f023 0303 	bic.w	r3, r3, #3
 800b34e:	f043 0301 	orr.w	r3, r3, #1
 800b352:	81a3      	strh	r3, [r4, #12]
 800b354:	89a3      	ldrh	r3, [r4, #12]
 800b356:	431d      	orrs	r5, r3
 800b358:	81a5      	strh	r5, [r4, #12]
 800b35a:	e7cf      	b.n	800b2fc <__smakebuf_r+0x18>

0800b35c <_fstat_r>:
 800b35c:	b538      	push	{r3, r4, r5, lr}
 800b35e:	4d07      	ldr	r5, [pc, #28]	@ (800b37c <_fstat_r+0x20>)
 800b360:	2300      	movs	r3, #0
 800b362:	4604      	mov	r4, r0
 800b364:	4608      	mov	r0, r1
 800b366:	4611      	mov	r1, r2
 800b368:	602b      	str	r3, [r5, #0]
 800b36a:	f7f6 f985 	bl	8001678 <_fstat>
 800b36e:	1c43      	adds	r3, r0, #1
 800b370:	d102      	bne.n	800b378 <_fstat_r+0x1c>
 800b372:	682b      	ldr	r3, [r5, #0]
 800b374:	b103      	cbz	r3, 800b378 <_fstat_r+0x1c>
 800b376:	6023      	str	r3, [r4, #0]
 800b378:	bd38      	pop	{r3, r4, r5, pc}
 800b37a:	bf00      	nop
 800b37c:	240005bc 	.word	0x240005bc

0800b380 <_isatty_r>:
 800b380:	b538      	push	{r3, r4, r5, lr}
 800b382:	4d06      	ldr	r5, [pc, #24]	@ (800b39c <_isatty_r+0x1c>)
 800b384:	2300      	movs	r3, #0
 800b386:	4604      	mov	r4, r0
 800b388:	4608      	mov	r0, r1
 800b38a:	602b      	str	r3, [r5, #0]
 800b38c:	f7f6 f984 	bl	8001698 <_isatty>
 800b390:	1c43      	adds	r3, r0, #1
 800b392:	d102      	bne.n	800b39a <_isatty_r+0x1a>
 800b394:	682b      	ldr	r3, [r5, #0]
 800b396:	b103      	cbz	r3, 800b39a <_isatty_r+0x1a>
 800b398:	6023      	str	r3, [r4, #0]
 800b39a:	bd38      	pop	{r3, r4, r5, pc}
 800b39c:	240005bc 	.word	0x240005bc

0800b3a0 <fmodf>:
 800b3a0:	b508      	push	{r3, lr}
 800b3a2:	ed2d 8b02 	vpush	{d8}
 800b3a6:	eef0 8a40 	vmov.f32	s17, s0
 800b3aa:	eeb0 8a60 	vmov.f32	s16, s1
 800b3ae:	f000 f817 	bl	800b3e0 <__ieee754_fmodf>
 800b3b2:	eef4 8a48 	vcmp.f32	s17, s16
 800b3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ba:	d60c      	bvs.n	800b3d6 <fmodf+0x36>
 800b3bc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b3dc <fmodf+0x3c>
 800b3c0:	eeb4 8a68 	vcmp.f32	s16, s17
 800b3c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3c8:	d105      	bne.n	800b3d6 <fmodf+0x36>
 800b3ca:	f7fe f975 	bl	80096b8 <__errno>
 800b3ce:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b3d2:	2321      	movs	r3, #33	@ 0x21
 800b3d4:	6003      	str	r3, [r0, #0]
 800b3d6:	ecbd 8b02 	vpop	{d8}
 800b3da:	bd08      	pop	{r3, pc}
 800b3dc:	00000000 	.word	0x00000000

0800b3e0 <__ieee754_fmodf>:
 800b3e0:	b570      	push	{r4, r5, r6, lr}
 800b3e2:	ee10 6a90 	vmov	r6, s1
 800b3e6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b3ea:	1e5a      	subs	r2, r3, #1
 800b3ec:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b3f0:	d206      	bcs.n	800b400 <__ieee754_fmodf+0x20>
 800b3f2:	ee10 4a10 	vmov	r4, s0
 800b3f6:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800b3fa:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800b3fe:	d304      	bcc.n	800b40a <__ieee754_fmodf+0x2a>
 800b400:	ee60 0a20 	vmul.f32	s1, s0, s1
 800b404:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800b408:	bd70      	pop	{r4, r5, r6, pc}
 800b40a:	4299      	cmp	r1, r3
 800b40c:	dbfc      	blt.n	800b408 <__ieee754_fmodf+0x28>
 800b40e:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800b412:	d105      	bne.n	800b420 <__ieee754_fmodf+0x40>
 800b414:	4b32      	ldr	r3, [pc, #200]	@ (800b4e0 <__ieee754_fmodf+0x100>)
 800b416:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800b41a:	ed93 0a00 	vldr	s0, [r3]
 800b41e:	e7f3      	b.n	800b408 <__ieee754_fmodf+0x28>
 800b420:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800b424:	d146      	bne.n	800b4b4 <__ieee754_fmodf+0xd4>
 800b426:	020a      	lsls	r2, r1, #8
 800b428:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800b42c:	2a00      	cmp	r2, #0
 800b42e:	dc3e      	bgt.n	800b4ae <__ieee754_fmodf+0xce>
 800b430:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800b434:	bf01      	itttt	eq
 800b436:	021a      	lsleq	r2, r3, #8
 800b438:	fab2 f282 	clzeq	r2, r2
 800b43c:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800b440:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800b444:	bf16      	itet	ne
 800b446:	15da      	asrne	r2, r3, #23
 800b448:	3282      	addeq	r2, #130	@ 0x82
 800b44a:	3a7f      	subne	r2, #127	@ 0x7f
 800b44c:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800b450:	bfbb      	ittet	lt
 800b452:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800b456:	1a24      	sublt	r4, r4, r0
 800b458:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800b45c:	40a1      	lsllt	r1, r4
 800b45e:	bfa8      	it	ge
 800b460:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800b464:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800b468:	bfb5      	itete	lt
 800b46a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800b46e:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800b472:	1aa4      	sublt	r4, r4, r2
 800b474:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800b478:	bfb8      	it	lt
 800b47a:	fa03 f404 	lsllt.w	r4, r3, r4
 800b47e:	1a80      	subs	r0, r0, r2
 800b480:	1b0b      	subs	r3, r1, r4
 800b482:	b9d0      	cbnz	r0, 800b4ba <__ieee754_fmodf+0xda>
 800b484:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800b488:	bf28      	it	cs
 800b48a:	460b      	movcs	r3, r1
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d0c1      	beq.n	800b414 <__ieee754_fmodf+0x34>
 800b490:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b494:	db19      	blt.n	800b4ca <__ieee754_fmodf+0xea>
 800b496:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800b49a:	db19      	blt.n	800b4d0 <__ieee754_fmodf+0xf0>
 800b49c:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800b4a0:	327f      	adds	r2, #127	@ 0x7f
 800b4a2:	432b      	orrs	r3, r5
 800b4a4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b4a8:	ee00 3a10 	vmov	s0, r3
 800b4ac:	e7ac      	b.n	800b408 <__ieee754_fmodf+0x28>
 800b4ae:	3801      	subs	r0, #1
 800b4b0:	0052      	lsls	r2, r2, #1
 800b4b2:	e7bb      	b.n	800b42c <__ieee754_fmodf+0x4c>
 800b4b4:	15c8      	asrs	r0, r1, #23
 800b4b6:	387f      	subs	r0, #127	@ 0x7f
 800b4b8:	e7ba      	b.n	800b430 <__ieee754_fmodf+0x50>
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	da02      	bge.n	800b4c4 <__ieee754_fmodf+0xe4>
 800b4be:	0049      	lsls	r1, r1, #1
 800b4c0:	3801      	subs	r0, #1
 800b4c2:	e7dd      	b.n	800b480 <__ieee754_fmodf+0xa0>
 800b4c4:	d0a6      	beq.n	800b414 <__ieee754_fmodf+0x34>
 800b4c6:	0059      	lsls	r1, r3, #1
 800b4c8:	e7fa      	b.n	800b4c0 <__ieee754_fmodf+0xe0>
 800b4ca:	005b      	lsls	r3, r3, #1
 800b4cc:	3a01      	subs	r2, #1
 800b4ce:	e7df      	b.n	800b490 <__ieee754_fmodf+0xb0>
 800b4d0:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800b4d4:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800b4d8:	3282      	adds	r2, #130	@ 0x82
 800b4da:	4113      	asrs	r3, r2
 800b4dc:	432b      	orrs	r3, r5
 800b4de:	e7e3      	b.n	800b4a8 <__ieee754_fmodf+0xc8>
 800b4e0:	0800b91c 	.word	0x0800b91c

0800b4e4 <_init>:
 800b4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4e6:	bf00      	nop
 800b4e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ea:	bc08      	pop	{r3}
 800b4ec:	469e      	mov	lr, r3
 800b4ee:	4770      	bx	lr

0800b4f0 <_fini>:
 800b4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f2:	bf00      	nop
 800b4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4f6:	bc08      	pop	{r3}
 800b4f8:	469e      	mov	lr, r3
 800b4fa:	4770      	bx	lr
